{
  "extends": {
    "Gemfile": {},
    "_": {},
    "actionscript": {},
    "ada": {},
    "all": {},
    "alpaca": {},
    "angular": {},
    "angular_coffee": {},
    "apache": {},
    "applescript": {},
    "arduino": {},
    "asciidoc": {},
    "asciidoctor": {
      "asciidoc": true
    },
    "asm": {},
    "autoit": {},
    "awk": {},
    "axios": {},
    "base": {},
    "beancount": {},
    "bib": {},
    "bindzone": {},
    "blade": {
      "html": true
    },
    "c": {},
    "chef": {},
    "classnames": {},
    "clojure": {},
    "cmake": {},
    "codeigniter": {},
    "coffee": {},
    "coffee-jasmine": {
      "coffee": true
    },
    "coffee-react": {
      "coffee": true
    },
    "cpp": {
      "c": true
    },
    "crystal": {},
    "cs": {},
    "css": {},
    "cuda": {
      "cpp": true
    },
    "cypress": {},
    "d": {
      "c": true
    },
    "dart": {},
    "dart-flutter": {},
    "diff": {},
    "django": {},
    "dockerfile": {},
    "dosini": {},
    "dotenv": {},
    "dotenv-safe": {},
    "eelixir": {
      "html": true
    },
    "ejs": {},
    "elixir": {},
    "elm": {},
    "erlang": {},
    "eruby": {
      "html": true
    },
    "falcon": {},
    "fortran": {},
    "framer-motion": {},
    "freemarker": {
      "html": true
    },
    "fsharp": {},
    "gatsby": {},
    "gatsby-image": {},
    "gitcommit": {},
    "gnuplot": {},
    "go": {},
    "graphql-request": {},
    "groovy": {},
    "haml": {},
    "handlebars": {},
    "haskell": {},
    "helm": {},
    "help": {},
    "html": {},
    "html_minimal": {},
    "htmldjango": {
      "html": true
    },
    "htmljinja": {
      "html": true,
      "jinja2": true
    },
    "htmltornado": {},
    "idris": {},
    "ignore": {},
    "jade": {},
    "java": {},
    "javascript": {},
    "javascript-angular": {},
    "javascript-bemjson": {},
    "javascript-d3": {},
    "javascript-ember": {},
    "javascript-jasmine": {},
    "javascript-jasmine-arrow": {},
    "javascript-jquery": {},
    "javascript-jsdoc": {},
    "javascript-mocha": {},
    "javascript-node": {},
    "javascript-openui5": {},
    "javascript-react": {},
    "javascript-redux": {},
    "javascript-requirejs": {},
    "javascript.node": {},
    "javascript_react": {},
    "jenkins": {},
    "jest": {},
    "jinja": {
      "html": true
    },
    "jinja2": {},
    "jquery_coffee": {},
    "json": {},
    "jsonc": {},
    "jsp": {},
    "julia": {},
    "kotlin": {},
    "kp19pp": {},
    "laravel": {},
    "ledger": {},
    "lfe": {},
    "lhaskell": {
      "haskell": true
    },
    "liquid": {},
    "lodash": {},
    "lpc": {},
    "ls": {},
    "lua": {},
    "make": {},
    "mako": {},
    "markdown": {},
    "matlab": {},
    "mediawiki": {},
    "mkd": {
      "markdown": true
    },
    "moon": {},
    "mustache": {},
    "neosnippet": {},
    "next": {},
    "nim": {},
    "nuxt": {},
    "nuxt-config": {},
    "nuxt-script": {},
    "objc": {},
    "ocaml": {},
    "octave": {
      "matlab": true
    },
    "openfoam": {},
    "pandoc": {
      "markdown": true
    },
    "perl": {},
    "perl6": {},
    "phoenix": {},
    "php": {},
    "php-laravel": {},
    "php-phpspec": {},
    "php-symfony2": {},
    "plsql": {},
    "po": {},
    "processing": {},
    "progress": {},
    "prolog": {},
    "prop-types": {},
    "proto": {},
    "ps1": {},
    "puppet": {},
    "purescript": {},
    "python": {},
    "r": {},
    "r-snippets": {},
    "racket": {},
    "rails": {},
    "react": {},
    "react-helmet": {},
    "react-intersection-observer": {},
    "react-modal": {},
    "reason": {},
    "redux": {},
    "redux-thunk": {},
    "requirejs_coffee": {},
    "rmarkdown": {},
    "rmd": {},
    "rnoweb": {
      "r": true,
      "tex": true
    },
    "robot": {},
    "rst": {},
    "ruby": {},
    "rust": {},
    "sass": {},
    "scala": {},
    "scheme": {},
    "scss": {
      "css": true
    },
    "sh": {},
    "simplemvcf": {},
    "slim": {},
    "snippets": {},
    "snippets-ts": {},
    "soy": {
      "html": true
    },
    "sql": {},
    "sshconfig": {},
    "styled-components": {},
    "stylus": {},
    "supercollider": {},
    "svelte": {
      "css": true,
      "html": true,
      "javascript": true
    },
    "swift": {},
    "systemverilog": {
      "verilog": true
    },
    "tcl": {},
    "tex": {
      "texmath": true
    },
    "texmath": {},
    "textile": {},
    "toml": {},
    "ts-snippets": {},
    "twig": {},
    "typescript": {
      "javascript": true
    },
    "typescriptreact": {
      "typescript": true
    },
    "verilog": {},
    "vhdl": {},
    "vim": {},
    "vimshell": {},
    "vimspec": {
      "vim": true
    },
    "vimwiki": {},
    "vital": {},
    "vue": {
      "css": true,
      "html": true,
      "javascript": true
    },
    "vue-pug": {},
    "vue-script": {},
    "vue-script-router": {},
    "vue-script-vuex": {},
    "vue-template": {},
    "vuex": {},
    "xhtml": {
      "html": true
    },
    "xml": {},
    "xslt": {},
    "yii": {},
    "yii-chtml": {},
    "yup": {},
    "zsh": {
      "sh": true
    }
  },
  "snippets": {
    "Gemfile": [
      {
        "content": "source :rubygems",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "source-rubygems": true
        },
        "opts": {
          "head": true
        }
      },
      {
        "content": "gem '${1}', '${2} >= 1.0'",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "gem": true
        },
        "opts": {
          "head": true
        }
      }
    ],
    "_": [
      {
        "content": "Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "lorem": true
        },
        "opts": {}
      },
      {
        "content": "As a special exception, if other files instantiate generics from\nthis unit, or you link this unit with other files to produce an\nexecutable, this unit does not by itself cause the resulting\nexecutable to be covered by the GNU General Public License.\nThis exception does not however invalidate any other reasons why the\nexecutable file might be covered by the GNU Public License.\n${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "GMGPL linking exception": true
        },
        "opts": {}
      },
      {
        "content": "This Source Code Form is subject to the terms of the Mozilla Public\nLicense, v. 2.0. If a copy of the MPL was not distributed with this\nfile, You can obtain one at http://mozilla.org/MPL/2.0/.\n${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "MPL2": true
        },
        "opts": {}
      }
    ],
    "actionscript": [
      {
        "content": "#endinitclip",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ec": true
        },
        "opts": {}
      },
      {
        "content": "#include \"${1}\"",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "inc": true
        },
        "opts": {}
      },
      {
        "content": "break;",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "br": true
        },
        "opts": {}
      },
      {
        "content": "call(${1:#:frame});",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ca": true
        },
        "opts": {}
      },
      {
        "content": "case ${1:#:expression} :\n\t${1:TARGET}",
        "doc": "",
        "grammar": "snu",
        "label": "ce",
        "matches": {
          "case": true
        },
        "opts": {}
      },
      {
        "content": "catch ($1) {\n\t$2\n}",
        "doc": "",
        "grammar": "snu",
        "label": "ch",
        "matches": {
          "catch": true
        },
        "opts": {}
      },
      {
        "content": "class ${1:#:ClassName} {\n\tvar _${2};\n\tfunction ${1}(${2}){\n\t\t_${2} = ${2};${0}\n\t}\n}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "class": true
        },
        "opts": {}
      },
      {
        "content": "continue;",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "co": true
        },
        "opts": {}
      },
      {
        "content": "default :\n\t${1:TARGET}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "dt": true
        },
        "opts": {}
      },
      {
        "content": "delete ${1};",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "de": true
        },
        "opts": {}
      },
      {
        "content": "do {\n\t${1:TARGET}\n} while (${2:#:condition});",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "do": true
        },
        "opts": {}
      },
      {
        "content": "duplicateMovieClip(${1:#:target}, ${2:#:newName}, ${3:#:depth});",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "dm": true
        },
        "opts": {}
      },
      {
        "content": "else if (${1}) {\n\t${2:TARGET}\n}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ei": true
        },
        "opts": {}
      },
      {
        "content": "for (var ${1} in ${2}){\n\t${3:TARGET}\n};",
        "doc": "",
        "grammar": "snu",
        "label": "fi",
        "matches": {
          "fori": true
        },
        "opts": {}
      },
      {
        "content": "for (var ${1} = 0; $1 < ${2}.length; $1++) {\n\t${0:TARGET}\n};",
        "doc": "",
        "grammar": "snu",
        "label": "fr",
        "matches": {
          "for": true
        },
        "opts": {}
      },
      {
        "content": "fscommand(${1:#:command}, ${2:#:paramaters});",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "fs": true
        },
        "opts": {}
      },
      {
        "content": "function ${1}(${2}):${3}{\n\t${0:TARGET}\n};",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "fn": true
        },
        "opts": {}
      },
      {
        "content": "getURL(${1});",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "gu": true
        },
        "opts": {}
      },
      {
        "content": "gotoAndPlay(${1});",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "gp": true
        },
        "opts": {}
      },
      {
        "content": "gotoAndStop(${1});",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "gs": true
        },
        "opts": {}
      },
      {
        "content": "if (${1}) {\n\t${0:TARGET}\n}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "if": true
        },
        "opts": {}
      },
      {
        "content": "ifFrameLoaded (${1}) {\n\t${0:TARGET}\n}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "il": true
        },
        "opts": {}
      },
      {
        "content": "import ${1};",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ip": true
        },
        "opts": {}
      },
      {
        "content": "interface ${1}{\n\t${0:TARGET}\n}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "it": true
        },
        "opts": {}
      },
      {
        "content": "loadMovie(${1:url}, ${2:target}, ${3:method});",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "lm": true
        },
        "opts": {}
      },
      {
        "content": "loadMovieNum(${1:url}, ${2:level}, ${3:method});",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ln": true
        },
        "opts": {}
      },
      {
        "content": "loadVariables(${1:url}, ${2:target}, ${3:method});",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "lv": true
        },
        "opts": {}
      },
      {
        "content": "loadVariables(${1:url}, ${2:level}, ${3:method});",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "vn": true
        },
        "opts": {}
      },
      {
        "content": "MovieClip",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "mc": true
        },
        "opts": {}
      },
      {
        "content": "nextFrame();",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "nf": true
        },
        "opts": {}
      },
      {
        "content": "nextScene();",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ns": true
        },
        "opts": {}
      },
      {
        "content": "on (${1}) {\n\t${2}\n};",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "on": true
        },
        "opts": {}
      },
      {
        "content": "onClipEvent (${1}) {\n\t${0:TARGET}\n};",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "oc": true
        },
        "opts": {}
      },
      {
        "content": "play();",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "pl": true
        },
        "opts": {}
      },
      {
        "content": "pravFrame();",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "pf": true
        },
        "opts": {}
      },
      {
        "content": "prevScene();",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ps": true
        },
        "opts": {}
      },
      {
        "content": "print(${1:#:target}, ${2:#:type});",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "pr": true
        },
        "opts": {}
      },
      {
        "content": "printAsBitmapNum(${1:#:level}, ${2:#:type});",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "bn": true
        },
        "opts": {}
      },
      {
        "content": "printNum(${1:#:level}, ${2:#:type});",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "pn": true
        },
        "opts": {}
      },
      {
        "content": "removeMovieClip(${1:#:target});",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "rm": true
        },
        "opts": {}
      },
      {
        "content": "return ${1};",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "rt": true
        },
        "opts": {}
      },
      {
        "content": "setProperty(${1:#:target}, ${2:#:property}, ${3:#:value});",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "sp": true
        },
        "opts": {}
      },
      {
        "content": "set(${1:#:name}, ${2:#:value});",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "sv": true
        },
        "opts": {}
      },
      {
        "content": "startDrag(${1:#:target}, ${2:#:lockcenter}, ${3:#:l}, ${4:#:t}, ${5:#:r}, ${6:#:b} );",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "dr": true
        },
        "opts": {}
      },
      {
        "content": "stop();",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "st": true
        },
        "opts": {}
      },
      {
        "content": "stopAllSounds();",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ss": true
        },
        "opts": {}
      },
      {
        "content": "stopDrag();",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "sd": true
        },
        "opts": {}
      },
      {
        "content": "switch ( ${1:#:condition} ) {\n\t${0:TARGET}\n}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "sw": true
        },
        "opts": {}
      },
      {
        "content": "tellTarget( ${1:#:target} ) {\n\t${0:TARGET}\n}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "tt": true
        },
        "opts": {}
      },
      {
        "content": "throw ${1};",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "th": true
        },
        "opts": {}
      },
      {
        "content": "toggleHighQuality();",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "tq": true
        },
        "opts": {}
      },
      {
        "content": "trace(${1:\"$0\"});",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "tr": true
        },
        "opts": {}
      },
      {
        "content": "try {\n\t${0:TARGET}\n};",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ty": true
        },
        "opts": {}
      },
      {
        "content": "unloadMovie(${1:#:target});",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "um": true
        },
        "opts": {}
      },
      {
        "content": "unloadMovieNum(${1:#:level});",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "un": true
        },
        "opts": {}
      },
      {
        "content": "var ${1}:${2};",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "vr": true
        },
        "opts": {}
      },
      {
        "content": "while (${1:#:condition}) {\n\t${0:TARGET}\n};",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "wh": true
        },
        "opts": {}
      },
      {
        "content": "with (${1:#:target});\n\t${0:TARGET}\n};",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "wt": true
        },
        "opts": {}
      },
      {
        "content": "package {\n\timport flash.display.*;\n\timport flash.Events.*;\n\tpublic class Main extends Sprite {\n\t\tpublic function Main (\t) {\n\t\t\ttrace(\"start\");\n\t\t\tstage.scaleMode = StageScaleMode.NO_SCALE;\n\t\t\tstage.addEventListener(Event.RESIZE, resizeListener);\n\t\t}\n\t\tprivate function resizeListener (e:Event):void {\n\t\t\ttrace(\"The application window changed size!\");\n\t\t\ttrace(\"New width:  \" + stage.stageWidth);\n\t\t\ttrace(\"New height: \" + stage.stageHeight);\n\t\t}\n\t}\n}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "main": true
        },
        "opts": {}
      },
      {
        "content": "${1:public|internal} class ${2:name} ${0:extends } {\n\tpublic function $2 (\t) {\n\t\t(\"start\");\n\t}\n}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "class": true
        },
        "opts": {}
      },
      {
        "content": "package name {\n\t${1:public|internal|final} class ${2:name} ${0:extends } {\n\t\tprivate|public| static const FOO = \"abc\";\n\t\tprivate|public| static var BAR = \"abc\";\n\t\t// class initializer - no JIT !! one time setup\n\t\tif Cababilities.os == \"Linux|MacOS\" {\n\t\t\tFOO = \"other\";\n\t\t}\n\t\t// constructor:\n\t\tpublic function $2 (\t){\n\t\t\tsuper2();\n\t\t\ttrace(\"start\");\n\t\t}\n\t\tpublic function name (a, b...){\n\t\t\tsuper.name(..);\n\t\t\tlable:break\n\t\t}\n\t}\n}\nfunction A(){\n\t// A can only be accessed within this file\n}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "all": true
        },
        "opts": {}
      },
      {
        "content": "switch(${1}){\n\tcase ${2}:\n\t\t${0}\n\tbreak;\n\tdefault:\n}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "switch": true
        },
        "opts": {}
      },
      {
        "content": "case ${1}:\n\t${0}\nbreak;",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "case": true
        },
        "opts": {}
      },
      {
        "content": "package ${1:package}{\n\t${0}\n}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "package": true
        },
        "opts": {}
      },
      {
        "content": "while ${1:cond}{\n\t${0}\n}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "wh": true
        },
        "opts": {}
      },
      {
        "content": "do {\n\t${0}\n} while (${1:cond})",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "do": true
        },
        "opts": {}
      },
      {
        "content": "for (${1:var} in ${2:object}){\n\t${0}\n}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "for enumerate names": true
        },
        "opts": {}
      },
      {
        "content": "for each (${1:var} in ${2:object}){\n\t${0}\n}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "for enumerate values": true
        },
        "opts": {}
      },
      {
        "content": "function get ${1:name} {\n\treturn ${2}\n}\nfunction set $1 (newValue) {\n\t${0}\n}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "get_set": true
        },
        "opts": {}
      },
      {
        "content": "interface name {\n\tfunction method(${1}):${0:returntype};\n}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "interface": true
        },
        "opts": {}
      },
      {
        "content": "try {\n\t${1:${VISUAL}}\n} catch (error:ErrorType) {\n\t${2}\n} finally {\n\t${0}\n}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "try": true
        },
        "opts": {}
      },
      {
        "content": "for (${2:i} = 0; $2 < ${1:count}; $2${3:++}) {\n\t${0}\n}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "for for (..) {..}": true
        },
        "opts": {}
      },
      {
        "content": "for (${1:i} = ${2:0}; ${3:$1 < 10}; $1${4:++}) {\n\t${0}\n}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "forr": true
        },
        "opts": {}
      },
      {
        "content": "if (${1:/* condition */}) {\n\t${0:${VISUAL}}\n}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "if": true
        },
        "opts": {}
      },
      {
        "content": "else {\n\t${0:${VISUAL}}\n}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "el": true
        },
        "opts": {}
      },
      {
        "content": "${1:/* condition */} ? ${2:a} : ${0:b}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "t": true
        },
        "opts": {}
      },
      {
        "content": "function ${1:function_name}(${2})${3}\n{\n\t${0}\n}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "fun": true
        },
        "opts": {}
      },
      {
        "content": "package\n{\n\timport org.flixel.*\n\tpublic class ${1:ClassName} extends ${2:FlxSprite}\n\t{\n\t\tpublic function $1(${3: X:Number, Y:Number}):void\n\t\t{\n\t\t\tsuper(X,Y);\n\t\t\t${4}\n\t\t}\n\t\toverride public function update():void\n\t\t{\n\t\t\tsuper.update();\n\t\t\t${0}\n\t\t}\n\t}\n}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "FlxSprite": true
        },
        "opts": {}
      }
    ],
    "ada": [
      {
        "content": "with ${1};${2}",
        "doc": "",
        "grammar": "snu",
        "label": "with ...;...",
        "matches": {
          "with": true
        },
        "opts": {
          "head": true
        }
      },
      {
        "content": "package ${1} is\n\t${0}\nend $1;",
        "doc": "",
        "grammar": "snu",
        "label": "package {NAME} is {...} end",
        "matches": {
          "package": true
        },
        "opts": {
          "head": true
        }
      },
      {
        "content": "package body ${1} is\n\t${0}\nend $1;",
        "doc": "",
        "grammar": "snu",
        "label": "package body {NAME} is {...} end",
        "matches": {
          "package_body": true
        },
        "opts": {
          "head": true
        }
      },
      {
        "content": "entry ${1}(${2}) when ${3} is\nbegin\n\t${0}\nend $1;",
        "doc": "",
        "grammar": "snu",
        "label": "entry {...} when",
        "matches": {
          "entry": true
        },
        "opts": {
          "head": true
        }
      },
      {
        "content": "task ${1} is\n\tentry ${0}\nend $1;",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "task": true
        },
        "opts": {
          "head": true
        }
      },
      {
        "content": "task body ${1} is\n\t${2}\nbegin\n\t${0}\nend $1;",
        "doc": "",
        "grammar": "snu",
        "label": "task body",
        "matches": {
          "task_body": true
        },
        "opts": {
          "head": true
        }
      },
      {
        "content": "accept ${1}(${2}) do\n\t${0}\nend $1;",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "accept": true
        },
        "opts": {
          "head": true
        }
      },
      {
        "content": "protected type ${1}(${2}) is\n\t${0}\nend $1;",
        "doc": "",
        "grammar": "snu",
        "label": "protected type",
        "matches": {
          "protected_type": true
        },
        "opts": {
          "head": true
        }
      },
      {
        "content": "protected body ${1} is\n\t${2}\nbegin\n\t${0}\nend $1;",
        "doc": "",
        "grammar": "snu",
        "label": "protected body",
        "matches": {
          "protected_body": true
        },
        "opts": {
          "head": true
        }
      },
      {
        "content": "generic\n\ttype ${1} is ${2};${0}",
        "doc": "",
        "grammar": "snu",
        "label": "generic type",
        "matches": {
          "generic": true
        },
        "opts": {
          "head": true
        }
      },
      {
        "content": "type ${1} is ${2};${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "type": true
        },
        "opts": {
          "head": true
        }
      },
      {
        "content": "type ${1} is ${2}\n\twith Default_Value => ${3};${0}",
        "doc": "",
        "grammar": "snu",
        "label": "type with default value",
        "matches": {
          "type_default": true
        },
        "opts": {
          "head": true
        }
      },
      {
        "content": "subtype ${1} is ${2};${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "subtype": true
        },
        "opts": {
          "head": true
        }
      },
      {
        "content": "declare\n\t${1}\nbegin\n\t${0}\nend;",
        "doc": "",
        "grammar": "snu",
        "label": "declare block",
        "matches": {
          "declare": true
        },
        "opts": {
          "head": true
        }
      },
      {
        "content": "${1}:\ndeclare\n\t${2}\nbegin\n\t${0}\nend $1;",
        "doc": "",
        "grammar": "snu",
        "label": "declare named block",
        "matches": {
          "declare_named": true
        },
        "opts": {
          "head": true
        }
      },
      {
        "content": "if ${1} then ${2} else ${0}",
        "doc": "",
        "grammar": "snu",
        "label": "if expression",
        "matches": {
          "ife": true
        },
        "opts": {
          "head": true
        }
      },
      {
        "content": "case ${1} is\n\twhen ${2} => ${3},${0}",
        "doc": "",
        "grammar": "snu",
        "label": "case expression",
        "matches": {
          "case_expression": true
        },
        "opts": {
          "head": true
        }
      },
      {
        "content": "for all ${1} ${2:in} ${3} => ${0}",
        "doc": "",
        "grammar": "snu",
        "label": "for all",
        "matches": {
          "for_all": true
        },
        "opts": {
          "head": true
        }
      },
      {
        "content": "for some ${1} ${2:in} ${3} => ${0}",
        "doc": "",
        "grammar": "snu",
        "label": "for some",
        "matches": {
          "for_some": true
        },
        "opts": {
          "head": true
        }
      },
      {
        "content": "if ${1} then\n\t${0}\nend if;",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "if": true
        },
        "opts": {
          "head": true
        }
      },
      {
        "content": "if ${1} then\n\t${2}\nelse\n\t${0}\nend if;",
        "doc": "",
        "grammar": "snu",
        "label": "if ... else",
        "matches": {
          "ifelse": true
        },
        "opts": {
          "head": true
        }
      },
      {
        "content": "else\n\t${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "else": true
        },
        "opts": {
          "head": true
        }
      },
      {
        "content": "elsif ${1} then\n\t${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ei": true,
          "elseif": true
        },
        "opts": {
          "head": true
        }
      },
      {
        "content": "while ${1} loop\n\t${0}\nend loop;",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "w": true,
          "while": true
        },
        "opts": {
          "head": true
        }
      },
      {
        "content": "${1}:\nwhile ${2} loop\n\t${0}\nend loop $1;",
        "doc": "",
        "grammar": "snu",
        "label": "named while",
        "matches": {
          "named_while": true
        },
        "opts": {
          "head": true
        }
      },
      {
        "content": "for ${1:I} in ${2} loop\n\t${0}\nend loop;",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "for": true
        },
        "opts": {
          "head": true
        }
      },
      {
        "content": "for ${1} of ${2} loop\n\t${0}\nend loop;",
        "doc": "",
        "grammar": "snu",
        "label": "for each",
        "matches": {
          "for_each": true
        },
        "opts": {
          "head": true
        }
      },
      {
        "content": "${1}:\nfor ${2:I} in ${3} loop\n\t${0}\nend loop $1;",
        "doc": "",
        "grammar": "snu",
        "label": "named for",
        "matches": {
          "named_for": true
        },
        "opts": {
          "head": true
        }
      },
      {
        "content": "${1}:\nfor ${2} of ${3} loop\n\t${0}\nend loop $1;",
        "doc": "",
        "grammar": "snu",
        "label": "named for each",
        "matches": {
          "named_for_each": true
        },
        "opts": {
          "head": true
        }
      },
      {
        "content": "procedure ${1}(${2}) is\n\t${3}\nbegin\n\t${0}\nend $1;",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "procedure": true
        },
        "opts": {
          "head": true
        }
      },
      {
        "content": "procedure ${1};${0}",
        "doc": "",
        "grammar": "snu",
        "label": "procedure declaration",
        "matches": {
          "procedure_declare": true
        },
        "opts": {
          "head": true
        }
      },
      {
        "content": "function ${1}(${2}) return ${3} is\n\t${4}\nbegin\n\t${0}\nend $1;",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "function": true
        },
        "opts": {
          "head": true
        }
      },
      {
        "content": "function ${1} return ${2} is\n\t(${3});${0}",
        "doc": "",
        "grammar": "snu",
        "label": "expression function",
        "matches": {
          "function_expr": true
        },
        "opts": {
          "head": true
        }
      },
      {
        "content": "function ${1} return ${2};${0}",
        "doc": "",
        "grammar": "snu",
        "label": "function declaration",
        "matches": {
          "function_declare": true
        },
        "opts": {
          "head": true
        }
      },
      {
        "content": "return ${1} do\n\t${0}\nend return;",
        "doc": "",
        "grammar": "snu",
        "label": "extended return",
        "matches": {
          "return": true
        },
        "opts": {
          "head": true
        }
      },
      {
        "content": "record\n\t${0}\nend record;",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "record": true
        },
        "opts": {
          "head": true
        }
      },
      {
        "content": "case ${1} is\n\twhen ${2} => ${3};${0}\nend case;",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "case": true
        },
        "opts": {
          "head": true
        }
      },
      {
        "content": "when ${1} => ${2};${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "when": true
        },
        "opts": {
          "head": true
        }
      },
      {
        "content": "when others => ${1};${0}",
        "doc": "",
        "grammar": "snu",
        "label": "when others",
        "matches": {
          "when_others": true
        },
        "opts": {
          "head": true
        }
      },
      {
        "content": "loop\n\t${0}\nend loop;",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "loop": true
        },
        "opts": {
          "head": true
        }
      },
      {
        "content": "${1}:\nloop\n\t${0}\nend loop $1;",
        "doc": "",
        "grammar": "snu",
        "label": "named loop",
        "matches": {
          "named_loop": true
        },
        "opts": {
          "head": true
        }
      },
      {
        "content": "exit when ${1};\n${0}",
        "doc": "",
        "grammar": "snu",
        "label": "exit when",
        "matches": {
          "exit_when": true
        },
        "opts": {
          "head": true
        }
      },
      {
        "content": "Ada.Text_IO.Put(${1});\n${0}",
        "doc": "",
        "grammar": "snu",
        "label": "Ada.Text_IO.Put",
        "matches": {
          "put": true
        },
        "opts": {
          "head": true
        }
      },
      {
        "content": "Ada.Text_IO.Put_Line(${1});\n${0}",
        "doc": "",
        "grammar": "snu",
        "label": "Ada.Text_IO.Put_Line",
        "matches": {
          "put_line": true
        },
        "opts": {
          "head": true
        }
      },
      {
        "content": "Ada.Text_IO.Get(${1});\n${0}",
        "doc": "",
        "grammar": "snu",
        "label": "Ada.Text_IO.Get",
        "matches": {
          "get": true
        },
        "opts": {
          "head": true
        }
      },
      {
        "content": "Ada.Text_IO.Get_Line(${1});\n${0}",
        "doc": "",
        "grammar": "snu",
        "label": "Ada.Text_IO.Get_Line",
        "matches": {
          "get_line": true
        },
        "opts": {
          "head": true
        }
      },
      {
        "content": "Ada.Text_IO.New_Line(${1:1});\n${0}",
        "doc": "",
        "grammar": "snu",
        "label": "Ada.Text_IO.New_Line",
        "matches": {
          "newline": true
        },
        "opts": {
          "head": true
        }
      },
      {
        "content": "with ${1};${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "wi with": true
        },
        "opts": {}
      },
      {
        "content": "package ${1} is\n\t${0}\nend $1;",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "pac package": true
        },
        "opts": {}
      },
      {
        "content": "package body ${1} is\n\t${0}\nend $1;",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "pacb package body": true
        },
        "opts": {}
      },
      {
        "content": "entry ${1}(${2}) when ${3} is\nbegin\n\t${0}\nend $1;",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ent entry ... when": true
        },
        "opts": {}
      },
      {
        "content": "task ${1} is\n\tentry ${0}\nend $1;",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "task task": true
        },
        "opts": {}
      },
      {
        "content": "task body ${1} is\n\t${2}\nbegin\n\t${0}\nend $1;",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "taskb task body": true
        },
        "opts": {}
      },
      {
        "content": "accept ${1}(${2}) do\n\t${0}\nend $1;",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "acc accept": true
        },
        "opts": {}
      },
      {
        "content": "protected type ${1}(${2}) is\n\t${0}\nend $1;",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "prot protected type": true
        },
        "opts": {}
      },
      {
        "content": "protected body ${1} is\n\t${2}\nbegin\n\t${0}\nend $1;",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "prob protected body": true
        },
        "opts": {}
      },
      {
        "content": "generic\n\ttype ${1} is ${2};${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "gen generic type": true
        },
        "opts": {}
      },
      {
        "content": "type ${1} is ${2};${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ty type": true
        },
        "opts": {}
      },
      {
        "content": "type ${1} is ${2}\n\twith Default_Value => ${3};${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "tyd type with default value": true
        },
        "opts": {}
      },
      {
        "content": "subtype ${1} is ${2};${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "subty subtype": true
        },
        "opts": {}
      },
      {
        "content": "declare\n\t${1}\nbegin\n\t${0}\nend;",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "dec declare block": true
        },
        "opts": {}
      },
      {
        "content": "${1}:\ndeclare\n\t${2}\nbegin\n\t${0}\nend $1;",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "decn declare named block": true
        },
        "opts": {}
      },
      {
        "content": "if ${1} then ${2} else ${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ifex if expression": true
        },
        "opts": {}
      },
      {
        "content": "case ${1} is\n\twhen ${2} => ${3},${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "casex case expression": true
        },
        "opts": {}
      },
      {
        "content": "for all ${1} ${2:in} ${3} => ${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "fora for all": true
        },
        "opts": {}
      },
      {
        "content": "for some ${1} ${2:in} ${3} => ${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "fors for some": true
        },
        "opts": {}
      },
      {
        "content": "if ${1} then\n\t${0:${VISUAL}}\nend if;",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "if if": true
        },
        "opts": {}
      },
      {
        "content": "if ${1} then\n\t${2:${VISUAL}}\nelse\n\t${0}\nend if;",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ife if ... else": true
        },
        "opts": {}
      },
      {
        "content": "else\n\t${0:${VISUAL}}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "el else": true
        },
        "opts": {}
      },
      {
        "content": "elsif ${1} then\n\t${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "eif elsif": true
        },
        "opts": {}
      },
      {
        "content": "while ${1} loop\n\t${0:${VISUAL}}\nend loop;",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "wh while": true
        },
        "opts": {}
      },
      {
        "content": "${1}:\nwhile ${2} loop\n\t${0:${VISUAL}}\nend loop $1;",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "nwh named while": true
        },
        "opts": {}
      },
      {
        "content": "for ${1:I} in ${2} loop\n\t${0}\nend loop;",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "for for": true
        },
        "opts": {}
      },
      {
        "content": "for ${1} of ${2} loop\n\t${0}\nend loop;",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "fore for each": true
        },
        "opts": {}
      },
      {
        "content": "${1}:\nfor ${2:I} in ${3} loop\n\t${0}\nend loop $1;",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "nfor named for": true
        },
        "opts": {}
      },
      {
        "content": "${1}:\nfor ${2} of ${3} loop\n\t${0}\nend loop $1;",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "nfore named for each": true
        },
        "opts": {}
      },
      {
        "content": "procedure ${1}(${2}) is\n\t${3}\nbegin\n\t${0}\nend $1;",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "proc procedure": true
        },
        "opts": {}
      },
      {
        "content": "procedure ${1};${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "procd procedure declaration": true
        },
        "opts": {}
      },
      {
        "content": "function ${1}(${2}) return ${3} is\n\t${4}\nbegin\n\t${0}\nend $1;",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "fun function": true
        },
        "opts": {}
      },
      {
        "content": "function ${1} return ${2} is\n\t(${3});${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "fune expression function": true
        },
        "opts": {}
      },
      {
        "content": "function ${1} return ${2};${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "fund function declaration": true
        },
        "opts": {}
      },
      {
        "content": "return ${1} do\n\t${0}\nend return;",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ret extended return": true
        },
        "opts": {}
      },
      {
        "content": "record\n\t${0}\nend record;",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "rec record": true
        },
        "opts": {}
      },
      {
        "content": "case ${1} is\n\twhen ${2} => ${3};${0}\nend case;",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "case case": true
        },
        "opts": {}
      },
      {
        "content": "when ${1} => ${2};${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "whe when": true
        },
        "opts": {}
      },
      {
        "content": "when others => ${1};${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "wheo when others": true
        },
        "opts": {}
      },
      {
        "content": "loop\n\t${0}\nend loop;",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "lo loop": true
        },
        "opts": {}
      },
      {
        "content": "${1}:\nloop\n\t${0}\nend loop $1;",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "nlo named loop": true
        },
        "opts": {}
      },
      {
        "content": "exit when ${1};${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ex exit when": true
        },
        "opts": {}
      },
      {
        "content": "Ada.Text_IO.Put(${1});${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "put Ada.Text_IO.Put": true
        },
        "opts": {}
      },
      {
        "content": "Ada.Text_IO.Put_Line(${1});${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "putl Ada.Text_IO.Put_Line": true
        },
        "opts": {}
      },
      {
        "content": "Ada.Text_IO.Get(${1});${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "get Ada.Text_IO.Get": true
        },
        "opts": {}
      },
      {
        "content": "Ada.Text_IO.Get_Line(${1});${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "getl Ada.Text_IO.Get_Line": true
        },
        "opts": {}
      },
      {
        "content": "Ada.Text_IO.New_Line(${1:1});${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "newline Ada.Text_IO.New_Line": true
        },
        "opts": {}
      }
    ],
    "all": [],
    "alpaca": [
      {
        "content": "import ${0:http}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "imp": true
        },
        "opts": {}
      },
      {
        "content": "import type ${0:option.option}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "impt": true
        },
        "opts": {}
      },
      {
        "content": "export ${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "exp": true
        },
        "opts": {}
      },
      {
        "content": "export ${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "expt": true
        },
        "opts": {}
      },
      {
        "content": "val ${1:fn} ${2}: fn ${3:'a} -> ${4:'a}\nlet $1 ${5} =\n\t${0:${VISUAL}}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "fn": true
        },
        "opts": {}
      },
      {
        "content": "match ${1} with\n| ${2} -> ${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "mat": true
        },
        "opts": {}
      },
      {
        "content": "| ${1} -> ${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "-": true
        },
        "opts": {}
      },
      {
        "content": "let ${1} = ${2:${VISUAL}} in\n${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "let": true
        },
        "opts": {}
      },
      {
        "content": "let ${1} =\n\t${0:${VISUAL}}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "letf": true
        },
        "opts": {}
      },
      {
        "content": "type ${1:msg}\n\t= ${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ty": true
        },
        "opts": {}
      },
      {
        "content": "test \"${1}\" =\n\t${0:${VISUAL}}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "test": true
        },
        "opts": {}
      },
      {
        "content": "{-| ${0}\n-}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "doc": true
        },
        "opts": {}
      },
      {
        "content": "|> ${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "p": true
        },
        "opts": {}
      },
      {
        "content": "assert.equal ${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ae": true
        },
        "opts": {}
      }
    ],
    "angular": [
      {
        "content": "# Client App\nFROM johnpapa/angular-cli as client-app\nLABEL authors=\"${1:John Papa}\"\nWORKDIR /usr/src/app\nCOPY [\"package.json\", \"npm-shrinkwrap.json*\", \"./\"]\nRUN npm install --silent\nCOPY . .\nRUN ng build --prod\n\n# Node server\nFROM ${2:node:12-alpine} as node-server\nWORKDIR /usr/src/app\nCOPY [\"package.json\", \"npm-shrinkwrap.json*\", \"./\"]\nRUN npm install --production --silent && mv node_modules ../\nCOPY ${3:server.js} .\nCOPY ${4:/server} /usr/src/app/server\n\n# Final image\nFROM ${2:node:12-alpine}\nWORKDIR /usr/src/app\nCOPY --from=node-server /usr/src /usr/src\nCOPY --from=client-app /usr/src/app/dist ./\nEXPOSE ${5:3000}\n# CMD [\"node\", \"server.js\"]\nCMD [\"npm\", \"start\"]\n$0",
        "doc": "Multi-stage Node and Angular Dockerfile",
        "grammar": "lsp",
        "label": "multi-stage-node-and-angular-dockerfile",
        "matches": {
          "angular multi-stage node and dockerfile": true,
          "docker-angular-node-multi-stage": true
        },
        "opts": {}
      },
      {
        "content": "[class]=\"${1:expression}\"",
        "doc": "Angular [class] binding",
        "grammar": "lsp",
        "label": "class",
        "matches": {
          "a-class": true,
          "angular class": true
        },
        "opts": {}
      },
      {
        "content": "[style.${1:property}]=\"${2:expression}\"",
        "doc": "Angular [style] binding",
        "grammar": "lsp",
        "label": "style",
        "matches": {
          "a-style": true,
          "angular style": true
        },
        "opts": {}
      },
      {
        "content": "[ngClass]=\"{${1:cssClass}: ${2:expression}}\"",
        "doc": "Angular ngClass",
        "grammar": "lsp",
        "label": "ngclass",
        "matches": {
          "a-ngclass": true,
          "angular ng class": true
        },
        "opts": {}
      },
      {
        "content": "*ngFor=\"let ${1:item} of ${2:list}\"${0}",
        "doc": "Angular *ngFor",
        "grammar": "lsp",
        "label": "ngfor",
        "matches": {
          "a-ngfor": true,
          "angular ng for": true
        },
        "opts": {}
      },
      {
        "content": "*ngFor=\"let ${1:item} of ${2:list}; trackBy:${1:item}.id\"${0}",
        "doc": "Angular *ngFor with trackBy",
        "grammar": "lsp",
        "label": "ngfor-with-trackby",
        "matches": {
          "a-ngfor-trackby": true,
          "angular ng for with track by": true
        },
        "opts": {}
      },
      {
        "content": "*ngFor=\"let ${1:item} of ${2:stream} | async as ${3:list}\"${0}",
        "doc": "Angular *ngForAsync",
        "grammar": "lsp",
        "label": "ngforasync",
        "matches": {
          "a-ngforasync": true,
          "angular ng for async": true
        },
        "opts": {}
      },
      {
        "content": "<form (ngSubmit)=\"onSubmit()\" #${1:form}=\"ngForm\">\n</form>",
        "doc": "Form with ngSubmit and form attributes",
        "grammar": "lsp",
        "label": "ngform",
        "matches": {
          "a-form": true,
          "angular ng form": true
        },
        "opts": {}
      },
      {
        "content": "formArrayName=\"${1:control}\"",
        "doc": "Angular formArrayName",
        "grammar": "lsp",
        "label": "ngformarrayname",
        "matches": {
          "a-formarrayname": true,
          "angular ng form array name": true
        },
        "opts": {}
      },
      {
        "content": "formControlName=\"${1:control}\"",
        "doc": "Angular formControlName",
        "grammar": "lsp",
        "label": "ngformcontrolname",
        "matches": {
          "a-formcontrolname": true,
          "angular ng form control name": true
        },
        "opts": {}
      },
      {
        "content": "[formGroup]=\"${1:form}\"",
        "doc": "Angular formGroup",
        "grammar": "lsp",
        "label": "ngformgroup",
        "matches": {
          "a-formgroup": true,
          "angular ng form group": true
        },
        "opts": {}
      },
      {
        "content": "[formGroupName]=\"${1:name}\"",
        "doc": "Angular formGroupName",
        "grammar": "lsp",
        "label": "ngformgroupname",
        "matches": {
          "a-formgroupname": true,
          "angular ng form group name": true
        },
        "opts": {}
      },
      {
        "content": "<button type=\"submit\" [disabled]=\"!${1:form}.form.valid\">\n\tSave\n</button>",
        "doc": "Angular form submit",
        "grammar": "lsp",
        "label": "ngformsubmit",
        "matches": {
          "a-form-submit": true,
          "angular ng form submit": true
        },
        "opts": {}
      },
      {
        "content": "*ngIf=\"${1:expression}\"",
        "doc": "Angular *ngIf",
        "grammar": "lsp",
        "label": "ngif",
        "matches": {
          "a-ngif": true,
          "angular ng if": true
        },
        "opts": {}
      },
      {
        "content": "*ngIf=\"${1:expression};else ${2:templateName}\"",
        "doc": "Angular *ngIfElse",
        "grammar": "lsp",
        "label": "ngifelse",
        "matches": {
          "a-ngifelse": true,
          "angular ng if else": true
        },
        "opts": {}
      },
      {
        "content": "[(ngModel)]=\"${1:binding}\"",
        "doc": "Angular ngModel",
        "grammar": "lsp",
        "label": "ngmodel",
        "matches": {
          "a-ngmodel": true,
          "angular ng model": true
        },
        "opts": {}
      },
      {
        "content": "[routerLink]=\"['/${1:routePath}']\" routerLinkActive=\"${2:router-link-active}\" $0",
        "doc": "Angular routerLink",
        "grammar": "lsp",
        "label": "ngrouterlink",
        "matches": {
          "a-routerlink": true,
          "angular ng router link": true
        },
        "opts": {}
      },
      {
        "content": "[routerLink]=\"['${1:routePath}', ${2:routeParameterValue}]\"\nrouterLinkActive=\"${3:router-link-active}\"$0",
        "doc": "Angular routerLink with a route parameter",
        "grammar": "lsp",
        "label": "ngrouterlinkwithparameter",
        "matches": {
          "a-routerlink-param": true,
          "angular ng router link with parameter": true
        },
        "opts": {}
      },
      {
        "content": "<select [(ngModel)]=\"${1:model}\">\n\t<option *ngFor=\"let ${2:item} of ${3:list}\" [value]=\"${2:item}\">{{${2:item}}}</option>\n</select>",
        "doc": "<select> control with ngModel",
        "grammar": "lsp",
        "label": "ngselect",
        "matches": {
          "a-select": true,
          "angular ng select": true
        },
        "opts": {}
      },
      {
        "content": "[ngStyle]=\"{${1:style}: ${2:expression}}\"",
        "doc": "Angular ngStyle",
        "grammar": "lsp",
        "label": "ngstyle",
        "matches": {
          "a-ngstyle": true,
          "angular ng style": true
        },
        "opts": {}
      },
      {
        "content": "<div [ngSwitch]=\"${1:conditionExpression}\">\n\t<div *ngSwitchCase=\"${2:expression}\">${3:output}</div>\n\t<div *ngSwitchDefault>${4:output2}</div>\n</div>",
        "doc": "Angular ngSwitch",
        "grammar": "lsp",
        "label": "ngswitch",
        "matches": {
          "a-ngswitch": true,
          "angular ng switch": true
        },
        "opts": {}
      },
      {
        "content": "<pre>{{${1:model} | json}}</pre>$0",
        "doc": "Angular pre debug | json",
        "grammar": "lsp",
        "label": "pre-w-json",
        "matches": {
          "a-prej": true,
          "angular pre json": true
        },
        "opts": {}
      },
      {
        "content": "<pre>{{${1:model} | async | json}}</pre>$0",
        "doc": "Angular pre debug | async | json",
        "grammar": "lsp",
        "label": "pre-w-async-json",
        "matches": {
          "a-preja": true,
          "angular pre async json": true
        },
        "opts": {}
      },
      {
        "content": "<ng-container $0></ng-container>",
        "doc": "Angular ng-container",
        "grammar": "lsp",
        "label": "ng-container",
        "matches": {
          "a-ng-container": true,
          "angular ng-container": true
        },
        "opts": {}
      },
      {
        "content": "<ng-template [ngTemplateOutlet]=\"${1:outlet}\" [ngOutletContext]=\"${2:context}\"></ng-template>",
        "doc": "Angular ng-template",
        "grammar": "lsp",
        "label": "ng-template",
        "matches": {
          "a-ng-template": true,
          "angular ng-template": true
        },
        "opts": {}
      },
      {
        "content": "<ng-content select=\"${0:selector}\"></ng-content>",
        "doc": "Angular ng-content",
        "grammar": "lsp",
        "label": "ng-content",
        "matches": {
          "a-ng-content": true,
          "angular ng-content": true
        },
        "opts": {}
      },
      {
        "content": "const express = require('express');\nconst app = express();\nconst port = process.env.PORT || ${1:port};\nconst www = process.env.WWW || '${2:./}';\napp.use(express.static(www));\nconsole.log(`serving \\${www}`);\napp.get('*', (req, res) => {\n\tres.sendFile(`index.html`, { root: www });\n});\napp.listen(port, () => console.log(`listening on http://localhost:\\${port}`));\n$0",
        "doc": "Node.js Express Server",
        "grammar": "lsp",
        "label": "node-js-express-server",
        "matches": {
          "angular node express server": true,
          "ex-node-server-simple": true
        },
        "opts": {}
      },
      {
        "content": "import { Component, OnInit } from '@angular/core';\n\n@Component({\n\tselector: '${1:selector-name}',\n\ttemplateUrl: '${2:name}.component.html'\n})\n\nexport class ${3:Name}Component implements OnInit {\n\tconstructor() { }\n\n\tngOnInit() { }$0\n}",
        "doc": "Angular component",
        "grammar": "lsp",
        "label": "angular-component",
        "matches": {
          "a-component": true,
          "angular component": true
        },
        "opts": {}
      },
      {
        "content": "import { Component, OnInit } from '@angular/core';\n\n@Component({\n\tselector: '${1:selector-name}',\n\ttemplate: `$0`\n})\n\nexport class ${2:Name}Component implements OnInit {\n\tconstructor() { }\n\n\tngOnInit() { }\n}",
        "doc": "Angular component with an inline template",
        "grammar": "lsp",
        "label": "angular-component-with-inline-template",
        "matches": {
          "a-component-inline": true,
          "angular component inline template": true
        },
        "opts": {}
      },
      {
        "content": "import { Pipe, PipeTransform } from '@angular/core';\n\n@Pipe({\n\tname: '${1:selector-name}'\n})\n\nexport class ${2:Name}Pipe implements PipeTransform {\n\ttransform(value: any, ...args: any[]): any {\n\t\t$0\n\t}\n}",
        "doc": "Angular pipe",
        "grammar": "lsp",
        "label": "angular-pipe",
        "matches": {
          "a-pipe": true,
          "angular pipe": true
        },
        "opts": {}
      },
      {
        "content": "import { Injectable } from '@angular/core';\n\n@Injectable({providedIn: ${1:'root'}})\nexport class ${2:ServiceName}Service {\n\tconstructor() { }\n\t$0\n}",
        "doc": "Angular Service with Injectable ProvidedIn Root",
        "grammar": "lsp",
        "label": "angular-service",
        "matches": {
          "a-service": true,
          "angular service": true
        },
        "opts": {}
      },
      {
        "content": "{ path: '', pathMatch: 'full', redirectTo: '${1:path}' }$0",
        "doc": "Angular default route path",
        "grammar": "lsp",
        "label": "angular-default-route-path",
        "matches": {
          "a-route-path-default": true,
          "angular default route path": true
        },
        "opts": {}
      },
      {
        "content": "{\n\tpath: '${1:path}', \n\tcomponent: ${2:Component},\n\tchildren: [\n\t\t{ path: '${3:childpath}', component: ${4:ChildComponent} }\n\t]\n}$0",
        "doc": "Angular route path with children",
        "grammar": "lsp",
        "label": "angular-route-path-with-children",
        "matches": {
          "a-route-path-with-children": true,
          "angular route path children": true
        },
        "opts": {}
      },
      {
        "content": "{ path: '**', component: ${1:PathNotFoundComponent} }$0",
        "doc": "Angular 404 route path",
        "grammar": "lsp",
        "label": "angular-404-route-path",
        "matches": {
          "a-route-path-404": true,
          "angular 404 route path": true
        },
        "opts": {}
      },
      {
        "content": "{ path: '${1:path}', component: ${2:Name}Component },",
        "doc": "Angular eager route path",
        "grammar": "lsp",
        "label": "angular-eager-route-path",
        "matches": {
          "a-route-path-eager": true,
          "angular eager route path": true
        },
        "opts": {}
      },
      {
        "content": "{\n\tpath: '${1:path}', \n\tloadChildren: () => import('${2:lazy-path}').then(m => m.${3:lazy-module})\n},",
        "doc": "Angular lazy route path",
        "grammar": "lsp",
        "label": "angular-lazy-route-path",
        "matches": {
          "a-route-path-lazy": true,
          "angular lazy route path": true
        },
        "opts": {}
      },
      {
        "content": "this.route.paramMap\n\t.pipe(switchMap(params => params.get('id')), tap(id => (this.id = +id)))\n\t.subscribe(id => {$1});\n$0",
        "doc": "Angular - subscribe to routing parameters",
        "grammar": "lsp",
        "label": "routing-params-subscribe",
        "matches": {
          "a-route-params-subscribe": true,
          "angular routing params subscribe": true
        },
        "opts": {}
      },
      {
        "content": "return this.httpClient.get('${1:url}');$0",
        "doc": "Angular HttpClient.get",
        "grammar": "lsp",
        "label": "httpclient-get",
        "matches": {
          "a-httpclient-get": true,
          "angular http client get": true
        },
        "opts": {}
      },
      {
        "content": "import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\n\n@Injectable({providedIn: ${1:'root'}})\nexport class ${2:ServiceName}Service {\n\tconstructor(private httpClient: HttpClient) { }\n\t$0\n}",
        "doc": "Angular service with HttpClient",
        "grammar": "lsp",
        "label": "angular-httpclient-service",
        "matches": {
          "a-service-httpclient": true,
          "angular http client service": true
        },
        "opts": {}
      },
      {
        "content": "import { HttpInterceptor, HttpHandler, HttpRequest, HttpEvent, HttpResponse } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\n\n@Injectable()\nexport class LogInterceptor implements HttpInterceptor {\n\tconstructor() {}\n\n\tintercept(req: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\n\t\tconst started = Date.now();\n\t\treturn next.handle(req).pipe(\n\t\t\ttap(event => {\n\t\t\t\tif (event instanceof HttpResponse) {\n\t\t\t\t\tconst elapsed = Date.now() - started;\n\t\t\t\t\tconsole.log(`Request for \\${req.urlWithParams} took \\${elapsed} ms.`);\n\t\t\t\t}\n\t\t\t})\n\t\t);\n\t}\n}",
        "doc": "Angular HttpInterceptor for Logging HttpClient",
        "grammar": "lsp",
        "label": "angular-httpinterceptor-for-logging",
        "matches": {
          "a-http-interceptor-logging": true,
          "angular http interceptor logging": true
        },
        "opts": {}
      },
      {
        "content": "import { Injectable } from '@angular/core';\nimport { HttpEvent, HttpInterceptor, HttpHandler, HttpRequest } from '@angular/common/http';\nimport { Observable } from 'rxjs';\n\n@Injectable()\nexport class HeaderInterceptor implements HttpInterceptor {\n\tconstructor() {}\n\n\tintercept(req: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\n\t\tconst headers = req.headers\n\t\t\t.set('Content-Type', 'application/json');\n\t\tconst authReq = req.clone({ headers });\n\t\treturn next.handle(authReq);\n\t}\n}",
        "doc": "Angular HttpInterceptor for headers HttpClient",
        "grammar": "lsp",
        "label": "angular-httpinterceptor-for-headers",
        "matches": {
          "a-http-interceptor-headers": true,
          "angular http interceptor headers": true
        },
        "opts": {}
      },
      {
        "content": "import { Injectable } from '@angular/core';\nimport { HttpInterceptor, HttpEvent, HttpHandler, HttpRequest } from '@angular/common/http';\nimport { Observable } from 'rxjs';\n\n@Injectable()\nexport class ${2:Your}Interceptor implements HttpInterceptor {\n\tintercept(req: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\n\t\treturn next.handle(req);\n\t}\n}",
        "doc": "Empty Angular HttpInterceptor for HttpClient",
        "grammar": "lsp",
        "label": "angular-httpinterceptor-empty",
        "matches": {
          "a-http-interceptor": true,
          "angular http interceptor empty": true
        },
        "opts": {}
      },
      {
        "content": "@Output() ${1:eventName} = new EventEmitter<${2:eventType}>();",
        "doc": "Angular @Output event and emitter",
        "grammar": "lsp",
        "label": "output-event",
        "matches": {
          "a-output-event": true,
          "angular output event": true
        },
        "opts": {}
      },
      {
        "content": "this.${1:service}.${2:function}\n\t.subscribe(${3:arg} => this.${4:property} = ${3:arg});\n$0",
        "doc": "Angular observable subscribe",
        "grammar": "lsp",
        "label": "subscribe",
        "matches": {
          "a-subscribe": true,
          "angular subscribe": true
        },
        "opts": {}
      },
      {
        "content": "import { Component } from '@angular/core';\n\n@Component({\n\tselector: '${1:prefix-app}',\n\ttemplate: `\n\t\t<router-outlet></router-outlet>\n\t\t`\n})\nexport class ${2:App}Component { }\n$0",
        "doc": "Angular App root component",
        "grammar": "lsp",
        "label": "angular-root-component",
        "matches": {
          "a-component-root": true,
          "angular root component": true
        },
        "opts": {}
      },
      {
        "content": "import { NgModule } from '@angular/core';\nimport { BrowserModule  } from '@angular/platform-browser';\nimport { HttpModule } from '@angular/http';\n\nimport { ${1:App}Component } from './${1:app}.component';\n\n@NgModule({\n\timports: [\n\t\tBrowserModule,\n\t\tHttpModule,\n\t],\n\tdeclarations: [${1:App}Component],\n\tbootstrap: [${1:App}Component],\n})\nexport class ${1:App}Module { }\n$0",
        "doc": "Angular Root Module",
        "grammar": "lsp",
        "label": "angular-root-module",
        "matches": {
          "a-module-root": true,
          "angular root module": true
        },
        "opts": {}
      },
      {
        "content": "import { Routes } from '@angular/router';\n\nexport const routes: Routes = [${0}]",
        "doc": "Route definitions",
        "grammar": "lsp",
        "label": "route-definitions",
        "matches": {
          "a-routes": true,
          "angular route definitions": true
        },
        "opts": {}
      },
      {
        "content": "import { NgModule } from '@angular/core';\n\nimport { ${1:Name}Component } from './${2:name}.component';\n\n@NgModule({\n\timports: [],\n\texports: [],\n\tdeclarations: [${1:Name}Component],\n\tproviders: [],\n})\nexport class ${1:Name}Module { }\n$0",
        "doc": "Angular Module",
        "grammar": "lsp",
        "label": "angular-module",
        "matches": {
          "a-module": true,
          "angular module": true
        },
        "opts": {}
      },
      {
        "content": "import { Directive } from '@angular/core';\n\n@Directive({ selector: '[${1:selector-name}]' })\nexport class ${2:Name}Directive {\n\tconstructor() { }\n}",
        "doc": "Angular directive",
        "grammar": "lsp",
        "label": "angular-directive",
        "matches": {
          "a-directive": true,
          "angular directive": true
        },
        "opts": {}
      },
      {
        "content": "import { Injectable } from '@angular/core';\nimport { ActivatedRouteSnapshot, CanActivate, RouterStateSnapshot } from '@angular/router';\n\n@Injectable({providedIn: ${1:'root'}})\nexport class ${2:Name}Guard implements CanActivate {\n\tconstructor() { }\n\n\tcanActivate(route: ActivatedRouteSnapshot, state: RouterStateSnapshot) {\n\t\treturn true;$0\n\t}\n}",
        "doc": "Angular CanActivate guard",
        "grammar": "lsp",
        "label": "angular-canactivate-guard",
        "matches": {
          "a-guard-can-activate": true,
          "angular can activate guard": true
        },
        "opts": {}
      },
      {
        "content": "import { Injectable } from '@angular/core';\nimport { ActivatedRouteSnapshot, CanActivateChild, RouterStateSnapshot } from '@angular/router';\n\n@Injectable({providedIn: ${1:'root'}})\nexport class ${2:Name}Guard implements CanActivateChild {\n\tconstructor() { }\n\n\tcanActivateChild(route: ActivatedRouteSnapshot, state: RouterStateSnapshot) {\n\t\treturn true;$0\n\t}\n}",
        "doc": "Angular CanActivateChild guard",
        "grammar": "lsp",
        "label": "angular-canactivatechild-guard",
        "matches": {
          "a-guard-can-activate-child": true,
          "angular can activate child guard": true
        },
        "opts": {}
      },
      {
        "content": "import { Injectable } from '@angular/core';\nimport { CanLoad, Route } from '@angular/router';\n\n@Injectable({providedIn: ${1:'root'}})\nexport class ${2:Name}Guard implements CanLoad {\n\tconstructor() { }\n\n\tcanLoad(route: Route) {\n\t\treturn true;$0\n\t}\n}",
        "doc": "Angular CanLoad guard",
        "grammar": "lsp",
        "label": "angular-canload-guard",
        "matches": {
          "a-guard-can-load": true,
          "angular can load guard": true
        },
        "opts": {}
      },
      {
        "content": "import { Injectable } from '@angular/core';\nimport { ActivatedRouteSnapshot, CanDeactivate, RouterStateSnapshot } from '@angular/router';\nimport { Observable } from 'rxjs';\n\nimport { ${2:ComponentName}Component } from './${3:filename}.component';\n\n// Consider using this interface for all CanDeactivate guards,\n// and have your components implement this interface, too.\n//\n//   e.g. export class CanDeactivateGuard implements CanDeactivate<CanComponentDeactivate> {\n//\n// export interface CanComponentDeactivate {\n// canDeactivate: () => any;\n// }\n\n@Injectable({providedIn: ${4:'root'}})\nexport class ${1:Name}Guard implements CanDeactivate<${2:ComponentName}Component> {\n\tcanDeactivate(\n\t\tcomponent: ${2:ComponentName}Component,\n\t\tcurrentRoute: ActivatedRouteSnapshot, \n\t\tcurrentState: RouterStateSnapshot\n\t): Observable<boolean>|Promise<boolean>|boolean {\n\t\treturn false;$0\n\t}\n}",
        "doc": "Angular CanDeactivate guard",
        "grammar": "lsp",
        "label": "angular-candeactivate-guard",
        "matches": {
          "a-guard-can-deactivate": true,
          "angular can deactivate guard": true
        },
        "opts": {}
      },
      {
        "content": "import { PreloadingStrategy, Route } from '@angular/router';\nimport { Observable, of } from 'rxjs';\n\nexport class PreloadSelectedModulesList implements PreloadingStrategy {\n\tpreload(route: Route, load: Function): Observable<any> {\n\t\treturn route.data && route.data['${1:preload}'] ? load() : of(null);\n\t}\n}\n$0",
        "doc": "Angular opt-in preload strategy",
        "grammar": "lsp",
        "label": "angular-opt-in-preload-strategy",
        "matches": {
          "a-preload-opt-in-strategy": true,
          "angular opt-in preload strategy": true
        },
        "opts": {}
      },
      {
        "content": "import { Injectable } from '@angular/core';\nimport { PreloadingStrategy, Route } from '@angular/router';\nimport { Observable, EMPTY } from 'rxjs';\n\n// avoid typing issues for now\nexport declare var navigator;\n\n@Injectable({ providedIn: 'root' })\nexport class NetworkAwarePreloadStrategy implements PreloadingStrategy {\n\tpreload(route: Route, load: () => Observable<any>): Observable<any> {\n\t\treturn this.hasGoodConnection() ? load() : EMPTY;\n\t}\n\n\thasGoodConnection(): boolean {\n\t\tconst conn = navigator.connection;\n\t\tif (conn) {\n\t\t\tif (conn.saveData) {\n\t\t\t\treturn false; // save data mode is enabled, so dont preload\n\t\t\t}\n\t\t\tconst avoidTheseConnections = ['slow-2g', '2g' /* , '3g', '4g' */];\n\t\t\tconst effectiveType = conn.effectiveType || '';\n\t\t\tif (avoidTheseConnections.includes(effectiveType)) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\treturn true;\n\t}\n}",
        "doc": "Angular network aware preload strategy",
        "grammar": "lsp",
        "label": "angular-network-aware-preload-strategy",
        "matches": {
          "a-preload-network-strategy": true,
          "angular network-aware preload strategy": true
        },
        "opts": {}
      },
      {
        "content": "checkEvents() {\n\tthis.router.events.subscribe(event => {\n\t\tswitch (true) {\n\t\t\tcase event instanceof ${1:eventName}:\n\t\t\t\t$0\n\t\t\t\tbreak;\n\n\t\t\tdefault:\n\t\t\t\tbreak;\n\t\t}\n\t});\n}",
        "doc": "Angular Router Events",
        "grammar": "lsp",
        "label": "angular-router-events",
        "matches": {
          "a-router-events": true,
          "angular router events": true
        },
        "opts": {}
      },
      {
        "content": "constructor( @Optional() @SkipSelf() parentModule: ${1:ModuleName} {\n\tif (parentModule) {\n\t\tconst msg = `${1:ModuleName} has already been loaded. \n\t\t\tImport ${1:ModuleName} once, only, in the root AppModule.`;\n\t\tthrow new Error(msg);\n\t}\n}",
        "doc": "Angular Module SkipSelf constructor",
        "grammar": "lsp",
        "label": "angular-module-skipself-constructor",
        "matches": {
          "a-ctor-skip-self": true,
          "angular module skip self constructor": true
        },
        "opts": {}
      },
      {
        "content": "import { ${1:Observable} } from 'rxjs';\n$0",
        "doc": "RxJs import",
        "grammar": "lsp",
        "label": "rxjs-import",
        "matches": {
          "a-rxjs-import": true,
          "angular import rx js": true
        },
        "opts": {}
      },
      {
        "content": "import { ${1:map} } from 'rxjs/operators';\n$0",
        "doc": "RxJs import",
        "grammar": "lsp",
        "label": "rxjs-operator-import",
        "matches": {
          "a-rxjs-operator-import": true,
          "angular import rx js operator": true
        },
        "opts": {}
      },
      {
        "content": "import { Injectable } from '@angular/core';\nimport { Resolve, ActivatedRouteSnapshot } from '@angular/router';\nimport { Observable } from 'rxjs';\n\n@Injectable({ providedIn: ${1:'root'} })\nexport class ${2:YourResolver} implements Resolve<${3:ObjectToResolve}> {\n\tresolve(route: ActivatedRouteSnapshot): Observable<${3:ObjectToResolve}> | Promise<${3:ObjectToResolve}> | ${3:ObjectToResolve} {\n\t\treturn ${0};\n\t}\n}",
        "doc": "Angular Resolver",
        "grammar": "lsp",
        "label": "angular-resolver",
        "matches": {
          "a-resolver": true,
          "angular resolver": true
        },
        "opts": {}
      },
      {
        "content": "import { NgModule } from '@angular/core';\nimport { EffectsModule } from '@ngrx/effects';\nimport { StoreModule } from '@ngrx/store';\nimport { StoreDevtoolsModule } from '@ngrx/store-devtools';\nimport { environment } from '../../environments/environment';\n\n@NgModule({\n  imports: [\n    StoreModule.forRoot({}),\n    EffectsModule.forRoot([]),\n    environment.production ? [] : StoreDevtoolsModule.instrument()\n  ]\n})\nexport class $1StoreModule {}",
        "doc": "NgRx Store Module",
        "grammar": "lsp",
        "label": "ngrx-store-module",
        "matches": {
          "a-ngrx-store-module": true,
          "angular ng rx store module": true
        },
        "opts": {}
      },
      {
        "content": "export const ${1:action} = createAction('[${2:Source}] ${3:Event}');",
        "doc": "Creates an NgRx Action",
        "grammar": "lsp",
        "label": "ngrx-create-action",
        "matches": {
          "a-ngrx-create-action": true,
          "angular ng rx create action": true
        },
        "opts": {}
      },
      {
        "content": "export const ${1:action} = createAction('[${2:Source}] ${3:Event}', props<{${4:key}: ${5:type}}>());",
        "doc": "Creates an NgRx Action with Props",
        "grammar": "lsp",
        "label": "ngrx-create-action-w-props",
        "matches": {
          "a-ngrx-create-action-props": true,
          "angular ng rx create action props": true
        },
        "opts": {}
      },
      {
        "content": "const ${1:feature}Reducer = createReducer(\n\tinitialState,\n\ton($1Actions.action, state => ({ ...state, ${2:prop}: ${3:updatedValue} })),\n);\n\nexport function reducer(state: State | undefined, action: Action) {\n\treturn $1Reducer(state, action);\n}",
        "doc": "Creates an NgRx Reducer",
        "grammar": "lsp",
        "label": "ngrx-create-reducer",
        "matches": {
          "a-ngrx-create-reducer": true,
          "angular ng rx create reducer": true
        },
        "opts": {}
      },
      {
        "content": "export const select${1:Feature}${2:Property} = createSelector(\n\tselect$1,\n\t(state: $1State) => state.${3:property}\n);",
        "doc": "Creates an NgRx Selector",
        "grammar": "lsp",
        "label": "ngrx-create-selector",
        "matches": {
          "a-ngrx-create-selector": true,
          "angular ng rx create selector": true
        },
        "opts": {}
      },
      {
        "content": "export const select${1:Feature}${2:Property} = createSelector(\n\tselect$1,\n\t(state: $1State, props) => ${3:selectLogic}\n);",
        "doc": "Creates an NgRx Selector using props",
        "grammar": "lsp",
        "label": "ngrx-create-selector-w-props",
        "matches": {
          "a-ngrx-create-selector-props": true,
          "angular ng rx create selector props": true
        },
        "opts": {}
      },
      {
        "content": "EntityDataModule.forRoot(${1:entityConfig}),",
        "doc": "Import NgRx Entity Data Module",
        "grammar": "lsp",
        "label": "ngrx-data-import-entity-data-module",
        "matches": {
          "a-ngrx-data-entity-data-module-import": true,
          "angular ng rx data import entity module": true
        },
        "opts": {}
      },
      {
        "content": "import { EntityMetadataMap } from '@ngrx/data';\n\nconst entityMetadata: EntityMetadataMap = {\n  ${1:Model1}: {},${0}\n};\n\nexport const entityConfig = {\n  entityMetadata\n};",
        "doc": "NgRx Data Entity Metadata",
        "grammar": "lsp",
        "label": "ngrx-data-entity-metadata",
        "matches": {
          "a-ngrx-data-entity-metadata": true,
          "angular ng rx data entity metadata": true
        },
        "opts": {}
      },
      {
        "content": "import { Injectable } from '@angular/core';\nimport {\n  EntityCollectionServiceBase,\n  EntityCollectionServiceElementsFactory\n} from '@ngrx/data';\nimport { ${1:Model} } from '${2:../core}';\n\n@Injectable({ providedIn: ${3:'root'} })\nexport class ${1:Model}Service extends EntityCollectionServiceBase<${1:Model}> {\n  constructor(serviceElementsFactory: EntityCollectionServiceElementsFactory) {\n    super('${1:Model}', serviceElementsFactory);\n  }\n}",
        "doc": "NgRx Data Entity Collection Data Service",
        "grammar": "lsp",
        "label": "ngrx-data-entity-collection-data-service",
        "matches": {
          "a-ngrx-data-entity-collection-data-service": true,
          "angular ng rx data entity collection service": true
        },
        "opts": {}
      },
      {
        "content": "${1:trackBy}(index: number, ${2:name}: ${3:model}): ${4:number} {\n  return ${2:name}${5:.id};$0\n}",
        "doc": "TrackBy Function",
        "grammar": "lsp",
        "label": "trackby-function",
        "matches": {
          "a-trackby": true,
          "angular track by function": true
        },
        "opts": {}
      }
    ],
    "angular_coffee": [
      {
        "content": "${1:controllerName} = (${2:scope}, ${3:injectables}) ->\n\t${4}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ngc": true
        },
        "opts": {}
      },
      {
        "content": "angular.forEach ${1:iterateOver}, (value, key) ->\n\t${2}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ngfor": true
        },
        "opts": {}
      },
      {
        "content": "angular.module '${1:moduleName}', [${2:moduleDependencies}]\n${3}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ngm": true
        },
        "opts": {}
      },
      {
        "content": "${1:moduleName} = angular.module '$1', [${2:moduleDeps}]\n${3}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ngma": true
        },
        "opts": {}
      },
      {
        "content": "${1:moduleName} = angular.module('$1', [${2:moduleDeps}], (${3:configDeps}) ->\n\t${4}\n)",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ngmc": true
        },
        "opts": {}
      },
      {
        "content": "factory '${1:factoryName}', (${2:dependencies}) ->\n\t${3}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ngmfa": true
        },
        "opts": {}
      },
      {
        "content": "service '${1:serviceName}', (${2:injectables}) ->\n\t${3}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ngms": true
        },
        "opts": {}
      },
      {
        "content": "filter '${1:filterName}', (${2:injectables}) ->\n\t(input, ${3:args}) ->\n\t\t${4}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ngmfi": true
        },
        "opts": {}
      },
      {
        "content": "$routeProvider.when '${1:url}',\n\ttemplateUrl: '${2:templateUrl}'\n\tcontroller: '${3:controller}'\n${4}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ngrw": true
        },
        "opts": {}
      },
      {
        "content": "$routeProvider.when '${1:url}',\n\ttemplateUrl: '${2:templateUrl}'\n\tcontroller: '${3:controller}'\n\tresolve:\n\t\t${4}\n${5}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ngrwr": true
        },
        "opts": {}
      },
      {
        "content": "$routeProvider.otherwise redirectTo: '${1:url}'\n${2}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ngro": true
        },
        "opts": {}
      },
      {
        "content": "$scope.${1:functionName} = (${2:args}) ->\n\t${3}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "$f": true
        },
        "opts": {}
      },
      {
        "content": "$scope.${1:variable} = ${2:value}\n${3}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "$v": true
        },
        "opts": {}
      },
      {
        "content": "$scope.${1:variable} = ${2:variable}\n${3}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "$va": true
        },
        "opts": {}
      },
      {
        "content": "$scope.$watch '${1:watchExpr}', (newValue, oldValue) ->\n\t${2}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "$w": true
        },
        "opts": {}
      },
      {
        "content": "$scope.$on '${1:eventName}', (event, ${2:args}) ->\n\t${3}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "$on": true
        },
        "opts": {}
      },
      {
        "content": "$scope.$broadcast '${1:eventName}', ${2:eventArgs}\n${3}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "$b": true
        },
        "opts": {}
      },
      {
        "content": "$scope.$emit '${1:eventName}', ${2:eventArgs}\n${3}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "$e": true
        },
        "opts": {}
      },
      {
        "content": "compile = (tElement, tAttrs, transclude) ->\n\t(scope, element, attrs) ->\n\t\t${1}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ngdcf": true
        },
        "opts": {}
      },
      {
        "content": "(scope, element, attrs${1:ctrl}) ->\n\t${2}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ngdlf": true
        },
        "opts": {}
      },
      {
        "content": "directive '${1:directiveName}', factory = (${2:injectables}) ->\n\tdirectiveDefinitionObject =\n\t\t${3:directiveAttrs}\n\t\tcompile: compile = (tElement, tAttrs, transclude) ->\n\t\t\t(scope, element, attrs) ->\n\tdirectiveDefinitionObject",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ngdc": true
        },
        "opts": {}
      },
      {
        "content": ".directive('${1:directiveName}', (${2:directiveDeps}) ->\n\t(scope, element, attrs${3:ctrl}) ->\n\t\t${4}\n)",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ngdl": true
        },
        "opts": {}
      }
    ],
    "apache": [
      {
        "content": "AllowOverride ${1:#:AuthConfig} ${2:#:FileInfo} ${3:#:Indexes} ${4:#:Limit} ${5:#:Options}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "allow": true
        },
        "opts": {}
      },
      {
        "content": "Options ${1:#:All} ${2:#:ExecCGI} ${3:#:FollowSymLinks} ${4:#:Includes} ${5:#:IncludesNOEXEC} ${6:#:Indexes} ${7:#:MultiViews} ${8:#:SymLinksIfOwnerMatch}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "opt": true
        },
        "opts": {}
      },
      {
        "content": "<VirtualHost ${1:example.org}>\n\tServerAdmin webmaster@${1}\n\tDocumentRoot /www/vhosts/${1}\n\tServerName ${1}\n\tErrorLog logs/${1}-error_log\n\tCustomLog logs/${1}-access_log common\n</VirtualHost>",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "vhost": true
        },
        "opts": {}
      },
      {
        "content": "<Directory ${1:/Library/WebServer/}>\n\t${0}\n</Directory>",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "dir": true
        },
        "opts": {}
      },
      {
        "content": "<IfModule ${1:module_name}>\n        ${2}\n</IfModule>",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ifmodule": true
        },
        "opts": {}
      },
      {
        "content": "<If ${1:condition}>\n        ${2}\n</If>",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "if": true
        },
        "opts": {}
      },
      {
        "content": "RemoteIPHeader X-Forwarded-For",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "RemoteIPHeader": true
        },
        "opts": {}
      },
      {
        "content": "<Location ${1:location}>\n        ${2:config}\n</Location>",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "location": true
        },
        "opts": {}
      },
      {
        "content": "<LocationMatch \"${1:regex}\">\n        ${2:config}\n</LocationMatch>",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "locationmatch": true
        },
        "opts": {}
      },
      {
        "content": "DirectoryIndex index.php index.html",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "directoryindex": true
        },
        "opts": {}
      },
      {
        "content": "Require all granted",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "require": true
        },
        "opts": {}
      },
      {
        "content": "<Directory ${1:/}>\n\tDirectoryIndex ${0:index.html}\n\tOrder Deny,Allow\n\tDeny from All\n</Directory>",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "dir": true
        },
        "opts": {}
      },
      {
        "content": "<FilesMatch \"${1:regex}\">\n\t${0:${VISUAL}}\n</FilesMatch>",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "filesmatch": true
        },
        "opts": {}
      },
      {
        "content": "<IfModule ${1:mod_example.c}>\n\t${0:${VISUAL}}\n</IfModule>",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ifmodule": true
        },
        "opts": {}
      },
      {
        "content": "<LimitExcept ${1:POST GET}>\n\t${0:${VISUAL}}\n</LimitExcept>",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "limitexcept": true
        },
        "opts": {}
      },
      {
        "content": "<Proxy ${1:*}>\n\t${0:${VISUAL}}\n</Proxy>",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "proxy": true
        },
        "opts": {}
      },
      {
        "content": "<VirtualHost ${1:*}:${2:80}>\n\tServerAdmin ${3:webmaster@example.com}\n\tDocumentRoot ${4:/www/example.com}\n\tServerName ${0:www.example.com}\n</VirtualHost>",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "virtualhost": true
        },
        "opts": {}
      }
    ],
    "applescript": [
      {
        "content": "script ${1:#:new_object}\n\ton run\n\t\t${2:TARGET}\n\tend run\nend script",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "script": true
        },
        "opts": {}
      },
      {
        "content": "on ${1:#:functionName}(${2:#:arguments})\n\t${3:TARGET}\nend ${1}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "on": true
        },
        "opts": {}
      },
      {
        "content": "tell ${1:#:app}\n\t${0:TARGET}\nend tell",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "tell": true
        },
        "opts": {}
      },
      {
        "content": "using terms from ${1:#:app}\n\t${0:TARGET}\nend using terms from",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "terms": true
        },
        "opts": {}
      },
      {
        "content": "if ${1:true} then\n\t${0:TARGET}\nend if",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "if": true
        },
        "opts": {}
      },
      {
        "content": "repeat ${1} times}\n\t${0:TARGET}\nend repeat",
        "doc": "",
        "grammar": "snu",
        "label": "rep",
        "matches": {
          "rept": true
        },
        "opts": {}
      },
      {
        "content": "repeat while ${1:#:condition}\n\t${0:TARGET}\nend repeat",
        "doc": "",
        "grammar": "snu",
        "label": "rep",
        "matches": {
          "repwh": true
        },
        "opts": {}
      },
      {
        "content": "repeat with ${1} in ${2}\n\t${0:TARGET}\nend repeat",
        "doc": "",
        "grammar": "snu",
        "label": "rep",
        "matches": {
          "repwi": true
        },
        "opts": {}
      },
      {
        "content": "try\n\t${0:TARGET}\non error\n\t-- error handling\nend try",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "try": true
        },
        "opts": {}
      },
      {
        "content": "with timeout ${1:#:number} seconds\n\t${0:TARGET}\nend timeout",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "timeout": true
        },
        "opts": {}
      },
      {
        "content": "considering ${1:#:case}\n\t${0:TARGET}\nend considering",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "con": true
        },
        "opts": {}
      },
      {
        "content": "ignoring ${1:#:application responses}\n\t${0:TARGET}\nend ignoring",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ign": true
        },
        "opts": {}
      },
      {
        "content": "${1:#:set shell_stdout to }do shell script ${3:\"${2:#script}\"}\n\twithout altering line endings\n${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "shell": true
        },
        "opts": {}
      },
      {
        "content": "set oldDelims to AppleScript's text item delimiters\nset AppleScript's text item delimiters to {\"${1:,}\"}\n${0:#:TARGET}\nset AppleScript's text item delimiters to oldDelims",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "delim": true
        },
        "opts": {}
      },
      {
        "content": "prop parent : app \"${1}\"",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "parent": true
        },
        "opts": {}
      },
      {
        "content": "display alert \"${1:#:alert text}\"\n\t${2:#:message} \"${3:#:message text}\"\n\t${4:#:as warning}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "alert": true
        },
        "opts": {}
      },
      {
        "content": "display dialog \"${1:#:text}\"\n\t${2:#:with icon} ${3:1}\n\tbuttons {\"${4:OK}\"} default button 1",
        "doc": "",
        "grammar": "snu",
        "label": "dialog",
        "matches": {
          "dialog_OK": true
        },
        "opts": {}
      },
      {
        "content": "display dialog \"${1:#:text}\"\n\t${2:#:with icon}\n\tbuttons {\"${3:Cancel}\", \"${4:OK}\"}\n\tdefault button \"${4}\"\nset button_pressed to button returned of result\nif button_pressed is \"${4}\" then\n\t${5:#:TARGET}\nelse\n\t-- action for cancel button goes here\nend if",
        "doc": "",
        "grammar": "snu",
        "label": "dialog",
        "matches": {
          "dialog_OK/Cancel": true
        },
        "opts": {}
      },
      {
        "content": "display dialog \"${1:#:text}\"\n\t${2:#:with icon}\n\tbuttons {\"${3:Cancel}\", \"${4:Other Choice}\", \"${5:OK}\"}\n\tdefault button \"${5}\"\nset button_pressed to button returned of result\nif button_pressed is \"${5}\" then\n\t${6:TARGET}\nelse if button_pressed is \"${3}\" then\n\t-- action for cancel button goes here\nelse\n\t-- action for other button goes here\nend if",
        "doc": "",
        "grammar": "snu",
        "label": "dialog",
        "matches": {
          "dialog_OK/Cancel/Other": true
        },
        "opts": {}
      },
      {
        "content": "set the_result to display dialog \"${1:#:text}\"\n\tdefault answer \"${2:#:type here}\"\n\t${3:#:with icon}\n\tbuttons {\"${4:Cancel}\", \"${5:OK}\"}\n\tdefault button \"${5}\"\nset button_pressed to button returned of the_result\nset text_typed to text returned of the_result\nif button_pressed is \"${5}\" then\n\t${6:#:TARGET}\nelse\n\t-- action for cancel button goes here\nend if",
        "doc": "",
        "grammar": "snu",
        "label": "dialog",
        "matches": {
          "dialog_TextFierld": true
        },
        "opts": {}
      },
      {
        "content": "${1:#:set the_application to }choose application with prompt \"${2:#:Choose an application:}\"${3:#:with multiple selections allowed}",
        "doc": "",
        "grammar": "snu",
        "label": "choose",
        "matches": {
          "choose_Applications": true
        },
        "opts": {}
      },
      {
        "content": "${1:#:set the_file to }choose file with prompt \"${2:#:Pick a file:}\"\n${3:#:default location path to home folder}\n${4:#:with invisibles}\n${5:#:with multiple selections allowed}\n${6:#:with showing package contents}",
        "doc": "",
        "grammar": "snu",
        "label": "choose",
        "matches": {
          "choose_Files": true
        },
        "opts": {}
      },
      {
        "content": "${1:#:set the_folder to }choose folder with prompt \"${2:#:Pick a folder:}\"\n${3:#:default location path to home folder}\n${4:#:with invisibles}\n${5:#:with multiple selections allowed}\n${6:#:with showing package contents}\n${0}",
        "doc": "",
        "grammar": "snu",
        "label": "choose",
        "matches": {
          "choose_Folders": true
        },
        "opts": {}
      },
      {
        "content": "${1:#:set the_filename to }choose file name with prompt \"${2:#:Name this file:}\"\n\tdefault name \"${3:untitled}\" default location ${4:#:path to home folder}",
        "doc": "",
        "grammar": "snu",
        "label": "choose",
        "matches": {
          "choose_NewFile": true
        },
        "opts": {}
      },
      {
        "content": "${1:#:set the_url to }choose URL showing ${2:Web} servers with editable URL",
        "doc": "",
        "grammar": "snu",
        "label": "choose",
        "matches": {
          "choose_URL": true
        },
        "opts": {}
      },
      {
        "content": "${1:#:set the_color to }choose color default color ${2:{65536, 65536, 65536\\}}",
        "doc": "",
        "grammar": "snu",
        "label": "choose",
        "matches": {
          "choose_Color": true
        },
        "opts": {}
      },
      {
        "content": "set the_choice to choose from list ${1}\"\\}}",
        "doc": "",
        "grammar": "snu",
        "label": "choose",
        "matches": {
          "choose_ItemFromList": true
        },
        "opts": {}
      }
    ],
    "arduino": [
      {
        "content": "void setup()\n{\n\tSerial.begin(${1:9600});\n\t${2}\n}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "setup": true
        },
        "opts": {}
      },
      {
        "content": "void loop()\n{\n\t${0}\n}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "loop": true
        },
        "opts": {}
      },
      {
        "content": "#include <${1}.h>",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "inc": true
        },
        "opts": {}
      },
      {
        "content": "#define ${1}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "def": true
        },
        "opts": {}
      },
      {
        "content": "if (${1:/* condition */}) {\n\t${0:${VISUAL}}\n}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "if": true
        },
        "opts": {}
      },
      {
        "content": "else {\n\t${1}\n}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "el": true
        },
        "opts": {}
      },
      {
        "content": "else if (${1:/* condition */}) {\n\t${2}\n}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "elif": true
        },
        "opts": {}
      },
      {
        "content": "if (${1:/* condition */}) ${2};",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ifi": true
        },
        "opts": {}
      },
      {
        "content": "switch (${1:/* variable */}) {\n\tcase ${2:/* variable case */}:\n\t\t${3}\n\t\t${4:break;}${5}\n\tdefault:\n\t\t${6}\n}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "switch": true
        },
        "opts": {}
      },
      {
        "content": "case ${1:/* variable case */}:\n\t${2}\n\t${3:break;}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "case": true
        },
        "opts": {}
      },
      {
        "content": "for (int ${2:i} = 0; $2 < ${1:count}; $2${3:++}) {\n\t${4}\n}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "for": true
        },
        "opts": {}
      },
      {
        "content": "for (int ${1:i} = ${2:0}; ${3:$1 < 10}; $1${4:++}) {\n\t${5}\n}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "forr": true
        },
        "opts": {}
      },
      {
        "content": "while (${1:/* condition */}) {\n\t${2}\n}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "wh": true
        },
        "opts": {}
      },
      {
        "content": "do {\n\t${2}\n} while (${1:/* condition */});",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "do": true
        },
        "opts": {}
      },
      {
        "content": "${1:void} ${2:function_name}(${3})\n{\n\t${4}\n}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "fun": true
        },
        "opts": {}
      },
      {
        "content": "pinMode(${1}, OUTPUT);",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "pinout": true
        },
        "opts": {}
      },
      {
        "content": "pinMode(${1}, INPUT);",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "pinin": true
        },
        "opts": {}
      },
      {
        "content": "digitalWrite(${1}, HIGH);",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "dwHigh": true
        },
        "opts": {}
      },
      {
        "content": "digitalWrite(${1}, LOW);",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "dwLow": true
        },
        "opts": {}
      },
      {
        "content": "digitalRead(${1});",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "dr": true
        },
        "opts": {}
      },
      {
        "content": "analogRead(${1});",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ar": true
        },
        "opts": {}
      },
      {
        "content": "analogWrite(${1});",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "aw": true
        },
        "opts": {}
      },
      {
        "content": "Serial.read();",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "sr": true
        },
        "opts": {}
      },
      {
        "content": "Serial.write();",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "sw": true
        },
        "opts": {}
      },
      {
        "content": "Serial.print(${1});",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "sp": true
        },
        "opts": {}
      },
      {
        "content": "Serial.println(${1});",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "sl": true
        },
        "opts": {}
      },
      {
        "content": "delay(${1});",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "dl": true
        },
        "opts": {}
      },
      {
        "content": "millis();",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ml": true
        },
        "opts": {}
      }
    ],
    "asciidoc": [
      {
        "content": "= ${1:Document Name}\n${2:Alice <alice@example.com>}\n${3:Revision line}\n:toc:\n:imagesdir: img/\n:homepage: https://www.example.com\n:icons: font\n:data-uri:\n${0}",
        "doc": "",
        "grammar": "snu",
        "label": "Start a new document",
        "matches": {
          "doc": true,
          "title": true
        },
        "opts": {
          "head": true
        }
      },
      {
        "content": "[source,${1:language}]\n----\n${0}\n----",
        "doc": "",
        "grammar": "snu",
        "label": "source code block --- source ---",
        "matches": {
          "block-source": true,
          "source": true
        },
        "opts": {
          "head": true
        }
      },
      {
        "content": "[quote, ${1:Name}, ${2:Occasion}}]\n____\n${0}\n____",
        "doc": "",
        "grammar": "snu",
        "label": "quote block --- text ---",
        "matches": {
          "block-quote": true,
          "quote": true
        },
        "opts": {
          "head": true
        }
      },
      {
        "content": "....\n${0}\n....",
        "doc": "",
        "grammar": "snu",
        "label": "literal block ... text ...",
        "matches": {
          "block-literal": true,
          "literalblock": true
        },
        "opts": {
          "head": true
        }
      },
      {
        "content": "*${1}*${0}",
        "doc": "",
        "grammar": "snu",
        "label": "*bold*",
        "matches": {
          "bold": true
        },
        "opts": {
          "word": true
        }
      },
      {
        "content": "_${1}_${0}",
        "doc": "",
        "grammar": "snu",
        "label": "_italic_",
        "matches": {
          "italic": true
        },
        "opts": {
          "word": true
        }
      },
      {
        "content": "+${1}+${0}",
        "doc": "",
        "grammar": "snu",
        "label": "+verbatim+",
        "matches": {
          "verb": true
        },
        "opts": {
          "word": true
        }
      },
      {
        "content": "== ${1:Title}\n${0}",
        "doc": "",
        "grammar": "snu",
        "label": "== heading on level 2",
        "matches": {
          "heading": true,
          "section": true
        },
        "opts": {
          "head": true
        }
      },
      {
        "content": "[#${2:Id}]\n== ${1:Title}\n${0}",
        "doc": "",
        "grammar": "snu",
        "label": "== heading on level 2 with anchor",
        "matches": {
          "heading-anchor": true,
          "section-anchor": true
        },
        "opts": {
          "head": true
        }
      },
      {
        "content": "include::${1:example.doc}[]${0}",
        "doc": "",
        "grammar": "snu",
        "label": "include::example.doc",
        "matches": {
          "inc": true
        },
        "opts": {
          "head": true
        }
      },
      {
        "content": "'''\n${0}",
        "doc": "",
        "grammar": "snu",
        "label": "horizontal rule",
        "matches": {
          "hrule": true
        },
        "opts": {
          "head": true
        }
      },
      {
        "content": "<<<\n${0}",
        "doc": "",
        "grammar": "snu",
        "label": "page break",
        "matches": {
          "pagebreak": true
        },
        "opts": {
          "head": true
        }
      },
      {
        "content": "${1:definiendum}::\n${2:definiens}",
        "doc": "",
        "grammar": "snu",
        "label": "definition",
        "matches": {
          "def": true
        },
        "opts": {
          "head": true
        }
      },
      {
        "content": "[cols=\"${1}\", options=\"header\"]\n|===\n|${2:row1-col1}\n${0}\n|===",
        "doc": "",
        "grammar": "snu",
        "label": "table",
        "matches": {
          "table": true
        },
        "opts": {
          "head": true
        }
      },
      {
        "content": "[%header,format=csv]\n|===\n${0}\n|===",
        "doc": "",
        "grammar": "snu",
        "label": "CSV table",
        "matches": {
          "csvtable": true,
          "tablecsv": true
        },
        "opts": {
          "head": true
        }
      },
      {
        "content": "${1:https://www.example.org}[${2:Text}]${0}",
        "doc": "",
        "grammar": "snu",
        "label": "External link",
        "matches": {
          "extlink": true,
          "link": true
        },
        "opts": {
          "word": true
        }
      },
      {
        "content": "link:${1:/example.pdf}[${2:Text}]${0}",
        "doc": "",
        "grammar": "snu",
        "label": "Relative link",
        "matches": {
          "linkrel": true
        },
        "opts": {
          "word": true
        }
      },
      {
        "content": "mailto:${1:alice@example.com}[${2:Alice}]${0}",
        "doc": "",
        "grammar": "snu",
        "label": "mailto link",
        "matches": {
          "mailto": true
        },
        "opts": {
          "word": true
        }
      },
      {
        "content": "[[${1:id}]]${0}",
        "doc": "",
        "grammar": "snu",
        "label": "[[id]] text",
        "matches": {
          "anchor": true
        },
        "opts": {
          "word": true
        }
      },
      {
        "content": "[#${1:Id}] ${0}",
        "doc": "",
        "grammar": "snu",
        "label": "[#anchor] #text#, itemize, ...",
        "matches": {
          "anchorblock": true,
          "block-anchor": true
        },
        "opts": {
          "head": true
        }
      },
      {
        "content": "<<${1:id}>>${0}",
        "doc": "",
        "grammar": "snu",
        "label": "reference to anchor",
        "matches": {
          "ref": true
        },
        "opts": {
          "word": true
        }
      },
      {
        "content": "image::${1:example.jpg}[${2:Description}]\n${0}",
        "doc": "",
        "grammar": "snu",
        "label": "image::file[desc]",
        "matches": {
          "image": true
        },
        "opts": {
          "head": true
        }
      },
      {
        "content": "image::${1:example.jpg}[${2:Description},align=\"center\"]\n${0}",
        "doc": "",
        "grammar": "snu",
        "label": "Centered image::file[desc]",
        "matches": {
          "imagecenter": true
        },
        "opts": {
          "head": true
        }
      },
      {
        "content": "image:${1:example.jpg}[${2:Description}]${0}",
        "doc": "",
        "grammar": "snu",
        "label": "Inline image:file[desc]",
        "matches": {
          "imageinline": true
        },
        "opts": {
          "word": true
        }
      },
      {
        "content": ".footnote:[${1:footnotetext}]${0}",
        "doc": "",
        "grammar": "snu",
        "label": "footnote",
        "matches": {
          "footnote": true
        },
        "opts": {
          "word": true
        }
      },
      {
        "content": "[bibliography]\n== References\n- [[${1:id}]] ${2:Entry}\n${0}",
        "doc": "",
        "grammar": "snu",
        "label": "bibliography",
        "matches": {
          "bib": true
        },
        "opts": {
          "head": true
        }
      }
    ],
    "asciidoctor": [
      {
        "content": ":source-highlighter: rouge$0",
        "doc": "",
        "grammar": "snu",
        "label": "source-highlighter: rouge",
        "matches": {
          "highlight-rouge": true,
          "hirouge": true
        },
        "opts": {
          "head": true
        }
      },
      {
        "content": ":source-highlighter: pygments$0",
        "doc": "",
        "grammar": "snu",
        "label": "source-highlighter: pygments",
        "matches": {
          "highlight-pygments": true,
          "hipygments": true
        },
        "opts": {
          "head": true
        }
      },
      {
        "content": ":source-highlighter: highlight.js$0",
        "doc": "",
        "grammar": "snu",
        "label": "source-highlighter: highlight.js",
        "matches": {
          "highlight-highlight.js": true,
          "hihighlight.js": true
        },
        "opts": {
          "head": true
        }
      }
    ],
    "asm": [
      {
        "content": ";;\n;; @brief      ${1:function description}\n;;\n;; @details    ${2:detailed description}\n;;\n;; @param      ${3:param}\n;;\n;; @return     ${4:return}\n;;",
        "doc": "",
        "grammar": "snu",
        "label": ";; @brief ...",
        "matches": {
          "doxy": true
        },
        "opts": {
          "head": true
        }
      }
    ],
    "autoit": [
      {
        "content": "If ${1:condition} Then\n\t${0:; True code}\nEndIf",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "if": true
        },
        "opts": {}
      },
      {
        "content": "Else\n\t${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "el": true
        },
        "opts": {}
      },
      {
        "content": "ElseIf ${1:condition} Then\n\t${0:; True code}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "eif": true
        },
        "opts": {}
      },
      {
        "content": "If ${1:condition} Then\n\t${2:; True code}\nElse\n\t${0:; Else code}\nEndIf",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ife": true
        },
        "opts": {}
      },
      {
        "content": "If ${1:condition 1} Then\n\t${2:; True code}\nElseIf ${3:condition 2} Then\n\t${4:; True code}\nElse\n\t${0:; Else code}\nEndIf",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ifelif": true
        },
        "opts": {}
      },
      {
        "content": "Switch (${1:condition})\nCase ${2:case1}:\n\t${3:; Case 1 code}\nCase Else:\n\t${0:; Else code}\nEndSwitch",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "switch": true
        },
        "opts": {}
      },
      {
        "content": "Select (${1:condition})\nCase ${2:case1}:\n\t${3:; Case 1 code}\nCase Else:\n\t${0:; Else code}\nEndSelect",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "select": true
        },
        "opts": {}
      },
      {
        "content": "While (${1:condition})\n\t${0:; code...}\nWEnd",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "wh": true
        },
        "opts": {}
      },
      {
        "content": "For ${1:n} = ${3:1} to ${2:count}\n\t${0:; code...}\nNext",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "for": true
        },
        "opts": {}
      },
      {
        "content": "MsgBox(${0:MsgType}, ${1:\"Title\"}, ${2:\"Message Text\"})",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "msg": true
        },
        "opts": {}
      },
      {
        "content": "MsgBox(0, \"Debug\", ${0:\"Debug Message\"})",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "debug": true
        },
        "opts": {}
      },
      {
        "content": "MsgBox(0, \"${0:VarName}\", $1)",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "showvar": true
        },
        "opts": {}
      }
    ],
    "awk": [
      {
        "content": "#!/usr/bin/awk -f",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "#! #!/usr/bin/awk -f": true
        },
        "opts": {}
      },
      {
        "content": "@include \"${1}\"${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "inc @include": true
        },
        "opts": {}
      },
      {
        "content": "@load \"${1}\"${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "loa @load": true
        },
        "opts": {}
      },
      {
        "content": "BEGIN {\n\t${0}\n}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "beg BEGIN { ... }": true
        },
        "opts": {}
      },
      {
        "content": "BEGINFILE {\n\t${0}\n}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "begf BEGINFILE { ... }": true
        },
        "opts": {}
      },
      {
        "content": "END {\n\t${0}\n}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "end END { ... }": true
        },
        "opts": {}
      },
      {
        "content": "ENDFILE {\n\t${0}\n}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "endf ENDFILE { ... }": true
        },
        "opts": {}
      },
      {
        "content": "print ${1:\"${2}\"}${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "pri print": true
        },
        "opts": {}
      },
      {
        "content": "printf(\"${1:%s}\\n\", ${2})${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "printf printf": true
        },
        "opts": {}
      },
      {
        "content": "IGNORECASE = ${1:1}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ign IGNORECASE": true
        },
        "opts": {}
      },
      {
        "content": "if (${1}) {\n\t${0:${VISUAL}}\n}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "if if {...}": true
        },
        "opts": {}
      },
      {
        "content": "if (${1}) {\n\t${2:${VISUAL}}\n} else {\n\t${0}\n}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ife if ... else ...": true
        },
        "opts": {}
      },
      {
        "content": "else if (${1}) {\n\t${0}\n}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "eif else if ...": true
        },
        "opts": {}
      },
      {
        "content": "else {\n\t${0}\n}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "el else {...}": true
        },
        "opts": {}
      },
      {
        "content": "while (${1}) {\n\t${2}\n}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "wh while": true
        },
        "opts": {}
      },
      {
        "content": "do {\n\t${0}\n} while (${1})",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "do do ... while": true
        },
        "opts": {}
      },
      {
        "content": "for (${2:i} = 0; i < ${1:n}; ${3:++i}) {\n\t${0}\n}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "for for": true
        },
        "opts": {}
      },
      {
        "content": "for (${1:i} in ${2:array}) {\n\t${0}\n}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "fore for each": true
        },
        "opts": {}
      },
      {
        "content": "switch (${1}) {\ncase ${2}:\n\t${3}\n\tbreak\ndefault:\n\t${0}\n\tbreak\n}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "sw switch": true
        },
        "opts": {}
      },
      {
        "content": "case ${1}:\n\t${0}\n\tbreak",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "case case": true
        },
        "opts": {}
      }
    ],
    "axios": [
      {
        "content": "const axios = require('axios').default;",
        "doc": "require axios",
        "grammar": "lsp",
        "label": "axios-require",
        "matches": {
          "axios require": true
        },
        "opts": {}
      },
      {
        "content": "import axios from 'axios';",
        "doc": "import axios",
        "grammar": "lsp",
        "label": "axios-import",
        "matches": {
          "axios import": true
        },
        "opts": {}
      },
      {
        "content": "axios.get('${1:uri}')\n.then(function (response) {\n\t${2:success}\n})\n.catch(function (error) {\n\t${3:error}\n})",
        "doc": "Use Axios to make a get request - promise based",
        "grammar": "lsp",
        "label": "axios-get-promise",
        "matches": {
          "axios get promise": true
        },
        "opts": {}
      },
      {
        "content": "async function ${1:name}() {\n\ttry {\n\t\tconst response = await axios.get('${2:uri}');\n\t\t${3:success}\n\t}\tcatch (error) {\n\t\t${4:error}\n\t}\n}",
        "doc": "Use Axios to make a get request - async-await",
        "grammar": "lsp",
        "label": "axios-get-async-await",
        "matches": {
          "axios get async await": true
        },
        "opts": {}
      },
      {
        "content": "axios.post('${1:uri}', ${2:post})\n.then(function (response) {\n\t${3:success}\n})\n.catch(function (error) {\n\t${4:error}\n})",
        "doc": "Use Axios to make a post request - promise based",
        "grammar": "lsp",
        "label": "axios-post-promise",
        "matches": {
          "axios post promise": true
        },
        "opts": {}
      },
      {
        "content": "async function ${1:name}() {\n\ttry {\n\t\tconst response = await axios.post('${2:uri}', ${3:post});\n\t\t${4:success}\n\t}\tcatch (error) {\n\t\t${5:error}\n\t}\n}",
        "doc": "Use Axios to make a post request - async-await",
        "grammar": "lsp",
        "label": "axios-post-async-await",
        "matches": {
          "axios post async await": true
        },
        "opts": {}
      },
      {
        "content": "const ${1:instance} = axios.create({\n\tbaseURL: '${2:uri}',\n\ttimeout: $3,\n\theaders: {'${4:key}': '${5:value}'}",
        "doc": "Create an Axios instance for requests",
        "grammar": "lsp",
        "label": "axios-instance",
        "matches": {
          "axios instance": true
        },
        "opts": {}
      },
      {
        "content": "axios.defaults.${1:key} = '${2:value}';",
        "doc": "Define global axios defaults, eg. baseURL, headers etc.",
        "grammar": "lsp",
        "label": "axios-defaults",
        "matches": {
          "axios defaults": true
        },
        "opts": {}
      },
      {
        "content": "axios.interceptors.request.use(function (config) {\n\t${1:do something}\nreturn config;\n}, function (error) {\n\t${2:do something}\n$return Promise.reject(error);\n});",
        "doc": "You can intercept requests before they are handled by then or catch.",
        "grammar": "lsp",
        "label": "axios-interceptors-request",
        "matches": {
          "axios interceptors request": true
        },
        "opts": {}
      },
      {
        "content": "axios.interceptors.response.use(function (response) {\n\t${1:do something}\nreturn response;\n}, function (error) {\n\t${2:do something}\n$return Promise.reject(error);\n});",
        "doc": "You can intercept responses before they are handled by then or catch.",
        "grammar": "lsp",
        "label": "axios-interceptors-response",
        "matches": {
          "axios interceptors response": true
        },
        "opts": {}
      }
    ],
    "base": [
      {
        "content": "var ${1:name} = ${2:value};",
        "doc": "var assignment",
        "grammar": "lsp",
        "label": "var-assignment",
        "matches": {
          "base var": true
        },
        "opts": {}
      },
      {
        "content": "let ${1:name} = ${2:value};",
        "doc": "let assignment",
        "grammar": "lsp",
        "label": "let-assignment",
        "matches": {
          "base let": true
        },
        "opts": {}
      },
      {
        "content": "let {${1:name}} = ${2:value};",
        "doc": "Object destructing",
        "grammar": "lsp",
        "label": "destructuring-let-assignment",
        "matches": {
          "base let destruct object": true
        },
        "opts": {}
      },
      {
        "content": "let [${1:name}] = ${2:value};",
        "doc": "Array destructing",
        "grammar": "lsp",
        "label": "destructuring-let-array",
        "matches": {
          "base let destruct array": true
        },
        "opts": {}
      },
      {
        "content": "const ${1:name} = ${2:value};",
        "doc": "const assignment",
        "grammar": "lsp",
        "label": "const-assignment",
        "matches": {
          "base const": true
        },
        "opts": {}
      },
      {
        "content": "const {${1:name}} = ${2:value};",
        "doc": "Object destructing",
        "grammar": "lsp",
        "label": "destructuring-const-assignment",
        "matches": {
          "base const destruct object": true
        },
        "opts": {}
      },
      {
        "content": "const [${2:propertyName}] = ${1:arrayToDestruct};",
        "doc": "Array destructing",
        "grammar": "lsp",
        "label": "destructingarray",
        "matches": {
          "base const destruct array": true
        },
        "opts": {}
      },
      {
        "content": "if (${1:condition}) {\n\t${0}\n}",
        "doc": "if statement",
        "grammar": "lsp",
        "label": "if-statement",
        "matches": {
          "base if": true
        },
        "opts": {}
      },
      {
        "content": "else {\n\t${0}\n}",
        "doc": "else statement",
        "grammar": "lsp",
        "label": "else-statement",
        "matches": {
          "base else": true
        },
        "opts": {}
      },
      {
        "content": "if (${1:condition}) {\n\t${0}\n} else {\n\t\n}",
        "doc": "if/else statement",
        "grammar": "lsp",
        "label": "if-else-statement",
        "matches": {
          "base if else": true
        },
        "opts": {}
      },
      {
        "content": "else if (${1:condition}) {\n\t${0}\n}",
        "doc": "else if statement",
        "grammar": "lsp",
        "label": "else-if-statement",
        "matches": {
          "base else if": true
        },
        "opts": {}
      },
      {
        "content": "${1:condition} ? ${2:expression} : ${3:expression};",
        "doc": "ternary operator",
        "grammar": "lsp",
        "label": "ternary-operator",
        "matches": {
          "base ternary operator": true
        },
        "opts": {}
      },
      {
        "content": "for (let ${1:i} = 0, ${2:len} = ${3:iterable}.length; ${1:i} < ${2:len}; ${1:i}++) {\n\t${0}\n}",
        "doc": "for loop",
        "grammar": "lsp",
        "label": "for-loop",
        "matches": {
          "base for": true
        },
        "opts": {}
      },
      {
        "content": "for (let ${1:i} = ${2:iterable}.length - 1; ${1:i} >= 0; ${1:i}--) {\n\t${0}\n}",
        "doc": "reverse for loop",
        "grammar": "lsp",
        "label": "reverse-for-loop",
        "matches": {
          "base for reverse": true
        },
        "opts": {}
      },
      {
        "content": "for (let ${1:key} in ${2:array}) {\n\tif (${2:array}.hasOwnProperty(${1:key})) {\n\t\t${0}\n\t}\n}",
        "doc": "for in loop",
        "grammar": "lsp",
        "label": "for-in-loop",
        "matches": {
          "base for in": true
        },
        "opts": {}
      },
      {
        "content": "for (let ${1:key} of ${2:array}) {\n\t${0}\n}",
        "doc": "for of loop (ES6)",
        "grammar": "lsp",
        "label": "for-of-loop-es6-",
        "matches": {
          "base for of": true
        },
        "opts": {}
      },
      {
        "content": "while (${1:condition}) {\n\t${0}\n}",
        "doc": "while loop",
        "grammar": "lsp",
        "label": "while-loop",
        "matches": {
          "base while": true
        },
        "opts": {}
      },
      {
        "content": "try {\n\t${0}\n} catch (${1:err}) {\n\t\n}",
        "doc": "try/catch",
        "grammar": "lsp",
        "label": "try-catch",
        "matches": {
          "base try catch": true
        },
        "opts": {}
      },
      {
        "content": "try {\n\t${0}\n} finally {\n\t\n}",
        "doc": "try/finally",
        "grammar": "lsp",
        "label": "try-finally",
        "matches": {
          "base try finally": true
        },
        "opts": {}
      },
      {
        "content": "try {\n\t${0}\n} catch (${1:err}) {\n\t\n} finally {\n\t\n}",
        "doc": "try/catch/finally",
        "grammar": "lsp",
        "label": "try-catch-finally",
        "matches": {
          "base try catch finally": true
        },
        "opts": {}
      },
      {
        "content": "switch (${1:expr}) {\n\tcase ${2:value}:\n\t\treturn $0;\n\tdefault:\n\t\treturn;\n}",
        "doc": "switch case",
        "grammar": "lsp",
        "label": "switch-case",
        "matches": {
          "base switch case": true
        },
        "opts": {}
      },
      {
        "content": "function (${1:arguments}) {\n\t${0}\n}",
        "doc": "anonymous function",
        "grammar": "lsp",
        "label": "anonymous-function",
        "matches": {
          "base function anonymous": true
        },
        "opts": {}
      },
      {
        "content": "function ${1:name}(${2:arguments}) {\n\t${0}\n}",
        "doc": "named function",
        "grammar": "lsp",
        "label": "named-function",
        "matches": {
          "base function named": true
        },
        "opts": {}
      },
      {
        "content": "((${1:arguments}) => {\n\t${0}\n})(${2});",
        "doc": "immediately-invoked function expression (IIFE)",
        "grammar": "lsp",
        "label": "immediately-invoked-function-expression-iife-",
        "matches": {
          "base function immediate": true
        },
        "opts": {}
      },
      {
        "content": "${1:fn}.apply(${2:this}, ${3:arguments})",
        "doc": "function apply",
        "grammar": "lsp",
        "label": "function-apply",
        "matches": {
          "base function apply": true
        },
        "opts": {}
      },
      {
        "content": "${1:fn}.call(${2:this}, ${3:arguments})",
        "doc": "function call",
        "grammar": "lsp",
        "label": "function-call",
        "matches": {
          "base function call": true
        },
        "opts": {}
      },
      {
        "content": "${1:fn}.bind(${2:this}, ${3:arguments})",
        "doc": "function bind",
        "grammar": "lsp",
        "label": "function-bind",
        "matches": {
          "base function bind": true
        },
        "opts": {}
      },
      {
        "content": "(${1:arguments}) => ${2:statement}",
        "doc": "arrow function (ES6)",
        "grammar": "lsp",
        "label": "arrow-function-es6-",
        "matches": {
          "base function arrow": true
        },
        "opts": {}
      },
      {
        "content": "(${1:arguments}) => {\n\t${0}\n}",
        "doc": "arrow function with body (ES6)",
        "grammar": "lsp",
        "label": "arrow-function-with-body-es6-",
        "matches": {
          "base function arrow body": true
        },
        "opts": {}
      },
      {
        "content": "function* (${1:arguments}) {\n\t${0}\n}",
        "doc": "generator function (ES6)",
        "grammar": "lsp",
        "label": "generator-function-es6-",
        "matches": {
          "base function generator": true
        },
        "opts": {}
      },
      {
        "content": "function* ${1:name}(${2:arguments}) {\n\t${0}\n}",
        "doc": "named generator function (ES6)",
        "grammar": "lsp",
        "label": "named-generator-function-es6-",
        "matches": {
          "base function generator named": true
        },
        "opts": {}
      },
      {
        "content": "[...Array(${1:length}).keys()]${0}",
        "doc": "sequence of 0..n",
        "grammar": "lsp",
        "label": "sequence-of-0-n",
        "matches": {
          "base sequence of": true
        },
        "opts": {}
      },
      {
        "content": "${1}.forEach((${2:item}) => {\n\t${0}\n});",
        "doc": "forEach loop",
        "grammar": "lsp",
        "label": "foreach-loop",
        "matches": {
          "base foreach": true
        },
        "opts": {}
      },
      {
        "content": "${1}.map((${2:item}) => {\n\t${0}\n});",
        "doc": "map",
        "grammar": "lsp",
        "label": "map",
        "matches": {
          "base map": true
        },
        "opts": {}
      },
      {
        "content": "${1}.reduce((${2:previous}, ${3:current}) => {\n\t${0}\n}${4:, initial});",
        "doc": "reduce",
        "grammar": "lsp",
        "label": "reduce",
        "matches": {
          "base reduce": true
        },
        "opts": {}
      },
      {
        "content": "${1}.filter(${2:item} => {\n\t${0}\n});",
        "doc": "filter",
        "grammar": "lsp",
        "label": "filter",
        "matches": {
          "base filter": true
        },
        "opts": {}
      },
      {
        "content": "${1}.find(${2:item} => {\n\t${0}\n});",
        "doc": "find",
        "grammar": "lsp",
        "label": "find",
        "matches": {
          "base find": true
        },
        "opts": {}
      },
      {
        "content": "class ${1:name} {\n\tconstructor(${2:arguments}) {\n\t\t${0}\n\t}\n}",
        "doc": "class (ES6)",
        "grammar": "lsp",
        "label": "class-es6-",
        "matches": {
          "base class": true
        },
        "opts": {}
      },
      {
        "content": "class ${1:name} extends ${2:base} {\n\tconstructor(${3:arguments}) {\n\t\tsuper(${3:arguments});\n\t\t${0}\n\t}\n}",
        "doc": "child class (ES6)",
        "grammar": "lsp",
        "label": "child-class-es6-",
        "matches": {
          "base child class": true
        },
        "opts": {}
      },
      {
        "content": "constructor(${1:arguments}) {\n\tsuper(${1:arguments});${0}\n}",
        "doc": "class constructor (ES6)",
        "grammar": "lsp",
        "label": "class-constructor-es6-",
        "matches": {
          "base class constructor": true
        },
        "opts": {}
      },
      {
        "content": "${1:method}(${2:arguments}) {\n\t${0}\n}",
        "doc": "method (ES6 syntax)",
        "grammar": "lsp",
        "label": "method-es6-syntax-",
        "matches": {
          "base method": true
        },
        "opts": {}
      },
      {
        "content": "get ${1:property}() {\n\t${0}\n}",
        "doc": "getter (ES6 syntax)",
        "grammar": "lsp",
        "label": "getter-es6-syntax-",
        "matches": {
          "base getter": true
        },
        "opts": {}
      },
      {
        "content": "set ${1:property}(${2:value}) {\n\t${0}\n}",
        "doc": "setter (ES6 syntax)",
        "grammar": "lsp",
        "label": "setter-es6-syntax-",
        "matches": {
          "base setter": true
        },
        "opts": {}
      },
      {
        "content": "get ${1:property}() {\n\t${0}\n}\nset ${1:property}(${2:value}) {\n\t\n}",
        "doc": "getter and setter (ES6 syntax)",
        "grammar": "lsp",
        "label": "getter-and-setter-es6-syntax-",
        "matches": {
          "base getter setter": true
        },
        "opts": {}
      },
      {
        "content": "${1:Class}.prototype.${2:method} = function(${3:arguments}) {\n\t${0}\n};",
        "doc": "prototype method",
        "grammar": "lsp",
        "label": "prototype-method",
        "matches": {
          "base prototype method": true
        },
        "opts": {}
      },
      {
        "content": "Object.assign(${1:dest}, ${2:source})",
        "doc": "Object.assign",
        "grammar": "lsp",
        "label": "object-assign",
        "matches": {
          "base object assign": true
        },
        "opts": {}
      },
      {
        "content": "Object.assign({}, ${1:original}, ${2:source})",
        "doc": "Object.assign copy (shallow clone)",
        "grammar": "lsp",
        "label": "object-assign-copy-shallow-clone-",
        "matches": {
          "base object assign copy": true
        },
        "opts": {}
      },
      {
        "content": "return ${0};",
        "doc": "return",
        "grammar": "lsp",
        "label": "return",
        "matches": {
          "base return": true
        },
        "opts": {}
      },
      {
        "content": "return new Promise((resolve, reject) => {\n\t${0}\n});",
        "doc": "return Promise (ES6)",
        "grammar": "lsp",
        "label": "return-promise-es6-",
        "matches": {
          "base return promise": true
        },
        "opts": {}
      },
      {
        "content": "return (\n\t${0}\n);",
        "doc": "return complex value (such as JSX components)",
        "grammar": "lsp",
        "label": "return-complex-value-such-as-jsx-components-",
        "matches": {
          "base return complex value": true
        },
        "opts": {}
      },
      {
        "content": "typeof ${1:source} === '${2:undefined}'",
        "doc": "typeof",
        "grammar": "lsp",
        "label": "typeof",
        "matches": {
          "base typeof": true
        },
        "opts": {}
      },
      {
        "content": "${1:source} instanceof ${2:Object}",
        "doc": "instanceof",
        "grammar": "lsp",
        "label": "instanceof",
        "matches": {
          "base instanceof": true
        },
        "opts": {}
      },
      {
        "content": "new Promise((resolve, reject) => {\n\t${0}\n})",
        "doc": "Promise (ES6)",
        "grammar": "lsp",
        "label": "promise-es6-",
        "matches": {
          "base promise": true
        },
        "opts": {}
      },
      {
        "content": "${1:promise}.then((${2:value}) => {\n\t${0}\n})",
        "doc": "Promise.then",
        "grammar": "lsp",
        "label": "promise-then",
        "matches": {
          "base promise then": true
        },
        "opts": {}
      },
      {
        "content": "${1:promise}.catch((${2:err}) => {\n\t${0}\n})",
        "doc": "Promise.catch",
        "grammar": "lsp",
        "label": "promise-catch",
        "matches": {
          "base promise catch": true
        },
        "opts": {}
      },
      {
        "content": "export const ${1:exportVariable} = ${2:localVariable};\n",
        "doc": "Export named variable in ES6 syntax",
        "grammar": "lsp",
        "label": "exportnamedvariable",
        "matches": {
          "base export named variable": true
        },
        "opts": {}
      },
      {
        "content": "export const ${1:functionName} = (${2:params}) => {\n\t$0\n};\n",
        "doc": "Export named function in ES6 syntax",
        "grammar": "lsp",
        "label": "exportnamedfunction",
        "matches": {
          "base export named function": true
        },
        "opts": {}
      },
      {
        "content": "export default function ${1:${TM_FILENAME_BASE}}(${2:params}) {\n\t$0\n};\n",
        "doc": "Export default function in ES6 syntax",
        "grammar": "lsp",
        "label": "exportdefaultfunction",
        "matches": {
          "base export default function": true
        },
        "opts": {}
      },
      {
        "content": "export default class ${1:className} {\n\t$0\n};\n",
        "doc": "Export default class in ES6 syntax",
        "grammar": "lsp",
        "label": "exportclass",
        "matches": {
          "base export class": true
        },
        "opts": {}
      },
      {
        "content": "export default class ${1:className} extends ${2:baseclassName} {\n\t$0\n};\n",
        "doc": "Export default class which extends a base one in ES6 syntax",
        "grammar": "lsp",
        "label": "exportclassextends",
        "matches": {
          "base export class extends": true
        },
        "opts": {}
      },
      {
        "content": "import ${2:moduleName} from '${1:module}';$0",
        "doc": "Imports entire module statement in ES6 syntax",
        "grammar": "lsp",
        "label": "import",
        "matches": {
          "base import": true
        },
        "opts": {}
      },
      {
        "content": "import '${1:module}';$0",
        "doc": "Imports entire module in ES6 syntax without module name",
        "grammar": "lsp",
        "label": "importnomodulename",
        "matches": {
          "base import no module name": true
        },
        "opts": {}
      },
      {
        "content": "import { $2 } from '${1:module}';$0",
        "doc": "Imports only a portion of the module in ES6 syntax",
        "grammar": "lsp",
        "label": "importdestructing",
        "matches": {
          "base import destructing": true
        },
        "opts": {}
      },
      {
        "content": "import * as ${2:alias} from '${1:module}';$0",
        "doc": "Imports everything as alias from the module in ES6 syntax",
        "grammar": "lsp",
        "label": "importeverything",
        "matches": {
          "base import everything": true
        },
        "opts": {}
      },
      {
        "content": "import { ${2:originalName} as ${3:alias} } from '${1:module}';$0",
        "doc": "Imports a specific portion of the module by assigning a local alias in ES6 syntax",
        "grammar": "lsp",
        "label": "importas",
        "matches": {
          "base import as": true
        },
        "opts": {}
      },
      {
        "content": "require('${1:module}');",
        "doc": "require",
        "grammar": "lsp",
        "label": "require",
        "matches": {
          "base require": true
        },
        "opts": {}
      },
      {
        "content": "require('./${1:module}');",
        "doc": "require local",
        "grammar": "lsp",
        "label": "require-local",
        "matches": {
          "base require local": true
        },
        "opts": {}
      },
      {
        "content": "const ${1:module} = require('${1:module}');",
        "doc": "require assignment",
        "grammar": "lsp",
        "label": "require-assignment",
        "matches": {
          "base require assignment": true
        },
        "opts": {}
      },
      {
        "content": "const ${1:module} = require('./${1:module}');",
        "doc": "require assignment local",
        "grammar": "lsp",
        "label": "require-assignment-local",
        "matches": {
          "base require assignment local": true
        },
        "opts": {}
      },
      {
        "content": "const {${1:module}} = require('${1:module}');",
        "doc": "destructuring require assignment",
        "grammar": "lsp",
        "label": "destructuring-require-assignment",
        "matches": {
          "base require assignment": true
        },
        "opts": {}
      },
      {
        "content": "const {${1:module}} = require('./${1:module}');",
        "doc": "destructuring require assignment local",
        "grammar": "lsp",
        "label": "destructuring-require-assignment-local",
        "matches": {
          "base require assignment local destruct": true
        },
        "opts": {}
      },
      {
        "content": "exports.${1:member} = ${2:value};",
        "doc": "exports.member",
        "grammar": "lsp",
        "label": "exports-member",
        "matches": {
          "base exports member": true
        },
        "opts": {}
      },
      {
        "content": "module.exports = ${1:name};",
        "doc": "module.exports",
        "grammar": "lsp",
        "label": "module-exports",
        "matches": {
          "base module exports": true
        },
        "opts": {}
      },
      {
        "content": "module.exports = {\n\t${1:member}\n};",
        "doc": "module exports object",
        "grammar": "lsp",
        "label": "module-exports-object",
        "matches": {
          "base module exports object": true
        },
        "opts": {}
      },
      {
        "content": "${1:emitter}.on('${2:event}', (${3:arguments}) => {\n\t${0}\n});",
        "doc": "event handler",
        "grammar": "lsp",
        "label": "event-handler",
        "matches": {
          "base event handler": true
        },
        "opts": {}
      },
      {
        "content": "console.assert(${1:expression}, ${2:object});",
        "doc": "If the specified expression is false, the message is written to the console along with a stack trace",
        "grammar": "lsp",
        "label": "consoleassert",
        "matches": {
          "base console assert": true
        },
        "opts": {}
      },
      {
        "content": "console.clear();",
        "doc": "Clears the console",
        "grammar": "lsp",
        "label": "consoleclear",
        "matches": {
          "base console clear": true
        },
        "opts": {}
      },
      {
        "content": "console.count(${1:label});",
        "doc": "Writes the the number of times that count() has been invoked at the same line and with the same label",
        "grammar": "lsp",
        "label": "consolecount",
        "matches": {
          "base console count": true
        },
        "opts": {}
      },
      {
        "content": "console.debug(${1:object});",
        "doc": "Displays a message in the console. Also display a blue right arrow icon along with the logged message in Safari",
        "grammar": "lsp",
        "label": "consoledebug",
        "matches": {
          "base console debug": true
        },
        "opts": {}
      },
      {
        "content": "console.dir(${1:object});",
        "doc": "Prints a JavaScript representation of the specified object",
        "grammar": "lsp",
        "label": "consoledir",
        "matches": {
          "base console dir": true
        },
        "opts": {}
      },
      {
        "content": "console.error(${1:object});",
        "doc": "Displays a message in the console and also includes a stack trace from where the method was called",
        "grammar": "lsp",
        "label": "consoleerror",
        "matches": {
          "base console error": true
        },
        "opts": {}
      },
      {
        "content": "console.group('${1:label}');",
        "doc": "Groups and indents all following output by an additional level, until console.groupEnd() is called.",
        "grammar": "lsp",
        "label": "consolegroup",
        "matches": {
          "base console group": true
        },
        "opts": {}
      },
      {
        "content": "console.groupEnd();",
        "doc": "Closes out the corresponding console.group().",
        "grammar": "lsp",
        "label": "consolegroupend",
        "matches": {
          "base console group end": true
        },
        "opts": {}
      },
      {
        "content": "console.log(${1:object});",
        "doc": "Displays a message in the console",
        "grammar": "lsp",
        "label": "consolelog",
        "matches": {
          "base console log": true
        },
        "opts": {}
      },
      {
        "content": "console.log('${1:object} :>> ', ${1:object});",
        "doc": "Displays an object in the console with its name",
        "grammar": "lsp",
        "label": "consolelogobject",
        "matches": {
          "base console log object": true
        },
        "opts": {}
      },
      {
        "content": "console.trace(${1:object});",
        "doc": "Prints a stack trace from the point where the method was called",
        "grammar": "lsp",
        "label": "consoletrace",
        "matches": {
          "base console trace": true
        },
        "opts": {}
      },
      {
        "content": "console.warn(${1:object});",
        "doc": "Displays a message in the console but also displays a yellow warning icon along with the logged message",
        "grammar": "lsp",
        "label": "consolewarn",
        "matches": {
          "base console warn": true
        },
        "opts": {}
      },
      {
        "content": "console.info(${1:object});",
        "doc": "Displays a message in the console but also displays a blue information icon along with the logged message",
        "grammar": "lsp",
        "label": "consoleinfo",
        "matches": {
          "base console info": true
        },
        "opts": {}
      },
      {
        "content": "console.table(${1:object});",
        "doc": "Displays tabular data as a table.",
        "grammar": "lsp",
        "label": "consoletable",
        "matches": {
          "base console table": true
        },
        "opts": {}
      },
      {
        "content": "console.time(${1:object});",
        "doc": "Sets starting point for execution time measurement",
        "grammar": "lsp",
        "label": "consoletime",
        "matches": {
          "base console time": true
        },
        "opts": {}
      },
      {
        "content": "console.timeEnd(${1:object});",
        "doc": "Sets end point for execution time measurement",
        "grammar": "lsp",
        "label": "consoletimeend",
        "matches": {
          "base console time end": true
        },
        "opts": {}
      },
      {
        "content": "setTimeout(() => {\n\t${0}\n}, ${1:delay});",
        "doc": "setTimeout",
        "grammar": "lsp",
        "label": "settimeout",
        "matches": {
          "base set timeout": true
        },
        "opts": {}
      },
      {
        "content": "setInterval(() => {\n\t${0}\n}, ${1:delay});",
        "doc": "setInterval",
        "grammar": "lsp",
        "label": "setinterval",
        "matches": {
          "base set interval": true
        },
        "opts": {}
      },
      {
        "content": "setImmediate(() => {\n\t${0}\n});",
        "doc": "setImmediate",
        "grammar": "lsp",
        "label": "setimmediate",
        "matches": {
          "base set immediate": true
        },
        "opts": {}
      },
      {
        "content": "process.nextTick(() => {\n\t${0}\n});",
        "doc": "process nextTick",
        "grammar": "lsp",
        "label": "process-nexttick",
        "matches": {
          "base process next tick": true
        },
        "opts": {}
      },
      {
        "content": "'use strict';",
        "doc": "insert 'use strict' statement",
        "grammar": "lsp",
        "label": "insert-use-strict-statement",
        "matches": {
          "base use strict": true
        },
        "opts": {}
      }
    ],
    "beancount": [
      {
        "content": "${1:YYYY}-${2:MM}-${3:DD} open ${4:Account} ${8:#:Commodity}",
        "doc": "",
        "grammar": "snu",
        "label": "open account",
        "matches": {
          "open": true
        },
        "opts": {
          "head": true
        }
      },
      {
        "content": "${1:YYYY}-${2:MM}-${3:DD} close ${4:#:Account}",
        "doc": "",
        "grammar": "snu",
        "label": "close account",
        "matches": {
          "close": true
        },
        "opts": {
          "head": true
        }
      },
      {
        "content": "${1:YYYY}-${2:MM}-${3:DD} commodity ${4:Commodity}",
        "doc": "",
        "grammar": "snu",
        "label": "declare commodity",
        "matches": {
          "commodity": true,
          "currency": true
        },
        "opts": {
          "head": true
        }
      },
      {
        "content": "${1:YYYY}-${2:MM}-${3:DD} * \"${5:Payee}\" \"${6:Narration}\"\n\t${9:Account} ${10:Amount} ${11:Commodity}\n\t${14:Account} ${15:#:Amount} ${16:#:Commodity}",
        "doc": "",
        "grammar": "snu",
        "label": "transaction",
        "matches": {
          "transaction": true
        },
        "opts": {
          "head": true
        }
      },
      {
        "content": "${1:YYYY}-${2:MM}-${3:DD} balance ${4:Account} ${5:Amount} ${6:#:Commodity}",
        "doc": "",
        "grammar": "snu",
        "label": "balance",
        "matches": {
          "balance": true
        },
        "opts": {
          "head": true
        }
      },
      {
        "content": "${1:YYYY}-${2:MM}-${3:DD} pad ${4:BalanceAccount} ${5:PadAccount}",
        "doc": "",
        "grammar": "snu",
        "label": "pad",
        "matches": {
          "pad": true
        },
        "opts": {
          "head": true
        }
      }
    ],
    "bib": [
      {
        "content": "@article{${1:LABEL},\n    author = {${2}},\n    title = {${3}},\n    journal = {${4}},\n    year = {${5}},\n    memo = {volume, number, pages, month, note}\n}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "@article": true,
          "article": true
        },
        "opts": {}
      },
      {
        "content": "@book{${1:LABEL},\n    author/editor = {${2}},\n    title = {${3}},\n    publisher = {${4}},\n    year = {${5}},\n    memo = {volume, series, address, edition, month, note},\n}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "@book": true,
          "book": true
        },
        "opts": {}
      },
      {
        "content": "@booklet{${1:LABEL},\n    title = {${2}},\n    memo = {author, howpublished, address, month, year, note},\n}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "@booklet": true,
          "booklet": true
        },
        "opts": {}
      },
      {
        "content": "@inbook{${1:LABEL},\n    author/editor = {${2}},\n    title = {${3}},\n    chapter/pages = {${4}},\n    publisher = {${5}},\n    year = {${6}},\n    memo = {volume, series, address, edition, month, note},\n}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "@inbook": true,
          "inbook": true
        },
        "opts": {}
      },
      {
        "content": "@incollection{${1:LABEL},\n    author = {${2}},\n    title = {${3}},\n    booktitle = {${4}},\n    year = {${5}},\n    memo = {editor, pages, organization, publisher, address, month, note},\n}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "@incollection": true,
          "incollection": true
        },
        "opts": {}
      },
      {
        "content": "@inproceedings{${1:LABEL},\n    author = {${2}},\n    title = {${3}},\n    booktitle = {${4}},\n    year = {${5}},\n    memo = {editor, volume, number, series, pages, address, month,\n        organization, publisher, note}\n}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "@inproceedings @conference conference": true,
          "inproceedings": true
        },
        "opts": {}
      },
      {
        "content": "@manual{${1:LABEL},\n    title = {${2}},\n    memo = {author, organization, address, edition, month, year, note},\n}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "@manual": true,
          "manual": true
        },
        "opts": {}
      },
      {
        "content": "@mastersthesis{${1:LABEL},\n    author = {${2}},\n    title = {${3}},\n    school = {${4}},\n    year = {${5}},\n    memo = {address, month, note},\n}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "@mastersthesis": true,
          "mastersthesis": true
        },
        "opts": {}
      },
      {
        "content": "@misc{${1:LABEL},\n    memo = {author, title, howpublished, month, year, note},\n}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "@misc": true,
          "misc": true
        },
        "opts": {}
      },
      {
        "content": "@online{${1:LABEL},\n    author = {${2}},\n    title = {${3}},\n    url = {${4}},\n    note = {year/date},\n}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "@online": true,
          "online": true
        },
        "opts": {}
      },
      {
        "content": "@phdthesis{${1:LABEL},\n    author = {${2}},\n    title = {${3}},\n    school = {${4}},\n    year = {${5}},\n    memo = {address, month, note},\n}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "@phdthesis": true,
          "phdthesis": true
        },
        "opts": {}
      },
      {
        "content": "@proceedings{${1:LABEL},\n    title = {${2}},\n    year = {${3}},\n    memo = {editor, publisher, organization, address, month, note},\n}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "@proceedings": true,
          "proceedings": true
        },
        "opts": {}
      },
      {
        "content": "@techreport{${1:LABEL},\n    author = {${2}},\n    title = {${3}},\n    institution = {${4}},\n    year = {${5}},\n    memo = {type, number, address, month, note},\n}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "@techreport": true,
          "techreport": true
        },
        "opts": {}
      },
      {
        "content": "@unpublished{${1:LABEL},\n    author = {${2}},\n    title = {${3}},\n    note = {${4}},\n    memo = {month, year},\n}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "@unpublished": true,
          "unpublished": true
        },
        "opts": {}
      },
      {
        "content": "address = {${1}},\n${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "address": true
        },
        "opts": {}
      },
      {
        "content": "annote = {${1}},\n${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "annote": true
        },
        "opts": {}
      },
      {
        "content": "author = {${1}},\n${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "author": true
        },
        "opts": {}
      },
      {
        "content": "booktitle = {${1}},\n${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "booktitle": true
        },
        "opts": {}
      },
      {
        "content": "crossref = {${1}},\n${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "crossref": true
        },
        "opts": {}
      },
      {
        "content": "chapter = {${1}},\n${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "chapter": true
        },
        "opts": {}
      },
      {
        "content": "edition = {${1}},\n${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "edition": true
        },
        "opts": {}
      },
      {
        "content": "editor = {${1}},\n${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "editor": true
        },
        "opts": {}
      },
      {
        "content": "eprint = {${1}},\n${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "eprint": true
        },
        "opts": {}
      },
      {
        "content": "howpublished = {${1}},\n${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "howpublished": true
        },
        "opts": {}
      },
      {
        "content": "institution = {${1}},\n${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "institution": true
        },
        "opts": {}
      },
      {
        "content": "journal = {${1}},\n${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "journal": true
        },
        "opts": {}
      },
      {
        "content": "key = {${1}},\n${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "key": true
        },
        "opts": {}
      },
      {
        "content": "month = {${1}},\n${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "month": true
        },
        "opts": {}
      },
      {
        "content": "note = {${1}},\n${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "note": true
        },
        "opts": {}
      },
      {
        "content": "number = {${1}},\n${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "number": true
        },
        "opts": {}
      },
      {
        "content": "organization = {${1}},\n${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "organization": true
        },
        "opts": {}
      },
      {
        "content": "pages = {${1}},\n${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "pages": true
        },
        "opts": {}
      },
      {
        "content": "publisher = {${1}},\n${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "publisher": true
        },
        "opts": {}
      },
      {
        "content": "school = {${1}},\n${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "school": true
        },
        "opts": {}
      },
      {
        "content": "series = {${1}},\n${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "series": true
        },
        "opts": {}
      },
      {
        "content": "title = {${1}},\n${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "title": true
        },
        "opts": {}
      },
      {
        "content": "type = {${1}},\n${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "type": true
        },
        "opts": {}
      },
      {
        "content": "url = {${1}},\n${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "url": true
        },
        "opts": {}
      },
      {
        "content": "volume = {${1}},\n${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "volume": true
        },
        "opts": {}
      },
      {
        "content": "year = {${1}},\n${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "year": true
        },
        "opts": {}
      },
      {
        "content": "@online{${1:name},\n\tauthor={${2:author}},\n\ttitle={${3:title}},\n\tdate={${4:date}},\n\turl={${5:url}}\n}\n$0",
        "doc": null,
        "grammar": "snu",
        "label": "Online resource",
        "matches": {
          "online": true
        },
        "opts": {
          "b": true
        }
      },
      {
        "content": "@article{${1:name},\n\tauthor={${2:author}},\n\ttitle={${3:title}},\n\tjournaltitle={${4:journal}},\n\tvolume={${5:NN}},\n\tnumber={${6:NN}},\n\tyear={${7:YYYY}},\n\tpages={${8:NN}--${9:NN}}\n}\n$0",
        "doc": null,
        "grammar": "snu",
        "label": "Article reference",
        "matches": {
          "article": true
        },
        "opts": {
          "b": true
        }
      },
      {
        "content": "@book{${1:name},\n\tauthor={${2:author}},\n\ttitle={${3:title}},\n\tsubtitle={${4:subtitle}},\n\tyear={${5:YYYY}},\n\tlocation={${6:somewhere}},\n\tpublisher={${7:publisher}},\n\tpages={${8:NN}--${9:NN}}\n}\n$0",
        "doc": null,
        "grammar": "snu",
        "label": "Book reference",
        "matches": {
          "book": true
        },
        "opts": {
          "b": true
        }
      },
      {
        "content": "@inbook{${1:name},\n\tauthor={${2:author}},\n\ttitle={${3:title}},\n\tsubtitle={${4:subtitle}},\n\tbooktitle={${5:book}},\n\teditor={${6:editor}},\n\tyear={${7:YYYY}},\n\tlocation={${8:somewhere}},\n\tpublisher={${9:publisher}},\n\tpages={${10:NN}--${11:NN}}\n}\n$0",
        "doc": null,
        "grammar": "snu",
        "label": "In Book reference",
        "matches": {
          "inb": true
        },
        "opts": {
          "b": true
        }
      }
    ],
    "bindzone": [],
    "blade": [
      {
        "content": "@yield('${1}')",
        "doc": "",
        "grammar": "snu",
        "label": "@yield",
        "matches": {
          "yl": true
        },
        "opts": {}
      },
      {
        "content": "@extends('${1}')",
        "doc": "",
        "grammar": "snu",
        "label": "@extends",
        "matches": {
          "ext": true
        },
        "opts": {}
      },
      {
        "content": "@section('${1}', '${2}')",
        "doc": "",
        "grammar": "snu",
        "label": "@section",
        "matches": {
          "sec": true
        },
        "opts": {}
      },
      {
        "content": "@section('${1:section name}')\n    ${2}\n@endsection",
        "doc": "",
        "grammar": "snu",
        "label": "@section ... @endsection",
        "matches": {
          "section": true
        },
        "opts": {}
      },
      {
        "content": "@section('${1:section name}')\n    @parent\n    ${2}\n@endsection",
        "doc": "",
        "grammar": "snu",
        "label": "@section @parent ... @endsection",
        "matches": {
          "section-parent": true
        },
        "opts": {}
      },
      {
        "content": "@component('${1}')\n    ${2}\n@endcomponent",
        "doc": "",
        "grammar": "snu",
        "label": "@component ... @endcomponent",
        "matches": {
          "compo": true
        },
        "opts": {}
      },
      {
        "content": "@slot('${1}')\n    ${2}\n@endslot",
        "doc": "",
        "grammar": "snu",
        "label": "@slot ... @endslot",
        "matches": {
          "slot": true
        },
        "opts": {}
      },
      {
        "content": "@if(${1:condition})\n   ${2}\n@endif",
        "doc": "",
        "grammar": "snu",
        "label": "if ... endif",
        "matches": {
          "if": true
        },
        "opts": {}
      },
      {
        "content": "@if (${1:condition})\n   ${2}\n@elseif (${3:condition})\n   ${4}\n@else\n   ${5}\n@endif",
        "doc": "",
        "grammar": "snu",
        "label": "if elseif else endif",
        "matches": {
          "ifelse": true
        },
        "opts": {}
      },
      {
        "content": "@unless (${1:condition})\n    ${2}\n@endunless",
        "doc": "",
        "grammar": "snu",
        "label": "@unless ... @endunless",
        "matches": {
          "unless": true
        },
        "opts": {}
      },
      {
        "content": "@isset(${1})\n    ${2}\n@endisset",
        "doc": "",
        "grammar": "snu",
        "label": "@isset ... @endisset",
        "matches": {
          "isset": true
        },
        "opts": {}
      },
      {
        "content": "@empty(${1})\n    ${2}\n@endempty",
        "doc": "",
        "grammar": "snu",
        "label": "@empty ... @endempty",
        "matches": {
          "empty": true
        },
        "opts": {}
      },
      {
        "content": "@for ($i = 0; $i < ${1}; $i++)\n    ${2}\n@endfor",
        "doc": "",
        "grammar": "snu",
        "label": "@for ... @endfor",
        "matches": {
          "for": true
        },
        "opts": {}
      },
      {
        "content": "@foreach (${1} as ${2})\n    ${3}\n@endforeach",
        "doc": "",
        "grammar": "snu",
        "label": "@foreach ... @endforeach",
        "matches": {
          "foreach": true
        },
        "opts": {}
      },
      {
        "content": "@forelse (${1} as ${2})\n    ${3}\n@empty\n    ${4}\n@endforelse",
        "doc": "",
        "grammar": "snu",
        "label": "@forelse ... @empty ... @endforeach",
        "matches": {
          "forelse": true
        },
        "opts": {}
      },
      {
        "content": "@while (${1})\n    ${2}\n@endwhile",
        "doc": "",
        "grammar": "snu",
        "label": "@while ... @endwhile",
        "matches": {
          "while": true
        },
        "opts": {}
      },
      {
        "content": "{{-- ${1} --}}",
        "doc": "",
        "grammar": "snu",
        "label": "{{-- comments --}}",
        "matches": {
          "comment": true
        },
        "opts": {}
      },
      {
        "content": "@php\n    ${1}\n@endphp",
        "doc": "",
        "grammar": "snu",
        "label": "@php ... @endphp",
        "matches": {
          "php": true
        },
        "opts": {}
      },
      {
        "content": "@include('${1}')",
        "doc": "",
        "grammar": "snu",
        "label": "@include",
        "matches": {
          "include": true
        },
        "opts": {}
      },
      {
        "content": "@break",
        "doc": null,
        "grammar": "snu",
        "label": "@break",
        "matches": {
          "break": true
        },
        "opts": {}
      },
      {
        "content": "@component('$1')\n\t${2:${VISUAL}}\n@endcomponent",
        "doc": null,
        "grammar": "snu",
        "label": "@component directive",
        "matches": {
          "component": true
        },
        "opts": {}
      },
      {
        "content": "@each('$1', $$2, '$3')",
        "doc": null,
        "grammar": "snu",
        "label": "@each directive",
        "matches": {
          "each": true
        },
        "opts": {}
      },
      {
        "content": "@else",
        "doc": null,
        "grammar": "snu",
        "label": "@else directive",
        "matches": {
          "else": true
        },
        "opts": {}
      },
      {
        "content": "@else if ($1)\n\t${2:${VISUAL}}",
        "doc": null,
        "grammar": "snu",
        "label": "@else if directive",
        "matches": {
          "eif": true
        },
        "opts": {}
      },
      {
        "content": "@for ($1)\n\t${2:${VISUAL}}\n@endfor",
        "doc": null,
        "grammar": "snu",
        "label": "@for directive",
        "matches": {
          "for": true
        },
        "opts": {}
      },
      {
        "content": "@foreach ($$1 as $$2)\n\t${3:${VISUAL}}\n@endforeach",
        "doc": null,
        "grammar": "snu",
        "label": "@foreach directive",
        "matches": {
          "foreach": true
        },
        "opts": {}
      },
      {
        "content": "@extends('$1')",
        "doc": null,
        "grammar": "snu",
        "label": "@extends directive",
        "matches": {
          "extends": true
        },
        "opts": {}
      },
      {
        "content": "@if ($1)\n\t${2:${VISUAL}}\n@endif",
        "doc": null,
        "grammar": "snu",
        "label": "@if directive",
        "matches": {
          "if": true
        },
        "opts": {}
      },
      {
        "content": "@if ($1)\n\t${2:${VISUAL}}\n@else\n\t${3:${VISUAL}}\n@endif",
        "doc": null,
        "grammar": "snu",
        "label": "@if @else structure",
        "matches": {
          "ife": true
        },
        "opts": {}
      },
      {
        "content": "@include('$1')",
        "doc": null,
        "grammar": "snu",
        "label": "@include directive",
        "matches": {
          "include": true
        },
        "opts": {}
      },
      {
        "content": "@includeIf('$1')",
        "doc": null,
        "grammar": "snu",
        "label": "@includeIf directive",
        "matches": {
          "includeIf": true
        },
        "opts": {}
      },
      {
        "content": "@isset\n\t${1:${VISUAL}}\n@endisset",
        "doc": null,
        "grammar": "snu",
        "label": "@isset directive",
        "matches": {
          "isset": true
        },
        "opts": {}
      },
      {
        "content": "@inject('$1', '$2')",
        "doc": null,
        "grammar": "snu",
        "label": "@inject directive",
        "matches": {
          "inject": true
        },
        "opts": {}
      },
      {
        "content": "@lang('$1')",
        "doc": null,
        "grammar": "snu",
        "label": "@lang directive",
        "matches": {
          "lang": true
        },
        "opts": {
          "i": true
        }
      },
      {
        "content": "@php\n\t${1:${VISUAL}}\n@endphp",
        "doc": null,
        "grammar": "snu",
        "label": "@php directive",
        "matches": {
          "php": true
        },
        "opts": {}
      },
      {
        "content": "@push('$1')\n\t${2:${VISUAL}}\n@endpush",
        "doc": null,
        "grammar": "snu",
        "label": "@push directive",
        "matches": {
          "push": true
        },
        "opts": {}
      },
      {
        "content": "@section('$1')",
        "doc": null,
        "grammar": "snu",
        "label": "@section directive",
        "matches": {
          "section": true
        },
        "opts": {}
      },
      {
        "content": "@show",
        "doc": null,
        "grammar": "snu",
        "label": "@show directive",
        "matches": {
          "show": true
        },
        "opts": {}
      },
      {
        "content": "@slot('$1')\n\t${2:${VISUAL}}\n@endslot",
        "doc": null,
        "grammar": "snu",
        "label": "@slot directive",
        "matches": {
          "slot": true
        },
        "opts": {}
      },
      {
        "content": "@unless\n\t${1:${VISUAL}}\n@endunless",
        "doc": null,
        "grammar": "snu",
        "label": "@unless directive",
        "matches": {
          "unless": true
        },
        "opts": {}
      },
      {
        "content": "@verbatim\n\t${0:$VISUAL}\n@endverbatim",
        "doc": null,
        "grammar": "snu",
        "label": "@verbatim directive",
        "matches": {
          "verbatim": true
        },
        "opts": {}
      },
      {
        "content": "@while ($1)\n\t${2:${VISUAL}}\n@endwhile",
        "doc": null,
        "grammar": "snu",
        "label": "@while directive",
        "matches": {
          "wh": true
        },
        "opts": {}
      },
      {
        "content": "@yield('$1')",
        "doc": null,
        "grammar": "snu",
        "label": "@yield directive",
        "matches": {
          "yield": true
        },
        "opts": {}
      },
      {
        "content": "{{ $1 }}",
        "doc": null,
        "grammar": "snu",
        "label": "{{ }} statement.",
        "matches": {
          "{": true
        },
        "opts": {
          "i": true
        }
      },
      {
        "content": "{!! $1 !!}",
        "doc": null,
        "grammar": "snu",
        "label": "{!! !!} statement",
        "matches": {
          "{!": true
        },
        "opts": {
          "i": true
        }
      }
    ],
    "c": [
      {
        "content": "if (${1:#:condition}) {\n    ${0:TARGET}\n}",
        "doc": "",
        "grammar": "snu",
        "label": "if () {}",
        "matches": {
          "if": true
        },
        "opts": {
          "head": true
        }
      },
      {
        "content": "else {\n    ${0:TARGET}\n}",
        "doc": "",
        "grammar": "snu",
        "label": "else {}",
        "matches": {
          "else": true
        },
        "opts": {}
      },
      {
        "content": "else if (${1:#:condition}) {\n    ${0:TARGET}\n}",
        "doc": "",
        "grammar": "snu",
        "label": "else () {}",
        "matches": {
          "elseif": true
        },
        "opts": {}
      },
      {
        "content": "if (${1:#:condition}) {\n    ${2:TARGET}\n} else {\n    ${3}\n}",
        "doc": "",
        "grammar": "snu",
        "label": "if () {} else {}",
        "matches": {
          "ifelse": true
        },
        "opts": {
          "head": true
        }
      },
      {
        "content": "for (${1:int} ${2:i} = ${3:0}; $2 < ${4}; $2++) {\n    ${0:#:TARGET}\n}",
        "doc": "",
        "grammar": "snu",
        "label": "for () {}",
        "matches": {
          "for": true
        },
        "opts": {
          "head": true
        }
      },
      {
        "content": "for (int ${1:i} = 0; $1 < ${2}; $1++) {\n    ${0:#:TARGET}\n}",
        "doc": "",
        "grammar": "snu",
        "label": "for (int x;...; x++) {}",
        "matches": {
          "fori": true
        },
        "opts": {
          "head": true
        }
      },
      {
        "content": "for (int ${1:i} = ${2}; $1 >= 0; $1--) {\n    ${0:#:TARGET}\n}",
        "doc": "",
        "grammar": "snu",
        "label": "for (int x; ...; x--) {}",
        "matches": {
          "forri": true
        },
        "opts": {
          "head": true
        }
      },
      {
        "content": "while (${1:#:condition}) {\n    ${0:TARGET}\n}",
        "doc": "",
        "grammar": "snu",
        "label": "while () {}",
        "matches": {
          "while": true
        },
        "opts": {
          "head": true
        }
      },
      {
        "content": "do {\n    ${0:TARGET:code}\n} while (${1:#:condition});",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "do": true,
          "do_while": true
        },
        "opts": {
          "head": true
        }
      },
      {
        "content": "switch (${1:#:var}) {\n\tcase ${2:#:val}:\n\t\t${0:TARGET}\n\t\tbreak;\n}",
        "doc": "",
        "grammar": "snu",
        "label": "switch () {}",
        "matches": {
          "switch": true
        },
        "opts": {
          "head": true
        }
      },
      {
        "content": "case ${1}:\n\t${0}\n\tbreak;",
        "doc": "",
        "grammar": "snu",
        "label": "case: break;",
        "matches": {
          "case": true
        },
        "opts": {
          "head": true
        }
      },
      {
        "content": "(${1:#:condition}) ? ${2:#:a} : ${3:#:b}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "conditional": true
        },
        "opts": {}
      },
      {
        "content": "${1:void} ${2:#:func_name}(${3:void}) {\n    ${0:TARGET}\n}",
        "doc": "",
        "grammar": "snu",
        "label": "func() {}",
        "matches": {
          "func": true,
          "function": true
        },
        "opts": {
          "head": true
        }
      },
      {
        "content": "struct ${1:#:name} {\n    ${0:TARGET:data}\n};",
        "doc": "",
        "grammar": "snu",
        "label": "struct {}",
        "matches": {
          "struct": true
        },
        "opts": {
          "head": true
        }
      },
      {
        "content": "typedef struct ${1:#:name} {\n    ${0:TARGET:data}\n};",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "struct_typedef": true
        },
        "opts": {
          "head": true
        }
      },
      {
        "content": "enum ${1:#:name} {\n    ${0:TARGET}\n};",
        "doc": "",
        "grammar": "snu",
        "label": "enum {}",
        "matches": {
          "enum": true
        },
        "opts": {
          "head": true
        }
      },
      {
        "content": "int main(int argc, char* argv[])\n{\n\t${0:TARGET}\n\treturn 0;\n}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "main": true
        },
        "opts": {
          "head": true
        }
      },
      {
        "content": "#include <stdio.h>\nint main(int argc, char* argv[])\n{\n    puts(\"hello, world!\");\n    return 0;\n}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "helloworld": true
        },
        "opts": {
          "head": true
        }
      },
      {
        "content": "#include <${1:stdio}.h>",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "#inc, #include": true,
          "inc": true
        },
        "opts": {
          "head": true
        }
      },
      {
        "content": "#include \"${1}.h\"",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "#inc2, #include2": true,
          "inc2": true
        },
        "opts": {
          "head": true
        }
      },
      {
        "content": "#if ${1}\n${0}\n#endif",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "#if": true
        },
        "opts": {
          "head": true
        }
      },
      {
        "content": "#ifdef ${1:#:SYMBOL}\n${0}\n#endif",
        "doc": "",
        "grammar": "snu",
        "label": "#ifdef ... #endif",
        "matches": {
          "#ifdef": true,
          "ifdef": true
        },
        "opts": {
          "head": true
        }
      },
      {
        "content": "#ifndef $1\n#define ${1:#:SYMBOL}\n#endif${0}",
        "doc": "",
        "grammar": "snu",
        "label": "#ifndef ... #define ... #endif",
        "matches": {
          "#ifndef": true,
          "ifndef": true
        },
        "opts": {
          "head": true
        }
      },
      {
        "content": "#define ${1}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "#def, #define": true,
          "def": true
        },
        "opts": {
          "head": true
        }
      },
      {
        "content": "#ifndef ${1:#:SYMBOL}\n    #define $1\n    ${0:TARGET}\n#endif /* end of include guard */",
        "doc": "",
        "grammar": "snu",
        "label": "#ifndef ... #define ... #endif",
        "matches": {
          "include-guard": true,
          "once": true
        },
        "opts": {
          "head": true
        }
      },
      {
        "content": "printf(\"${1}\\n\"${2});",
        "doc": "",
        "grammar": "snu",
        "label": "printf(\"...\\n\", ...);",
        "matches": {
          "printf": true
        },
        "opts": {}
      },
      {
        "content": "scanf(\"${1}\", ${2});",
        "doc": "",
        "grammar": "snu",
        "label": "scanf(\"...\", ...);",
        "matches": {
          "scanf": true
        },
        "opts": {}
      },
      {
        "content": "fprintf(${1:stderr}, \"${2}\\n\"${3});",
        "doc": "",
        "grammar": "snu",
        "label": "fprintf(..., \"...\\n\", ...);",
        "matches": {
          "fprintf": true
        },
        "opts": {}
      },
      {
        "content": "fopen(\"${1:PATH}\", \"${2:MODE}\");\n${0:TARGET}\nfclose(${3:FD});",
        "doc": "",
        "grammar": "snu",
        "label": "fopen(\"...\", \"...\");",
        "matches": {
          "fopen": true
        },
        "opts": {}
      },
      {
        "content": "fgets(${0:ROW}, ${1:LENGTH}, ${2:stdin});",
        "doc": "",
        "grammar": "snu",
        "label": "fgets(row, length, file);",
        "matches": {
          "fgets": true
        },
        "opts": {}
      },
      {
        "content": "fscanf(${1:stdin}, \"${2}\", ${3});",
        "doc": "",
        "grammar": "snu",
        "label": "fscanf(file, \"...\", ...);",
        "matches": {
          "fscanf": true
        },
        "opts": {}
      },
      {
        "content": "fwrite(${1:ARRAY}, sizeof(${2:TYPE}), ${3:N_MEMBERS}, ${4:FILE})",
        "doc": "",
        "grammar": "snu",
        "label": "fwrite(......, file)",
        "matches": {
          "fwrite": true
        },
        "opts": {}
      },
      {
        "content": "fread(${1:ARRAY}, sizeof(${2:TYPE}), ${3:N_MEMBERS}, ${4:FILE})",
        "doc": "",
        "grammar": "snu",
        "label": "fread(......, file)",
        "matches": {
          "fread": true
        },
        "opts": {}
      },
      {
        "content": "memcpy(${1:DEST}, ${2:SRC}, ${3:NBYTES})",
        "doc": "",
        "grammar": "snu",
        "label": "memcpy(dest, src, nbytes)",
        "matches": {
          "memcpy": true
        },
        "opts": {}
      },
      {
        "content": "($2 *)malloc(${1:N_MEMBERS} * sizeof(${2:TYPE}));\n${0}\nfree(${3:MEM});",
        "doc": "",
        "grammar": "snu",
        "label": "malloc(size)",
        "matches": {
          "malloc": true
        },
        "opts": {}
      },
      {
        "content": "($2 *)calloc(${1:N_MEMBERS}, sizeof(${2:TYPE}));\n${0}\nfree(${3:MEM});",
        "doc": "",
        "grammar": "snu",
        "label": "calloc(n, size)",
        "matches": {
          "calloc": true
        },
        "opts": {}
      },
      {
        "content": "($3 *)realloc(${1:OLD}, ${2:N_MEMBERS} * sizeof(${3:TYPE}));\n${0}",
        "doc": "",
        "grammar": "snu",
        "label": "realloc(old, size)",
        "matches": {
          "realloc": true
        },
        "opts": {}
      },
      {
        "content": "srand(time(NULL));",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "seed_rand": true
        },
        "opts": {}
      },
      {
        "content": "typedef ${1:#:base_type} ${2:#:custom_type};",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "typedef": true
        },
        "opts": {}
      },
      {
        "content": "sizeof(${0:TARGET})",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "size": true,
          "sizeof": true
        },
        "opts": {}
      },
      {
        "content": "(sizeof(${1:#:array}) / sizeof(*($1)))",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "array_size": true,
          "sizeof_array": true
        },
        "opts": {}
      },
      {
        "content": "_Static_assert(${1:#:condition}, ${2:#:message});",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "_Static_assert": true,
          "_static_assert": true
        },
        "opts": {
          "head": true
        }
      },
      {
        "content": "static_assert(${1:#:condition}, ${2:#:message});",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "static_assert": true
        },
        "opts": {
          "head": true
        }
      },
      {
        "content": "_Generic(${1:#:expression}, ${2:#:association-list})",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "_Generic": true,
          "generic, select": true
        },
        "opts": {}
      },
      {
        "content": "va_list ${1:ap};\nva_start($1, ${2:LAST_ARG});\n${0}\nva_end($1);",
        "doc": "",
        "grammar": "snu",
        "label": "va_start(va_list, last_arg); ... ; va_end()",
        "matches": {
          "va_list": true
        },
        "opts": {
          "head": true
        }
      },
      {
        "content": "/* ${1:#:comment} */\n${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "/*": true,
          "comment": true
        },
        "opts": {}
      },
      {
        "content": "/**\n * @brief    ${1:function description}\n *\n * @details  ${2:detailed description}\n *\n * @param    ${3:param}\n *\n * @return   ${4:return type}\n */",
        "doc": "",
        "grammar": "snu",
        "label": "/** @brief ...",
        "matches": {
          "doxy": true
        },
        "opts": {
          "head": true
        }
      },
      {
        "content": "int main(int argc, char *argv[])\n{\n\t${0}\n\treturn 0;\n}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "main": true
        },
        "opts": {}
      },
      {
        "content": "int main(void)\n{\n\t${0}\n\treturn 0;\n}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "mainn": true
        },
        "opts": {}
      },
      {
        "content": "#include <${1:stdio}.h>",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "inc": true
        },
        "opts": {}
      },
      {
        "content": "#ifndef $1\n#define ${1:SYMBOL} ${2:value}\n#endif /* ifndef $1 */",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ndef": true
        },
        "opts": {}
      },
      {
        "content": "#define",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "def": true
        },
        "opts": {}
      },
      {
        "content": "#ifdef ${1:FOO}\n\t${2:#define }\n#endif",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ifdef": true
        },
        "opts": {}
      },
      {
        "content": "#if ${1:FOO}\n\t${0:${VISUAL}}\n#endif",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "#if": true
        },
        "opts": {}
      },
      {
        "content": "#ifdef __cplusplus\nextern \"C\" {\n#endif\n${0}\n#ifdef __cplusplus\n} /* extern \"C\" */\n#endif",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "nocxx": true
        },
        "opts": {}
      },
      {
        "content": "if (${1:true}) {\n\t${0:${VISUAL}}\n}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "if": true
        },
        "opts": {}
      },
      {
        "content": "if (${1:true}) {\n\t${2:${VISUAL}}\n} else {\n\t${0}\n}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ife": true
        },
        "opts": {}
      },
      {
        "content": "else {\n\t${0:${VISUAL}}\n}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "el": true
        },
        "opts": {}
      },
      {
        "content": "else if (${1:true}) {\n\t${0:${VISUAL}}\n}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "elif": true
        },
        "opts": {}
      },
      {
        "content": "if (${1:true}) ${0};",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ifi": true
        },
        "opts": {}
      },
      {
        "content": "${1:/* condition */} ? ${2:a} : ${3:b}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "t": true
        },
        "opts": {}
      },
      {
        "content": "switch (${1:/* variable */}) {\n\tcase ${2:/* variable case */}:\n\t\t${3}\n\t\t${4:break;}${5}\n\tdefault:\n\t\t${6}\n}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "switch": true
        },
        "opts": {}
      },
      {
        "content": "switch (${1:/* variable */}) {\n\tcase ${2:/* variable case */}:\n\t\t${3}\n\t\t${4:break;}${5}\n}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "switchndef": true
        },
        "opts": {}
      },
      {
        "content": "case ${1:/* variable case */}:\n\t${2}\n\t${3:break;}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "case": true
        },
        "opts": {}
      },
      {
        "content": "return ${0};",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ret": true
        },
        "opts": {}
      },
      {
        "content": "for (int ${2:i} = 0; $2 < ${1:count}; $2${3:++}) {\n\t${4}\n}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "for": true
        },
        "opts": {}
      },
      {
        "content": "for (int ${1:i} = ${2:0}; ${3:$1 < 10}; $1${4:++}) {\n\t${5}\n}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "forr": true
        },
        "opts": {}
      },
      {
        "content": "while (${1:/* condition */}) {\n\t${0:${VISUAL}}\n}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "wh": true
        },
        "opts": {}
      },
      {
        "content": "do {\n\t${0:${VISUAL}}\n} while (${1:/* condition */});",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "do": true
        },
        "opts": {}
      },
      {
        "content": "${1:void} ${2:function_name}(${3})\n{\n\t${4}\n}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "fun": true
        },
        "opts": {}
      },
      {
        "content": "${1:void} ${2:function_name}()\n{\n\t${3}\n}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "fun0": true
        },
        "opts": {}
      },
      {
        "content": "/*! \\brief ${1:Brief function description here}\n *\n *  ${2:Detailed description of the function}\n *\n * \\return ${3:Return parameter description}\n */\n${4:void} ${5:function_name}()\n{\n\t${6}\n}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "dfun0": true
        },
        "opts": {}
      },
      {
        "content": "${1:void} ${2:function_name}(${3:Type} ${4:Parameter})\n{\n\t${5}\n}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "fun1": true
        },
        "opts": {}
      },
      {
        "content": "/*! \\brief ${1:Brief function description here}\n *\n *  ${2:Detailed description of the function}\n *\n * \\param $3 ${4:Parameter description}\n * \\return ${5:Return parameter description}\n */\n${6:void} ${7:function_name}(${8:Type} ${3:Parameter})\n{\n\t${9}\n}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "dfun1": true
        },
        "opts": {}
      },
      {
        "content": "${1:void} ${2:function_name}(${3:Type} ${4:Parameter}, ${5:Type} ${6:Parameter})\n{\n\t${7}\n}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "fun2": true
        },
        "opts": {}
      },
      {
        "content": "/*! \\brief ${1:Brief function description here}\n *\n *  ${2:Detailed description of the function}\n *\n * \\param $3 ${4:Parameter description}\n * \\param $5 ${6:Parameter description}\n * \\return ${7:Return parameter description}\n */\n${8:void} ${9:function_name}(${10:Type} ${3:Parameter}, ${11:Type} ${5:Parameter})\n{\n\t${12}\n}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "dfun2": true
        },
        "opts": {}
      },
      {
        "content": "${1:void} ${2:function_name}(${3:Type} ${4:Parameter}, ${5:Type} ${6:Parameter}, ${7:Type} ${8:Parameter})\n{\n\t${9}\n}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "fun3": true
        },
        "opts": {}
      },
      {
        "content": "/*! \\brief ${1:Brief function description here}\n *\n *  ${2:Detailed description of the function}\n *\n * \\param $3 ${4:Parameter description}\n * \\param $5 ${6:Parameter description}\n * \\param $7 ${8:Parameter description}\n * \\return ${9:Return parameter description}\n */\n${10:void} ${11:function_name}(${12:Type} ${3:Parameter}, ${13:Type} ${5:Parameter}, ${14:Type} ${7:Parameter})\n{\n\t${15}\n}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "dfun3": true
        },
        "opts": {}
      },
      {
        "content": "${1:void} ${2:function_name}(${3});",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "fund": true
        },
        "opts": {}
      },
      {
        "content": "typedef ${1:int} ${2:MyCustomType};",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "td": true
        },
        "opts": {}
      },
      {
        "content": "/*! \\enum $1\n *\n *  ${2:Detailed description}\n */\nenum ${1:name} { ${0} };",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "enum": true
        },
        "opts": {}
      },
      {
        "content": "/*! \\enum $2\n *\n *  ${4:Detailed description}\n */\ntypedef enum {\n\t${1:Data} /*!< ${3:Description} */\n} ${2:foo};",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "tde": true
        },
        "opts": {}
      },
      {
        "content": "printf(\"${1:%s}\\n\"${2});",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "pr": true
        },
        "opts": {}
      },
      {
        "content": "fprintf(${1:stderr}, \"${2:%s}\\n\"${3});",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "fpr": true
        },
        "opts": {}
      },
      {
        "content": "printf(\"${1:} = %d\\n\", $1);",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "prd": true
        },
        "opts": {}
      },
      {
        "content": "printf(\"${1:} = %f\\n\", $1);",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "prf": true
        },
        "opts": {}
      },
      {
        "content": "printf(\"${1:} = %${2}\\n\", $1);",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "prx": true
        },
        "opts": {}
      },
      {
        "content": "int choice;\nwhile (1)\n{\n\tstatic struct option long_options[] =\n\t{\n\t\t/* Use flags like so:\n\t\t{\"verbose\",\tno_argument,\t&verbose_flag, 'V'}*/\n\t\t/* Argument styles: no_argument, required_argument, optional_argument */\n\t\t{\"version\", no_argument,\t0,\t'v'},\n\t\t{\"help\",\tno_argument,\t0,\t'h'},\n\t\t${1}\n\t\t{0,0,0,0}\n\t};\n\tint option_index = 0;\n\t/* Argument parameters:\n\t\tno_argument: \" \"\n\t\trequired_argument: \":\"\n\t\toptional_argument: \"::\" */\n\tchoice = getopt_long( argc, argv, \"vh\",\n\t\t\t\tlong_options, &option_index);\n\tif (choice == -1)\n\t\tbreak;\n\tswitch( choice )\n\t{\n\t\tcase 'v':\n\t\t\t${2}\n\t\t\tbreak;\n\t\tcase 'h':\n\t\t\t${3}\n\t\t\tbreak;\n\t\tcase '?':\n\t\t\t/* getopt_long will have already printed an error */\n\t\t\tbreak;\n\t\tdefault:\n\t\t\t/* Not sure how to get here... */\n\t\t\treturn EXIT_FAILURE;\n\t}\n}\n/* Deal with non-option arguments here */\nif ( optind < argc )\n{\n\twhile ( optind < argc )\n\t{\n\t\t${0}\n\t}\n}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "getopt": true
        },
        "opts": {}
      },
      {
        "content": "/*! TODO: ${1:Todo description here}\n *  \\todo $1\n */",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "todo": true
        },
        "opts": {}
      },
      {
        "content": "[${1}]",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          ".": true
        },
        "opts": {}
      },
      {
        "content": "__asm__ __volatile__(\n\"${0}\\n\\t\"\n:\n:\n);",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "asm": true
        },
        "opts": {}
      }
    ],
    "chef": [
      {
        "content": "# Cookbook File resource\ncookbook_file ${1:\"/path/to/file\"} do # The remote path where the file will reside\n\t${2:#}backup ${3} # How many backups of this file to keep. Set to false  if you want no backups\n\t${4:#}group ${5} # The group owner of the file (string or id)\n\t${6:#}mode ${7} # The octal mode of the file - e.g. 0755\n\t${8:#}owner ${9} # The owner for the file\n\t${10:#}source ${11} # The basename of the source file\n\t${12:#}cookbook ${13} # The cookbook this file is stored in\n\t${14:#}${15: action :create} # Create this file (Default)\n\t${16:#}${17: action :create_if_missing} # Create only if it doesn't exist yet\n\t${18:#}${0: action :delete} # Delete this file\nend",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "cookbook_file": true
        },
        "opts": {}
      },
      {
        "content": "# Execute resource\nexecute ${1:\"command to execute\"} do # The command to execute\n\t${2:#}creates ${3:nil} # A file this command creates - if the file exists, the command will not be run.\n\t${4:#}cwd ${5:nil} # Current working directory to run the command from.\n\t${6:#}environment ${7:nil} # A hash of environment variables to set before running this command.\n\t${8:#}group ${9:nil} # A group name or group ID that we should change to before running this command.\n\t${10:#}path ${11:nil} # An array of paths to use when searching for the command. Nil uses system path.\n\t${12:#}returns ${13:0} # The return value of the command - this resource raises an exception if the return value does not match.\n\t${14:#}timeout ${15:nil} # How many seconds to let the command run before timing it out.\n\t${16:#}user ${17:nil} # A user name or user ID that we should change to before running this command.\n\t${18:#}umask ${19:nil} # Umask for files created by the command\n\t${20:#}${21:action :run} # Run this command (Default)\n\t${22:#}${0:action :nothing} # Do not run this command\nend",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "execute": true
        },
        "opts": {}
      },
      {
        "content": "# Link resource\nlink ${1:\"/target/file\"} do # The file name of the link\n\t${2:#}to ${3} # The real file you want to link to\n\t${4:#}link_type ${5:symbolic} # Either :symbolic or :hard\n\t${6:#}owner ${7} # The owner of the symlink\n\t${8:#}group ${9} # The group of the symlink\n\t${10:#}${11:action :create} # Create a link (Default)\n\t${12:#}${0:action :delete} # Delete a link\nend",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "link": true
        },
        "opts": {}
      },
      {
        "content": "# Package resource\npackage ${1:\"package_name\"} do # Name of the package to install\n\t${2:#}version ${3:nil} # The version of the package to install/upgrade\n\t${4:#}response_file ${5:nil} # An optional response file - used to pre-seed packages (note: the file is fetched by Remote File)\n\t${6:#}source ${7} # Used to provide an optional package source for providers that use a local file (rubygems, dpkg and rpm)\n\t${8:#}options ${9:nil} # Add additional options to the underlying package command\n\t${10:#}gem_binary ${11:gem} # A gem_package attribut to specify a gem binary. Useful for installing ruby 1.9 gems while running chef in ruby 1.8\n\t${12:#}${13:action :install} # Install a package - if version is provided, install that specific version (Default)\n\t${14:#}${15:action :upgrade} # Upgrade a package - if version is provided, upgrade to that specific version\n\t${16:#}${17:action :remove} # Remove a package\n\t${18:#}${0:action :purge} # Purge a package (this usually entails removing configuration files as well as the package itself)\nend",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "package": true
        },
        "opts": {}
      },
      {
        "content": "# Service resource\nservice ${1:\"service_name\"} do # Name of the service\n\t${2:#}enabled ${3:nil} # Whether the service is enabled at boot time\n\t${4:#}running ${5:nil} # Make sure the service is running. Start if stopped\n\t${6:#}pattern ${7} # Pattern to look for in the process table\n\t${8:#}start_command ${9:nil} # Command used to start this service\n\t${10:#}stop_command ${11:nil} # Command used to stop this service\n\t${12:#}status_command ${13:nil} # Command used to check the service run status\n\t${14:#}restart_command ${15:nil} # Command used to restart this service\n\t${16:#}reload_command ${17:nil} # Command used to tell this service to reload its configuration\n\t${18:#}supports ${19:false} # Features this service supports, ie :restart, :reload, :status\n\t${20:#}${21:action :enable} # Enable this service\n\t${22:#}${23:action :disable} # Disable this service\n\t${24:#}${25:action :nothing} # Don't do anything with this service (Default)\n\t${26:#}${27:action :start} # Start this service\n\t${28:#}${29:action :stop} # Stop this service\n\t${30:#}${31:action :restart} # Restart this service\n\t${32:#}${0:action :reload} # Reload the configuration for this service\nend",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "service": true
        },
        "opts": {}
      },
      {
        "content": "# File resource\nfile ${1:\"/path/to/file\"} do # Path to the file\n\t${2:#}backup ${3:5} # How many backups of this file to keep. Set to false if you want no backups.\n\t${4:#}owner ${5} # The owner for the file\n\t${6:#}group ${7} # The group owner of the file (string or id)\n\t${8:#}mode ${9} # The octal mode of the file (4-digit format)\n\t${10:#}content ${11:nil} # A string to write to the file. This will replace any previous content if set\n\t${12:#}${13:action :create} # Create this file (Default)\n\t${14:#}${15:action :delete} # Delete this file\n\t${16:#}${0:action :touch} # Touch this file (update the mtime/atime)\nend",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "file": true
        },
        "opts": {}
      },
      {
        "content": "# Directory resource\ndirectory ${1:\"/path/to/dir\"} do # The path to the directory\n\t${2:#}group ${3} # The group owner of the directory (string or id)\n\t${4:#}mode ${5} # The octal mode of the directory, eg 0755\n\t${6:#}owner ${7} # The owner for the directory\n\t${10:#}recursive ${11:false} # When deleting the directory, delete it recursively. When creating the directory, create recursively (ie, mkdir -p)\n\t${12:#}${13:action :create} # Create this directory (Default)\n\t${14:#}${0:action :delete} # Delete this directory\nend",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "directory": true
        },
        "opts": {}
      },
      {
        "content": "# Template resource\ntemplate ${1:\"/path/to/file\"} do # Path to the file\n\t${2:#}cookbook ${3:nil} # Specify the cookbook where the template is located, default is current cookbook\n\t${4:#}source ${5:nil} # Template source file. Found in templates/default for the cookbook\n\t${6:#}variables ${7} # Variables to use in the template\n\t${8:#}local ${9:false} # Is the template already present on the node?\n\t${10:#}backup ${11:5} # How many backups of this file to keep. Set to false if you want no backups.\n\t${12:#}owner ${13} # The owner for the file\n\t${14:#}group ${15} # The group owner of the file (string or id)\n\t${16:#}mode ${17} # The octal mode of the file (4-digit format)\n\t${18:#}content ${19:nil} # A string to write to the file. This will replace any previous content if set\n\t${20:#}${21:action :create} # Create the file (Default)\n\t${22:#}${23:action :delete} # Delete this file\n\t${24:#}${0:action :touch} # Touch this file (update the mtime/atime)\nend",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "template": true
        },
        "opts": {}
      },
      {
        "content": "# SCM Resource, Chef::Provider::Subversion\nsvn ${1:\"/destination/path\"} do # Path to clone/checkout/export the source to\n\t${2:#}repository ${3} # URI of the repository\n\t${4:#}revision ${5:\"HEAD\"} # revision to checkout. can be symbolic, like \"HEAD\" or an SCM specific revision id\n\t${6:#}reference ${7} # (Git only) alias for revision\n\t${8:#}user ${9:nil} # System user to own the checked out code\n\t${10:#}group ${11:nil} # System group to own the checked out code\n\t${12:#}svn_username ${13} # (Subversion only) Username for Subversion operations\n\t${14:#}svn_password ${15} # (Subversion only) Password for Subversion operations\n\t${16:#}svn_arguments ${17} # (Subversion only) Extra arguments passed to the subversion command\n\t${18:#}${19:action :sync} # Update the source to the specified revision, or get a new checkout (Default)\n\t${20:#}${21:action :checkout} # Checkout the source. Does nothing if a checkout is available\n\t${22:#}${0:action :export} # Export the source, excluding or removing any version control artifacts\nend",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "svn": true
        },
        "opts": {}
      },
      {
        "content": "# SCM Resource, Chef::Provider::Git\ngit ${1:\"/destination/path\"} do # Path to clone/checkout/export the source to\n\t${2:#}repository ${3} # URI of the repository\n\t${4:#}revision ${5:\"HEAD\"} # revision to checkout. can be symbolic, like \"HEAD\" or an SCM specific revision id\n\t${6:#}reference ${7} # (Git only) alias for revision\n\t${8:#}user ${9:nil} # System user to own the checked out code\n\t${10:#}group ${11:nil} # System group to own the checked out code\n\t${12:#}depth ${13:nil} # (Git only) Number of past revisions to include in Git shallow clone\n\t${14:#}enable_submodules ${15:\"false\"} # (Git only) performs a submodule init and submodule update\n\t${16:#}remote ${17:\"origin\"} # (Git only) remote repository to use for syncing an existing clone\n\t${18:#}ssh_wrapper ${19} # (Git only) path to a wrapper script for running SSH with git. GIT_SSH environment variable is set to this.\n\t${20:#}${21:action :sync} # Update the source to the specified revision, or get a new clone (Default)\n\t${22:#}${23:action :checkout} # Clone the source. Does nothing if a checkout is available\n\t${24:#}${0:action :export} # Export the source, excluding or removing any version control artifacts\nend",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "git": true
        },
        "opts": {}
      },
      {
        "content": "# Deploy resource\ndeploy ${1:\"/deploy/dir/\"} do # Path to deploy to\n\t${2:#}deploy_to ${3} # The \"meta root\" for your application.\n\t${4:#}repository ${5} # URI of the repository\n\t${6:#}repo ${7} # alias for repository\n\t${8:#}revision ${9:\"HEAD\"} # revision to checkout. can be symbolic, like \"HEAD\" or an SCM specific revision id\n\t${10:#}branch ${11} # alias for revision\n\t${12:#}user ${13:nil} # System user to run the deploy as\n\t${14:#}group ${15:nil} # System group to run the deploy as\n\t${16:#}svn_username ${17} # (Subversion only) Username for Subversion operations}\n\t${18:#}svn_password ${19} # (Subversion only) Password for Subversion operations}\n\t${20:#}svn_arguments ${21} # (Subversion only) Extra arguments passed to the subversion command}\n\t${22:#}shallow_clone ${23:nil} # (Git only) boolean, true sets clone depth to 5\n\t${24:#}enable_submodules ${25:false} # (Git only) performs a submodule init and submodule update\n\t${26:#}remote ${27:\"origin\"} # (Git only) remote repository to use for syncing an existing clone\n\t${28:#}ssh_wrapper ${29} # (Git only) path to a wrapper script for running SSH with git. GIT_SSH environment variable is set to this.\n\t${30:#}git_ssh_wrapper ${31} # alias for ssh_wrapper\n\t${32:#}scm_provider ${33:Chef::Provider::Git} # SCM Provider to use.\n\t${34:#}repository_cache ${35: \"cached-copy\"} # Name of the subdirectory where the pristine copy of your app's source is kept\n\t${36:#}environment ${37} # A hash of the form {\"ENV_VARIABLE\"=>\"VALUE\"}}\n\t${38:#}purge_before_symlink ${39:%w(log tmp/pids public/system)} # An array of paths, relative to app root, to be removed from a checkout before symlinking\n\t${40:#}create_dirs_before_symlink ${41:%w(tmp public config)} # Directories to create before symlinking. Runs after purge_before_symlink\n\t${42:#}symlinks ${43:\"system\" => \"public/system\", \"pids\" => \"tmp/pids\", \"log\" => \"log\"} # A hash that maps files in the shared directory to their paths in the current release\n\t${44:#}symlink_before_migrate ${45:\"config/database.yml\" => \"config/database.yml\"} # A hash that maps files in the shared directory into the current release. Runs before migration\n\t${46:#}migrate ${47:false} # Should the migration command be executed? (true or false)\n\t${48:#}migration_command ${49} # A string containing a shell command to execute to run the migration\n\t${50:#}restart_command ${51:nil} # A code block to evaluate or a string containing a shell command\n\t${52:#}before_migrate ${53:\"deploy/before_migrate.rb\"} # A block or path to a file containing chef code to run before migrating\n\t${54:#}before_symlink ${55:\"deploy/before_symlink.rb\"} # A block or path to a file containing chef code to run before symlinking\n\t${56:#}before_restart ${57:\"deploy/before_restart.rb\"} # A block or path to a file containing chef code to run before restarting\n\t${58:#}after_restart ${59:\"deploy/after_restart.rb\"} # A block or path to a file containing chef code to run after restarting\n\t${60:#}${61::deploy} # Deploy the application (Default)\n\t${62:#}${63::force_deploy} # For the revision deploy strategy, this removes any existing release of the same code version and re-deploys in its place\n\t${64:#}${0::rollback} # Rollback the application to the previous release\nend",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "deploy": true
        },
        "opts": {}
      }
    ],
    "classnames": [
      {
        "content": "${1:classNames}('${2:foo}', '${3:bar}');",
        "doc": null,
        "grammar": "lsp",
        "label": "classnames-usage",
        "matches": {
          "classnames usage": true
        },
        "opts": {}
      },
      {
        "content": "${1:classNames}({ '${2:foo-bar}': true });",
        "doc": null,
        "grammar": "lsp",
        "label": "classnames-usage-object",
        "matches": {
          "classnames usage object": true
        },
        "opts": {}
      },
      {
        "content": "import ${1:classNames} from 'classnames/bind';",
        "doc": null,
        "grammar": "lsp",
        "label": "classnames-import-bind",
        "matches": {
          "classnames import bind": true
        },
        "opts": {}
      },
      {
        "content": "const ${1:cx} = ${2:classNames}.bind(styles);",
        "doc": null,
        "grammar": "lsp",
        "label": "classnames-bind-usage",
        "matches": {
          "classnames bind usage": true
        },
        "opts": {}
      }
    ],
    "clojure": [
      {
        "content": "(defn ${1:name}\n\t\"${2:doc}\"\n\t[${3}]\n\t${0})",
        "doc": "",
        "grammar": "snu",
        "label": "defn function \"...\" [...] ...",
        "matches": {
          "defn-doc": true
        },
        "opts": {
          "head": true
        }
      },
      {
        "content": "(try\n\t${1}\n\t(catch ${2:Exception} e ${3:nil}))",
        "doc": "",
        "grammar": "snu",
        "label": "(try ... (catch ...",
        "matches": {
          "try": true
        },
        "opts": {}
      },
      {
        "content": "(dosync\n\t(ref-set ${1:ref} ${2:value}))",
        "doc": "",
        "grammar": "snu",
        "label": "(dosync (ref-set ...",
        "matches": {
          "ref-set": true
        },
        "opts": {
          "head": true
        }
      },
      {
        "content": "(binding [*out* *err*]\n  (println ${0:TARGET}))",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "warn": true
        },
        "opts": {
          "head": true
        }
      },
      {
        "content": "(defrecord ${1:record} [${2:constructor-args}]\n  ${3:protocol} (${3:method} [${5}] ${6}))",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "defrecord": true
        },
        "opts": {
          "head": true
        }
      },
      {
        "content": "(defrecord ${1:type} [${2:constructor-args}]\n  ${3:protocol} (${3:method} [${5}] ${6}))",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "deftype": true
        },
        "opts": {
          "head": true
        }
      },
      {
        "content": "(ns ${1:example}\n  (:require [clojure.core.match :as m]))\n; vim: set lispwords+=m/match :",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "require-core-match": true
        },
        "opts": {
          "head": true
        }
      },
      {
        "content": "(deftest ${1:a}-test\n  (testing \"${2:hello}\"\n    ${0:TARGET:(is (= 0 1))}))",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "deftest": true
        },
        "opts": {
          "head": true
        }
      },
      {
        "content": "(:require [clojure.core.strint :refer (<<)])",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "use-strint-in-ns": true
        },
        "opts": {
          "head": true
        }
      },
      {
        "content": "[org.clojars.hozumi/clj-glob \"0.1.2\"]\n(:require [org.satta.glob :as g])\n(g/glob \"${0:TARGET}\")",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "dir-glob": true
        },
        "opts": {
          "head": true
        }
      },
      {
        "content": "(Thread/sleep ${1})",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "sleep": true
        },
        "opts": {}
      },
      {
        "content": "(defproject ${1:aaa} \"0.1-SNAPSHOT\"\n  :description \"FIXME: write description\"\n  :url \"https://github.com/${2}\"\n  :license {:name \"GNU GPL v3+\"\n            :url \"http://www.gnu.org/licenses/gpl-3.0.en.html\"}\n  :dependencies [[org.clojure/clojure \"1.7.0\"]]\n  :main ^:skip-aot ${3:aaa.core}\n  :target-path \"target/%s\"\n  :min-lein-version \"2.3.0\")",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "defproejct": true
        },
        "opts": {
          "head": true
        }
      },
      {
        "content": "(let [bench-before (System/currentTimeMillis)]\n  ${1:TARGET}\n  (prn 'Took (- (System/currentTimeMillis) bench-before) 'msec))",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "bench": true
        },
        "opts": {}
      },
      {
        "content": "@#'",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "private": true
        },
        "opts": {
          "word": true
        }
      },
      {
        "content": "(:members (clojure.reflect/refrect ${1}))",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "java-methods": true
        },
        "opts": {
          "head": true
        }
      },
      {
        "content": "(comment\n\t${0})",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "comm": true
        },
        "opts": {}
      },
      {
        "content": "(condp ${1:pred} ${2:expr}\n\t${0})",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "condp": true
        },
        "opts": {}
      },
      {
        "content": "(def ${0})",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "def": true
        },
        "opts": {}
      },
      {
        "content": "(defmethod ${1:multifn} \"${2:doc-string}\" ${3:dispatch-val} [${4:args}]\n\t${0:code})",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "defm": true
        },
        "opts": {}
      },
      {
        "content": "(defmulti ${1:name} \"${2:doc-string}\" ${0:dispatch-fn})",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "defmm": true
        },
        "opts": {}
      },
      {
        "content": "(defmacro ${1:name} \"${2:doc-string}\" ${0:dispatch-fn})",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "defma": true
        },
        "opts": {}
      },
      {
        "content": "(defn ${1:name} \"${2:doc-string}\" [${3:arg-list}]\n\t${0:code})",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "defn": true
        },
        "opts": {}
      },
      {
        "content": "(defprotocol ${1:name}\n\t${0:code})",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "defp": true
        },
        "opts": {}
      },
      {
        "content": "(defrecord ${1:name} [${2:fields}]\n\t${3:protocol}\n\t${0:code})",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "defr": true
        },
        "opts": {}
      },
      {
        "content": "(deftest ${1:name}\n\t(is (= ${0:assertion})))",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "deft": true
        },
        "opts": {}
      },
      {
        "content": "(is (= ${1} ${0}))",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "is": true
        },
        "opts": {}
      },
      {
        "content": "(deftype ${1:Name} [${2:fields}]\n\t${3:Protocol}\n\t${0:code})",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "defty": true
        },
        "opts": {}
      },
      {
        "content": "(doseq [${1:elem} ${2:coll}]\n\t${0:code})",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "doseq": true
        },
        "opts": {}
      },
      {
        "content": "(fn [${1:arg-list}] ${0:code})",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "fn": true
        },
        "opts": {}
      },
      {
        "content": "(if ${1:test-expr}\n\t${2:then-expr}\n\t${0:else-expr})",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "if": true
        },
        "opts": {}
      },
      {
        "content": "(if-let [${1:result} ${2:test-expr}]\n\t(${3:then-expr} $1)\n\t(${0:else-expr}))",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "if-let": true
        },
        "opts": {}
      },
      {
        "content": "(:import [${1:package}])\n\t& {:keys [${1:keys}] :or {${0:defaults}}}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "imp": true
        },
        "opts": {}
      },
      {
        "content": "(let [${1:name} ${2:expr}]\n\t${0:code})",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "let": true
        },
        "opts": {}
      },
      {
        "content": "(letfn [(${1:name}) [${2:args}]\n\t${0:code})])",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "letfn": true
        },
        "opts": {}
      },
      {
        "content": "(map ${1:func} ${0:coll})",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "map": true
        },
        "opts": {}
      },
      {
        "content": "(map #(${1:lambda}) ${0:coll})",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "mapl": true
        },
        "opts": {}
      },
      {
        "content": "(${1:name} [${2:this} ${3:args}]\n\t${0:code})",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "met": true
        },
        "opts": {}
      },
      {
        "content": "(ns ${0:name})",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ns": true
        },
        "opts": {}
      },
      {
        "content": "(dotimes [_ 10]\n\t(time\n\t\t(dotimes [_ ${1:times}]\n\t\t\t${0:code})))",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "dotimes": true
        },
        "opts": {}
      },
      {
        "content": "(${1:name} [${2:this} ${0:args}])",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "pmethod": true
        },
        "opts": {}
      },
      {
        "content": "(:refer-clojure :exclude [${0}])",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "refer": true
        },
        "opts": {}
      },
      {
        "content": "(:require [${1:namespace} :as [${0}]])",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "require": true
        },
        "opts": {}
      },
      {
        "content": "(:use [${1:namespace} :only [${0}]])",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "use": true
        },
        "opts": {}
      },
      {
        "content": "(println ${0})",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "print": true
        },
        "opts": {}
      },
      {
        "content": "(reduce ${1:(fn [p n] ${3})} ${2})",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "reduce": true
        },
        "opts": {}
      },
      {
        "content": "(when ${1:test} ${0:body})",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "when": true
        },
        "opts": {}
      },
      {
        "content": "(when-let [${1:result} ${2:test}]\n\t${0:body})",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "when-let": true
        },
        "opts": {}
      }
    ],
    "cmake": [
      {
        "content": "project(${1:project_name})\nset(${2:PROJECT}_VERSION_MAJOR 0)\nset($2_VERSION_MINOR 0)\nset($2_VERSION_TEENY 1)\nset(PACKAGE_VERSION \"${$2_VERSION_MAJOR}.${$2_VERSION_MINOR}.${$2_VERSION_TEENY}\")\ncmake_minimum_required(VERSION ${3:2.8})\n${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "new_project": true
        },
        "opts": {
          "head": true
        }
      },
      {
        "content": "if(${1:#:condition})\n\t${0}\nendif()",
        "doc": "",
        "grammar": "snu",
        "label": "if() endif()",
        "matches": {
          "if": true
        },
        "opts": {
          "head": true
        }
      },
      {
        "content": "if(${1:#:condition})\n\t${2}\nelse()\n\t${3}\nendif()",
        "doc": "",
        "grammar": "snu",
        "label": "if() else() endif()",
        "matches": {
          "if_else": true
        },
        "opts": {
          "head": true
        }
      },
      {
        "content": "foreach(${1:item} ${2:items})\n\t${3}\nendforeach($1)",
        "doc": "",
        "grammar": "snu",
        "label": "foreach() endforeach()",
        "matches": {
          "foreach": true
        },
        "opts": {
          "head": true
        }
      },
      {
        "content": "macro(${1:name} ${2:args})\n\t${3}\nendmacro($1)",
        "doc": "",
        "grammar": "snu",
        "label": "macro() endmacro()",
        "matches": {
          "macro": true
        },
        "opts": {
          "head": true
        }
      },
      {
        "content": "function(${1:name} ${2:args})\n\t${3}\nendfunction($1)",
        "doc": "",
        "grammar": "snu",
        "label": "function() endfunction()",
        "matches": {
          "function": true
        },
        "opts": {
          "head": true
        }
      },
      {
        "content": "message(\"${1}\")",
        "doc": "",
        "grammar": "snu",
        "label": "message(\"...\")",
        "matches": {
          "message": true
        },
        "opts": {
          "head": true
        }
      },
      {
        "content": "message(STATUS \"${1}\")",
        "doc": "",
        "grammar": "snu",
        "label": "message(STATUS \"...\")",
        "matches": {
          "status_message": true
        },
        "opts": {
          "head": true
        }
      },
      {
        "content": "message(WARNING \"${1}\")",
        "doc": "",
        "grammar": "snu",
        "label": "message(WARNING \"...\")",
        "matches": {
          "warning_message": true
        },
        "opts": {
          "head": true
        }
      },
      {
        "content": "message(AUTHOR_WARNING \"${1}\")",
        "doc": "",
        "grammar": "snu",
        "label": "message(AUTHOR_WARNING \"...\")",
        "matches": {
          "author_warning_message": true
        },
        "opts": {
          "head": true
        }
      },
      {
        "content": "message(SEND_ERROR \"${1}\")",
        "doc": "",
        "grammar": "snu",
        "label": "message(SEND_ERROR \"...\")",
        "matches": {
          "send_error_message": true
        },
        "opts": {
          "head": true
        }
      },
      {
        "content": "message(FATAL_ERROR \"${1}\")",
        "doc": "",
        "grammar": "snu",
        "label": "message(FATAL_ERROR \"...\")",
        "matches": {
          "fatal_error_message": true
        },
        "opts": {
          "head": true
        }
      },
      {
        "content": "while(${1:#:condition})\n\t${2}\nendwhile()",
        "doc": "",
        "grammar": "snu",
        "label": "while() endwhile()",
        "matches": {
          "while": true
        },
        "opts": {
          "head": true
        }
      },
      {
        "content": "file(GLOB_RECURSE ${1:#:var} ${2:#:glob_paths})",
        "doc": "",
        "grammar": "snu",
        "label": "file(GLOB_RECURSE ...)",
        "matches": {
          "file_GLOBE_RECURSE": true
        },
        "opts": {
          "head": true
        }
      },
      {
        "content": "cmake_minimum_required(VERSION ${1:2.8.2})\nproject(${2:ProjectName})\nfind_package(${3:library})\ninclude_directories(${$3_INCLUDE_DIRS})\nadd_subdirectory(${0:src})\nadd_executable($2)\ntarget_link_libraries($2 ${$3_LIBRARIES})",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "init": true
        },
        "opts": {}
      },
      {
        "content": "project(${0:Name})",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "proj": true
        },
        "opts": {}
      },
      {
        "content": "cmake_minimum_required(VERSION ${0:2.8.2})",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "min": true
        },
        "opts": {}
      },
      {
        "content": "include_directories(${${0:include_dir}})",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "include": true
        },
        "opts": {}
      },
      {
        "content": "find_package(${1:library} ${0:REQUIRED})",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "find": true
        },
        "opts": {}
      },
      {
        "content": "file(glob ${1:srcs} *.${0:cpp})",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "glob": true
        },
        "opts": {}
      },
      {
        "content": "add_subdirectory(${0:src})",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "subdir": true
        },
        "opts": {}
      },
      {
        "content": "add_library(${1:lib} ${${0:srcs}})",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "lib": true
        },
        "opts": {}
      },
      {
        "content": "target_link_libraries(${1:bin} ${0:somelib})",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "link": true
        },
        "opts": {}
      },
      {
        "content": "add_executable(${1:bin})",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "bin": true
        },
        "opts": {}
      },
      {
        "content": "set(${1:var} ${0:val})",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "set": true
        },
        "opts": {}
      },
      {
        "content": "add_dependencies(${1:target}\n\t${0:dep}\n)",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "dep": true
        },
        "opts": {}
      },
      {
        "content": "include(ExternalProject)\nExternalProject_Add(${1:googletest}\n  URL ${2:http://googletest.googlecode.com/files/gtest-1.7.0.zip}\n  URL_HASH SHA1=${3:f85f6d2481e2c6c4a18539e391aa4ea8ab0394af}\n  SOURCE_DIR \"${4:${CMAKE_BINARY_DIR}/gtest-src}\"\n  BINARY_DIR \"${0:${CMAKE_BINARY_DIR}/gtest-build}\"\n  CONFIGURE_COMMAND \"\"\n  BUILD_COMMAND     \"\"\n  INSTALL_COMMAND   \"\"\n  TEST_COMMAND      \"\"\n)",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "Ext_url": true
        },
        "opts": {}
      },
      {
        "content": "include(ExternalProject)\nExternalProject_Add(${1:googletest}\n  GIT_REPOSITORY    ${2:https://github.com/google/googletest.git}\n  GIT_TAG           ${3:master}\n  SOURCE_DIR        \"${4:${CMAKE_BINARY_DIR}/googletest-src}\"\n  BINARY_DIR        \"${0:${CMAKE_BINARY_DIR}/googletest-build}\"\n  CONFIGURE_COMMAND \"\"\n  BUILD_COMMAND     \"\"\n  INSTALL_COMMAND   \"\"\n  TEST_COMMAND      \"\"\n)",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "Ext_git": true
        },
        "opts": {}
      },
      {
        "content": "set_target_properties(${1:target}\n\t${2:properties} ${3:compile_flags}\n\t${0:\"-O3 -Wall -pedantic\"}\n)",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "props": true
        },
        "opts": {}
      },
      {
        "content": "add_test(${1:ATestName} ${0:testCommand --options})",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "test": true
        },
        "opts": {}
      }
    ],
    "codeigniter": [
      {
        "content": "<?php if ( ! defined('BASEPATH')) exit('No direct script access allowed');\nclass ${1:ClassName} extends CI_Controller\n{\n\tfunction __construct()\n\t{\n\t\tparent::__construct();\n\t\t${2:// code...}\n\t}\n\tfunction ${3:index}()\n\t{\n\t\t${4:// code...}\n\t}\n}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ci_controller": true
        },
        "opts": {}
      },
      {
        "content": "<?php if ( ! defined('BASEPATH')) exit('No direct script access allowed');\nclass ${1:ClassName_model} extends CI_Model\n{\n\tfunction __construct()\n\t{\n\t\tparent::__construct();\n\t\t${2:// code...}\n\t}\n} ",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ci_model": true
        },
        "opts": {}
      },
      {
        "content": "<?php if ( ! defined('BASEPATH')) exit('No direct script access allowed');\nclass ${1:ClassName_model} extends CI_Model\n{\n\tprivate $table = '${2:table_name}';\n\tfunction __construct()\n\t{\n\t\tparent::__construct();\n\t\t${3:// code...}\n\t}\n\tpublic function create($data)\n\t{\n\t\tif($this->db->insert($this->table, $data))\n\t\t\treturn true;\n\t\telse\n\t\t\treturn false;\n\t}\n\tpublic function read($id)\n\t{\n\t\treturn $this->db->get_where($this->table, array('id', $id))->result();\n\t}\n\tpublic function update($id, $data)\n\t{\n\t\tif($this->db->update($this->table, $data, array('id' => $id)))\n\t\t\treturn true;\n\t\telse\n\t\t\treturn false;\n\t}\n\tpublic function delete($id)\n\t{\n\t\tif(is_array($id))\n\t\t{\n\t\t\t$this->db->trans_start();\n\t\t\tforeach($id as $elem)\n\t\t\t\t$this->db->delete($this->table, array('id' => $elem));\n\t\t\t$this->db->trans_complete();\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif($this->db->delete($this->table, array('id' => $id)))\n\t\t\t\treturn true;\n\t\t\telse\n\t\t\t\treturn false;\n\t\t}\n\t}\n\tpublic function listRows($limit = null, $offset = 0)\n\t{\n\t\tif(!is_null($limit))\n\t\t\t$this->db->limit($limit, $offset);\n\t\treturn $this->db->get($this->table)->result();\n\t}\n}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ci_model_crudl": true
        },
        "opts": {}
      },
      {
        "content": "$this->load->view(\"${1:view_name}\", $${2:data});${3}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ci_load-view": true
        },
        "opts": {}
      },
      {
        "content": "$this->db->insert(\"${1:table}\", $${2:data});${3}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ci_db-insert": true
        },
        "opts": {}
      },
      {
        "content": "$this->db->select(\"${1:id, ...}\");${2}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ci_db-select": true
        },
        "opts": {}
      },
      {
        "content": "$this->db->from(\"${1:table}\");${2}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ci_db-from": true
        },
        "opts": {}
      },
      {
        "content": "$this->db->join(\"${1:table}\", \"${2:condition}\", \"${3:type}\");${4}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ci_db-join": true
        },
        "opts": {}
      },
      {
        "content": "$this->db->where(\"${1:key}\", \"${2:value}\");${3}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ci_db-where": true
        },
        "opts": {}
      },
      {
        "content": "$this->db->or_where(\"${1:key}\", \"${2:value}\");${3}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ci_db-or_where": true
        },
        "opts": {}
      },
      {
        "content": "$this->db->get(\"${1:table}\", ${2:limit}, ${3:offset});${4}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ci_db-get": true
        },
        "opts": {}
      },
      {
        "content": "$this->db->delete(\"${1:table}\", \"${2:where}\");${3}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ci_db-delete": true
        },
        "opts": {}
      },
      {
        "content": "$this->db->update(\"${1:table}\", $${2:set}, $${3:where});${4}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ci_db-update": true
        },
        "opts": {}
      },
      {
        "content": "$this->input->post(\"${1:index}\");${2}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ci_input-post": true
        },
        "opts": {}
      },
      {
        "content": "$this->input->get(\"${1:index}\");${2}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ci_input-get": true
        },
        "opts": {}
      },
      {
        "content": "$this->input->cookie(\"${1:index}\");${2}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ci_input-cookie": true
        },
        "opts": {}
      },
      {
        "content": "$this->input->server(\"${1:index}\");${2}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ci_input-server": true
        },
        "opts": {}
      },
      {
        "content": "$this->input->user_agent();${1}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ci_input-user_agent": true
        },
        "opts": {}
      },
      {
        "content": "$this->input->is_ajax_request();${1}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ci_input-is_ajax_request": true
        },
        "opts": {}
      },
      {
        "content": "$this->input->is_cli_request();${1}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ci_input-is_cli_request": true
        },
        "opts": {}
      },
      {
        "content": "$this->form_validation->set_rules(\"${1:field}\", \"${2:label}\", \"${3:trim|required}\");${4}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ci_form_validation-set_rules": true
        },
        "opts": {}
      },
      {
        "content": "form_open(\"${1:action}\");${2}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ci_form_open": true
        },
        "opts": {}
      },
      {
        "content": "form_open_multipart(\"${1:action}\");${2}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ci_form_open_multipart": true
        },
        "opts": {}
      },
      {
        "content": "form_hidden(\"${1:name}\", \"${2:value}\");${3}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ci_form_hidden": true
        },
        "opts": {}
      },
      {
        "content": "form_input(\"${1:name}\", \"${2:value}\");${3}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ci_form_input": true
        },
        "opts": {}
      },
      {
        "content": "form_password(\"${1:name}\", \"${2:value}\");${3}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ci_form_password": true
        },
        "opts": {}
      },
      {
        "content": "form_upload(\"${1:name}\", \"${2:value}\");${3}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ci_form_upload": true
        },
        "opts": {}
      },
      {
        "content": "form_textarea(\"${1:name}\", \"${2:value}\");${3}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ci_form_textarea": true
        },
        "opts": {}
      },
      {
        "content": "form_checkbox(\"${1:name}\", \"${2:value}\");${3}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ci_form_checkbox": true
        },
        "opts": {}
      },
      {
        "content": "form_radio(\"${1:name}\", \"${2:value}\");${3}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ci_form_radio": true
        },
        "opts": {}
      },
      {
        "content": "form_submit(\"${1:name}\", \"${2:value}\");${3}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ci_form_submit": true
        },
        "opts": {}
      },
      {
        "content": "form_reset(\"${1:name}\", \"${2:value}\");${3}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ci_form_reset": true
        },
        "opts": {}
      },
      {
        "content": "form_button(\"${1:name}\", \"${2:value}\");${3}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ci_form_button": true
        },
        "opts": {}
      },
      {
        "content": "form_label(\"${1:label text}\", \"${2:id}\");${3}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ci_form_label": true
        },
        "opts": {}
      },
      {
        "content": "form_close();${1}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ci_form_close": true
        },
        "opts": {}
      },
      {
        "content": "validation_errors();${1}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ci_validation_errors": true
        },
        "opts": {}
      },
      {
        "content": "$this->session->userdata(\"${1:item}\");${2}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ci_session_userdata": true
        },
        "opts": {}
      },
      {
        "content": "$this->session->set_userdata($${1:array});${2}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ci_session_set_userdata": true
        },
        "opts": {}
      },
      {
        "content": "$this->session->flashdata(\"${1:item}\");${2}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ci_session_flashdata": true
        },
        "opts": {}
      },
      {
        "content": "$this->session->set_flashdata(\"${1:item}\", \"${2:value}\");${3}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ci_session_set_flashdata": true
        },
        "opts": {}
      }
    ],
    "coffee": [
      {
        "content": "${1:#:object} = require('$1')",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "req": true
        },
        "opts": {}
      },
      {
        "content": "console.log ${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "log": true
        },
        "opts": {}
      },
      {
        "content": "${1:#:action} unless ${2:#:condition}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "unl": true
        },
        "opts": {}
      },
      {
        "content": "try\n  ${1:TARGET}\ncatch ${2:#:error}\n  ${3}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "try": true
        },
        "opts": {}
      },
      {
        "content": "if ${1:#:condition}\n  ${0:TARGET}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "if": true
        },
        "opts": {}
      },
      {
        "content": "else if ${1:#:condition}\n  ${0:TARGET}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "elif": true
        },
        "opts": {}
      },
      {
        "content": "if ${1:#:condition} then ${2:#:value} else ${3:#:other}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ifte": true
        },
        "opts": {}
      },
      {
        "content": "if ${1:#:condition}\n  ${2:TARGET}\nelse\n  ${3:#:body...}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ife": true
        },
        "opts": {}
      },
      {
        "content": "switch ${1:#:object}\n  when ${2:#:value}\n    ${0:TARGET}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "swi": true
        },
        "opts": {}
      },
      {
        "content": "for ${1:#:key}, ${2:#:value} of ${3:#:object}\n  ${0:TARGET}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "foro": true
        },
        "opts": {}
      },
      {
        "content": "for ${1:#:name} in ${2:#:array}\n  ${0:TARGET}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "fora": true
        },
        "opts": {}
      },
      {
        "content": "${1:#:name} = (${2:#:args}) ->\n  ${0:TARGET}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "fun": true
        },
        "opts": {}
      },
      {
        "content": "(${1:#:args}) =>\n  ${0:TARGET}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "bfun": true
        },
        "opts": {}
      },
      {
        "content": "for ${1:name} in ${2:array}\n\tdo ($1) ->\n\t\t${0:// body}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "forindo": true
        },
        "opts": {}
      },
      {
        "content": "for ${1:name} in ${2:array}\n\t${0:# body...}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "fora": true
        },
        "opts": {}
      },
      {
        "content": "for ${1:key}, ${2:value} of ${3:object}\n\t${0:# body...}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "foro": true
        },
        "opts": {}
      },
      {
        "content": "for ${1:name} in [${2:start}..${3:finish}]\n\t${0:# body...}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "forr": true
        },
        "opts": {}
      },
      {
        "content": "for ${1:name} in [${2:start}..${3:finish}] by ${4:step}\n\t${0:# body...}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "forrb": true
        },
        "opts": {}
      },
      {
        "content": "for ${1:name} in [${2:start}...${3:finish}]\n\t${0:# body...}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "forrex": true
        },
        "opts": {}
      },
      {
        "content": "for ${1:name} in [${2:start}...${3:finish}] by ${4:step}\n\t${0:# body...}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "forrexb": true
        },
        "opts": {}
      },
      {
        "content": "(${1:args}) ->\n\t${0:# body...}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "fun": true
        },
        "opts": {}
      },
      {
        "content": "(${1:args}) =>\n\t${0:# body...}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "bfun": true
        },
        "opts": {}
      },
      {
        "content": "if ${1:condition}\n\t${0:${VISUAL}}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "if": true
        },
        "opts": {}
      },
      {
        "content": "if ${1:condition}\n\t${2:${VISUAL}}\nelse\n\t${0:# body...}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ife": true
        },
        "opts": {}
      },
      {
        "content": "else if ${1:condition}\n\t${0:${VISUAL}}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "eif": true
        },
        "opts": {}
      },
      {
        "content": "if ${1:condition} then ${2:value} else ${0:other}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ifte": true
        },
        "opts": {}
      },
      {
        "content": "${1:action} unless ${0:condition}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "unl": true
        },
        "opts": {}
      },
      {
        "content": "switch ${1:object}\n\twhen ${2:value}\n\t\t${0:# body...}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "swi": true
        },
        "opts": {}
      },
      {
        "content": "console.log ${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "log": true
        },
        "opts": {}
      },
      {
        "content": "try\n\t${1:${VISUAL}}\ncatch ${2:error}\n\t${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "try": true
        },
        "opts": {}
      },
      {
        "content": "${2:$1} = require '${1:sys}'",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "req": true
        },
        "opts": {}
      },
      {
        "content": "${0:root} = exports ? this",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "exp": true
        },
        "opts": {}
      },
      {
        "content": "JSON.parse ${0:jstr}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "jsonp": true
        },
        "opts": {}
      },
      {
        "content": "JSON.stringify ${0:object}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "jsons": true
        },
        "opts": {}
      },
      {
        "content": "if ${1:condition}\n\t${0:# body...}",
        "doc": null,
        "grammar": "snu",
        "label": "If",
        "matches": {
          "if": true
        },
        "opts": {
          "b": true
        }
      },
      {
        "content": "if ${1:condition}\n\t${2:# body...}\nelse\n\t${3:# body...}",
        "doc": null,
        "grammar": "snu",
        "label": "If .. Else",
        "matches": {
          "ife": true
        },
        "opts": {
          "b": true
        }
      },
      {
        "content": "else if ${1:condition}\n\t${0:# body...}",
        "doc": null,
        "grammar": "snu",
        "label": "Else if",
        "matches": {
          "elif": true
        },
        "opts": {
          "b": true
        }
      },
      {
        "content": "if ${1:condition} then ${2:value} else ${3:other}",
        "doc": null,
        "grammar": "snu",
        "label": "Ternary if",
        "matches": {
          "ifte": true
        },
        "opts": {
          "b": true
        }
      },
      {
        "content": "${1:action} unless ${2:condition}",
        "doc": null,
        "grammar": "snu",
        "label": "Unless",
        "matches": {
          "unl": true
        },
        "opts": {
          "b": true
        }
      },
      {
        "content": "for ${1:name} in ${2:array}\n\t${0:# body...}",
        "doc": null,
        "grammar": "snu",
        "label": "Array Comprehension",
        "matches": {
          "fora": true
        },
        "opts": {
          "b": true
        }
      },
      {
        "content": "for ${1:key}, ${2:value} of ${3:Object}\n\t${0:# body...}",
        "doc": null,
        "grammar": "snu",
        "label": "Object Comprehension",
        "matches": {
          "foro": true
        },
        "opts": {
          "b": true
        }
      },
      {
        "content": "switch ${1:object}\n\twhen ${2:value}\n\t\t${3:# body...}\n\telse\n\t\t$0",
        "doc": null,
        "grammar": "snu",
        "label": "Switch",
        "matches": {
          "swi": true
        },
        "opts": {
          "b": true
        }
      },
      {
        "content": "try\n\t$1\ncatch ${2:error}\n\t$3",
        "doc": null,
        "grammar": "snu",
        "label": "Try .. Catch",
        "matches": {
          "try": true
        },
        "opts": {
          "b": true
        }
      },
      {
        "content": "#{$1}$0",
        "doc": null,
        "grammar": "snu",
        "label": "Interpolated Code",
        "matches": {
          "#": true
        },
        "opts": {
          "i": true
        }
      },
      {
        "content": "console.log ${1:\"${2:msg}\"}",
        "doc": null,
        "grammar": "snu",
        "label": "Log",
        "matches": {
          "log": true
        },
        "opts": {
          "b": true
        }
      },
      {
        "content": "${1:key}:${2:value}",
        "doc": null,
        "grammar": "snu",
        "label": "Key:value for object",
        "matches": {
          "kv": true
        },
        "opts": {
          "b": true
        }
      }
    ],
    "coffee-jasmine": [
      {
        "content": "describe '${1:description}', ->\n\t$0",
        "doc": null,
        "grammar": "snu",
        "label": "Describe (coffee)",
        "matches": {
          "des": true
        },
        "opts": {
          "b": true
        }
      },
      {
        "content": "it '${1:description}', ->\n\t$0",
        "doc": null,
        "grammar": "snu",
        "label": "it (coffee)",
        "matches": {
          "it": true
        },
        "opts": {
          "b": true
        }
      },
      {
        "content": "beforeEach ->\n\t$0",
        "doc": null,
        "grammar": "snu",
        "label": "before each (coffee)",
        "matches": {
          "bef": true
        },
        "opts": {
          "b": true
        }
      },
      {
        "content": "afterEach ->\n\t$0",
        "doc": null,
        "grammar": "snu",
        "label": "after each (coffee)",
        "matches": {
          "aft": true
        },
        "opts": {
          "b": true
        }
      },
      {
        "content": "jasmine.any($1)",
        "doc": null,
        "grammar": "snu",
        "label": "any (coffee)",
        "matches": {
          "any": true
        },
        "opts": {
          "b": true
        }
      },
      {
        "content": "runs ->\n\t$0",
        "doc": null,
        "grammar": "snu",
        "label": "runs (coffee)",
        "matches": {
          "ru": true
        },
        "opts": {
          "b": true
        }
      },
      {
        "content": "waits($1)",
        "doc": null,
        "grammar": "snu",
        "label": "waits (coffee)",
        "matches": {
          "wa": true
        },
        "opts": {
          "b": true
        }
      },
      {
        "content": "expect(${1:target})$0",
        "doc": null,
        "grammar": "snu",
        "label": "expect (coffee)",
        "matches": {
          "ex": true
        },
        "opts": {
          "b": true
        }
      },
      {
        "content": "expect(${1:target}).toEqual(${2:value})",
        "doc": null,
        "grammar": "snu",
        "label": "expect to equal (coffee)",
        "matches": {
          "ee": true
        },
        "opts": {
          "b": true
        }
      },
      {
        "content": "expect(${1:target}).toMatch(${2:pattern})",
        "doc": null,
        "grammar": "snu",
        "label": "expect to match (coffee)",
        "matches": {
          "em": true
        },
        "opts": {
          "b": true
        }
      },
      {
        "content": "expect(${1:target}).toHaveAttr('${2:attr}'${3:, '${4:value}'})",
        "doc": null,
        "grammar": "snu",
        "label": "expect to have attribute (coffee)",
        "matches": {
          "eha": true
        },
        "opts": {
          "b": true
        }
      },
      {
        "content": "expect(${1:target}).toBeTruthy()",
        "doc": null,
        "grammar": "snu",
        "label": "expect to be truthy (coffee)",
        "matches": {
          "et": true
        },
        "opts": {
          "b": true
        }
      },
      {
        "content": "expect(${1:target}).toBeFalsy()",
        "doc": null,
        "grammar": "snu",
        "label": "expect to be falsy (coffee)",
        "matches": {
          "ef": true
        },
        "opts": {
          "b": true
        }
      },
      {
        "content": "expect(${1:target}).toBeDefined()",
        "doc": null,
        "grammar": "snu",
        "label": "expect to be defined (coffee)",
        "matches": {
          "ed": true
        },
        "opts": {
          "b": true
        }
      },
      {
        "content": "expect(${1:target}).toBeNull()",
        "doc": null,
        "grammar": "snu",
        "label": "expect to be null (coffee)",
        "matches": {
          "en": true
        },
        "opts": {
          "b": true
        }
      },
      {
        "content": "expect(${1:target}).toContain(${2:value})",
        "doc": null,
        "grammar": "snu",
        "label": "expect to contain (coffee)",
        "matches": {
          "ec": true
        },
        "opts": {
          "b": true
        }
      },
      {
        "content": "expect(${1:target}).toBeVisible()",
        "doc": null,
        "grammar": "snu",
        "label": "expect to be visible (coffee)",
        "matches": {
          "ev": true
        },
        "opts": {
          "b": true
        }
      },
      {
        "content": "expect(${1:target}).toBeHidden()",
        "doc": null,
        "grammar": "snu",
        "label": "expect to be hidden (coffee)",
        "matches": {
          "eh": true
        },
        "opts": {
          "b": true
        }
      },
      {
        "content": "expect(${1:target}).not$0",
        "doc": null,
        "grammar": "snu",
        "label": "expect not (coffee)",
        "matches": {
          "notx": true
        },
        "opts": {
          "b": true
        }
      },
      {
        "content": "expect(${1:target}).not.toEqual(${2:value})",
        "doc": null,
        "grammar": "snu",
        "label": "expect not to equal (coffee)",
        "matches": {
          "note": true
        },
        "opts": {
          "b": true
        }
      },
      {
        "content": "expect(${1:target}).not.toMatch(${2:pattern})",
        "doc": null,
        "grammar": "snu",
        "label": "expect not to match (coffee)",
        "matches": {
          "notm": true
        },
        "opts": {
          "b": true
        }
      },
      {
        "content": "expect(${1:target}).not.toHaveAttr('${2:attr}'${3:, '${4:value}'})",
        "doc": null,
        "grammar": "snu",
        "label": "expect to not have attribute (coffee)",
        "matches": {
          "notha": true
        },
        "opts": {
          "b": true
        }
      },
      {
        "content": "expect(${1:target}).not.toBeTruthy()",
        "doc": null,
        "grammar": "snu",
        "label": "expect not to be truthy (coffee)",
        "matches": {
          "nott": true
        },
        "opts": {
          "b": true
        }
      },
      {
        "content": "expect(${1:target}).not.toBeFalsy()",
        "doc": null,
        "grammar": "snu",
        "label": "expect not to be falsy (coffee)",
        "matches": {
          "notf": true
        },
        "opts": {
          "b": true
        }
      },
      {
        "content": "expect(${1:target}).not.toBeDefined()",
        "doc": null,
        "grammar": "snu",
        "label": "expect not to be defined (coffee)",
        "matches": {
          "notd": true
        },
        "opts": {
          "b": true
        }
      },
      {
        "content": "expect(${1:target}).not.toBeNull()",
        "doc": null,
        "grammar": "snu",
        "label": "expect not to be null (coffee)",
        "matches": {
          "notn": true
        },
        "opts": {
          "b": true
        }
      },
      {
        "content": "expect(${1:target}).not.toContain(${2:value})",
        "doc": null,
        "grammar": "snu",
        "label": "expect not to contain (coffee)",
        "matches": {
          "notc": true
        },
        "opts": {
          "b": true
        }
      },
      {
        "content": "expect(${1:target}).not.toBeVisible()",
        "doc": null,
        "grammar": "snu",
        "label": "expect not to be visible (coffee)",
        "matches": {
          "notv": true
        },
        "opts": {
          "b": true
        }
      },
      {
        "content": "expect(${1:target}).not.toBeHidden()",
        "doc": null,
        "grammar": "snu",
        "label": "expect not to be hidden (coffee)",
        "matches": {
          "noth": true
        },
        "opts": {
          "b": true
        }
      },
      {
        "content": "spyOn(${1:object}, \"${2:method}\")$0",
        "doc": null,
        "grammar": "snu",
        "label": "spy on (coffee)",
        "matches": {
          "s": true
        },
        "opts": {
          "b": true
        }
      },
      {
        "content": "spyOn(${1:object}, \"${2:method}\").andReturn(${3:arguments})",
        "doc": null,
        "grammar": "snu",
        "label": "spy on and return (coffee)",
        "matches": {
          "sr": true
        },
        "opts": {
          "b": true
        }
      },
      {
        "content": "spyOn(${1:object}, \"${2:method}\").andThrow(${3:exception})",
        "doc": null,
        "grammar": "snu",
        "label": "spy on and throw (coffee)",
        "matches": {
          "st": true
        },
        "opts": {
          "b": true
        }
      },
      {
        "content": "spyOn(${1:object}, \"${2:method}\").andCallThrough()",
        "doc": null,
        "grammar": "snu",
        "label": "spy on and call through (coffee)",
        "matches": {
          "sct": true
        },
        "opts": {
          "b": true
        }
      },
      {
        "content": "spyOn(${1:object}, \"${2:method}\").andCallFake(${3:function})",
        "doc": null,
        "grammar": "snu",
        "label": "spy on and call fake (coffee)",
        "matches": {
          "scf": true
        },
        "opts": {
          "b": true
        }
      },
      {
        "content": "expect(${1:target}).wasCalled()",
        "doc": null,
        "grammar": "snu",
        "label": "expect was called (coffee)",
        "matches": {
          "esc": true
        },
        "opts": {
          "b": true
        }
      },
      {
        "content": "expect(${1:target}).wasCalledWith(${2:arguments})",
        "doc": null,
        "grammar": "snu",
        "label": "expect was called with (coffee)",
        "matches": {
          "escw": true
        },
        "opts": {
          "b": true
        }
      },
      {
        "content": "expect(${1:target}).wasNotCalled()",
        "doc": null,
        "grammar": "snu",
        "label": "expect was not called (coffee)",
        "matches": {
          "notsc": true
        },
        "opts": {
          "b": true
        }
      },
      {
        "content": "expect(${1:target}).wasNotCalledWith(${2:arguments})",
        "doc": null,
        "grammar": "snu",
        "label": "expect was not called with (coffee)",
        "matches": {
          "noscw": true
        },
        "opts": {
          "b": true
        }
      }
    ],
    "coffee-react": [
      {
        "content": "${1:classname}Class = React.createClass\n\tdisplayName: \"$1\"\n\trender: ->\n\t\t$2\n$1 = React.createFactory($1)",
        "doc": null,
        "grammar": "snu",
        "label": "React define Class",
        "matches": {
          "createClass": true
        },
        "opts": {
          "b": true
        }
      },
      {
        "content": "propTypes: ->\n\t${1:myVar}: React.PropTypes.${2:type}${3:.isRequired}",
        "doc": null,
        "grammar": "snu",
        "label": "React define propTypes",
        "matches": {
          "PropTypes": true
        },
        "opts": {
          "b": true
        }
      },
      {
        "content": "${1:myVar}: React.PropTypes.${2:type}${3:.isRequired}\n$4",
        "doc": null,
        "grammar": "snu",
        "label": "React propType (key/value)",
        "matches": {
          "propType": true
        },
        "opts": {
          "b": true
        }
      },
      {
        "content": "@setState\n\t${1:myvar}: ${2:myvalue}\n\t$3",
        "doc": null,
        "grammar": "snu",
        "label": "React setState",
        "matches": {
          "setState": true
        },
        "opts": {
          "b": true
        }
      },
      {
        "content": "getInitialState: ->\n\t${1:myvar}: ${2:myvalue}\n\t$3",
        "doc": null,
        "grammar": "snu",
        "label": "React define getInitialState",
        "matches": {
          "getInitialState": true
        },
        "opts": {
          "b": true
        }
      },
      {
        "content": "getDefaultProps: ->\n\t${1:myvar}: ${2:myvalue}\n\t$3",
        "doc": null,
        "grammar": "snu",
        "label": "React define getDefaultProps",
        "matches": {
          "getDefaultProps": true
        },
        "opts": {
          "b": true
        }
      },
      {
        "content": "componentWillMount: ->\n\t$1",
        "doc": null,
        "grammar": "snu",
        "label": "React define componentWillMount",
        "matches": {
          "componentWillMount": true
        },
        "opts": {
          "b": true
        }
      },
      {
        "content": "componentDidMount: ->\n\t$1",
        "doc": null,
        "grammar": "snu",
        "label": "React define componentDidMount",
        "matches": {
          "componentDidMount": true
        },
        "opts": {
          "b": true
        }
      },
      {
        "content": "componentWillReceiveProps: (nextProps) ->\n\t$1",
        "doc": null,
        "grammar": "snu",
        "label": "React define componentWillReceiveProps",
        "matches": {
          "componentWillReceiveProps": true
        },
        "opts": {
          "b": true
        }
      },
      {
        "content": "shouldComponentUpdate: (nextProps, nextState) ->\n\t$1",
        "doc": null,
        "grammar": "snu",
        "label": "React define shouldComponentUpdate",
        "matches": {
          "shouldComponentUpdate": true
        },
        "opts": {
          "b": true
        }
      },
      {
        "content": "componentWillUpdate: (nextProps, nextState) ->\n\t$1",
        "doc": null,
        "grammar": "snu",
        "label": "React define componentWillUpdate",
        "matches": {
          "componentWillUpdate": true
        },
        "opts": {
          "b": true
        }
      },
      {
        "content": "componentDidUpdate: (prevProps, prevState) ->\n\t$1",
        "doc": null,
        "grammar": "snu",
        "label": "React define componentDidUpdate",
        "matches": {
          "componentDidUpdate": true
        },
        "opts": {
          "b": true
        }
      },
      {
        "content": "componentWillUnmount: ->\n\t$1",
        "doc": null,
        "grammar": "snu",
        "label": "React define componentWillUnmount",
        "matches": {
          "componentWillUnmount": true
        },
        "opts": {
          "b": true
        }
      }
    ],
    "cpp": [
      {
        "content": "#include <${1:iostream}>${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "#inc, #include": true,
          "inc": true
        },
        "opts": {
          "head": true
        }
      },
      {
        "content": "#include \"${1}\"${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "#inc2, #include2": true,
          "inc2": true
        },
        "opts": {
          "head": true
        }
      },
      {
        "content": "template<typename ${1:T}> ${0}",
        "doc": "",
        "grammar": "snu",
        "label": "template <T>",
        "matches": {
          "template": true
        },
        "opts": {}
      },
      {
        "content": "class ${1:#:name} {\n    ${2}\npublic:\n    $1(${3});\n};\n$1::$1($3) {\n    ${0:TARGET}\n}",
        "doc": "",
        "grammar": "snu",
        "label": "class {}",
        "matches": {
          "class": true
        },
        "opts": {
          "head": true
        }
      },
      {
        "content": "class ${1:#:name} {\n    ${2}\n};",
        "doc": "",
        "grammar": "snu",
        "label": "class {}",
        "matches": {
          "class-without-constructor": true
        },
        "opts": {
          "head": true
        }
      },
      {
        "content": "try {\n    ${1:#:TARGET}\n} catch (${2:...}) {\n    ${3}\n}",
        "doc": "",
        "grammar": "snu",
        "label": "try catch",
        "matches": {
          "try": true
        },
        "opts": {
          "head": true
        }
      },
      {
        "content": "for (${1:auto&& }${2:var} : ${3:container}) {\n    ${0:TARGET}\n}",
        "doc": "",
        "grammar": "snu",
        "label": "for (:) {}",
        "matches": {
          "for_CPP11": true
        },
        "opts": {
          "head": true
        }
      },
      {
        "content": "[${1}](${2})${3}{ ${4:TARGET} }${0:;}",
        "doc": "",
        "grammar": "snu",
        "label": "[](){}",
        "matches": {
          "lambda": true
        },
        "opts": {}
      },
      {
        "content": "enum struct ${1:#:name} { ${2:#:TARGET} };",
        "doc": "",
        "grammar": "snu",
        "label": "enum struct {};",
        "matches": {
          "enum_scoped": true
        },
        "opts": {
          "head": true
        }
      },
      {
        "content": "static_assert( ${1}, \"${2}\" );${0}",
        "doc": "",
        "grammar": "snu",
        "label": "static_assert(,\"\")",
        "matches": {
          "static_assert": true
        },
        "opts": {}
      },
      {
        "content": "namespace ${1:#:name} {\n    ${0:TARGET}\n} // namespace $1",
        "doc": "",
        "grammar": "snu",
        "label": "namespace {}",
        "matches": {
          "namespace": true
        },
        "opts": {
          "head": true
        }
      },
      {
        "content": "static_cast<${1}>(${2})${0}",
        "doc": "",
        "grammar": "snu",
        "label": "static_cast<>()",
        "matches": {
          "static_cast": true
        },
        "opts": {}
      },
      {
        "content": "reinterpret_cast<${1}>(${2})${0}",
        "doc": "",
        "grammar": "snu",
        "label": "reinterpret_cast<>()",
        "matches": {
          "reinterpret_cast": true
        },
        "opts": {}
      },
      {
        "content": "const_cast<${1}>(${2})${0}",
        "doc": "",
        "grammar": "snu",
        "label": "const_cast<>()",
        "matches": {
          "const_cast": true
        },
        "opts": {}
      },
      {
        "content": "dynamic_cast<${1}>(${2})${0}",
        "doc": "",
        "grammar": "snu",
        "label": "dynamic_cast<>()",
        "matches": {
          "dynamic_cast": true
        },
        "opts": {}
      },
      {
        "content": "#include <iostream>\nint main(int argc, char* argv[])\n{\n    std::cout << \"hello, world!\" << std::endl;\n    return 0;\n}",
        "doc": "",
        "grammar": "snu",
        "label": "#include<iostream> int main...",
        "matches": {
          "helloworld": true
        },
        "opts": {}
      },
      {
        "content": "std::cout << ${0:TARGET} << std::endl;",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "p": true
        },
        "opts": {
          "head": true
        }
      },
      {
        "content": "#include <${1:iostream}>",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "incc": true
        },
        "opts": {}
      },
      {
        "content": "#include <boost/${1:shared_ptr}.hpp>",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "binc": true
        },
        "opts": {}
      },
      {
        "content": "std::array<${1:T}, ${2:N}> ${3};",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "array": true
        },
        "opts": {}
      },
      {
        "content": "std::vector<${1:T}> ${2};",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "vector": true
        },
        "opts": {}
      },
      {
        "content": "std::deque<${1:T}> ${2};",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "deque": true
        },
        "opts": {}
      },
      {
        "content": "std::forward_list<${1:T}> ${2};",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "flist": true
        },
        "opts": {}
      },
      {
        "content": "std::list<${1:T}> ${2};",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "list": true
        },
        "opts": {}
      },
      {
        "content": "std::set<${1:T}> ${2};",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "set": true
        },
        "opts": {}
      },
      {
        "content": "std::map<${1:Key}, ${2:T}> ${3};",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "map": true
        },
        "opts": {}
      },
      {
        "content": "std::multiset<${1:T}> ${2};",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "mset": true
        },
        "opts": {}
      },
      {
        "content": "std::multimap<${1:Key}, ${2:T}> ${3};",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "mmap": true
        },
        "opts": {}
      },
      {
        "content": "std::unordered_set<${1:T}> ${2};",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "uset": true
        },
        "opts": {}
      },
      {
        "content": "std::unordered_map<${1:Key}, ${2:T}> ${3};",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "umap": true
        },
        "opts": {}
      },
      {
        "content": "std::unordered_multiset<${1:T}> ${2};",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "umset": true
        },
        "opts": {}
      },
      {
        "content": "std::unordered_multimap<${1:Key}, ${2:T}> ${3};",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ummap": true
        },
        "opts": {}
      },
      {
        "content": "std::stack<${1:T}> ${2};",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "stack": true
        },
        "opts": {}
      },
      {
        "content": "std::queue<${1:T}> ${2};",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "queue": true
        },
        "opts": {}
      },
      {
        "content": "std::priority_queue<${1:T}> ${2};",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "pqueue": true
        },
        "opts": {}
      },
      {
        "content": "std::shared_ptr<${1:T}> ${2} = std::make_shared<$1>(${3});",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "msp": true
        },
        "opts": {}
      },
      {
        "content": "auto ${1} = std::make_shared<${2:T}>(${3});",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "amsp": true
        },
        "opts": {}
      },
      {
        "content": "std::unique_ptr<${1:T}> ${2} = std::make_unique<$1>(${3});",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "mup": true
        },
        "opts": {}
      },
      {
        "content": "auto ${1} = std::make_unique<${2:T}>(${3});",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "amup": true
        },
        "opts": {}
      },
      {
        "content": "private",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "pri": true
        },
        "opts": {}
      },
      {
        "content": "protected",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "pro": true
        },
        "opts": {}
      },
      {
        "content": "public",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "pub": true
        },
        "opts": {}
      },
      {
        "content": "friend",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "fr": true
        },
        "opts": {}
      },
      {
        "content": "mutable",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "mu": true
        },
        "opts": {}
      },
      {
        "content": "namespace {\n\t${0}\n}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ans": true
        },
        "opts": {}
      },
      {
        "content": "std::cout << ${1} << std::endl;",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "cout": true
        },
        "opts": {}
      },
      {
        "content": "std::cin >> ${1};",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "cin": true
        },
        "opts": {}
      },
      {
        "content": "static_cast<${1:unsigned}>(${2:expr})${3}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "sca": true
        },
        "opts": {}
      },
      {
        "content": "dynamic_cast<${1:unsigned}>(${2:expr})${3}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "dca": true
        },
        "opts": {}
      },
      {
        "content": "reinterpret_cast<${1:unsigned}>(${2:expr})${3}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "rca": true
        },
        "opts": {}
      },
      {
        "content": "const_cast<${1:unsigned}>(${2:expr})${3}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "cca": true
        },
        "opts": {}
      },
      {
        "content": "for (int ${2:i} = 0; $2 < ${1:count}; $2${3:++}) {\n\t${4}\n}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "fori": true
        },
        "opts": {}
      },
      {
        "content": "for (${1:auto} ${2:i} : ${3:container}) {\n\t${4}\n}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "fore": true
        },
        "opts": {}
      },
      {
        "content": "for (${1:std::vector}<${2:type}>::${3:const_iterator} ${4:i} = ${5:container}.begin(); $4 != $5.end(); ++$4) {\n\t${6}\n}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "iter": true
        },
        "opts": {}
      },
      {
        "content": "for (auto ${1:i} = ${2:container}.begin(); $1 != $2.end(); ++$1) {\n\t${3:std::cout << *$1 << std::endl;}\n}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "itera": true
        },
        "opts": {}
      },
      {
        "content": "[${1}](${2}){${3}};",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ld": true
        },
        "opts": {}
      },
      {
        "content": "[${1}](${2}){\n\t${3}\n};",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "lld": true
        },
        "opts": {}
      },
      {
        "content": "try {\n}catch(${1}) {\n}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "try": true
        },
        "opts": {}
      },
      {
        "content": "auto ${1:name}(${2}) -> ${3:void}\n{\n\t${0}\n};",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "af auto function": true
        },
        "opts": {}
      }
    ],
    "crystal": [
      {
        "content": "require \"${1}\"",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "req require": true
        },
        "opts": {}
      },
      {
        "content": "case ${1:object}\nwhen ${2:condition}\n\t${0}\nend",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "case": true
        },
        "opts": {}
      },
      {
        "content": "when ${1:condition}\n\t${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "when": true
        },
        "opts": {}
      },
      {
        "content": "def ${1:method_name}\n\t${0}\nend",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "def": true
        },
        "opts": {}
      },
      {
        "content": "private def ${1:method_name}\n\t${0}\nend",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "pdef": true
        },
        "opts": {}
      },
      {
        "content": "if ${1:condition}\n\t${0:${VISUAL}}\nend",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "if": true
        },
        "opts": {}
      },
      {
        "content": "if ${1:condition}\n\t${2:${VISUAL}}\nelse\n\t${0}\nend",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ife": true
        },
        "opts": {}
      },
      {
        "content": "while ${1:condition}\n\t${0:${VISUAL}}\nend",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "wh": true
        },
        "opts": {}
      },
      {
        "content": "getter ${0:name}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "r": true
        },
        "opts": {}
      },
      {
        "content": "getter! ${0:name}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "r!": true
        },
        "opts": {}
      },
      {
        "content": "getter? ${0:name}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "r?": true
        },
        "opts": {}
      },
      {
        "content": "setter ${0:name}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "w": true
        },
        "opts": {}
      },
      {
        "content": "setter! ${0:name}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "w!": true
        },
        "opts": {}
      },
      {
        "content": "setter? ${0:name}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "w?": true
        },
        "opts": {}
      },
      {
        "content": "property ${0:name}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "rw": true
        },
        "opts": {}
      },
      {
        "content": "property! ${0:name}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "rw!": true
        },
        "opts": {}
      },
      {
        "content": "property? ${0:name}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "rw?": true
        },
        "opts": {}
      },
      {
        "content": "def self.${1:class_method_name}\n\t${0}\nend",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "defs": true
        },
        "opts": {}
      },
      {
        "content": "def initialize(${1})\n\t${0}\nend",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "defi": true
        },
        "opts": {}
      },
      {
        "content": "do\n\t${0:${VISUAL}}\nend",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "do": true
        },
        "opts": {}
      },
      {
        "content": "do |${1:v}|\n\t${2}\nend",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "dov": true
        },
        "opts": {}
      },
      {
        "content": "it \"${1}\" do\n\t${0}\nend",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "it": true
        },
        "opts": {}
      },
      {
        "content": "def ${1:method_name}${2:(${3:*args})}\n\t$0\nend",
        "doc": null,
        "grammar": "snu",
        "label": "def <name>...",
        "matches": {
          "\"\\b(de)?f": true
        },
        "opts": {
          "r": true
        }
      },
      {
        "content": "private def ${1:method_name}${2:(${3:*args})}\n\t$0\nend",
        "doc": null,
        "grammar": "snu",
        "label": "private def <name>...",
        "matches": {
          "\"\\b(pde)?f": true
        },
        "opts": {
          "r": true
        }
      }
    ],
    "cs": [
      {
        "content": "namespace ${1:#:Name} {\n    ${0:TARGET}\n}",
        "doc": "",
        "grammar": "snu",
        "label": "namespace {}",
        "matches": {
          "name": true,
          "namespace": true
        },
        "opts": {
          "head": true
        }
      },
      {
        "content": "class ${1:#:Name} ${2::} ${3:Parent}${4:,} ${5:Interface} {\n    ${0:TARGET}\n}",
        "doc": "",
        "grammar": "snu",
        "label": "class {}",
        "matches": {
          "class": true
        },
        "opts": {}
      },
      {
        "content": "struct ${1:#:Name} ${2::} ${3:Interface} {\n    ${0:TARGET}\n}",
        "doc": "",
        "grammar": "snu",
        "label": "struct {}",
        "matches": {
          "struct": true
        },
        "opts": {}
      },
      {
        "content": "interface ${1:#:IName} ${2::} ${3:Parent} {\n    ${0:TARGET}\n}",
        "doc": "",
        "grammar": "snu",
        "label": "interface {}",
        "matches": {
          "interface": true
        },
        "opts": {}
      },
      {
        "content": "${1:void} ${2:#:Method}(${3:#:arguments}) {\n    ${0:TARGET}\n}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "method": true
        },
        "opts": {}
      },
      {
        "content": "enum ${1:#:Name} {\n    ${0:TARGET}\n}",
        "doc": "",
        "grammar": "snu",
        "label": "enum {}",
        "matches": {
          "enum": true
        },
        "opts": {}
      },
      {
        "content": "delegate ${1:void} ${2:#:Delegate}(${3:#:arguments});${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "delegate": true
        },
        "opts": {}
      },
      {
        "content": "${1:int} ${2:#:Name} { get${3:;} ${4:#:private }set${5:;} }${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "prop": true,
          "property": true
        },
        "opts": {}
      },
      {
        "content": "get {${1:TARGET}}${0}",
        "doc": "",
        "grammar": "snu",
        "label": "get {}",
        "matches": {
          "get": true
        },
        "opts": {}
      },
      {
        "content": "set {${1:TARGET}}${0}",
        "doc": "",
        "grammar": "snu",
        "label": "set {}",
        "matches": {
          "set": true
        },
        "opts": {}
      },
      {
        "content": "#define ${0:#:SYMBOL}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "def": true,
          "define": true
        },
        "opts": {
          "head": true
        }
      },
      {
        "content": "#undef ${0:#:SYMBOL}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "und": true,
          "undef": true
        },
        "opts": {
          "head": true
        }
      },
      {
        "content": "#if ${1:SYMBOL}\n    ${0:TARGET}\n#endif",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ifdef": true
        },
        "opts": {
          "head": true
        }
      },
      {
        "content": "#warning ${0:#:message}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "warn": true,
          "warning": true
        },
        "opts": {
          "head": true
        }
      },
      {
        "content": "#error ${0:#:message}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "err": true,
          "error": true
        },
        "opts": {
          "head": true
        }
      },
      {
        "content": "#line ${0:#:number}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "line": true
        },
        "opts": {
          "head": true
        }
      },
      {
        "content": "#region ${1:#:name}\n    ${0:TARGET}\n#endregion",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "reg": true,
          "region": true
        },
        "opts": {
          "head": true
        }
      },
      {
        "content": "#pragma warning ${2:disable} ${3:#:errno}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "pragma pragma_warn": true,
          "pragma_warning": true
        },
        "opts": {
          "head": true
        }
      },
      {
        "content": "if (${1:#:condition}) {\n    ${0:TARGET}\n}",
        "doc": "",
        "grammar": "snu",
        "label": "if () {}",
        "matches": {
          "if": true
        },
        "opts": {}
      },
      {
        "content": "else if (${1:#:condition}) {\n    ${0:TARGET}\n}",
        "doc": "",
        "grammar": "snu",
        "label": "else if () {}",
        "matches": {
          "elif": true,
          "elseif": true
        },
        "opts": {}
      },
      {
        "content": "if (${1:#:condition}) {\n    ${2:TARGET}\n} else {\n    ${3:TARGET}\n}",
        "doc": "",
        "grammar": "snu",
        "label": "if () {} else {}",
        "matches": {
          "ifel": true,
          "ifelse": true
        },
        "opts": {}
      },
      {
        "content": "while (${1:#:condition}) {\n    ${0:TARGET}\n}",
        "doc": "",
        "grammar": "snu",
        "label": "while () {}",
        "matches": {
          "while": true
        },
        "opts": {}
      },
      {
        "content": "do {\n    ${0:TARGET}\n} while (${1:#:condition});",
        "doc": "",
        "grammar": "snu",
        "label": "do {} while() {}",
        "matches": {
          "do_while": true,
          "dowhile": true
        },
        "opts": {}
      },
      {
        "content": "for (${1:#:var}; ${2:#:condition}; ${3:#:effect}) {\n    ${0:TARGET}\n}",
        "doc": "",
        "grammar": "snu",
        "label": "for () {}",
        "matches": {
          "for": true
        },
        "opts": {}
      },
      {
        "content": "foreach (${1:#:var} in ${2:#:iter}) {\n    ${0:TARGET}\n}",
        "doc": "",
        "grammar": "snu",
        "label": "foreach () {}",
        "matches": {
          "fore": true,
          "foreach": true
        },
        "opts": {}
      },
      {
        "content": "switch (${1:#:var}) {\ncase ${2:#:val}:\n    ${0:TARGET}\n    break;\n}",
        "doc": "",
        "grammar": "snu",
        "label": "switch () {}",
        "matches": {
          "switch": true
        },
        "opts": {}
      },
      {
        "content": "case ${1:#:val}:\n    ${0:TARGET}\n    break;",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "case": true
        },
        "opts": {
          "head": true
        }
      },
      {
        "content": "break;",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "break": true
        },
        "opts": {
          "head": true
        }
      },
      {
        "content": "goto case ${1:#:Val};${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "goto": true
        },
        "opts": {
          "head": true
        }
      },
      {
        "content": "default:\n    ${0:TARGET}\n    break;",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "default": true
        },
        "opts": {
          "head": true
        }
      },
      {
        "content": "try {\n    ${0:TARGET}\n}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "try_n": true,
          "try_without_catch_nor_finally": true
        },
        "opts": {
          "head": true
        }
      },
      {
        "content": "try {\n    ${0:TARGET}\n} catch (${1:Exception} ${2:e}) {\n    ${3:Console.WriteLine(e.Message);}\n}",
        "doc": "",
        "grammar": "snu",
        "label": "try {} catch () {}",
        "matches": {
          "try": true,
          "try_catch": true
        },
        "opts": {
          "head": true
        }
      },
      {
        "content": "try {\n    ${0:TARGET}\n} catch {\n    ${1}\n}",
        "doc": "",
        "grammar": "snu",
        "label": "try {} catch {}",
        "matches": {
          "try_catch_n": true,
          "try_cn": true
        },
        "opts": {
          "head": true
        }
      },
      {
        "content": "try {\n    ${0:TARGET}\n} catch (${1:Exception} ${2:e}) {\n    ${3:Console.WriteLine(e.Message);}\n} finally {\n    ${4}\n}",
        "doc": "",
        "grammar": "snu",
        "label": "try {} catch () {} finally {}",
        "matches": {
          "try_catch_finally": true,
          "try_cf": true
        },
        "opts": {
          "head": true
        }
      },
      {
        "content": "try {\n    ${0:TARGET}\n} finally {\n    ${1}\n}",
        "doc": "",
        "grammar": "snu",
        "label": "try {} finally {}",
        "matches": {
          "try_f": true,
          "try_finally": true
        },
        "opts": {
          "head": true
        }
      },
      {
        "content": "try {\n    ${0:TARGET}\n} catch {\n    ${1}\n} finally {\n    ${2}\n}",
        "doc": "",
        "grammar": "snu",
        "label": "try {} catch {} finally {}",
        "matches": {
          "try_catch_n_finally": true,
          "try_cnf": true
        },
        "opts": {
          "head": true
        }
      },
      {
        "content": "catch (${1:Exception} ${2:e}) {\n    ${0:Console.WriteLine(e.Message);}\n}",
        "doc": "",
        "grammar": "snu",
        "label": "catch () {}",
        "matches": {
          "catch": true
        },
        "opts": {}
      },
      {
        "content": "catch {\n    ${0}\n}",
        "doc": "",
        "grammar": "snu",
        "label": "catch {}",
        "matches": {
          "catch_n": true
        },
        "opts": {}
      },
      {
        "content": "finally {\n    ${0:TARGET}\n}",
        "doc": "",
        "grammar": "snu",
        "label": "finally {}",
        "matches": {
          "fin": true,
          "finally": true
        },
        "opts": {}
      },
      {
        "content": "throw ${0:#:exception}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "throw": true
        },
        "opts": {
          "head": true
        }
      },
      {
        "content": "lock (${1:#:resource}) {\n    ${0:TARGET}\n}",
        "doc": "",
        "grammar": "snu",
        "label": "lock () {}",
        "matches": {
          "lock": true
        },
        "opts": {
          "head": true
        }
      },
      {
        "content": "using (${1:#:resource}) {\n    ${0:TARGET}\n}",
        "doc": "",
        "grammar": "snu",
        "label": "using () {}",
        "matches": {
          "using resource": true,
          "using_resource": true
        },
        "opts": {
          "head": true
        }
      },
      {
        "content": "checked (${1:#:var}) {\n    ${0:TARGET}\n}",
        "doc": "",
        "grammar": "snu",
        "label": "checked () {}",
        "matches": {
          "checked": true
        },
        "opts": {
          "head": true
        }
      },
      {
        "content": "unchecked (${1:#:var}) {\n    ${0:TARGET}\n}",
        "doc": "",
        "grammar": "snu",
        "label": "unchecked () {}",
        "matches": {
          "unchecked": true
        },
        "opts": {
          "head": true
        }
      },
      {
        "content": "unsafe {\n    ${0:TARGET}\n}",
        "doc": "",
        "grammar": "snu",
        "label": "unsafe {}",
        "matches": {
          "unsafe": true
        },
        "opts": {
          "head": true
        }
      },
      {
        "content": "fixed (${1:#:type}* ${2:#:var} = ${3:#:adress}) {\n    ${0:TARGET}\n}",
        "doc": "",
        "grammar": "snu",
        "label": "fixed () {}",
        "matches": {
          "fixed": true
        },
        "opts": {
          "head": true
        }
      },
      {
        "content": "using ${1:#:path};${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "import": true,
          "using_import": true
        },
        "opts": {
          "head": true
        }
      },
      {
        "content": "using ${1:Name} = ${2:Type};${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "typedef": true,
          "using_typedef": true
        },
        "opts": {
          "head": true
        }
      },
      {
        "content": "System.Linq",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "s.l": true
        },
        "opts": {}
      },
      {
        "content": "System.Collections.Generic",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "s.c.g": true
        },
        "opts": {}
      },
      {
        "content": "System.Text",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "s.t": true
        },
        "opts": {}
      },
      {
        "content": "System.IO",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "s.i": true
        },
        "opts": {}
      },
      {
        "content": "System.Diagnostics",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "s.d": true
        },
        "opts": {}
      },
      {
        "content": "System.Runtie.CompilerServices",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "s.r.c": true
        },
        "opts": {}
      },
      {
        "content": "System.Windows.Forms",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "s.w.f": true
        },
        "opts": {}
      },
      {
        "content": "[SerializableAttribute]",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "serial": true,
          "serializable": true
        },
        "opts": {
          "head": true
        }
      },
      {
        "content": "[Conditional(\"${1:#:SYMBOL}\")]${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "cond": true,
          "conditional": true
        },
        "opts": {
          "head": true
        }
      },
      {
        "content": "[Obsolete(\"${1:#:description}\")]${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "obs dep deprecated": true,
          "obsolete": true
        },
        "opts": {
          "head": true
        }
      },
      {
        "content": "[assembly: InternalsVisibleTo(\"${1:#:FriendName}\")]${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "asm_internals_visible_to": true,
          "internals asmInternalsVisibleTo friend_attr": true
        },
        "opts": {
          "head": true
        }
      },
      {
        "content": "<c>${1:#:text}</c>",
        "doc": "",
        "grammar": "snu",
        "label": "<c></c>",
        "matches": {
          "c": true
        },
        "opts": {}
      },
      {
        "content": "<code>${0:#:content}</code>",
        "doc": "",
        "grammar": "snu",
        "label": "<code></code>",
        "matches": {
          "code": true
        },
        "opts": {}
      },
      {
        "content": "<example>${0:#:description}</example>",
        "doc": "",
        "grammar": "snu",
        "label": "<example></example>",
        "matches": {
          "example": true
        },
        "opts": {}
      },
      {
        "content": "<exception cref=\"${1:#:class}\">${2:#:description}</exception>",
        "doc": "",
        "grammar": "snu",
        "label": "<exception cref=\"\"></exception>",
        "matches": {
          "exception": true
        },
        "opts": {}
      },
      {
        "content": "<include file='${1:#:filename}' path='${2:#:tabpath}[@${3:#:name}=\"${4:#:id}\"]'/>",
        "doc": "",
        "grammar": "snu",
        "label": "<include file='' path=''/>",
        "matches": {
          "include": true
        },
        "opts": {}
      },
      {
        "content": "<param name=\"${1:#:name}\">${0:#:description}</param>",
        "doc": "",
        "grammar": "snu",
        "label": "<param name=\"\"></param>",
        "matches": {
          "param": true
        },
        "opts": {}
      },
      {
        "content": "<paramref name=\"${1:#:name}\"/>",
        "doc": "",
        "grammar": "snu",
        "label": "<paramref name=\"\"/>",
        "matches": {
          "paramref": true
        },
        "opts": {}
      },
      {
        "content": "<returns>${0:#:description}</returns>",
        "doc": "",
        "grammar": "snu",
        "label": "<returns></returns>",
        "matches": {
          "returns": true
        },
        "opts": {}
      },
      {
        "content": "<remarks>${0:#:description}</remarks>",
        "doc": "",
        "grammar": "snu",
        "label": "<remarks></remarks>",
        "matches": {
          "remarks": true
        },
        "opts": {}
      },
      {
        "content": "<see cref=\"${1:#:member}\"/>",
        "doc": "",
        "grammar": "snu",
        "label": "<see cref=\"\"/>",
        "matches": {
          "see": true
        },
        "opts": {}
      },
      {
        "content": "<seealso cref=\"${1:#:member}\"/>}",
        "doc": "",
        "grammar": "snu",
        "label": "<seealso cref=\"\"/>",
        "matches": {
          "seealso": true
        },
        "opts": {}
      },
      {
        "content": "<summary>${0:#:description}</summary>",
        "doc": "",
        "grammar": "snu",
        "label": "<summary></summary>",
        "matches": {
          "summary": true
        },
        "opts": {}
      },
      {
        "content": "<typeparam name=\"${1:#:name}\">${0:#:description}</typeparam>",
        "doc": "",
        "grammar": "snu",
        "label": "<typeparam name=\"\"></typeparam>",
        "matches": {
          "typeparam": true
        },
        "opts": {}
      },
      {
        "content": "<typeparamref name=\"${1:#:name}\"/>",
        "doc": "",
        "grammar": "snu",
        "label": "<typeparamref name=\"\"/>",
        "matches": {
          "typeparamref": true
        },
        "opts": {}
      },
      {
        "content": "<value>${0:#:description}</value>",
        "doc": "",
        "grammar": "snu",
        "label": "<value></value>",
        "matches": {
          "value": true
        },
        "opts": {}
      },
      {
        "content": "public static void Main(string[] args) {\n    ${0}\n}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "main": true
        },
        "opts": {
          "head": true
        }
      },
      {
        "content": "Console.WriteLine(${1:#:message});${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "println p": true,
          "writeline": true
        },
        "opts": {
          "head": true
        }
      },
      {
        "content": "Console.Write(${1:#:message});${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "print": true,
          "write": true
        },
        "opts": {
          "head": true
        }
      },
      {
        "content": "public class ${1:Hello} {\n    public static void Main(string[] args) {\n        System.Console.WriteLine(\"Hello, world!\");\n    }\n}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "helloworld": true
        },
        "opts": {
          "head": true
        }
      },
      {
        "content": "[TestFixture]\npublic class ${1}Test {\n    ${0:TARGET}\n}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "tc": true,
          "testclass": true
        },
        "opts": {
          "head": true
        }
      },
      {
        "content": "[SetUp]\npublic void SetUp() {\n    ${0:TARGET}\n}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "testsetup": true,
          "tsu": true
        },
        "opts": {
          "head": true
        }
      },
      {
        "content": "[TearDown]\npublic void TearDown() {\n    ${0:TARGET}\n}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "testteardown": true,
          "ttd": true
        },
        "opts": {
          "head": true
        }
      },
      {
        "content": "[Test]\npublic void ${1:#:Name}Test() {\n    ${0:TARGET}\n}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "test": true
        },
        "opts": {
          "head": true
        }
      },
      {
        "content": "[Category(\"${0:#:category}\")]",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "category": true
        },
        "opts": {
          "head": true
        }
      },
      {
        "content": "${1:public} static int Main(string[] args)\n{\n\t${0}\n\treturn 0;\n}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "sim": true
        },
        "opts": {}
      },
      {
        "content": "public class Application\n{\n\t${1:public} static int Main(string[] args)\n\t{\n\t\t${0}\n\t\treturn 0;\n\t}\n}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "simc": true
        },
        "opts": {}
      },
      {
        "content": "${1:public} static void Main(string[] args)\n{\n\t${0}\n}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "svm": true
        },
        "opts": {}
      },
      {
        "content": "if (${1:true})\n{\n\t${0:${VISUAL}}\n}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "if": true
        },
        "opts": {}
      },
      {
        "content": "else\n{\n\t${0:${VISUAL}}\n}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "el": true
        },
        "opts": {}
      },
      {
        "content": "if (${1})\n\t${0:${VISUAL}}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ifs": true
        },
        "opts": {}
      },
      {
        "content": "${1} ? ${2} : ${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "t": true
        },
        "opts": {}
      },
      {
        "content": "${1} ? ${2} : ${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "?": true
        },
        "opts": {}
      },
      {
        "content": "do\n{\n\t${0:${VISUAL}}\n} while (${1:true});",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "do": true
        },
        "opts": {}
      },
      {
        "content": "while (${1:true})\n{\n\t${0:${VISUAL}}\n}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "wh": true
        },
        "opts": {}
      },
      {
        "content": "for (int ${1:i} = 0; $1 < ${2:count}; $1${3:++})\n{\n\t${0}\n}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "for": true
        },
        "opts": {}
      },
      {
        "content": "for (int ${1:i} = ${2:length}; $1 >= 0; $1--)\n{\n\t${0}\n}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "forr": true
        },
        "opts": {}
      },
      {
        "content": "foreach (${1:var} ${2:entry} in ${3})\n{\n\t${0}\n}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "fore": true
        },
        "opts": {}
      },
      {
        "content": "foreach (${1:var} ${2:entry} in ${3})\n{\n\t${0}\n}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "foreach": true
        },
        "opts": {}
      },
      {
        "content": "foreach (${1:var} ${2:entry} in ${3})\n{\n\t${0}\n}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "each": true
        },
        "opts": {}
      },
      {
        "content": "${1:public} ${2:int} ${3} { get; set; }",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "prop": true
        },
        "opts": {}
      },
      {
        "content": "${1:public} ${2:int} ${3} { get; set; }",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "p": true
        },
        "opts": {}
      },
      {
        "content": "public ${1:int} ${2} { get; set; }",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "p+": true
        },
        "opts": {}
      },
      {
        "content": "public ${1:int} ${2} { get; internal set; }",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "p+&": true
        },
        "opts": {}
      },
      {
        "content": "public ${1:int} ${2} { get; protected set; }",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "p+|": true
        },
        "opts": {}
      },
      {
        "content": "public ${1:int} ${2} { get; private set; }",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "p+-": true
        },
        "opts": {}
      },
      {
        "content": "internal ${1:int} ${2} { get; set; }",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "p&": true
        },
        "opts": {}
      },
      {
        "content": "internal ${1:int} ${2} { get; protected set; }",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "p&|": true
        },
        "opts": {}
      },
      {
        "content": "internal ${1:int} ${2} { get; private set; }",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "p&-": true
        },
        "opts": {}
      },
      {
        "content": "protected ${1:int} ${2} { get; set; }",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "p|": true
        },
        "opts": {}
      },
      {
        "content": "protected ${1:int} ${2} { get; private set; }",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "p|-": true
        },
        "opts": {}
      },
      {
        "content": "private ${1:int} ${2} { get; set; }",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "p-": true
        },
        "opts": {}
      },
      {
        "content": "${1:public} int ${2} { get; set; }",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "pi": true
        },
        "opts": {}
      },
      {
        "content": "public int ${1} { get; set; }",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "pi+": true
        },
        "opts": {}
      },
      {
        "content": "public int ${1} { get; internal set; }",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "pi+&": true
        },
        "opts": {}
      },
      {
        "content": "public int ${1} { get; protected set; }",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "pi+|": true
        },
        "opts": {}
      },
      {
        "content": "public int ${1} { get; private set; }",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "pi+-": true
        },
        "opts": {}
      },
      {
        "content": "internal int ${1} { get; set; }",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "pi&": true
        },
        "opts": {}
      },
      {
        "content": "internal int ${1} { get; protected set; }",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "pi&|": true
        },
        "opts": {}
      },
      {
        "content": "internal int ${1} { get; private set; }",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "pi&-": true
        },
        "opts": {}
      },
      {
        "content": "protected int ${1} { get; set; }",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "pi|": true
        },
        "opts": {}
      },
      {
        "content": "protected int ${1} { get; private set; }",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "pi|-": true
        },
        "opts": {}
      },
      {
        "content": "private int ${1} { get; set; }",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "pi-": true
        },
        "opts": {}
      },
      {
        "content": "${1:public} bool ${2} { get; set; }",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "pb": true
        },
        "opts": {}
      },
      {
        "content": "public bool ${1} { get; set; }",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "pb+": true
        },
        "opts": {}
      },
      {
        "content": "public bool ${1} { get; internal set; }",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "pb+&": true
        },
        "opts": {}
      },
      {
        "content": "public bool ${1} { get; protected set; }",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "pb+|": true
        },
        "opts": {}
      },
      {
        "content": "public bool ${1} { get; private set; }",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "pb+-": true
        },
        "opts": {}
      },
      {
        "content": "internal bool ${1} { get; set; }",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "pb&": true
        },
        "opts": {}
      },
      {
        "content": "internal bool ${1} { get; protected set; }",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "pb&|": true
        },
        "opts": {}
      },
      {
        "content": "internal bool ${1} { get; private set; }",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "pb&-": true
        },
        "opts": {}
      },
      {
        "content": "protected bool ${1} { get; set; }",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "pb|": true
        },
        "opts": {}
      },
      {
        "content": "protected bool ${1} { get; private set; }",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "pb|-": true
        },
        "opts": {}
      },
      {
        "content": "private bool ${1} { get; set; }",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "pb-": true
        },
        "opts": {}
      },
      {
        "content": "${1:public} string ${2} { get; set; }",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ps": true
        },
        "opts": {}
      },
      {
        "content": "public string ${1} { get; set; }",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ps+": true
        },
        "opts": {}
      },
      {
        "content": "public string ${1} { get; internal set; }",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ps+&": true
        },
        "opts": {}
      },
      {
        "content": "public string ${1} { get; protected set; }",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ps+|": true
        },
        "opts": {}
      },
      {
        "content": "public string ${1} { get; private set; }",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ps+-": true
        },
        "opts": {}
      },
      {
        "content": "internal string ${1} { get; set; }",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ps&": true
        },
        "opts": {}
      },
      {
        "content": "internal string ${1} { get; protected set; }",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ps&|": true
        },
        "opts": {}
      },
      {
        "content": "internal string ${1} { get; private set; }",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ps&-": true
        },
        "opts": {}
      },
      {
        "content": "protected string ${1} { get; set; }",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ps|": true
        },
        "opts": {}
      },
      {
        "content": "protected string ${1} { get; private set; }",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ps|-": true
        },
        "opts": {}
      },
      {
        "content": "private string ${1} { get; set; }",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ps-": true
        },
        "opts": {}
      },
      {
        "content": "${1:public} ${2:void} ${3}(${4})\n{\n\t${0}\n}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "m": true
        },
        "opts": {}
      },
      {
        "content": "public ${1:void} ${2}(${3})\n{\n\t${0}\n}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "m+": true
        },
        "opts": {}
      },
      {
        "content": "internal ${1:void} ${2}(${3})\n{\n\t${0}\n}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "m&": true
        },
        "opts": {}
      },
      {
        "content": "protected ${1:void} ${2}(${3})\n{\n\t${0}\n}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "m|": true
        },
        "opts": {}
      },
      {
        "content": "private ${1:void} ${2}(${3})\n{\n\t${0}\n}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "m-": true
        },
        "opts": {}
      },
      {
        "content": "${1:public} int ${2}(${3})\n{\n\t${0:return 0;}\n}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "mi": true
        },
        "opts": {}
      },
      {
        "content": "public int ${1}(${2})\n{\n\t${0:return 0;}\n}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "mi+": true
        },
        "opts": {}
      },
      {
        "content": "internal int ${1}(${2})\n{\n\t${0:return 0;}\n}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "mi&": true
        },
        "opts": {}
      },
      {
        "content": "protected int ${1}(${2})\n{\n\t${0:return 0;}\n}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "mi|": true
        },
        "opts": {}
      },
      {
        "content": "private int ${1}(${2})\n{\n\t${0:return 0;}\n}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "mi-": true
        },
        "opts": {}
      },
      {
        "content": "${1:public} bool ${2}(${3})\n{\n\t${0:return false;}\n}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "mb": true
        },
        "opts": {}
      },
      {
        "content": "public bool ${1}(${2})\n{\n\t${0:return false;}\n}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "mb+": true
        },
        "opts": {}
      },
      {
        "content": "internal bool ${1}(${2})\n{\n\t${0:return false;}\n}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "mb&": true
        },
        "opts": {}
      },
      {
        "content": "protected bool ${1}(${2})\n{\n\t${0:return false;}\n}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "mb|": true
        },
        "opts": {}
      },
      {
        "content": "private bool ${1}(${2})\n{\n\t${0:return false;}\n}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "mb-": true
        },
        "opts": {}
      },
      {
        "content": "${1:public} string ${2}(${3})\n{\n\t${0:return \"\";}\n}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ms": true
        },
        "opts": {}
      },
      {
        "content": "public string ${1}(${2})\n{\n\t${0:return \"\";}\n}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ms+": true
        },
        "opts": {}
      },
      {
        "content": "internal string ${1}(${2})\n{\n\t${0:return \"\";}\n}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ms&": true
        },
        "opts": {}
      },
      {
        "content": "protected string ${1:}(${2:})\n{\n\t${0:return \"\";}\n}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ms|": true
        },
        "opts": {}
      },
      {
        "content": "private string ${1}(${2})\n{\n\t${0:return \"\";}\n}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ms-": true
        },
        "opts": {}
      },
      {
        "content": "enum ${1}\n{\n\t${0}\n}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "enum": true
        },
        "opts": {}
      },
      {
        "content": "public enum ${1}\n{\n\t${0}\n}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "enum+": true
        },
        "opts": {}
      },
      {
        "content": "#if\n\t${0}\n#endif",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "#if": true
        },
        "opts": {}
      },
      {
        "content": "/// <summary>\n/// ${0}\n/// </summary>",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "///": true
        },
        "opts": {}
      },
      {
        "content": "<param name=\"${1}\">${2:$1}</param>",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "<p": true
        },
        "opts": {}
      },
      {
        "content": "<exception cref=\"${1:System.Exception}\">${2}</exception>",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "<ex": true
        },
        "opts": {}
      },
      {
        "content": "<returns>${1}</returns>",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "<r": true
        },
        "opts": {}
      },
      {
        "content": "<see cref=\"${1}\"/>",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "<s": true
        },
        "opts": {}
      },
      {
        "content": "<remarks>${1}</remarks>",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "<rem": true
        },
        "opts": {}
      },
      {
        "content": "<code>${1}</code>",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "<c": true
        },
        "opts": {}
      },
      {
        "content": "Console.WriteLine(${1});",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "cw": true
        },
        "opts": {}
      },
      {
        "content": "public override bool Equals(object obj)\n{\n\tif (obj == null || GetType() != obj.GetType())\n\t{\n\t\treturn false;\n\t}\n\t${0:throw new NotImplementedException();}\n\treturn base.Equals(obj);\n}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "eq": true
        },
        "opts": {}
      },
      {
        "content": "public class ${1:MyException} : ${2:Exception}\n{\n\tpublic $1() { }\n\tpublic $1(string message) : base(message) { }\n\tpublic $1(string message, Exception inner) : base(message, inner) { }\n\tprotected $1(\n\t\tSystem.Runtime.Serialization.SerializationInfo info,\n\t\tSystem.Runtime.Serialization.StreamingContext context)\n\t\t\t: base(info, context) { }\n}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "exc": true
        },
        "opts": {}
      },
      {
        "content": "public ${1:object} this[${2:int} index]\n{\n\tget { ${0} }\n\tset { ${0} }\n}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "index": true
        },
        "opts": {}
      },
      {
        "content": "EventHandler temp = ${1:MyEvent};\nif (${2:temp} != null)\n{\n\t$2();\n}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "inv": true
        },
        "opts": {}
      },
      {
        "content": "lock (${1:this})\n{\n\t${0}\n}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "lock": true
        },
        "opts": {}
      },
      {
        "content": "namespace ${1:MyNamespace}\n{\n\t${0}\n}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "namespace": true
        },
        "opts": {}
      },
      {
        "content": "public ${1:int} ${2:MyProperty} { get; set; }",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "propr": true
        },
        "opts": {}
      },
      {
        "content": "private ${1:int} ${2:myVar};\npublic $1 ${3:MyProperty}\n{\n\tget { return $2; }\n\tset { $2 = value; }\n}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "propf": true
        },
        "opts": {}
      },
      {
        "content": "public ${1:int} ${2:MyProperty} { get; private set; }",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "propg": true
        },
        "opts": {}
      },
      {
        "content": "switch (${1:switch_on})\n{\n\t${0}\n\tdefault:\n}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "switch": true
        },
        "opts": {}
      },
      {
        "content": "try\n{\n\t${0:${VISUAL}}\n}\ncatch (${1:System.Exception})\n{\n\tthrow;\n}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "try": true
        },
        "opts": {}
      },
      {
        "content": "try\n{\n\t${0:${VISUAL}}\n}\nfinally\n{\n\t${1}\n}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "tryf": true
        },
        "opts": {}
      },
      {
        "content": "using (${1:resource})\n{\n\t${0}\n}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "usi": true
        },
        "opts": {}
      },
      {
        "content": "namespace ${1:MyNamespace}\n{\n\t${VISUAL}$0\n}",
        "doc": null,
        "grammar": "snu",
        "label": "namespace",
        "matches": {
          "namespace": true
        },
        "opts": {
          "b": true
        }
      },
      {
        "content": "enum ${1:MyEnum} { ${2:Item} };",
        "doc": null,
        "grammar": "snu",
        "label": "enumeration",
        "matches": {
          "enum": true
        },
        "opts": {
          "b": true
        }
      },
      {
        "content": "static int Main(string[] args)\n{\n\t$0\n}",
        "doc": null,
        "grammar": "snu",
        "label": "static int main",
        "matches": {
          "sim": true
        },
        "opts": {
          "b": true
        }
      },
      {
        "content": "static void Main(string[] args)\n{\n\t$0\n}",
        "doc": null,
        "grammar": "snu",
        "label": "static void main",
        "matches": {
          "svm": true
        },
        "opts": {
          "b": true
        }
      },
      {
        "content": "public ${1:int} ${2:MyProperty} { get; set; }",
        "doc": null,
        "grammar": "snu",
        "label": "Simple property declaration",
        "matches": {
          "prop": true
        },
        "opts": {
          "b": true
        }
      },
      {
        "content": "private ${1:int} ${2:_myProperty};\n\npublic $1 ${3:MyProperty}\n{\n\tget { return $2; }\n\tset { $2 = value; }\n}",
        "doc": null,
        "grammar": "snu",
        "label": "Full property declaration",
        "matches": {
          "propfull": true
        },
        "opts": {
          "b": true
        }
      },
      {
        "content": "public ${1:int} ${2:MyProperty} { get; private set; }",
        "doc": null,
        "grammar": "snu",
        "label": "Property with a private setter",
        "matches": {
          "propg": true
        },
        "opts": {
          "b": true
        }
      },
      {
        "content": "#if ${1:DEBUG}\n${VISUAL}$0\n#endif",
        "doc": null,
        "grammar": "snu",
        "label": "#if #endif",
        "matches": {
          "#if": true
        },
        "opts": {
          "b": true
        }
      },
      {
        "content": "#region ${1:Region}\n${VISUAL}$0\n#endregion",
        "doc": null,
        "grammar": "snu",
        "label": "#region #endregion",
        "matches": {
          "#region": true
        },
        "opts": {
          "b": true
        }
      },
      {
        "content": "for (int ${1:i} = 0; $1 < ${2:10}; $1++)\n{\n\t${VISUAL}$0\n}",
        "doc": null,
        "grammar": "snu",
        "label": "for loop",
        "matches": {
          "for": true
        },
        "opts": {
          "b": true
        }
      },
      {
        "content": "for (int ${1:i} = ${2:10}; $1 >= 0; $1--)\n{\n\t${VISUAL}$0\n}",
        "doc": null,
        "grammar": "snu",
        "label": "for loop (reverse)",
        "matches": {
          "forr": true
        },
        "opts": {
          "b": true
        }
      },
      {
        "content": "foreach (${3:var} ${2:item} in ${1:items})\n{\n\t${VISUAL}$0\n}",
        "doc": null,
        "grammar": "snu",
        "label": "foreach loop",
        "matches": {
          "foreach": true
        },
        "opts": {
          "b": true
        }
      },
      {
        "content": "while (${1:true})\n{\n\t${VISUAL}$0\n}",
        "doc": null,
        "grammar": "snu",
        "label": "while loop",
        "matches": {
          "while": true
        },
        "opts": {
          "b": true
        }
      },
      {
        "content": "do\n{\n\t${VISUAL}$0\n} while (${1:true});",
        "doc": null,
        "grammar": "snu",
        "label": "do loop",
        "matches": {
          "do": true
        },
        "opts": {
          "b": true
        }
      },
      {
        "content": "if ($1)\n{\n\t${VISUAL}$0\n}",
        "doc": null,
        "grammar": "snu",
        "label": "if statement",
        "matches": {
          "if": true
        },
        "opts": {
          "b": true
        }
      },
      {
        "content": "if ($1)\n{\n\t${VISUAL}$0\n}\nelse\n{\n}",
        "doc": null,
        "grammar": "snu",
        "label": "if else statement",
        "matches": {
          "ife": true
        },
        "opts": {
          "b": true
        }
      },
      {
        "content": "else if ($1)\n{\n\t$0\n}",
        "doc": null,
        "grammar": "snu",
        "label": "else if",
        "matches": {
          "elif": true
        },
        "opts": {
          "b": true
        }
      },
      {
        "content": "else if ($1)\n{\n\t$0\n}",
        "doc": null,
        "grammar": "snu",
        "label": "else if",
        "matches": {
          "elseif": true
        },
        "opts": {
          "b": true
        }
      },
      {
        "content": "if ($1 != null)\n{\n\t${VISUAL}$0\n}",
        "doc": null,
        "grammar": "snu",
        "label": "if not null",
        "matches": {
          "ifnn": true
        },
        "opts": {
          "b": true
        }
      },
      {
        "content": "switch (${1:statement})\n{\n\tcase ${2:value}:\n\t\tbreak;\n\n\tdefault:\n\t\t$0break;\n}",
        "doc": null,
        "grammar": "snu",
        "label": "switch statement",
        "matches": {
          "switch": true
        },
        "opts": {
          "b": true
        }
      },
      {
        "content": "case ${1:value}:\n\t$2\n\tbreak;",
        "doc": null,
        "grammar": "snu",
        "label": "case",
        "matches": {
          "case": true
        },
        "opts": {
          "b": true
        }
      },
      {
        "content": "using (${1:resource})\n{\n\t${VISUAL}$0\n}",
        "doc": null,
        "grammar": "snu",
        "label": "using statement",
        "matches": {
          "using": true
        },
        "opts": {
          "b": true
        }
      },
      {
        "content": "unchecked\n{\n\t${VISUAL}$0\n}",
        "doc": null,
        "grammar": "snu",
        "label": "unchecked block",
        "matches": {
          "unchecked": true
        },
        "opts": {
          "b": true
        }
      },
      {
        "content": "checked\n{\n\t${VISUAL}$0\n}",
        "doc": null,
        "grammar": "snu",
        "label": "checked block",
        "matches": {
          "checked": true
        },
        "opts": {
          "b": true
        }
      },
      {
        "content": "unsafe\n{\n\t${VISUAL}$0\n}",
        "doc": null,
        "grammar": "snu",
        "label": "unsafe",
        "matches": {
          "unsafe": true
        },
        "opts": {
          "b": true
        }
      },
      {
        "content": "try\n{\n\t${VISUAL}$0\n}\ncatch (${1:Exception} ${2:e})\n{\n\tthrow;\n}",
        "doc": null,
        "grammar": "snu",
        "label": "try catch block",
        "matches": {
          "try": true
        },
        "opts": {
          "b": true
        }
      },
      {
        "content": "try\n{\n\t${VISUAL}$0\n}\nfinally\n{\n}",
        "doc": null,
        "grammar": "snu",
        "label": "try finally block",
        "matches": {
          "tryf": true
        },
        "opts": {
          "b": true
        }
      },
      {
        "content": "throw new $1Exception(\"$2\");",
        "doc": null,
        "grammar": "snu",
        "label": "throw",
        "matches": {
          "throw": true
        },
        "opts": {}
      },
      {
        "content": "var ${1:seq} =\n\tfrom ${2:item1} in ${3:items1}\n\tjoin ${4:item2} in ${5:items2} on $2.${6:prop1} equals $4.${7:prop2}\n\tselect ${8:$2.prop3}\n\twhere ${9:clause}",
        "doc": null,
        "grammar": "snu",
        "label": "LINQ syntax",
        "matches": {
          "from": true
        },
        "opts": {
          "b": true
        }
      },
      {
        "content": "Debug.Assert(${1:true});",
        "doc": null,
        "grammar": "snu",
        "label": "Debug.Assert",
        "matches": {
          "da": true
        },
        "opts": {
          "b": true
        }
      },
      {
        "content": "Console.WriteLine(\"$1\");",
        "doc": null,
        "grammar": "snu",
        "label": "Console.WriteLine",
        "matches": {
          "cw": true
        },
        "opts": {
          "b": true
        }
      },
      {
        "content": "Console.ReadLine();",
        "doc": null,
        "grammar": "snu",
        "label": "Console.ReadLine",
        "matches": {
          "cr": true
        },
        "opts": {
          "b": true
        }
      },
      {
        "content": "MessageBox.Show(\"${1:message}\");",
        "doc": null,
        "grammar": "snu",
        "label": "Message box",
        "matches": {
          "mbox": true
        },
        "opts": {
          "b": true
        }
      },
      {
        "content": "public override bool Equals(object obj) => Equals(obj as ${1:TYPE});\n\npublic bool Equals($1 other)  // IEquatable<$1>\n{\n\tif (object.ReferenceEquals(other, null))\n\t\treturn false;\n\tif (object.ReferenceEquals(this, other))\n\t\treturn true;\n\tif (this.GetType() != other.GetType())\n\t\treturn false;\n\t$0\n\treturn base.Equals(other);\n}\n\npublic override int GetHashCode() => base.GetHashCode();\n\npublic static bool operator ==($1 x, $1 y) =>\n\t(object.ReferenceEquals(x, null) && object.ReferenceEquals(y, null))\n\t|| (!object.ReferenceEquals(x, null) && x.Equals(y));\n\npublic static bool operator !=($1 x, $1 y) => !(x == y);\n",
        "doc": null,
        "grammar": "snu",
        "label": "Equality for a type",
        "matches": {
          "equals": true
        },
        "opts": {
          "b": true
        }
      },
      {
        "content": "${1:public} ${2:void} ${3:MyMethod}(${4})\n{\n\t$0\n}",
        "doc": null,
        "grammar": "snu",
        "label": "Method",
        "matches": {
          "mth": true
        },
        "opts": {
          "b": true
        }
      },
      {
        "content": "${1:public} static ${2:void} ${3:MyMethod}(${4})\n{\n\t$0\n}",
        "doc": null,
        "grammar": "snu",
        "label": "Static method",
        "matches": {
          "mths": true
        },
        "opts": {
          "b": true
        }
      },
      {
        "content": "/// <summary>\n/// $0\n/// </summary>",
        "doc": null,
        "grammar": "snu",
        "label": "XML summary comment",
        "matches": {
          "///": true
        },
        "opts": {
          "b": true
        }
      },
      {
        "content": "<param name=\"${1}\">${2}</param>",
        "doc": null,
        "grammar": "snu",
        "label": "XML pramameter comment",
        "matches": {
          "<p": true
        },
        "opts": {
          "w": true
        }
      },
      {
        "content": "<exception cref=\"${1:System.Exception}\">${2}</exception>",
        "doc": null,
        "grammar": "snu",
        "label": "XML exception comment",
        "matches": {
          "<ex": true
        },
        "opts": {
          "w": true
        }
      },
      {
        "content": "<returns>$0</returns>",
        "doc": null,
        "grammar": "snu",
        "label": "XML returns comment",
        "matches": {
          "<r": true
        },
        "opts": {
          "w": true
        }
      },
      {
        "content": "<code>$0</code>",
        "doc": null,
        "grammar": "snu",
        "label": "XML code comment",
        "matches": {
          "<c": true
        },
        "opts": {
          "w": true
        }
      }
    ],
    "css": [
      {
        "content": "background: ${1};${2}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "background": true,
          "bg": true
        },
        "opts": {}
      },
      {
        "content": "background-attachment: ${1};${2}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ba": true,
          "backattachment": true
        },
        "opts": {}
      },
      {
        "content": "background-color: ${1};${2}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "backcolor": true,
          "bc": true
        },
        "opts": {}
      },
      {
        "content": "background-image: ${1};${2}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "backimage": true,
          "bi": true
        },
        "opts": {}
      },
      {
        "content": "background-position: ${1};${2}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "backposition": true,
          "bp": true
        },
        "opts": {}
      },
      {
        "content": "background-repeat: ${1};${2}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "backrepeat": true,
          "br": true
        },
        "opts": {}
      },
      {
        "content": "border: ${1};${2}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "b": true,
          "border": true
        },
        "opts": {}
      },
      {
        "content": "border-style: ${1};${2}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "border-style": true,
          "bs": true
        },
        "opts": {}
      },
      {
        "content": "border-color: ${1};${2}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "bc": true,
          "border-color": true
        },
        "opts": {}
      },
      {
        "content": "border-width: ${1};${2}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "border-width": true,
          "bw": true
        },
        "opts": {}
      },
      {
        "content": "border-bottom-width: ${1};${2}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "bbw": true,
          "border-bottom-width": true
        },
        "opts": {}
      },
      {
        "content": "border-top-width: ${1};${2}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "border-top-width": true,
          "btw": true
        },
        "opts": {}
      },
      {
        "content": "border-left-width: ${1};${2}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "blw": true,
          "border-left-width": true
        },
        "opts": {}
      },
      {
        "content": "border-right-width: ${1};${2}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "border-right-width": true,
          "brw": true
        },
        "opts": {}
      },
      {
        "content": "border-bottom-style: ${1};${2}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "bbs": true,
          "border-bottom-style": true
        },
        "opts": {}
      },
      {
        "content": "border-top-style: ${1};${2}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "border-top-style": true,
          "bts": true
        },
        "opts": {}
      },
      {
        "content": "border-left-style: ${1};${2}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "bls": true,
          "border-left-style": true
        },
        "opts": {}
      },
      {
        "content": "border-right-style: ${1};${2}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "border-right-style": true,
          "brs": true
        },
        "opts": {}
      },
      {
        "content": "border-bottom-color: ${1};${2}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "bbc": true,
          "border-bottom-color": true
        },
        "opts": {}
      },
      {
        "content": "border-top-color: ${1};${2}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "border-top-color": true,
          "btc": true
        },
        "opts": {}
      },
      {
        "content": "border-left-color: ${1};${2}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "blc": true,
          "border-left-color": true
        },
        "opts": {}
      },
      {
        "content": "border-right-color: ${1};${2}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "border-right-color": true,
          "brc": true
        },
        "opts": {}
      },
      {
        "content": "outline: ${1};${2}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ol": true,
          "outline": true
        },
        "opts": {}
      },
      {
        "content": "outline-color: ${1};${2}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "oc": true,
          "outline-color": true
        },
        "opts": {}
      },
      {
        "content": "outline-style: ${1};${2}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "os": true,
          "outline-style": true
        },
        "opts": {}
      },
      {
        "content": "outline-width: ${1};${2}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "outline-width": true,
          "ow": true
        },
        "opts": {}
      },
      {
        "content": "color: ${1};${2}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "c": true,
          "color": true
        },
        "opts": {}
      },
      {
        "content": "direction: ${1};${2}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "d": true,
          "direction": true
        },
        "opts": {}
      },
      {
        "content": "letter-spacing: ${1};${2}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "letter-spacing": true,
          "ls": true
        },
        "opts": {}
      },
      {
        "content": "line-height: ${1};${2}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "lh": true,
          "line-height": true
        },
        "opts": {}
      },
      {
        "content": "text-align: ${1};${2}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ta": true,
          "text-align": true
        },
        "opts": {}
      },
      {
        "content": "text-decoration: ${1};${2}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "td": true,
          "text-decoration": true
        },
        "opts": {}
      },
      {
        "content": "text-indent: ${1};${2}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "text-indent": true,
          "ti": true
        },
        "opts": {}
      },
      {
        "content": "text-transform: ${1};${2}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "text-transform": true,
          "tt": true
        },
        "opts": {}
      },
      {
        "content": "unicode-bidi: ${1};${2}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ub": true,
          "unicode-bidi": true
        },
        "opts": {}
      },
      {
        "content": "white-space: ${1};${2}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "white-space": true,
          "ws": true
        },
        "opts": {}
      },
      {
        "content": "word-spacing: ${1};${2}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "word-spacing": true,
          "ws": true
        },
        "opts": {}
      },
      {
        "content": "font: ${1};${2}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "f": true,
          "font": true
        },
        "opts": {}
      },
      {
        "content": "font-family: ${1:\"Times New Roman\",Georgia,Serif};${2}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ff": true,
          "font-family": true
        },
        "opts": {}
      },
      {
        "content": "font-size: ${1};${2}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "font-size": true,
          "fs": true
        },
        "opts": {}
      },
      {
        "content": "font-style: ${1};${2}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "font-style": true,
          "fs": true
        },
        "opts": {}
      },
      {
        "content": "font-weight: ${1};${2}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "font-weight": true,
          "fw": true
        },
        "opts": {}
      },
      {
        "content": "margin: ${1};${2}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "m": true,
          "margin": true
        },
        "opts": {}
      },
      {
        "content": "margin-bottom: ${1};${2}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "margin-bottom": true,
          "mb": true
        },
        "opts": {}
      },
      {
        "content": "margin-top: ${1};${2}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "margin-top": true,
          "mt": true
        },
        "opts": {}
      },
      {
        "content": "margin-left: ${1};${2}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "margin-left": true,
          "ml": true
        },
        "opts": {}
      },
      {
        "content": "margin-right: ${1};${2}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "margin-right": true,
          "mr": true
        },
        "opts": {}
      },
      {
        "content": "padding: ${1};${2}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "p": true,
          "padding": true
        },
        "opts": {}
      },
      {
        "content": "padding-bottom: ${1};${2}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "padding-bottom": true,
          "pb": true
        },
        "opts": {}
      },
      {
        "content": "padding-top: ${1};${2}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "padding-top": true,
          "pt": true
        },
        "opts": {}
      },
      {
        "content": "padding-left: ${1};${2}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "padding-left": true,
          "pl": true
        },
        "opts": {}
      },
      {
        "content": "padding-right: ${1};${2}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "padding-right": true,
          "pr": true
        },
        "opts": {}
      },
      {
        "content": "list-style: ${1};${2}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "list-style": true,
          "ls": true
        },
        "opts": {}
      },
      {
        "content": "list-style-image: ${1};${2}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "list-style-image": true,
          "lsi": true
        },
        "opts": {}
      },
      {
        "content": "list-style-position: ${1};${2}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "list-style-position": true,
          "lsp": true
        },
        "opts": {}
      },
      {
        "content": "list-style-type: ${1};${2}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "list-style-type": true,
          "lst": true
        },
        "opts": {}
      },
      {
        "content": "content: ${1};${2}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "c": true,
          "content": true
        },
        "opts": {}
      },
      {
        "content": "height: ${1};${2}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "h": true,
          "height": true
        },
        "opts": {}
      },
      {
        "content": "max-height: ${1};${2}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "mah": true,
          "max-height": true
        },
        "opts": {}
      },
      {
        "content": "max-width: ${1};${2}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "maw": true,
          "max-width": true
        },
        "opts": {}
      },
      {
        "content": "min-height: ${1};${2}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "mih": true,
          "min-height": true
        },
        "opts": {}
      },
      {
        "content": "min-width: ${1};${2}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "min-width": true,
          "miw": true
        },
        "opts": {}
      },
      {
        "content": "width: ${1};${2}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "w": true,
          "width": true
        },
        "opts": {}
      },
      {
        "content": "@media ${1:condition} {\n  ${0:TARGET}\n}",
        "doc": "",
        "grammar": "snu",
        "label": "@media ...",
        "matches": {
          "media": true
        },
        "opts": {
          "head": true
        }
      },
      {
        "content": "@media ${1:all} and (min-width: ${2:SIZE}) {\n  ${0:TARGET}\n}",
        "doc": "",
        "grammar": "snu",
        "label": "@media all and (min-width) {...}",
        "matches": {
          "media-min-width": true
        },
        "opts": {
          "head": true
        }
      },
      {
        "content": "@media ${1:all} and (max-width: ${2:SIZE}) {\n  ${0:TARGET}\n}",
        "doc": "",
        "grammar": "snu",
        "label": "@media all and (max-width) {...}",
        "matches": {
          "media-max-width": true
        },
        "opts": {
          "head": true
        }
      },
      {
        "content": "${1} {\n\t${2:${VISUAL}}\n}${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          ". \"selector { }\"": true
        },
        "opts": {}
      },
      {
        "content": "!important",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "! \"!important\"": true
        },
        "opts": {}
      },
      {
        "content": "-moz-border-image: url(${1}) ${2:0} ${3:0} ${4:0} ${5:0} ${6:stretch} ${7:stretch};${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "bdi:m+": true
        },
        "opts": {}
      },
      {
        "content": "-moz-border-image: ${1};${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "bdi:m": true
        },
        "opts": {}
      },
      {
        "content": "-moz-border-radius: ${1};${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "bdrz:m": true
        },
        "opts": {}
      },
      {
        "content": "-moz-box-shadow: ${1:0} ${2:0} ${3:0} #${4:000};${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "bxsh:m+": true
        },
        "opts": {}
      },
      {
        "content": "-moz-box-shadow: ${1};${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "bxsh:m": true
        },
        "opts": {}
      },
      {
        "content": "-webkit-border-image: url(${1}) ${2:0} ${3:0} ${4:0} ${5:0} ${6:stretch} ${7:stretch};${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "bdi:w+": true
        },
        "opts": {}
      },
      {
        "content": "-webkit-border-image: ${1};${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "bdi:w": true
        },
        "opts": {}
      },
      {
        "content": "-webkit-border-radius: ${1};${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "bdrz:w": true
        },
        "opts": {}
      },
      {
        "content": "-webkit-box-shadow: ${1:0} ${2:0} ${3:0} #${4:000};${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "bxsh:w+": true
        },
        "opts": {}
      },
      {
        "content": "-webkit-box-shadow: ${1};${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "bxsh:w": true
        },
        "opts": {}
      },
      {
        "content": "@font-face {\n\tfont-family: ${1};\n\tsrc: url(${2});\n}${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "@f": true
        },
        "opts": {}
      },
      {
        "content": "@import url(${1});${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "@i": true
        },
        "opts": {}
      },
      {
        "content": "@media ${1:print} {\n\t${2:${VISUAL}}\n}${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "@m \"@media mediatype { }\"": true
        },
        "opts": {}
      },
      {
        "content": "align-content: ${1:stretch};",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ac": true
        },
        "opts": {}
      },
      {
        "content": "align-content: start;",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ac:s": true
        },
        "opts": {}
      },
      {
        "content": "align-content: end;",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ac:e": true
        },
        "opts": {}
      },
      {
        "content": "align-content: center;",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ac:c": true
        },
        "opts": {}
      },
      {
        "content": "align-content: flex-start;",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ac:fs": true
        },
        "opts": {}
      },
      {
        "content": "align-content: flex-end;",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ac:fe": true
        },
        "opts": {}
      },
      {
        "content": "align-content: space-between;",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ac:sb": true
        },
        "opts": {}
      },
      {
        "content": "align-content: space-around;",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ac:sa": true
        },
        "opts": {}
      },
      {
        "content": "align-content: space-evenly;",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ac:se": true
        },
        "opts": {}
      },
      {
        "content": "align-content: stretch;",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ac:st": true
        },
        "opts": {}
      },
      {
        "content": "align-content: baseline;",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ac:b": true
        },
        "opts": {}
      },
      {
        "content": "align-content: first baseline;",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ac:fb": true
        },
        "opts": {}
      },
      {
        "content": "align-content: last baseline;",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ac:lb": true
        },
        "opts": {}
      },
      {
        "content": "align-items: ${1:stretch};",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ai": true
        },
        "opts": {}
      },
      {
        "content": "align-items: start;",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ai:s": true
        },
        "opts": {}
      },
      {
        "content": "align-items: end;",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ai:e": true
        },
        "opts": {}
      },
      {
        "content": "align-items: center;",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ai:c": true
        },
        "opts": {}
      },
      {
        "content": "align-items: flex-start;",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ai:fs": true
        },
        "opts": {}
      },
      {
        "content": "align-items: flex-end;",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ai:fe": true
        },
        "opts": {}
      },
      {
        "content": "align-items: stretch;",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ai:st": true
        },
        "opts": {}
      },
      {
        "content": "align-items: baseline;",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ai:b": true
        },
        "opts": {}
      },
      {
        "content": "align-items: first baseline;",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ai:fb": true
        },
        "opts": {}
      },
      {
        "content": "align-items: last baseline;",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ai:lb": true
        },
        "opts": {}
      },
      {
        "content": "align-self: ${1:stretch};",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "as": true
        },
        "opts": {}
      },
      {
        "content": "align-self: start;",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "as:s": true
        },
        "opts": {}
      },
      {
        "content": "align-self: end;",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "as:e": true
        },
        "opts": {}
      },
      {
        "content": "align-self: center;",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "as:c": true
        },
        "opts": {}
      },
      {
        "content": "align-self: stretch;",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "as:st": true
        },
        "opts": {}
      },
      {
        "content": "align-self: flex-start;",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "as:fs": true
        },
        "opts": {}
      },
      {
        "content": "align-self: flex-end;",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "as:fe": true
        },
        "opts": {}
      },
      {
        "content": "align-self: baseline;",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "as:b": true
        },
        "opts": {}
      },
      {
        "content": "align-self: first baseline;",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "as:fb": true
        },
        "opts": {}
      },
      {
        "content": "align-self: last baseline;",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "as:lb": true
        },
        "opts": {}
      },
      {
        "content": "background: #${1:fff} url(${2}) ${3:0} ${4:0} ${5:no-repeat};${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "bg+": true
        },
        "opts": {}
      },
      {
        "content": "background-attachment: ${1};${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "bga": true
        },
        "opts": {}
      },
      {
        "content": "background-attachment: fixed;",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "bga:f": true
        },
        "opts": {}
      },
      {
        "content": "background-attachment: scroll;",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "bga:s": true
        },
        "opts": {}
      },
      {
        "content": "background-break: ${1};${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "bgbk": true
        },
        "opts": {}
      },
      {
        "content": "background-break: bounding-box;",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "bgbk:bb": true
        },
        "opts": {}
      },
      {
        "content": "background-break: continuous;",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "bgbk:c": true
        },
        "opts": {}
      },
      {
        "content": "background-break: each-box;",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "bgbk:eb": true
        },
        "opts": {}
      },
      {
        "content": "background-clip: ${1};${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "bgcp": true
        },
        "opts": {}
      },
      {
        "content": "background-clip: border-box;",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "bgcp:bb": true
        },
        "opts": {}
      },
      {
        "content": "background-clip: content-box;",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "bgcp:cb": true
        },
        "opts": {}
      },
      {
        "content": "background-clip: no-clip;",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "bgcp:nc": true
        },
        "opts": {}
      },
      {
        "content": "background-clip: padding-box;",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "bgcp:pb": true
        },
        "opts": {}
      },
      {
        "content": "background-color: #${1:fff};${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "bgc": true
        },
        "opts": {}
      },
      {
        "content": "background-color: transparent;",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "bgc:t": true
        },
        "opts": {}
      },
      {
        "content": "background-image: url(${1});${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "bgi": true
        },
        "opts": {}
      },
      {
        "content": "background-image: none;",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "bgi:n": true
        },
        "opts": {}
      },
      {
        "content": "background-origin: ${1};${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "bgo": true
        },
        "opts": {}
      },
      {
        "content": "background-origin: border-box;",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "bgo:bb": true
        },
        "opts": {}
      },
      {
        "content": "background-origin: content-box;",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "bgo:cb": true
        },
        "opts": {}
      },
      {
        "content": "background-origin: padding-box;",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "bgo:pb": true
        },
        "opts": {}
      },
      {
        "content": "background-position-x: ${1};${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "bgpx": true
        },
        "opts": {}
      },
      {
        "content": "background-position-y: ${1};${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "bgpy": true
        },
        "opts": {}
      },
      {
        "content": "background-position: ${1:0} ${2:0};${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "bgp": true
        },
        "opts": {}
      },
      {
        "content": "background-repeat: ${1};${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "bgr": true
        },
        "opts": {}
      },
      {
        "content": "background-repeat: no-repeat;",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "bgr:n": true
        },
        "opts": {}
      },
      {
        "content": "background-repeat: repeat-x;",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "bgr:x": true
        },
        "opts": {}
      },
      {
        "content": "background-repeat: repeat-y;",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "bgr:y": true
        },
        "opts": {}
      },
      {
        "content": "background-repeat: repeat;",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "bgr:r": true
        },
        "opts": {}
      },
      {
        "content": "background-size: ${1};${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "bgz": true
        },
        "opts": {}
      },
      {
        "content": "background-size: auto;",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "bgz:a": true
        },
        "opts": {}
      },
      {
        "content": "background-size: contain;",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "bgz:ct": true
        },
        "opts": {}
      },
      {
        "content": "background-size: cover;",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "bgz:cv": true
        },
        "opts": {}
      },
      {
        "content": "background: ${1};${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "bg": true
        },
        "opts": {}
      },
      {
        "content": "filter: progid:DXImageTransform.Microsoft.AlphaImageLoader(src='${1}',sizingMethod='${0:crop}');",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "bg:ie": true
        },
        "opts": {}
      },
      {
        "content": "background: none;",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "bg:n": true
        },
        "opts": {}
      },
      {
        "content": "border: ${1:1px} ${2:solid} #${3:000};${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "bd+": true
        },
        "opts": {}
      },
      {
        "content": "border-bottom: ${1:1px} ${2:solid} #${3:000};${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "bdb+": true
        },
        "opts": {}
      },
      {
        "content": "border-bottom-color: #${1:000};${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "bdbc": true
        },
        "opts": {}
      },
      {
        "content": "border-bottom-image: url(${1});${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "bdbi": true
        },
        "opts": {}
      },
      {
        "content": "border-bottom-image: none;",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "bdbi:n": true
        },
        "opts": {}
      },
      {
        "content": "border-bottom-left-image: url(${1});${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "bdbli": true
        },
        "opts": {}
      },
      {
        "content": "border-bottom-left-image: continue;",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "bdbli:c": true
        },
        "opts": {}
      },
      {
        "content": "border-bottom-left-image: none;",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "bdbli:n": true
        },
        "opts": {}
      },
      {
        "content": "border-bottom-left-radius: ${1};${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "bdblrz": true
        },
        "opts": {}
      },
      {
        "content": "border-bottom-right-image: url(${1});${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "bdbri": true
        },
        "opts": {}
      },
      {
        "content": "border-bottom-right-image: continue;",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "bdbri:c": true
        },
        "opts": {}
      },
      {
        "content": "border-bottom-right-image: none;",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "bdbri:n": true
        },
        "opts": {}
      },
      {
        "content": "border-bottom-right-radius: ${1};${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "bdbrrz": true
        },
        "opts": {}
      },
      {
        "content": "border-bottom-style: ${1};${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "bdbs": true
        },
        "opts": {}
      },
      {
        "content": "border-bottom-style: none;",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "bdbs:n": true
        },
        "opts": {}
      },
      {
        "content": "border-bottom-width: ${1};${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "bdbw": true
        },
        "opts": {}
      },
      {
        "content": "border-bottom: ${1};${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "bdb": true
        },
        "opts": {}
      },
      {
        "content": "border-bottom: none;",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "bdb:n": true
        },
        "opts": {}
      },
      {
        "content": "border-break: ${1};${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "bdbk": true
        },
        "opts": {}
      },
      {
        "content": "border-break: close;",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "bdbk:c": true
        },
        "opts": {}
      },
      {
        "content": "border-collapse: ${1};${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "bdcl": true
        },
        "opts": {}
      },
      {
        "content": "border-collapse: collapse;",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "bdcl:c": true
        },
        "opts": {}
      },
      {
        "content": "border-collapse: separate;",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "bdcl:s": true
        },
        "opts": {}
      },
      {
        "content": "border-color: #${1:000};${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "bdc": true
        },
        "opts": {}
      },
      {
        "content": "border-corner-image: url(${1});${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "bdci": true
        },
        "opts": {}
      },
      {
        "content": "border-corner-image: continue;",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "bdci:c": true
        },
        "opts": {}
      },
      {
        "content": "border-corner-image: none;",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "bdci:n": true
        },
        "opts": {}
      },
      {
        "content": "border-fit: ${1};${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "bdf": true
        },
        "opts": {}
      },
      {
        "content": "border-fit: clip;",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "bdf:c": true
        },
        "opts": {}
      },
      {
        "content": "border-fit: overwrite;",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "bdf:of": true
        },
        "opts": {}
      },
      {
        "content": "border-fit: overwrite;",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "bdf:ow": true
        },
        "opts": {}
      },
      {
        "content": "border-fit: repeat;",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "bdf:r": true
        },
        "opts": {}
      },
      {
        "content": "border-fit: scale;",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "bdf:sc": true
        },
        "opts": {}
      },
      {
        "content": "border-fit: space;",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "bdf:sp": true
        },
        "opts": {}
      },
      {
        "content": "border-fit: stretch;",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "bdf:st": true
        },
        "opts": {}
      },
      {
        "content": "border-image: url(${1}) ${2:0} ${3:0} ${4:0} ${5:0} ${6:stretch} ${7:stretch};${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "bdi": true
        },
        "opts": {}
      },
      {
        "content": "border-image: none;",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "bdi:n": true
        },
        "opts": {}
      },
      {
        "content": "border-left: ${1:1px} ${2:solid} #${3:000};${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "bdl+": true
        },
        "opts": {}
      },
      {
        "content": "border-left-color: #${1:000};${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "bdlc": true
        },
        "opts": {}
      },
      {
        "content": "border-left-image: url(${1});${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "bdli": true
        },
        "opts": {}
      },
      {
        "content": "border-left-image: none;",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "bdli:n": true
        },
        "opts": {}
      },
      {
        "content": "border-left-style: ${1};${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "bdls": true
        },
        "opts": {}
      },
      {
        "content": "border-left-style: none;",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "bdls:n": true
        },
        "opts": {}
      },
      {
        "content": "border-left-width: ${1};${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "bdlw": true
        },
        "opts": {}
      },
      {
        "content": "border-left: ${1};${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "bdl": true
        },
        "opts": {}
      },
      {
        "content": "border-left: none;",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "bdl:n": true
        },
        "opts": {}
      },
      {
        "content": "border-length: ${1};${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "bdlt": true
        },
        "opts": {}
      },
      {
        "content": "border-length: auto;",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "bdlt:a": true
        },
        "opts": {}
      },
      {
        "content": "border-radius: ${1};${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "bdrz": true
        },
        "opts": {}
      },
      {
        "content": "border-right: ${1:1px} ${2:solid} #${3:000};${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "bdr+": true
        },
        "opts": {}
      },
      {
        "content": "border-right-color: #${1:000};${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "bdrc": true
        },
        "opts": {}
      },
      {
        "content": "border-right-image: url(${1});${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "bdri": true
        },
        "opts": {}
      },
      {
        "content": "border-right-image: none;",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "bdri:n": true
        },
        "opts": {}
      },
      {
        "content": "border-right-style: ${1};${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "bdrs": true
        },
        "opts": {}
      },
      {
        "content": "border-right-style: none;",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "bdrs:n": true
        },
        "opts": {}
      },
      {
        "content": "border-right-width: ${1};${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "bdrw": true
        },
        "opts": {}
      },
      {
        "content": "border-right: ${1};${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "bdr": true
        },
        "opts": {}
      },
      {
        "content": "border-right: none;",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "bdr:n": true
        },
        "opts": {}
      },
      {
        "content": "border-spacing: ${1};${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "bdsp": true
        },
        "opts": {}
      },
      {
        "content": "border-style: ${1};${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "bds": true
        },
        "opts": {}
      },
      {
        "content": "border-style: dashed;",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "bds:ds": true
        },
        "opts": {}
      },
      {
        "content": "border-style: dot-dash;",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "bds:dtds": true
        },
        "opts": {}
      },
      {
        "content": "border-style: dot-dot-dash;",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "bds:dtdtds": true
        },
        "opts": {}
      },
      {
        "content": "border-style: dotted;",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "bds:dt": true
        },
        "opts": {}
      },
      {
        "content": "border-style: double;",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "bds:db": true
        },
        "opts": {}
      },
      {
        "content": "border-style: groove;",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "bds:g": true
        },
        "opts": {}
      },
      {
        "content": "border-style: hidden;",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "bds:h": true
        },
        "opts": {}
      },
      {
        "content": "border-style: inset;",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "bds:i": true
        },
        "opts": {}
      },
      {
        "content": "border-style: none;",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "bds:n": true
        },
        "opts": {}
      },
      {
        "content": "border-style: outset;",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "bds:o": true
        },
        "opts": {}
      },
      {
        "content": "border-style: ridge;",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "bds:r": true
        },
        "opts": {}
      },
      {
        "content": "border-style: solid;",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "bds:s": true
        },
        "opts": {}
      },
      {
        "content": "border-style: wave;",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "bds:w": true
        },
        "opts": {}
      },
      {
        "content": "border-top: ${1:1px} ${2:solid} #${3:000};${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "bdt+": true
        },
        "opts": {}
      },
      {
        "content": "border-top-color: #${1:000};${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "bdtc": true
        },
        "opts": {}
      },
      {
        "content": "border-top-image: url(${1});${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "bdti": true
        },
        "opts": {}
      },
      {
        "content": "border-top-image: none;",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "bdti:n": true
        },
        "opts": {}
      },
      {
        "content": "border-top-left-image: url(${1});${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "bdtli": true
        },
        "opts": {}
      },
      {
        "content": "border-corner-image: continue;",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "bdtli:c": true
        },
        "opts": {}
      },
      {
        "content": "border-corner-image: none;",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "bdtli:n": true
        },
        "opts": {}
      },
      {
        "content": "border-top-left-radius: ${1};${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "bdtlrz": true
        },
        "opts": {}
      },
      {
        "content": "border-top-right-image: url(${1});${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "bdtri": true
        },
        "opts": {}
      },
      {
        "content": "border-top-right-image: continue;",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "bdtri:c": true
        },
        "opts": {}
      },
      {
        "content": "border-top-right-image: none;",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "bdtri:n": true
        },
        "opts": {}
      },
      {
        "content": "border-top-right-radius: ${1};${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "bdtrrz": true
        },
        "opts": {}
      },
      {
        "content": "border-top-style: ${1};${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "bdts": true
        },
        "opts": {}
      },
      {
        "content": "border-top-style: none;",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "bdts:n": true
        },
        "opts": {}
      },
      {
        "content": "border-top-width: ${1};${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "bdtw": true
        },
        "opts": {}
      },
      {
        "content": "border-top: ${1};${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "bdt": true
        },
        "opts": {}
      },
      {
        "content": "border-top: none;",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "bdt:n": true
        },
        "opts": {}
      },
      {
        "content": "border-width: ${1};${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "bdw": true
        },
        "opts": {}
      },
      {
        "content": "border: ${1};${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "bd": true
        },
        "opts": {}
      },
      {
        "content": "border: none;",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "bd:n": true
        },
        "opts": {}
      },
      {
        "content": "bottom: ${1};${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "b": true
        },
        "opts": {}
      },
      {
        "content": "bottom: auto;",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "b:a": true
        },
        "opts": {}
      },
      {
        "content": "box-shadow: ${1:0} ${2:0} ${3:0} #${4:000};${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "bxsh+": true
        },
        "opts": {}
      },
      {
        "content": "box-shadow: ${1};${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "bxsh": true
        },
        "opts": {}
      },
      {
        "content": "box-shadow: none;",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "bxsh:n": true
        },
        "opts": {}
      },
      {
        "content": "box-sizing: ${1};${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "bxz": true
        },
        "opts": {}
      },
      {
        "content": "box-sizing: border-box;",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "bxz:bb": true
        },
        "opts": {}
      },
      {
        "content": "box-sizing: content-box;",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "bxz:cb": true
        },
        "opts": {}
      },
      {
        "content": "caption-side: ${1};${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "cps": true
        },
        "opts": {}
      },
      {
        "content": "caption-side: bottom;",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "cps:b": true
        },
        "opts": {}
      },
      {
        "content": "caption-side: top;",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "cps:t": true
        },
        "opts": {}
      },
      {
        "content": "clear: ${1};${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "cl": true
        },
        "opts": {}
      },
      {
        "content": "clear: both;",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "cl:b": true
        },
        "opts": {}
      },
      {
        "content": "clear: left;",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "cl:l": true
        },
        "opts": {}
      },
      {
        "content": "clear: none;",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "cl:n": true
        },
        "opts": {}
      },
      {
        "content": "clear: right;",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "cl:r": true
        },
        "opts": {}
      },
      {
        "content": "clip: ${1};${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "cp": true
        },
        "opts": {}
      },
      {
        "content": "clip: auto;",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "cp:a": true
        },
        "opts": {}
      },
      {
        "content": "clip: rect(${1:0} ${2:0} ${3:0} ${4:0});${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "cp:r": true
        },
        "opts": {}
      },
      {
        "content": "color: #${1:000};${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "c": true
        },
        "opts": {}
      },
      {
        "content": "content: ${1};${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ct": true
        },
        "opts": {}
      },
      {
        "content": "content: attr(${1});${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ct:a": true
        },
        "opts": {}
      },
      {
        "content": "content: close-quote;",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ct:cq": true
        },
        "opts": {}
      },
      {
        "content": "content: counter(${1});${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ct:c": true
        },
        "opts": {}
      },
      {
        "content": "content: counters(${1});${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ct:cs": true
        },
        "opts": {}
      },
      {
        "content": "content: no-close-quote;",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ct:ncq": true
        },
        "opts": {}
      },
      {
        "content": "content: no-open-quote;",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ct:noq": true
        },
        "opts": {}
      },
      {
        "content": "content: normal;",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ct:n": true
        },
        "opts": {}
      },
      {
        "content": "content: open-quote;",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ct:oq": true
        },
        "opts": {}
      },
      {
        "content": "counter-increment: ${1};${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "coi": true
        },
        "opts": {}
      },
      {
        "content": "counter-reset: ${1};${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "cor": true
        },
        "opts": {}
      },
      {
        "content": "cursor: ${1};${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "cur": true
        },
        "opts": {}
      },
      {
        "content": "cursor: auto;",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "cur:a": true
        },
        "opts": {}
      },
      {
        "content": "cursor: crosshair;",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "cur:c": true
        },
        "opts": {}
      },
      {
        "content": "cursor: default;",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "cur:d": true
        },
        "opts": {}
      },
      {
        "content": "cursor: hand;",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "cur:ha": true
        },
        "opts": {}
      },
      {
        "content": "cursor: help;",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "cur:he": true
        },
        "opts": {}
      },
      {
        "content": "cursor: move;",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "cur:m": true
        },
        "opts": {}
      },
      {
        "content": "cursor: pointer;",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "cur:p": true
        },
        "opts": {}
      },
      {
        "content": "cursor: text;",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "cur:t": true
        },
        "opts": {}
      },
      {
        "content": "display: ${1};${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "d": true
        },
        "opts": {}
      },
      {
        "content": "display: -moz-inline-box;",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "d:mib": true
        },
        "opts": {}
      },
      {
        "content": "display: -moz-inline-stack;",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "d:mis": true
        },
        "opts": {}
      },
      {
        "content": "display: block;",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "d:b": true
        },
        "opts": {}
      },
      {
        "content": "display: compact;",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "d:cp": true
        },
        "opts": {}
      },
      {
        "content": "display: grid;",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "d:g": true
        },
        "opts": {}
      },
      {
        "content": "display: flex;",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "d:f": true
        },
        "opts": {}
      },
      {
        "content": "display: inline-block;",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "d:ib": true
        },
        "opts": {}
      },
      {
        "content": "display: inline-table;",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "d:itb": true
        },
        "opts": {}
      },
      {
        "content": "display: inline;",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "d:i": true
        },
        "opts": {}
      },
      {
        "content": "display: list-item;",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "d:li": true
        },
        "opts": {}
      },
      {
        "content": "display: none;",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "d:n": true
        },
        "opts": {}
      },
      {
        "content": "display: run-in;",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "d:ri": true
        },
        "opts": {}
      },
      {
        "content": "display: table-caption;",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "d:tbcp": true
        },
        "opts": {}
      },
      {
        "content": "display: table-cell;",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "d:tbc": true
        },
        "opts": {}
      },
      {
        "content": "display: table-column-group;",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "d:tbclg": true
        },
        "opts": {}
      },
      {
        "content": "display: table-column;",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "d:tbcl": true
        },
        "opts": {}
      },
      {
        "content": "display: table-footer-group;",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "d:tbfg": true
        },
        "opts": {}
      },
      {
        "content": "display: table-header-group;",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "d:tbhg": true
        },
        "opts": {}
      },
      {
        "content": "display: table-row-group;",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "d:tbrg": true
        },
        "opts": {}
      },
      {
        "content": "display: table-row;",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "d:tbr": true
        },
        "opts": {}
      },
      {
        "content": "display: table;",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "d:tb": true
        },
        "opts": {}
      },
      {
        "content": "empty-cells: ${1};${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ec": true
        },
        "opts": {}
      },
      {
        "content": "empty-cells: hide;",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ec:h": true
        },
        "opts": {}
      },
      {
        "content": "empty-cells: show;",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ec:s": true
        },
        "opts": {}
      },
      {
        "content": "expression()",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "exp": true
        },
        "opts": {}
      },
      {
        "content": "flex: ${1:0} ${2:1} ${0:auto};",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "fx": true
        },
        "opts": {}
      },
      {
        "content": "flex-basis: ${0:auto};",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "fxb": true
        },
        "opts": {}
      },
      {
        "content": "flex-basis: auto;",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "fxb:a": true
        },
        "opts": {}
      },
      {
        "content": "flex-direction: ${0:row};",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "fxd": true
        },
        "opts": {}
      },
      {
        "content": "flex-direction: column;",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "fxd:c": true
        },
        "opts": {}
      },
      {
        "content": "flex-direction: column-reverse;",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "fxd:cr": true
        },
        "opts": {}
      },
      {
        "content": "flex-direction: row;",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "fxd:r": true
        },
        "opts": {}
      },
      {
        "content": "flex-direction: row-reverse;",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "fxd:rr": true
        },
        "opts": {}
      },
      {
        "content": "flex-flow: ${1:row} ${0:nowrap};",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "fxf": true
        },
        "opts": {}
      },
      {
        "content": "flex-grow: ${0:0};",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "fxg": true
        },
        "opts": {}
      },
      {
        "content": "flex-shrink: ${0:1};",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "fxs": true
        },
        "opts": {}
      },
      {
        "content": "flex-wrap: ${0:nowrap};",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "fxw": true
        },
        "opts": {}
      },
      {
        "content": "flex-wrap: nowrap;",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "fxw:n": true
        },
        "opts": {}
      },
      {
        "content": "flex-wrap: wrap;",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "fxw:w": true
        },
        "opts": {}
      },
      {
        "content": "flex-wrap: wrap-reverse;",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "fxw:wr": true
        },
        "opts": {}
      },
      {
        "content": "float: ${1};${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "fl": true
        },
        "opts": {}
      },
      {
        "content": "float: left;",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "fl:l": true
        },
        "opts": {}
      },
      {
        "content": "float: none;",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "fl:n": true
        },
        "opts": {}
      },
      {
        "content": "float: right;",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "fl:r": true
        },
        "opts": {}
      },
      {
        "content": "font: ${1:1em} ${2:Arial},${3:sans-serif};${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "f+": true
        },
        "opts": {}
      },
      {
        "content": "font-effect: ${1};${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "fef": true
        },
        "opts": {}
      },
      {
        "content": "font-effect: emboss;",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "fef:eb": true
        },
        "opts": {}
      },
      {
        "content": "font-effect: engrave;",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "fef:eg": true
        },
        "opts": {}
      },
      {
        "content": "font-effect: none;",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "fef:n": true
        },
        "opts": {}
      },
      {
        "content": "font-effect: outline;",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "fef:o": true
        },
        "opts": {}
      },
      {
        "content": "font-emphasize-position: ${1};${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "femp": true
        },
        "opts": {}
      },
      {
        "content": "font-emphasize-position: after;",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "femp:a": true
        },
        "opts": {}
      },
      {
        "content": "font-emphasize-position: before;",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "femp:b": true
        },
        "opts": {}
      },
      {
        "content": "font-emphasize-style: ${1};${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "fems": true
        },
        "opts": {}
      },
      {
        "content": "font-emphasize-style: accent;",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "fems:ac": true
        },
        "opts": {}
      },
      {
        "content": "font-emphasize-style: circle;",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "fems:c": true
        },
        "opts": {}
      },
      {
        "content": "font-emphasize-style: disc;",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "fems:ds": true
        },
        "opts": {}
      },
      {
        "content": "font-emphasize-style: dot;",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "fems:dt": true
        },
        "opts": {}
      },
      {
        "content": "font-emphasize-style: none;",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "fems:n": true
        },
        "opts": {}
      },
      {
        "content": "font-emphasize: ${1};${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "fem": true
        },
        "opts": {}
      },
      {
        "content": "font-family: ${1};${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ff": true
        },
        "opts": {}
      },
      {
        "content": "font-family: ${0:'Monotype Corsiva','Comic Sans MS'},cursive;",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ff:c": true
        },
        "opts": {}
      },
      {
        "content": "font-family: ${0:Capitals,Impact},fantasy;",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ff:f": true
        },
        "opts": {}
      },
      {
        "content": "font-family: ${0:Monaco,'Courier New'},monospace;",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ff:m": true
        },
        "opts": {}
      },
      {
        "content": "font-family: ${0:Helvetica,Arial},sans-serif;",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ff:ss": true
        },
        "opts": {}
      },
      {
        "content": "font-family: ${0:Georgia,'Times New Roman'},serif;",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ff:s": true
        },
        "opts": {}
      },
      {
        "content": "font-size-adjust: ${1};${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "fza": true
        },
        "opts": {}
      },
      {
        "content": "font-size-adjust: none;",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "fza:n": true
        },
        "opts": {}
      },
      {
        "content": "font-size: ${1};${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "fz": true
        },
        "opts": {}
      },
      {
        "content": "font-smooth: ${1};${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "fsm": true
        },
        "opts": {}
      },
      {
        "content": "font-smooth: always;",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "fsm:aw": true
        },
        "opts": {}
      },
      {
        "content": "font-smooth: auto;",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "fsm:a": true
        },
        "opts": {}
      },
      {
        "content": "font-smooth: never;",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "fsm:n": true
        },
        "opts": {}
      },
      {
        "content": "font-stretch: ${1};${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "fst": true
        },
        "opts": {}
      },
      {
        "content": "font-stretch: condensed;",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "fst:c": true
        },
        "opts": {}
      },
      {
        "content": "font-stretch: expanded;",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "fst:e": true
        },
        "opts": {}
      },
      {
        "content": "font-stretch: extra-condensed;",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "fst:ec": true
        },
        "opts": {}
      },
      {
        "content": "font-stretch: extra-expanded;",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "fst:ee": true
        },
        "opts": {}
      },
      {
        "content": "font-stretch: normal;",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "fst:n": true
        },
        "opts": {}
      },
      {
        "content": "font-stretch: semi-condensed;",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "fst:sc": true
        },
        "opts": {}
      },
      {
        "content": "font-stretch: semi-expanded;",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "fst:se": true
        },
        "opts": {}
      },
      {
        "content": "font-stretch: ultra-condensed;",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "fst:uc": true
        },
        "opts": {}
      },
      {
        "content": "font-stretch: ultra-expanded;",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "fst:ue": true
        },
        "opts": {}
      },
      {
        "content": "font-style: ${1};${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "fs": true
        },
        "opts": {}
      },
      {
        "content": "font-style: italic;",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "fs:i": true
        },
        "opts": {}
      },
      {
        "content": "font-style: normal;",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "fs:n": true
        },
        "opts": {}
      },
      {
        "content": "font-style: oblique;",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "fs:o": true
        },
        "opts": {}
      },
      {
        "content": "font-variant: ${1};${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "fv": true
        },
        "opts": {}
      },
      {
        "content": "font-variant: normal;",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "fv:n": true
        },
        "opts": {}
      },
      {
        "content": "font-variant: small-caps;",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "fv:sc": true
        },
        "opts": {}
      },
      {
        "content": "font-weight: ${1};${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "fw": true
        },
        "opts": {}
      },
      {
        "content": "font-weight: bold;",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "fw:b": true
        },
        "opts": {}
      },
      {
        "content": "font-weight: bolder;",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "fw:br": true
        },
        "opts": {}
      },
      {
        "content": "font-weight: lighter;",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "fw:lr": true
        },
        "opts": {}
      },
      {
        "content": "font-weight: normal;",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "fw:n": true
        },
        "opts": {}
      },
      {
        "content": "font: ${1};${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "f": true
        },
        "opts": {}
      },
      {
        "content": "grid: ${1};",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "g": true
        },
        "opts": {}
      },
      {
        "content": "grid-auto-flow: ${1:row};",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "gaf": true
        },
        "opts": {}
      },
      {
        "content": "grid-auto-flow: ${1:row} ${2:dense};",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "gaf+": true
        },
        "opts": {}
      },
      {
        "content": "grid-auto-flow: row;",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "gaf:r": true
        },
        "opts": {}
      },
      {
        "content": "grid-auto-flow: column;",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "gaf:c": true
        },
        "opts": {}
      },
      {
        "content": "grid-auto-flow: dense;",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "gaf:d": true
        },
        "opts": {}
      },
      {
        "content": "grid-auto-flow: row dense;",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "gaf:rd": true
        },
        "opts": {}
      },
      {
        "content": "grid-auto-flow: column dense;",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "gaf:cd": true
        },
        "opts": {}
      },
      {
        "content": "grid-auto-rows: ${1};",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "gar": true
        },
        "opts": {}
      },
      {
        "content": "grid-auto-rows: auto",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "gar:a": true
        },
        "opts": {}
      },
      {
        "content": "grid-auto-rows: max-content;",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "gar:mac": true
        },
        "opts": {}
      },
      {
        "content": "grid-auto-rows: min-content;",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "gar:mic": true
        },
        "opts": {}
      },
      {
        "content": "grid-auto-columns: ${1};",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "gac": true
        },
        "opts": {}
      },
      {
        "content": "grid-auto-columns: auto",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "gac:a": true
        },
        "opts": {}
      },
      {
        "content": "grid-auto-columns: max-content;",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "gac:mac": true
        },
        "opts": {}
      },
      {
        "content": "grid-auto-columns: min-content;",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "gac:mic": true
        },
        "opts": {}
      },
      {
        "content": "grid-template: ${1};",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "gt": true
        },
        "opts": {}
      },
      {
        "content": "grid-template: ${1} / ${2};",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "gt+": true
        },
        "opts": {}
      },
      {
        "content": "grid-template-rows: ${1};",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "gtr": true
        },
        "opts": {}
      },
      {
        "content": "grid-template-columns: ${1};",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "gtc": true
        },
        "opts": {}
      },
      {
        "content": "grid-template-areas: ${1};",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "gta": true
        },
        "opts": {}
      },
      {
        "content": "grid-gap: ${1};",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "gg": true
        },
        "opts": {}
      },
      {
        "content": "grid-gap: ${1} ${2};",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "gg+": true
        },
        "opts": {}
      },
      {
        "content": "grid-gap: 0;",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "gg:0": true
        },
        "opts": {}
      },
      {
        "content": "grid-row-gap: ${1};",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "grg": true
        },
        "opts": {}
      },
      {
        "content": "grid-row-gap: 0;",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "grg:0": true
        },
        "opts": {}
      },
      {
        "content": "grid-column-gap: ${1};",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "gcg": true
        },
        "opts": {}
      },
      {
        "content": "grid-column-gap: 0;",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "gcg:0": true
        },
        "opts": {}
      },
      {
        "content": "grid-row: ${1} / ${2};",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "gr": true
        },
        "opts": {}
      },
      {
        "content": "grid-row-start: ${1};",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "grs": true
        },
        "opts": {}
      },
      {
        "content": "grid-row-end: ${1};",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "gre": true
        },
        "opts": {}
      },
      {
        "content": "grid-column: ${1} / ${2};",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "gc": true
        },
        "opts": {}
      },
      {
        "content": "grid-column-start: ${1};",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "gcs": true
        },
        "opts": {}
      },
      {
        "content": "grid-column-end: ${1};",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "gce": true
        },
        "opts": {}
      },
      {
        "content": "height: ${1};${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "h": true
        },
        "opts": {}
      },
      {
        "content": "height: auto;",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "h:a": true
        },
        "opts": {}
      },
      {
        "content": "justify-content: ${1};",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "jc": true
        },
        "opts": {}
      },
      {
        "content": "justify-content: start;",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "jc:s": true
        },
        "opts": {}
      },
      {
        "content": "justify-content: end;",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "jc:e": true
        },
        "opts": {}
      },
      {
        "content": "justify-content: center;",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "jc:c": true
        },
        "opts": {}
      },
      {
        "content": "justify-content: flex-start;",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "jc:fs": true
        },
        "opts": {}
      },
      {
        "content": "justify-content: flex-end;",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "jc:fe": true
        },
        "opts": {}
      },
      {
        "content": "justify-content: space-between;",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "jc:sb": true
        },
        "opts": {}
      },
      {
        "content": "justify-content: space-around;",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "jc:sa": true
        },
        "opts": {}
      },
      {
        "content": "justify-content: space-evenly;",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "jc:se": true
        },
        "opts": {}
      },
      {
        "content": "justify-content: stretch;",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "jc:st": true
        },
        "opts": {}
      },
      {
        "content": "justify-content: left;",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "jc:l": true
        },
        "opts": {}
      },
      {
        "content": "justify-content: right;",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "jc:r": true
        },
        "opts": {}
      },
      {
        "content": "justify-items: ${1:stretch};",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ji": true
        },
        "opts": {}
      },
      {
        "content": "justify-items: start;",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ji:s": true
        },
        "opts": {}
      },
      {
        "content": "justify-items: end;",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ji:e": true
        },
        "opts": {}
      },
      {
        "content": "justify-items: center;",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ji:c": true
        },
        "opts": {}
      },
      {
        "content": "justify-items: stretch;",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ji:st": true
        },
        "opts": {}
      },
      {
        "content": "justify-self: ${1:stretch};",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "js": true
        },
        "opts": {}
      },
      {
        "content": "justify-self: start;",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "js:s": true
        },
        "opts": {}
      },
      {
        "content": "justify-self: end;",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "js:e": true
        },
        "opts": {}
      },
      {
        "content": "justify-self: center;",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "js:c": true
        },
        "opts": {}
      },
      {
        "content": "justify-self: stretch;",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "js:st": true
        },
        "opts": {}
      },
      {
        "content": "left: ${1};${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "l": true
        },
        "opts": {}
      },
      {
        "content": "left: auto;",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "l:a": true
        },
        "opts": {}
      },
      {
        "content": "letter-spacing: ${1};${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "lts": true
        },
        "opts": {}
      },
      {
        "content": "line-height: ${1};${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "lh": true
        },
        "opts": {}
      },
      {
        "content": "list-style-image: url(${1});${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "lisi": true
        },
        "opts": {}
      },
      {
        "content": "list-style-image: none;",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "lisi:n": true
        },
        "opts": {}
      },
      {
        "content": "list-style-position: ${1};${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "lisp": true
        },
        "opts": {}
      },
      {
        "content": "list-style-position: inside;",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "lisp:i": true
        },
        "opts": {}
      },
      {
        "content": "list-style-position: outside;",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "lisp:o": true
        },
        "opts": {}
      },
      {
        "content": "list-style-type: ${1};${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "list": true
        },
        "opts": {}
      },
      {
        "content": "list-style-type: circle;",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "list:c": true
        },
        "opts": {}
      },
      {
        "content": "list-style-type: decimal-leading-zero;",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "list:dclz": true
        },
        "opts": {}
      },
      {
        "content": "list-style-type: decimal;",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "list:dc": true
        },
        "opts": {}
      },
      {
        "content": "list-style-type: disc;",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "list:d": true
        },
        "opts": {}
      },
      {
        "content": "list-style-type: lower-roman;",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "list:lr": true
        },
        "opts": {}
      },
      {
        "content": "list-style-type: none;",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "list:n": true
        },
        "opts": {}
      },
      {
        "content": "list-style-type: square;",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "list:s": true
        },
        "opts": {}
      },
      {
        "content": "list-style-type: upper-roman;",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "list:ur": true
        },
        "opts": {}
      },
      {
        "content": "list-style: ${1};${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "lis": true
        },
        "opts": {}
      },
      {
        "content": "list-style: none;",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "lis:n": true
        },
        "opts": {}
      },
      {
        "content": "margin-bottom: ${1};${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "mb": true
        },
        "opts": {}
      },
      {
        "content": "margin-bottom: auto;",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "mb:a": true
        },
        "opts": {}
      },
      {
        "content": "margin-left: ${1};${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ml": true
        },
        "opts": {}
      },
      {
        "content": "margin-left: auto;",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ml:a": true
        },
        "opts": {}
      },
      {
        "content": "margin-right: ${1};${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "mr": true
        },
        "opts": {}
      },
      {
        "content": "margin-right: auto;",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "mr:a": true
        },
        "opts": {}
      },
      {
        "content": "margin-top: ${1};${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "mt": true
        },
        "opts": {}
      },
      {
        "content": "margin-top: auto;",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "mt:a": true
        },
        "opts": {}
      },
      {
        "content": "margin: ${1};${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "m": true
        },
        "opts": {}
      },
      {
        "content": "margin: ${1:0} ${2:0} ${3:0} ${4:0};${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "m:4": true
        },
        "opts": {}
      },
      {
        "content": "margin: ${1:0} ${2:0} ${3:0};${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "m:3": true
        },
        "opts": {}
      },
      {
        "content": "margin: ${1:0} ${2:0};${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "m:2": true
        },
        "opts": {}
      },
      {
        "content": "margin: 0;",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "m:0": true
        },
        "opts": {}
      },
      {
        "content": "margin: auto;",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "m:a": true
        },
        "opts": {}
      },
      {
        "content": "max-height: ${1};${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "mah": true
        },
        "opts": {}
      },
      {
        "content": "max-height: none;",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "mah:n": true
        },
        "opts": {}
      },
      {
        "content": "max-width: ${1};${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "maw": true
        },
        "opts": {}
      },
      {
        "content": "max-width: none;",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "maw:n": true
        },
        "opts": {}
      },
      {
        "content": "min-height: ${1};${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "mih": true
        },
        "opts": {}
      },
      {
        "content": "min-width: ${1};${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "miw": true
        },
        "opts": {}
      },
      {
        "content": "opacity: ${1};${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "op": true
        },
        "opts": {}
      },
      {
        "content": "filter: progid:DXImageTransform.Microsoft.Alpha(Opacity=${1:100});${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "op:ie": true
        },
        "opts": {}
      },
      {
        "content": "-ms-filter: 'progid:DXImageTransform.Microsoft.Alpha(Opacity=${0:100})';",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "op:ms": true
        },
        "opts": {}
      },
      {
        "content": "orphans: ${1};${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "orp": true
        },
        "opts": {}
      },
      {
        "content": "order: ${0:0};",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "or": true
        },
        "opts": {}
      },
      {
        "content": "outline: ${1:1px} ${2:solid} #${3:000};${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "o+": true
        },
        "opts": {}
      },
      {
        "content": "outline-color: ${1:#000};${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "oc": true
        },
        "opts": {}
      },
      {
        "content": "outline-color: invert;",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "oc:i": true
        },
        "opts": {}
      },
      {
        "content": "outline-offset: ${1};${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "oo": true
        },
        "opts": {}
      },
      {
        "content": "outline-style: ${1};${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "os": true
        },
        "opts": {}
      },
      {
        "content": "outline-width: ${1};${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ow": true
        },
        "opts": {}
      },
      {
        "content": "outline: ${1};${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "o": true
        },
        "opts": {}
      },
      {
        "content": "outline: none;",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "o:n": true
        },
        "opts": {}
      },
      {
        "content": "overflow-style: ${1};${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ovs": true
        },
        "opts": {}
      },
      {
        "content": "overflow-style: auto;",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ovs:a": true
        },
        "opts": {}
      },
      {
        "content": "overflow-style: marquee;",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ovs:mq": true
        },
        "opts": {}
      },
      {
        "content": "overflow-style: move;",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ovs:mv": true
        },
        "opts": {}
      },
      {
        "content": "overflow-style: panner;",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ovs:p": true
        },
        "opts": {}
      },
      {
        "content": "overflow-style: scrollbar;",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ovs:s": true
        },
        "opts": {}
      },
      {
        "content": "overflow-x: ${1};${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ovx": true
        },
        "opts": {}
      },
      {
        "content": "overflow-x: auto;",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ovx:a": true
        },
        "opts": {}
      },
      {
        "content": "overflow-x: hidden;",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ovx:h": true
        },
        "opts": {}
      },
      {
        "content": "overflow-x: scroll;",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ovx:s": true
        },
        "opts": {}
      },
      {
        "content": "overflow-x: visible;",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ovx:v": true
        },
        "opts": {}
      },
      {
        "content": "overflow-y: ${1};${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ovy": true
        },
        "opts": {}
      },
      {
        "content": "overflow-y: auto;",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ovy:a": true
        },
        "opts": {}
      },
      {
        "content": "overflow-y: hidden;",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ovy:h": true
        },
        "opts": {}
      },
      {
        "content": "overflow-y: scroll;",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ovy:s": true
        },
        "opts": {}
      },
      {
        "content": "overflow-y: visible;",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ovy:v": true
        },
        "opts": {}
      },
      {
        "content": "overflow: ${1};${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ov": true
        },
        "opts": {}
      },
      {
        "content": "overflow: auto;",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ov:a": true
        },
        "opts": {}
      },
      {
        "content": "overflow: hidden;",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ov:h": true
        },
        "opts": {}
      },
      {
        "content": "overflow: scroll;",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ov:s": true
        },
        "opts": {}
      },
      {
        "content": "overflow: visible;",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ov:v": true
        },
        "opts": {}
      },
      {
        "content": "padding-bottom: ${1};${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "pb": true
        },
        "opts": {}
      },
      {
        "content": "padding-left: ${1};${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "pl": true
        },
        "opts": {}
      },
      {
        "content": "padding-right: ${1};${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "pr": true
        },
        "opts": {}
      },
      {
        "content": "padding-top: ${1};${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "pt": true
        },
        "opts": {}
      },
      {
        "content": "padding: ${1};${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "p": true
        },
        "opts": {}
      },
      {
        "content": "padding: ${1:0} ${2:0} ${3:0} ${4:0};${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "p:4": true
        },
        "opts": {}
      },
      {
        "content": "padding: ${1:0} ${2:0} ${3:0};${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "p:3": true
        },
        "opts": {}
      },
      {
        "content": "padding: ${1:0} ${2:0};${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "p:2": true
        },
        "opts": {}
      },
      {
        "content": "padding: 0;",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "p:0": true
        },
        "opts": {}
      },
      {
        "content": "place-content: ${1};",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "pc": true
        },
        "opts": {}
      },
      {
        "content": "place-content: ${1} ${2};",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "pc+": true
        },
        "opts": {}
      },
      {
        "content": "place-content: start;",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "pc:s": true
        },
        "opts": {}
      },
      {
        "content": "place-content: end;",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "pc:e": true
        },
        "opts": {}
      },
      {
        "content": "place-content: center;",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "pc:c": true
        },
        "opts": {}
      },
      {
        "content": "place-content: flex-start;",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "pc:fs": true
        },
        "opts": {}
      },
      {
        "content": "place-content: flex-end;",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "pc:fe": true
        },
        "opts": {}
      },
      {
        "content": "place-content: space-between;",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "pc:sb": true
        },
        "opts": {}
      },
      {
        "content": "place-content: space-around;",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "pc:sa": true
        },
        "opts": {}
      },
      {
        "content": "place-content: space-evenly;",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "pc:se": true
        },
        "opts": {}
      },
      {
        "content": "place-content: stretch;",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "pc:st": true
        },
        "opts": {}
      },
      {
        "content": "page-break-after: ${1};${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "pgba": true
        },
        "opts": {}
      },
      {
        "content": "page-break-after: always;",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "pgba:aw": true
        },
        "opts": {}
      },
      {
        "content": "page-break-after: auto;",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "pgba:a": true
        },
        "opts": {}
      },
      {
        "content": "page-break-after: left;",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "pgba:l": true
        },
        "opts": {}
      },
      {
        "content": "page-break-after: right;",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "pgba:r": true
        },
        "opts": {}
      },
      {
        "content": "page-break-before: ${1};${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "pgbb": true
        },
        "opts": {}
      },
      {
        "content": "page-break-before: always;",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "pgbb:aw": true
        },
        "opts": {}
      },
      {
        "content": "page-break-before: auto;",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "pgbb:a": true
        },
        "opts": {}
      },
      {
        "content": "page-break-before: left;",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "pgbb:l": true
        },
        "opts": {}
      },
      {
        "content": "page-break-before: right;",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "pgbb:r": true
        },
        "opts": {}
      },
      {
        "content": "page-break-inside: ${1};${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "pgbi": true
        },
        "opts": {}
      },
      {
        "content": "page-break-inside: auto;",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "pgbi:a": true
        },
        "opts": {}
      },
      {
        "content": "page-break-inside: avoid;",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "pgbi:av": true
        },
        "opts": {}
      },
      {
        "content": "place-items: ${1:stretch};",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "pi": true
        },
        "opts": {}
      },
      {
        "content": "place-items: ${1:stretch} ${2:stretch};",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "pi+": true
        },
        "opts": {}
      },
      {
        "content": "place-items: start;",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "pi:s": true
        },
        "opts": {}
      },
      {
        "content": "place-items: end;",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "pi:e": true
        },
        "opts": {}
      },
      {
        "content": "place-items: center;",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "pi:c": true
        },
        "opts": {}
      },
      {
        "content": "",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "pi:st": true
        },
        "opts": {}
      },
      {
        "content": "position: ${1};${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "pos": true
        },
        "opts": {}
      },
      {
        "content": "position: absolute;",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "pos:a": true
        },
        "opts": {}
      },
      {
        "content": "position: fixed;",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "pos:f": true
        },
        "opts": {}
      },
      {
        "content": "position: relative;",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "pos:r": true
        },
        "opts": {}
      },
      {
        "content": "position: static;",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "pos:s": true
        },
        "opts": {}
      },
      {
        "content": "place-self: ${1:stretch};",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ps": true
        },
        "opts": {}
      },
      {
        "content": "place-self: ${1:stretch} ${2:stretch};",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ps+": true
        },
        "opts": {}
      },
      {
        "content": "place-self: start;",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ps:s": true
        },
        "opts": {}
      },
      {
        "content": "place-self: end;",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ps:e": true
        },
        "opts": {}
      },
      {
        "content": "place-self: center;",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ps:c": true
        },
        "opts": {}
      },
      {
        "content": "place-self: stretch;",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ps:st": true
        },
        "opts": {}
      },
      {
        "content": "quotes: ${1};${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "q": true
        },
        "opts": {}
      },
      {
        "content": "quotes: '\\201C' '\\201D' '\\2018' '\\2019';",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "q:en": true
        },
        "opts": {}
      },
      {
        "content": "quotes: none;",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "q:n": true
        },
        "opts": {}
      },
      {
        "content": "quotes: '\\00AB' '\\00BB' '\\201E' '\\201C';",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "q:ru": true
        },
        "opts": {}
      },
      {
        "content": "resize: ${1};${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "rz": true
        },
        "opts": {}
      },
      {
        "content": "resize: both;",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "rz:b": true
        },
        "opts": {}
      },
      {
        "content": "resize: horizontal;",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "rz:h": true
        },
        "opts": {}
      },
      {
        "content": "resize: none;",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "rz:n": true
        },
        "opts": {}
      },
      {
        "content": "resize: vertical;",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "rz:v": true
        },
        "opts": {}
      },
      {
        "content": "right: ${1};${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "r": true
        },
        "opts": {}
      },
      {
        "content": "right: auto;",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "r:a": true
        },
        "opts": {}
      },
      {
        "content": "table-layout: ${1};${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "tbl": true
        },
        "opts": {}
      },
      {
        "content": "table-layout: auto;",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "tbl:a": true
        },
        "opts": {}
      },
      {
        "content": "table-layout: fixed;",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "tbl:f": true
        },
        "opts": {}
      },
      {
        "content": "text-align-last: ${1};${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "tal": true
        },
        "opts": {}
      },
      {
        "content": "text-align-last: auto;",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "tal:a": true
        },
        "opts": {}
      },
      {
        "content": "text-align-last: center;",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "tal:c": true
        },
        "opts": {}
      },
      {
        "content": "text-align-last: left;",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "tal:l": true
        },
        "opts": {}
      },
      {
        "content": "text-align-last: right;",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "tal:r": true
        },
        "opts": {}
      },
      {
        "content": "text-align: ${1};${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ta": true
        },
        "opts": {}
      },
      {
        "content": "text-align: center;",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ta:c": true
        },
        "opts": {}
      },
      {
        "content": "text-align: left;",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ta:l": true
        },
        "opts": {}
      },
      {
        "content": "text-align: right;",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ta:r": true
        },
        "opts": {}
      },
      {
        "content": "text-decoration: ${1};${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "td": true
        },
        "opts": {}
      },
      {
        "content": "text-decoration: line-through;",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "td:l": true
        },
        "opts": {}
      },
      {
        "content": "text-decoration: none;",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "td:n": true
        },
        "opts": {}
      },
      {
        "content": "text-decoration: overline;",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "td:o": true
        },
        "opts": {}
      },
      {
        "content": "text-decoration: underline;",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "td:u": true
        },
        "opts": {}
      },
      {
        "content": "text-emphasis: ${1};${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "te": true
        },
        "opts": {}
      },
      {
        "content": "text-emphasis: accent;",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "te:ac": true
        },
        "opts": {}
      },
      {
        "content": "text-emphasis: after;",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "te:a": true
        },
        "opts": {}
      },
      {
        "content": "text-emphasis: before;",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "te:b": true
        },
        "opts": {}
      },
      {
        "content": "text-emphasis: circle;",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "te:c": true
        },
        "opts": {}
      },
      {
        "content": "text-emphasis: disc;",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "te:ds": true
        },
        "opts": {}
      },
      {
        "content": "text-emphasis: dot;",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "te:dt": true
        },
        "opts": {}
      },
      {
        "content": "text-emphasis: none;",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "te:n": true
        },
        "opts": {}
      },
      {
        "content": "text-height: ${1};${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "th": true
        },
        "opts": {}
      },
      {
        "content": "text-height: auto;",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "th:a": true
        },
        "opts": {}
      },
      {
        "content": "text-height: font-size;",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "th:f": true
        },
        "opts": {}
      },
      {
        "content": "text-height: max-size;",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "th:m": true
        },
        "opts": {}
      },
      {
        "content": "text-height: text-size;",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "th:t": true
        },
        "opts": {}
      },
      {
        "content": "text-indent: ${1};${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ti": true
        },
        "opts": {}
      },
      {
        "content": "text-indent: -9999px;",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ti:-": true
        },
        "opts": {}
      },
      {
        "content": "text-justify: ${1};${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "tj": true
        },
        "opts": {}
      },
      {
        "content": "text-justify: auto;",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "tj:a": true
        },
        "opts": {}
      },
      {
        "content": "text-justify: distribute;",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "tj:d": true
        },
        "opts": {}
      },
      {
        "content": "text-justify: inter-cluster;",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "tj:ic": true
        },
        "opts": {}
      },
      {
        "content": "text-justify: inter-ideograph;",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "tj:ii": true
        },
        "opts": {}
      },
      {
        "content": "text-justify: inter-word;",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "tj:iw": true
        },
        "opts": {}
      },
      {
        "content": "text-justify: kashida;",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "tj:k": true
        },
        "opts": {}
      },
      {
        "content": "text-justify: tibetan;",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "tj:t": true
        },
        "opts": {}
      },
      {
        "content": "text-outline: ${1:0} ${2:0} #${3:000};${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "to+": true
        },
        "opts": {}
      },
      {
        "content": "text-outline: ${1};${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "to": true
        },
        "opts": {}
      },
      {
        "content": "text-outline: none;",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "to:n": true
        },
        "opts": {}
      },
      {
        "content": "text-replace: ${1};${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "tr": true
        },
        "opts": {}
      },
      {
        "content": "text-replace: none;",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "tr:n": true
        },
        "opts": {}
      },
      {
        "content": "text-shadow: ${1:0} ${2:0} ${3:0} #${4:000};${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "tsh+": true
        },
        "opts": {}
      },
      {
        "content": "text-shadow: ${1};${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "tsh": true
        },
        "opts": {}
      },
      {
        "content": "text-shadow: none;",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "tsh:n": true
        },
        "opts": {}
      },
      {
        "content": "text-transform: ${1};${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "tt": true
        },
        "opts": {}
      },
      {
        "content": "text-transform: capitalize;",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "tt:c": true
        },
        "opts": {}
      },
      {
        "content": "text-transform: lowercase;",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "tt:l": true
        },
        "opts": {}
      },
      {
        "content": "text-transform: none;",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "tt:n": true
        },
        "opts": {}
      },
      {
        "content": "text-transform: uppercase;",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "tt:u": true
        },
        "opts": {}
      },
      {
        "content": "text-wrap: ${1};${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "tw": true
        },
        "opts": {}
      },
      {
        "content": "text-wrap: none;",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "tw:no": true
        },
        "opts": {}
      },
      {
        "content": "text-wrap: normal;",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "tw:n": true
        },
        "opts": {}
      },
      {
        "content": "text-wrap: suppress;",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "tw:s": true
        },
        "opts": {}
      },
      {
        "content": "text-wrap: unrestricted;",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "tw:u": true
        },
        "opts": {}
      },
      {
        "content": "top: ${1};${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "t": true
        },
        "opts": {}
      },
      {
        "content": "top: auto;",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "t:a": true
        },
        "opts": {}
      },
      {
        "content": "vertical-align: ${1};${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "va": true
        },
        "opts": {}
      },
      {
        "content": "vertical-align: baseline;",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "va:bl": true
        },
        "opts": {}
      },
      {
        "content": "vertical-align: bottom;",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "va:b": true
        },
        "opts": {}
      },
      {
        "content": "vertical-align: middle;",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "va:m": true
        },
        "opts": {}
      },
      {
        "content": "vertical-align: sub;",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "va:sub": true
        },
        "opts": {}
      },
      {
        "content": "vertical-align: super;",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "va:sup": true
        },
        "opts": {}
      },
      {
        "content": "vertical-align: text-bottom;",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "va:tb": true
        },
        "opts": {}
      },
      {
        "content": "vertical-align: text-top;",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "va:tt": true
        },
        "opts": {}
      },
      {
        "content": "vertical-align: top;",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "va:t": true
        },
        "opts": {}
      },
      {
        "content": "visibility: ${1};${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "v": true
        },
        "opts": {}
      },
      {
        "content": "visibility: collapse;",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "v:c": true
        },
        "opts": {}
      },
      {
        "content": "visibility: hidden;",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "v:h": true
        },
        "opts": {}
      },
      {
        "content": "visibility: visible;",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "v:v": true
        },
        "opts": {}
      },
      {
        "content": "white-space-collapse: ${1};${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "whsc": true
        },
        "opts": {}
      },
      {
        "content": "white-space-collapse: break-all;",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "whsc:ba": true
        },
        "opts": {}
      },
      {
        "content": "white-space-collapse: break-strict;",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "whsc:bs": true
        },
        "opts": {}
      },
      {
        "content": "white-space-collapse: keep-all;",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "whsc:k": true
        },
        "opts": {}
      },
      {
        "content": "white-space-collapse: loose;",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "whsc:l": true
        },
        "opts": {}
      },
      {
        "content": "white-space-collapse: normal;",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "whsc:n": true
        },
        "opts": {}
      },
      {
        "content": "white-space: ${1};${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "whs": true
        },
        "opts": {}
      },
      {
        "content": "white-space: normal;",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "whs:n": true
        },
        "opts": {}
      },
      {
        "content": "white-space: nowrap;",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "whs:nw": true
        },
        "opts": {}
      },
      {
        "content": "white-space: pre-line;",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "whs:pl": true
        },
        "opts": {}
      },
      {
        "content": "white-space: pre-wrap;",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "whs:pw": true
        },
        "opts": {}
      },
      {
        "content": "white-space: pre;",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "whs:p": true
        },
        "opts": {}
      },
      {
        "content": "widows: ${1};${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "wid": true
        },
        "opts": {}
      },
      {
        "content": "width: ${1};${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "w": true
        },
        "opts": {}
      },
      {
        "content": "width: auto;",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "w:a": true
        },
        "opts": {}
      },
      {
        "content": "word-break: ${1};${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "wob": true
        },
        "opts": {}
      },
      {
        "content": "word-break: break-all;",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "wob:ba": true
        },
        "opts": {}
      },
      {
        "content": "word-break: break-strict;",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "wob:bs": true
        },
        "opts": {}
      },
      {
        "content": "word-break: keep-all;",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "wob:k": true
        },
        "opts": {}
      },
      {
        "content": "word-break: loose;",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "wob:l": true
        },
        "opts": {}
      },
      {
        "content": "word-break: normal;",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "wob:n": true
        },
        "opts": {}
      },
      {
        "content": "word-spacing: ${1};${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "wos": true
        },
        "opts": {}
      },
      {
        "content": "word-wrap: ${1};${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "wow": true
        },
        "opts": {}
      },
      {
        "content": "word-wrap: none;",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "wow:no": true
        },
        "opts": {}
      },
      {
        "content": "word-wrap: normal;",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "wow:n": true
        },
        "opts": {}
      },
      {
        "content": "word-wrap: suppress;",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "wow:s": true
        },
        "opts": {}
      },
      {
        "content": "word-wrap: unrestricted;",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "wow:u": true
        },
        "opts": {}
      },
      {
        "content": "z-index: ${1};${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "z": true
        },
        "opts": {}
      },
      {
        "content": "z-index: auto;",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "z:a": true
        },
        "opts": {}
      },
      {
        "content": "zoom: 1;",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "zoo": true
        },
        "opts": {}
      },
      {
        "content": ":hover",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          ":h": true
        },
        "opts": {}
      },
      {
        "content": ":first-child",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          ":fc": true
        },
        "opts": {}
      },
      {
        "content": ":last-child",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          ":lc": true
        },
        "opts": {}
      },
      {
        "content": ":nth-child(${0})",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          ":nc": true
        },
        "opts": {}
      },
      {
        "content": ":nth-last-child(${0})",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          ":nlc": true
        },
        "opts": {}
      },
      {
        "content": ":only-child",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          ":oc": true
        },
        "opts": {}
      },
      {
        "content": ":after",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          ":a": true
        },
        "opts": {}
      },
      {
        "content": ":before",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          ":b": true
        },
        "opts": {}
      },
      {
        "content": "::after",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "::a": true
        },
        "opts": {}
      },
      {
        "content": "::before",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "::b": true
        },
        "opts": {}
      },
      {
        "content": "padding: ${1:0};$0",
        "doc": null,
        "grammar": "snu",
        "label": "padding",
        "matches": {
          "p": true
        },
        "opts": {}
      },
      {
        "content": "margin: ${1:0};$0",
        "doc": null,
        "grammar": "snu",
        "label": "margin",
        "matches": {
          "m": true
        },
        "opts": {}
      },
      {
        "content": "border: ${1:0};$0",
        "doc": null,
        "grammar": "snu",
        "label": "border",
        "matches": {
          "bd": true
        },
        "opts": {}
      },
      {
        "content": "display: ${1:none};$0",
        "doc": null,
        "grammar": "snu",
        "label": "display",
        "matches": {
          "d": true
        },
        "opts": {}
      },
      {
        "content": "background: ${1:none};$0",
        "doc": null,
        "grammar": "snu",
        "label": "background",
        "matches": {
          "bg": true
        },
        "opts": {}
      },
      {
        "content": "font-family: ${1:\"Helvetica Neue\", Helvetica, Arial, sans-serif};$0",
        "doc": null,
        "grammar": "snu",
        "label": "font-family",
        "matches": {
          "ff": true
        },
        "opts": {}
      },
      {
        "content": "height: ${1:auto};$0",
        "doc": null,
        "grammar": "snu",
        "label": "height",
        "matches": {
          "h": true
        },
        "opts": {}
      },
      {
        "content": "width: ${1:auto};$0",
        "doc": null,
        "grammar": "snu",
        "label": "width",
        "matches": {
          "w": true
        },
        "opts": {}
      },
      {
        "content": "position: ${1:relative};$0",
        "doc": null,
        "grammar": "snu",
        "label": "position",
        "matches": {
          "pos": true
        },
        "opts": {}
      },
      {
        "content": "text-transform: ${1:none};$0",
        "doc": null,
        "grammar": "snu",
        "label": "text-transform",
        "matches": {
          "tt": true
        },
        "opts": {}
      },
      {
        "content": "!important",
        "doc": null,
        "grammar": "snu",
        "label": "!important CSS (!)",
        "matches": {
          "!": true
        },
        "opts": {}
      },
      {
        "content": "text-shadow: ${1:${2:color} ${3:offset-x} ${4:offset-y} ${5:blur}};$0",
        "doc": null,
        "grammar": "snu",
        "label": "text-shadow: color-hex x y blur (text)",
        "matches": {
          "tsh": true
        },
        "opts": {}
      },
      {
        "content": "box-shadow: ${1:${2:offset-x} ${3:offset-y} ${4:blur} ${5:spread} ${6:color}};$0",
        "doc": null,
        "grammar": "snu",
        "label": "box-shadow: color-hex x y blur (text)",
        "matches": {
          "bxsh": true
        },
        "opts": {}
      },
      {
        "content": "rgb(${1:255}, ${2:255}, ${3:255})$0",
        "doc": null,
        "grammar": "snu",
        "label": "color rgb",
        "matches": {
          "rgb": true
        },
        "opts": {}
      },
      {
        "content": "rgba(${1:255}, ${2:255}, ${3:255}, ${4:0.5})$0",
        "doc": null,
        "grammar": "snu",
        "label": "color rgba",
        "matches": {
          "rgba": true
        },
        "opts": {}
      },
      {
        "content": "hsl(${1:360}, ${2:100}%, ${3:100}%)$0",
        "doc": null,
        "grammar": "snu",
        "label": "color hsl",
        "matches": {
          "hsl": true
        },
        "opts": {}
      },
      {
        "content": "hsla(${1:360}, ${2:100}%, ${3:100}%, ${4:0.5})$0",
        "doc": null,
        "grammar": "snu",
        "label": "color hsla",
        "matches": {
          "hsla": true
        },
        "opts": {}
      },
      {
        "content": ":first-child",
        "doc": null,
        "grammar": "snu",
        "label": null,
        "matches": {
          ":fc": true
        },
        "opts": {}
      },
      {
        "content": ":last-child",
        "doc": null,
        "grammar": "snu",
        "label": null,
        "matches": {
          ":lc": true
        },
        "opts": {}
      },
      {
        "content": ":nth-child($0)",
        "doc": null,
        "grammar": "snu",
        "label": null,
        "matches": {
          ":nc": true
        },
        "opts": {}
      },
      {
        "content": ":nth-last-child($0)",
        "doc": null,
        "grammar": "snu",
        "label": null,
        "matches": {
          ":nlc": true
        },
        "opts": {}
      },
      {
        "content": ":only-child",
        "doc": null,
        "grammar": "snu",
        "label": null,
        "matches": {
          ":oc": true
        },
        "opts": {}
      },
      {
        "content": ":after",
        "doc": null,
        "grammar": "snu",
        "label": null,
        "matches": {
          ":a": true
        },
        "opts": {}
      },
      {
        "content": ":before",
        "doc": null,
        "grammar": "snu",
        "label": null,
        "matches": {
          ":b": true
        },
        "opts": {}
      },
      {
        "content": "::after",
        "doc": null,
        "grammar": "snu",
        "label": null,
        "matches": {
          "::a": true
        },
        "opts": {}
      },
      {
        "content": "::before",
        "doc": null,
        "grammar": "snu",
        "label": null,
        "matches": {
          "::b": true
        },
        "opts": {}
      },
      {
        "content": "background-attachment: ${1:scroll/fixed};$0",
        "doc": null,
        "grammar": "snu",
        "label": "background-attachment: scroll:fixed (background)",
        "matches": {
          "background": true
        },
        "opts": {}
      },
      {
        "content": "background-color: #${1:DDD};$0",
        "doc": null,
        "grammar": "snu",
        "label": "background-color:  color-hex (background)",
        "matches": {
          "background": true
        },
        "opts": {}
      },
      {
        "content": "background-color: ${1:red};$0",
        "doc": null,
        "grammar": "snu",
        "label": "background-color:  color-name (background)",
        "matches": {
          "background": true
        },
        "opts": {}
      },
      {
        "content": "background-color: rgb(${1:255},${2:255},${3:255});$0",
        "doc": null,
        "grammar": "snu",
        "label": "background-color:  color-rgb (background)",
        "matches": {
          "background": true
        },
        "opts": {}
      },
      {
        "content": "background-color: transparent;$0",
        "doc": null,
        "grammar": "snu",
        "label": "background-color:  transparent (background)",
        "matches": {
          "background": true
        },
        "opts": {}
      },
      {
        "content": "background-image: none;$0",
        "doc": null,
        "grammar": "snu",
        "label": "background-image:  none (background)",
        "matches": {
          "background": true
        },
        "opts": {}
      },
      {
        "content": "background-image: url($1);$0",
        "doc": null,
        "grammar": "snu",
        "label": "background-image:  url (background)",
        "matches": {
          "background": true
        },
        "opts": {}
      },
      {
        "content": "background-position: ${1:top left/top center/top right/center left/center center/center right/bottom left/bottom center/bottom right/x-% y-%/x-pos y-pos};$0",
        "doc": null,
        "grammar": "snu",
        "label": "background-position:  position (background)",
        "matches": {
          "background": true
        },
        "opts": {}
      },
      {
        "content": "background-repeat: ${1:repeat/repeat-x/repeat-y/no-repeat};$0",
        "doc": null,
        "grammar": "snu",
        "label": "background-repeat:  r:r-x:r-y:n-r (background)",
        "matches": {
          "background": true
        },
        "opts": {}
      },
      {
        "content": "background:${6: #${1:DDD}} url($2) ${3:repeat/repeat-x/repeat-y/no-repeat} ${4:scroll/fixed} ${5:top left/top center/top right/center left/center center/center right/bottom left/bottom center/bottom right/x-% y-%/x-pos y-pos};$0",
        "doc": null,
        "grammar": "snu",
        "label": "background:  color image repeat attachment position (background)",
        "matches": {
          "background": true
        },
        "opts": {}
      },
      {
        "content": "border-bottom-color: #${1:999};$0",
        "doc": null,
        "grammar": "snu",
        "label": "border-bottom-color: size style color (border)",
        "matches": {
          "border": true
        },
        "opts": {}
      },
      {
        "content": "border-bottom-style: ${1:none/hidden/dotted/dashed/solid/double/groove/ridge/inset/outset};$0",
        "doc": null,
        "grammar": "snu",
        "label": "border-bottom-style: size style color (border)",
        "matches": {
          "border": true
        },
        "opts": {}
      },
      {
        "content": "border-bottom-width: ${1:1}px ${2:solid} #${3:999};$0",
        "doc": null,
        "grammar": "snu",
        "label": "border-bottom-width: size style color (border)",
        "matches": {
          "border": true
        },
        "opts": {}
      },
      {
        "content": "border-bottom: ${1:1}px ${2:solid} #${3:999};$0",
        "doc": null,
        "grammar": "snu",
        "label": "border-bottom: size style color (border)",
        "matches": {
          "border": true
        },
        "opts": {}
      },
      {
        "content": "border-color: ${1:999};$0",
        "doc": null,
        "grammar": "snu",
        "label": "border-color: color (border)",
        "matches": {
          "border": true
        },
        "opts": {}
      },
      {
        "content": "border-right-color: #${1:999};$0",
        "doc": null,
        "grammar": "snu",
        "label": "border-left-color: color (border)",
        "matches": {
          "border": true
        },
        "opts": {}
      },
      {
        "content": "border-left-style: ${1:none/hidden/dotted/dashed/solid/double/groove/ridge/inset/outset};$0",
        "doc": null,
        "grammar": "snu",
        "label": "border-left-style: style (border)",
        "matches": {
          "border": true
        },
        "opts": {}
      },
      {
        "content": "border-left-width: ${1:1}px",
        "doc": null,
        "grammar": "snu",
        "label": "border-left-width: size (border)",
        "matches": {
          "border": true
        },
        "opts": {}
      },
      {
        "content": "border-left: ${1:1}px ${2:solid} #${3:999};$0",
        "doc": null,
        "grammar": "snu",
        "label": "border-left: size style color (border)",
        "matches": {
          "border": true
        },
        "opts": {}
      },
      {
        "content": "border-right-color: #${1:999};$0",
        "doc": null,
        "grammar": "snu",
        "label": "border-right-color: color (border)",
        "matches": {
          "border": true
        },
        "opts": {}
      },
      {
        "content": "border-right-style: ${1:none/hidden/dotted/dashed/solid/double/groove/ridge/inset/outset};$0",
        "doc": null,
        "grammar": "snu",
        "label": "border-right-style: style (border)",
        "matches": {
          "border": true
        },
        "opts": {}
      },
      {
        "content": "border-right-width: ${1:1}px",
        "doc": null,
        "grammar": "snu",
        "label": "border-right-width: size (border)",
        "matches": {
          "border": true
        },
        "opts": {}
      },
      {
        "content": "border-right: ${1:1}px ${2:solid} #${3:999};$0",
        "doc": null,
        "grammar": "snu",
        "label": "border-right: size style color (border)",
        "matches": {
          "border": true
        },
        "opts": {}
      },
      {
        "content": "border-style: ${1:none/hidden/dotted/dashed/solid/double/groove/ridge/inset/outset};$0",
        "doc": null,
        "grammar": "snu",
        "label": "border-style: style (border)",
        "matches": {
          "border": true
        },
        "opts": {}
      },
      {
        "content": "border-top-color: #${1:999};$0",
        "doc": null,
        "grammar": "snu",
        "label": "border-top-color: color (border)",
        "matches": {
          "border": true
        },
        "opts": {}
      },
      {
        "content": "border-top-style: ${1:none/hidden/dotted/dashed/solid/double/groove/ridge/inset/outset};$0",
        "doc": null,
        "grammar": "snu",
        "label": "border-top-style: style (border)",
        "matches": {
          "border": true
        },
        "opts": {}
      },
      {
        "content": "border-top-width: ${1:1}px",
        "doc": null,
        "grammar": "snu",
        "label": "border-top-width: size (border)",
        "matches": {
          "border": true
        },
        "opts": {}
      },
      {
        "content": "border-top: ${1:1}px ${2:solid} #${3:999};$0",
        "doc": null,
        "grammar": "snu",
        "label": "border-top: size style color (border)",
        "matches": {
          "border": true
        },
        "opts": {}
      },
      {
        "content": "border-width: ${1:1px};$0",
        "doc": null,
        "grammar": "snu",
        "label": "border-width: width (border)",
        "matches": {
          "border": true
        },
        "opts": {}
      },
      {
        "content": "border: ${1:1px} ${2:solid} #${3:999};$0",
        "doc": null,
        "grammar": "snu",
        "label": "border:   size style color (border)",
        "matches": {
          "border": true
        },
        "opts": {}
      },
      {
        "content": "clear: ${1:left/right/both/none};$0",
        "doc": null,
        "grammar": "snu",
        "label": "clear: value (clear)",
        "matches": {
          "clear": true
        },
        "opts": {}
      },
      {
        "content": "color: #${1:DDD};$0",
        "doc": null,
        "grammar": "snu",
        "label": "color:  color-hex (color)",
        "matches": {
          "color": true
        },
        "opts": {}
      },
      {
        "content": "color: ${1:red};$0",
        "doc": null,
        "grammar": "snu",
        "label": "color:  color-name (color)",
        "matches": {
          "color": true
        },
        "opts": {}
      },
      {
        "content": "color: rgb(${1:255},${2:255},${3:255});$0",
        "doc": null,
        "grammar": "snu",
        "label": "color:  color-rgb (color)",
        "matches": {
          "color": true
        },
        "opts": {}
      },
      {
        "content": "cursor: ${1:default/auto/crosshair/pointer/move/*-resize/text/wait/help};$0",
        "doc": null,
        "grammar": "snu",
        "label": "cursor: type (cursor)",
        "matches": {
          "cursor": true
        },
        "opts": {}
      },
      {
        "content": "cursor: url($1);$0",
        "doc": null,
        "grammar": "snu",
        "label": "cursor: url (cursor)",
        "matches": {
          "cursor": true
        },
        "opts": {}
      },
      {
        "content": "direction: ${1:ltr|rtl};$0",
        "doc": null,
        "grammar": "snu",
        "label": "direction: ltr|rtl (direction)",
        "matches": {
          "direction": true
        },
        "opts": {}
      },
      {
        "content": "display: block;$0",
        "doc": null,
        "grammar": "snu",
        "label": "display: block (display)",
        "matches": {
          "display": true
        },
        "opts": {}
      },
      {
        "content": "display: ${1:none/inline/block/list-item/run-in/compact/marker};$0",
        "doc": null,
        "grammar": "snu",
        "label": "display: common-types (display)",
        "matches": {
          "display": true
        },
        "opts": {}
      },
      {
        "content": "display: inline;$0",
        "doc": null,
        "grammar": "snu",
        "label": "display: inline (display)",
        "matches": {
          "display": true
        },
        "opts": {}
      },
      {
        "content": "display: ${1:table/inline-table/table-row-group/table-header-group/table-footer-group/table-row/table-column-group/table-column/table-cell/table-caption};$0",
        "doc": null,
        "grammar": "snu",
        "label": "display: table-types (display)",
        "matches": {
          "display": true
        },
        "opts": {}
      },
      {
        "content": "float: ${1:left/right/none};$0",
        "doc": null,
        "grammar": "snu",
        "label": "float: left:right:none (float)",
        "matches": {
          "float": true
        },
        "opts": {}
      },
      {
        "content": "font-family: ${1:Arial, \"MS Trebuchet\"}, ${2:sans-}serif;$0",
        "doc": null,
        "grammar": "snu",
        "label": "font-family:   family (font)",
        "matches": {
          "font": true
        },
        "opts": {}
      },
      {
        "content": "font-size: ${1:100%};$0",
        "doc": null,
        "grammar": "snu",
        "label": "font-size: size (font)",
        "matches": {
          "font": true
        },
        "opts": {}
      },
      {
        "content": "font-style: ${1:normal/italic/oblique};$0",
        "doc": null,
        "grammar": "snu",
        "label": "font-style:   normal:italic:oblique (font)",
        "matches": {
          "font": true
        },
        "opts": {}
      },
      {
        "content": "font-variant: ${1:normal/small-caps};$0",
        "doc": null,
        "grammar": "snu",
        "label": "font-variant:   normal:small-caps (font)",
        "matches": {
          "font": true
        },
        "opts": {}
      },
      {
        "content": "font-weight: ${1:normal/bold};$0",
        "doc": null,
        "grammar": "snu",
        "label": "font-weight: weight (font)",
        "matches": {
          "font": true
        },
        "opts": {}
      },
      {
        "content": "font: ${1:normal/italic/oblique} ${2:normal/small-caps} ${3:normal/bold} ${4:1em/1.5em} ${5:Arial}, ${6:sans-}serif;$0",
        "doc": null,
        "grammar": "snu",
        "label": "font:   style variant weight size:line-height font -family (font)",
        "matches": {
          "font": true
        },
        "opts": {}
      },
      {
        "content": "font: ${1:75%} ${2:\"Lucida Grande\", \"Trebuchet MS\", Verdana,} ${3:sans-}serif;$0",
        "doc": null,
        "grammar": "snu",
        "label": "font: size font (font)",
        "matches": {
          "font": true
        },
        "opts": {}
      },
      {
        "content": "letter-spacing: $1em;$0",
        "doc": null,
        "grammar": "snu",
        "label": "letter-spacing:   length-em (letter)",
        "matches": {
          "letter": true
        },
        "opts": {}
      },
      {
        "content": "letter-spacing: $1px;$0",
        "doc": null,
        "grammar": "snu",
        "label": "letter-spacing:   length-px (letter)",
        "matches": {
          "letter": true
        },
        "opts": {}
      },
      {
        "content": "list-style-image: url($1);$0",
        "doc": null,
        "grammar": "snu",
        "label": "list-style-image: url (list)",
        "matches": {
          "list": true
        },
        "opts": {}
      },
      {
        "content": "list-style-position: ${1:inside/outside};$0",
        "doc": null,
        "grammar": "snu",
        "label": "list-style-position: pos (list)",
        "matches": {
          "list": true
        },
        "opts": {}
      },
      {
        "content": "list-style-type: ${1:cjk-ideographic/hiragana/katakana/hiragana-iroha/katakana-iroha};$0",
        "doc": null,
        "grammar": "snu",
        "label": "list-style-type: asian (list)",
        "matches": {
          "list": true
        },
        "opts": {}
      },
      {
        "content": "list-style-type: ${1:none/disc/circle/square};$0",
        "doc": null,
        "grammar": "snu",
        "label": "list-style-type: marker(list)",
        "matches": {
          "list": true
        },
        "opts": {}
      },
      {
        "content": "list-style-type: ${1:decimal/decimal-leading-zero/zero};$0",
        "doc": null,
        "grammar": "snu",
        "label": "list-style-type: numeric (list)",
        "matches": {
          "list": true
        },
        "opts": {}
      },
      {
        "content": "list-style-type: ${1:hebrew/armenian/georgian};$0",
        "doc": null,
        "grammar": "snu",
        "label": "list-style-type: other (list)",
        "matches": {
          "list": true
        },
        "opts": {}
      },
      {
        "content": "list-style-type: ${1:lower-roman/upper-roman/lower-alpha/upper-alpha/lower-greek/lower-latin/upper-latin};$0",
        "doc": null,
        "grammar": "snu",
        "label": "list-style-type: roman-alpha-greek (list)",
        "matches": {
          "list": true
        },
        "opts": {}
      },
      {
        "content": "list-style: ${1:none/disc/circle/square/decimal/zero} ${2:inside/outside} url($3);$0",
        "doc": null,
        "grammar": "snu",
        "label": "list-style: type position image (list)",
        "matches": {
          "list": true
        },
        "opts": {}
      },
      {
        "content": "margin-bottom: ${1:20px};$0",
        "doc": null,
        "grammar": "snu",
        "label": "margin-bottom: length (margin)",
        "matches": {
          "margin": true
        },
        "opts": {}
      },
      {
        "content": "margin-left: ${1:20px};$0",
        "doc": null,
        "grammar": "snu",
        "label": "margin-left: length (margin)",
        "matches": {
          "margin": true
        },
        "opts": {}
      },
      {
        "content": "margin-right: ${1:20px};$0",
        "doc": null,
        "grammar": "snu",
        "label": "margin-right: length (margin)",
        "matches": {
          "margin": true
        },
        "opts": {}
      },
      {
        "content": "margin-top: ${1:20px};$0",
        "doc": null,
        "grammar": "snu",
        "label": "margin-top: length (margin)",
        "matches": {
          "margin": true
        },
        "opts": {}
      },
      {
        "content": "margin: ${1:20px};$0",
        "doc": null,
        "grammar": "snu",
        "label": "margin:   all (margin)",
        "matches": {
          "margin": true
        },
        "opts": {}
      },
      {
        "content": "margin: ${1:20px} ${2:0px} ${3:40px} ${4:0px};$0",
        "doc": null,
        "grammar": "snu",
        "label": "margin: T R B L (margin)",
        "matches": {
          "margin": true
        },
        "opts": {}
      },
      {
        "content": "margin: ${1:20px} ${2:0px};$0",
        "doc": null,
        "grammar": "snu",
        "label": "margin: V H (margin)",
        "matches": {
          "margin": true
        },
        "opts": {}
      },
      {
        "content": "marker-offset: auto;$0",
        "doc": null,
        "grammar": "snu",
        "label": "marker-offset: auto (marker)",
        "matches": {
          "marker": true
        },
        "opts": {}
      },
      {
        "content": "marker-offset: ${1:10px};$0",
        "doc": null,
        "grammar": "snu",
        "label": "marker-offset: length (marker)",
        "matches": {
          "marker": true
        },
        "opts": {}
      },
      {
        "content": "overflow: ${1:visible/hidden/scroll/auto};$0",
        "doc": null,
        "grammar": "snu",
        "label": "overflow: type (overflow)",
        "matches": {
          "overflow": true
        },
        "opts": {}
      },
      {
        "content": "padding-bottom: ${1:20px};$0",
        "doc": null,
        "grammar": "snu",
        "label": "padding-bottom: length (margin)",
        "matches": {
          "padding": true
        },
        "opts": {}
      },
      {
        "content": "padding-left: ${1:20px};$0",
        "doc": null,
        "grammar": "snu",
        "label": "padding-left: length (margin)",
        "matches": {
          "padding": true
        },
        "opts": {}
      },
      {
        "content": "padding-right: ${1:20px};$0",
        "doc": null,
        "grammar": "snu",
        "label": "padding-right: length (margin)",
        "matches": {
          "padding": true
        },
        "opts": {}
      },
      {
        "content": "padding-top: ${1:20px};$0",
        "doc": null,
        "grammar": "snu",
        "label": "padding-top: length (margin)",
        "matches": {
          "padding": true
        },
        "opts": {}
      },
      {
        "content": "padding: ${1:20px} ${2:0px} ${3:40px} ${4:0px};$0",
        "doc": null,
        "grammar": "snu",
        "label": "padding:   T R B L (padding)",
        "matches": {
          "padding": true
        },
        "opts": {}
      },
      {
        "content": "padding: ${1:20px} ${2:0px};$0",
        "doc": null,
        "grammar": "snu",
        "label": "padding:   V H (padding)",
        "matches": {
          "padding": true
        },
        "opts": {}
      },
      {
        "content": "padding: ${1:20px};$0",
        "doc": null,
        "grammar": "snu",
        "label": "padding:   all (padding)",
        "matches": {
          "padding": true
        },
        "opts": {}
      },
      {
        "content": "position: ${1:static/relative/absolute/fixed};$0",
        "doc": null,
        "grammar": "snu",
        "label": "position: type (position)",
        "matches": {
          "position": true
        },
        "opts": {}
      },
      {
        "content": "{\n\t/* $1 */\n\t$0\n",
        "doc": null,
        "grammar": "snu",
        "label": "properties { } ( } )",
        "matches": {
          "{": true
        },
        "opts": {}
      },
      {
        "content": "scrollbar-base-color:       ${1:#CCCCCC};${2:\nscrollbar-arrow-color:      ${3:#000000};\nscrollbar-track-color:      ${4:#999999};\nscrollbar-3dlight-color:    ${5:#EEEEEE};\nscrollbar-highlight-color:  ${6:#FFFFFF};\nscrollbar-face-color:       ${7:#CCCCCC};\nscrollbar-shadow-color:     ${9:#999999};\nscrollbar-darkshadow-color: ${8:#666666};}",
        "doc": null,
        "grammar": "snu",
        "label": "scrollbar",
        "matches": {
          "scrollbar": true
        },
        "opts": {}
      },
      {
        "content": "$1::-moz-selection,\n$1::selection {\n\tcolor: ${2:inherit};\n\tbackground: ${3:inherit};\n}",
        "doc": null,
        "grammar": "snu",
        "label": "selection",
        "matches": {
          "selection": true
        },
        "opts": {}
      },
      {
        "content": "text-align: ${1:left/right/center/justify};$0",
        "doc": null,
        "grammar": "snu",
        "label": "text-align: left:center:right (txt)",
        "matches": {
          "text": true
        },
        "opts": {}
      },
      {
        "content": "text-decoration: ${1:none/underline/overline/line-through/blink};$0",
        "doc": null,
        "grammar": "snu",
        "label": "text-decoration: none:underline:overline:line-through:blink (text)",
        "matches": {
          "text": true
        },
        "opts": {}
      },
      {
        "content": "text-indent: ${1:10}px;$0",
        "doc": null,
        "grammar": "snu",
        "label": "text-indent: length (text)",
        "matches": {
          "text": true
        },
        "opts": {}
      },
      {
        "content": "text-transform: ${1:capitalize/uppercase/lowercase};$0",
        "doc": null,
        "grammar": "snu",
        "label": "text-transform: capitalize:upper:lower (text)",
        "matches": {
          "text": true
        },
        "opts": {}
      },
      {
        "content": "vertical-align: ${1:baseline/sub/super/top/text-top/middle/bottom/text-bottom/length/%};$0",
        "doc": null,
        "grammar": "snu",
        "label": "vertical-align: type (vertical)",
        "matches": {
          "vertical": true
        },
        "opts": {}
      },
      {
        "content": "visibility: ${1:visible/hidden/collapse};$0",
        "doc": null,
        "grammar": "snu",
        "label": "visibility: type (visibility)",
        "matches": {
          "visibility": true
        },
        "opts": {}
      },
      {
        "content": "white-space: ${1:normal/pre/nowrap};$0",
        "doc": null,
        "grammar": "snu",
        "label": "white-space:  normal:pre:nowrap (white)",
        "matches": {
          "white": true
        },
        "opts": {}
      },
      {
        "content": "word-spacing: ${1:10px};$0",
        "doc": null,
        "grammar": "snu",
        "label": "word-spacing:  length (word)",
        "matches": {
          "word": true
        },
        "opts": {}
      },
      {
        "content": "z-index: $1;$0",
        "doc": null,
        "grammar": "snu",
        "label": "z-index: index (z)",
        "matches": {
          "z": true
        },
        "opts": {}
      }
    ],
    "cuda": [
      {
        "content": "__global__ void ${1:kernel}(${2:void}) {\n\t${0:// TODO: Implement}\n}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "kern \"Kernel definition\"": true
        },
        "opts": {}
      },
      {
        "content": "__device__ ${1:int} ${2:foo}(${3:void}) {\n\t${0:// TODO: Implement}\n\treturn 0;\n}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "dev \"Device function definition\"": true
        },
        "opts": {}
      },
      {
        "content": "${1:kernel}<<<${2:args}>>>(${3});${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "call \"Kernel call\"": true
        },
        "opts": {}
      },
      {
        "content": "__syncthreads();",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "sync \"Synchonize threads\"": true
        },
        "opts": {}
      },
      {
        "content": "threadIdx.${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "tid \"Thread Index\"": true
        },
        "opts": {}
      },
      {
        "content": "blockIdx.${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "bid \"Block Index\"": true
        },
        "opts": {}
      },
      {
        "content": "blockDim.${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "bdim \"Block Dimension\"": true
        },
        "opts": {}
      },
      {
        "content": "int ${1:index} = threadIdx.${2:x} + blockIdx.$2 * blockDim.$2;",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ii \"Get current index (1D)\"": true
        },
        "opts": {}
      },
      {
        "content": "int ${1:x} = threadIdx.x + blockIdx.x * blockDim.x;",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ix \"Get current X index (1D)\"": true
        },
        "opts": {}
      },
      {
        "content": "int ${1:y} = threadIdx.y + blockIdx.y * blockDim.y;",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "iy \"Get current Y index (1D)\"": true
        },
        "opts": {}
      },
      {
        "content": "int ${1:z} = threadIdx.z + blockIdx.z * blockDim.z;",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "iz \"Get current Z index (1D)\"": true
        },
        "opts": {}
      },
      {
        "content": "int ${1:x} = threadIdx.x + blockIdx.x * blockDim.x;\nint ${2:y} = threadIdx.y + blockIdx.y * blockDim.y;",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ixy \"Get current X,Y index (2D)\"": true
        },
        "opts": {}
      },
      {
        "content": "int ${1:x} = threadIdx.x + blockIdx.x * blockDim.x;\nint ${3:z} = threadIdx.z + blockIdx.z * blockDim.z;",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ixz \"Get current X,Z index (2D)\"": true
        },
        "opts": {}
      },
      {
        "content": "int ${2:y} = threadIdx.y + blockIdx.y * blockDim.y;\nint ${3:z} = threadIdx.z + blockIdx.z * blockDim.z;",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "iyz \"Get current Y,Z index (2D)\"": true
        },
        "opts": {}
      },
      {
        "content": "int ${1:x} = threadIdx.x + blockIdx.x * blockDim.x;\nint ${2:y} = threadIdx.y + blockIdx.y * blockDim.y;\nint ${3:z} = threadIdx.z + blockIdx.z * blockDim.z;",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ixyz \"Get current X,Y,Z index (3D)\"": true
        },
        "opts": {}
      },
      {
        "content": "__shared__ ${1:int} ${2:memo}[${3:SIZE}];${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "share \"Shared memory declaration\"": true
        },
        "opts": {}
      }
    ],
    "cypress": [
      {
        "content": "cy.getCookies();",
        "doc": "Get all of the browser cookies.",
        "grammar": "lsp",
        "label": "cypress-cookies-get-all",
        "matches": {
          "cypress cookies get all": true
        },
        "opts": {}
      },
      {
        "content": "cy.clearCookies();",
        "doc": "Clear all browser cookies for current domain and subdomain.",
        "grammar": "lsp",
        "label": "cypress-cookies-clear-all",
        "matches": {
          "cypress cookies clear all": true
        },
        "opts": {}
      },
      {
        "content": "cy.get('${1:selector}');",
        "doc": "Get one or more DOM elements by selector or alias",
        "grammar": "lsp",
        "label": "cypress-get",
        "matches": {
          "cypress get": true
        },
        "opts": {}
      },
      {
        "content": "cy.go('${1:direction}');",
        "doc": "Navigate back or forward to the previous or next URL in the browser’s history.",
        "grammar": "lsp",
        "label": "cypress-go",
        "matches": {
          "cypress go": true
        },
        "opts": {}
      },
      {
        "content": "cy.scrollTo(${1:x}, ${2:y});",
        "doc": "Scroll to a position defined by the distance in pixels from window/element’s x and y or percentage of the window/element’s width and height.",
        "grammar": "lsp",
        "label": "cypress-scroll-to-coordinates",
        "matches": {
          "cypress scroll to coordinates": true
        },
        "opts": {}
      },
      {
        "content": "cy.scrollTo('${1:position}');",
        "doc": "Scroll to a specified position. Valid positions are topLeft, top, topRight, left, center, right, bottomLeft, bottom, and bottomRight.",
        "grammar": "lsp",
        "label": "cypress-scroll-to-position",
        "matches": {
          "cypress scroll to position": true
        },
        "opts": {}
      },
      {
        "content": "cy.request({\n\tmethod: '${1:METHOD}',\n\turl: '${2:url}',\n\tbody: ${3:body}\n});",
        "doc": "Make an HTTP request.",
        "grammar": "lsp",
        "label": "cypress-request",
        "matches": {
          "cypress request": true
        },
        "opts": {}
      },
      {
        "content": "cy.route('${1:METHOD}', '${2:url}', ${3:response});",
        "doc": "Use cy.route() to manage the behavior of network requests.",
        "grammar": "lsp",
        "label": "cypress-route",
        "matches": {
          "cypress route": true
        },
        "opts": {}
      },
      {
        "content": "cy.server();",
        "doc": "Start a server to begin routing responses to cy.route() and to change the behavior of network requests.",
        "grammar": "lsp",
        "label": "cypress-server",
        "matches": {
          "cypress server": true
        },
        "opts": {}
      },
      {
        "content": "cy.viewport(${1:width}, ${2:height});",
        "doc": "Control the size of the screen for your application.",
        "grammar": "lsp",
        "label": "cypress-viewport",
        "matches": {
          "cypress viewport": true
        },
        "opts": {}
      },
      {
        "content": "cy.viewport('${1:preset}');",
        "doc": "Control the size of the screen for your application via presets. Preset supports the following options: ipad-2, ipad-mini, iphone-3, iphone-4, iphone-5, iphone-6, iphone-6+, iphone-x, iphone-xr, macbook-11, macbook-13, macbook-15, samsung-note9, samsung-s10",
        "grammar": "lsp",
        "label": "cypress-viewport-preset",
        "matches": {
          "cypress viewport preset": true
        },
        "opts": {}
      },
      {
        "content": "cy.visit('${1:url}');",
        "doc": "Visit a remote URL",
        "grammar": "lsp",
        "label": "cypress-visit",
        "matches": {
          "cypress visit": true
        },
        "opts": {}
      },
      {
        "content": "cy.wait(${1:time});",
        "doc": "Wait for a number of milliseconds or wait for an aliased resource to resolve before moving on to the next command.",
        "grammar": "lsp",
        "label": "cypress-wait",
        "matches": {
          "cypress wait": true
        },
        "opts": {}
      }
    ],
    "d": [
      {
        "content": "foreach (${1:#:var}; ${2:#:list}) {\n    ${3:TARGET}\n}",
        "doc": "",
        "grammar": "snu",
        "label": "foreach() {}",
        "matches": {
          "foreach": true
        },
        "opts": {}
      },
      {
        "content": "class ${1:#:name} {\n    ${2:TARGET}\n}",
        "doc": "",
        "grammar": "snu",
        "label": "class {}",
        "matches": {
          "class": true
        },
        "opts": {}
      },
      {
        "content": "struct ${1:#:name} {\n    ${2:TARGET}\n}",
        "doc": "",
        "grammar": "snu",
        "label": "struct {}",
        "matches": {
          "struct": true
        },
        "opts": {}
      },
      {
        "content": "enum ${1:#:name} {\n    ${2:TARGET}\n}",
        "doc": "",
        "grammar": "snu",
        "label": "enum {}",
        "matches": {
          "enum": true
        },
        "opts": {}
      },
      {
        "content": "import ",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "imp": true
        },
        "opts": {}
      },
      {
        "content": "public import",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "pimp": true
        },
        "opts": {}
      },
      {
        "content": "std.stdio",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "io": true
        },
        "opts": {}
      },
      {
        "content": "std.traits",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "traits": true
        },
        "opts": {}
      },
      {
        "content": "std.conv",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "conv": true
        },
        "opts": {}
      },
      {
        "content": "std.array",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "arr": true
        },
        "opts": {}
      },
      {
        "content": "std.algorithm",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "algo": true
        },
        "opts": {}
      },
      {
        "content": "import std.stdio, std.string, std.array;\nimport std.traits, std.conv, std.algorithm;\nimport std.math, std.regex;",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "theusual": true
        },
        "opts": {}
      },
      {
        "content": "for(int ${1:i} = 0; $1 < ${2:count}; $1++) {\n\t${0}\n}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "for": true
        },
        "opts": {}
      },
      {
        "content": "foreach(${1:elem}; ${2:range}) {\n\t${0}\n}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "fe": true
        },
        "opts": {}
      },
      {
        "content": "foreach(${1:i}, ${2:elem}; ${3:range}) {\n\t${0}\t\n} ",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "fei": true
        },
        "opts": {}
      },
      {
        "content": "foreach_reverse(${1:elem}; ${2:range}) {\n\t${0}\t\n} ",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "fer": true
        },
        "opts": {}
      },
      {
        "content": "foreach_reverse(${1:i}, ${2:elem}; ${3:range}) {\n\t${0}  \n}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "feri": true
        },
        "opts": {}
      },
      {
        "content": "scope(exit) ${1:f.close();}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "sce": true
        },
        "opts": {}
      },
      {
        "content": "scope(success) ${1}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "scs": true
        },
        "opts": {}
      },
      {
        "content": "scope(failure) ${1}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "scf": true
        },
        "opts": {}
      },
      {
        "content": "else {\n\t${1}\t\n}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "el": true
        },
        "opts": {}
      },
      {
        "content": "else if(${1}) {\n\t${0}\n}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "eif": true
        },
        "opts": {}
      },
      {
        "content": "if(${1}) {\n\t${0}\n}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "if": true
        },
        "opts": {}
      },
      {
        "content": "if(${1}) {\n\t${2}\t\n} else {\n\t${3}\t\n}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ife": true
        },
        "opts": {}
      },
      {
        "content": "if(${1}) {\n\t${2}\t\n} else if(${3}) {\n\t${4}\n} else {\n\t${5}\n}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ifee": true
        },
        "opts": {}
      },
      {
        "content": "switch(${1}) {\n\t${0}\n}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "sw": true
        },
        "opts": {}
      },
      {
        "content": "case ${1:0}:\n\t${2}\n\tbreak;",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "cs": true
        },
        "opts": {}
      },
      {
        "content": "default:\n\t${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "def": true
        },
        "opts": {}
      },
      {
        "content": "final switch(${1}) {\n\t${0}\n}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "fsw": true
        },
        "opts": {}
      },
      {
        "content": "try {\n\t${1:${VISUAL}}\n} catch(${2:Exception} ${3:e}) {\n\t${4}\n}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "try": true
        },
        "opts": {}
      },
      {
        "content": "try {\n\t${0:${VISUAL}}\n} catch(${1:Exception} ${2:e}) {\n\t${3}\n} finally {\n\t${4}\n}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "tcf": true
        },
        "opts": {}
      },
      {
        "content": "while(${1:cond}) {\n\t${0:${VISUAL}}\n}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "wh": true
        },
        "opts": {}
      },
      {
        "content": "do {\n\t${1}\n} while(${2});",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "dowh": true
        },
        "opts": {}
      },
      {
        "content": "static if(${1:cond}) {\n\t${2}\n}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "sif": true
        },
        "opts": {}
      },
      {
        "content": "static if(${1}) {\n\t${2}\n} else {\n\t${3}\n}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "sife": true
        },
        "opts": {}
      },
      {
        "content": "static if(${1}) {\n\t${2}\n} else static if(${3}) {\n\t${4}\n} else {\n\t${5}\n}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "sifee": true
        },
        "opts": {}
      },
      {
        "content": "else static if(${1}) {\n\t${2}\n} ",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "seif": true
        },
        "opts": {}
      },
      {
        "content": "(${1: a > b}) ? ${2:a} : ${3:b}; ",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "?": true
        },
        "opts": {}
      },
      {
        "content": "with(${1:exp}) {\n\t${2}\n} ${0}\t",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "with": true
        },
        "opts": {}
      },
      {
        "content": "${1:auto} ${2:func}(${3:params}) {\n\t${0}\n}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "fun": true
        },
        "opts": {}
      },
      {
        "content": "in {\n\t${1}\n} out {\n\t${2}\n} body {\n\t${0}\n}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "contr": true
        },
        "opts": {}
      },
      {
        "content": "(${1:x}) => ${2:x}${0:;}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "l": true
        },
        "opts": {}
      },
      {
        "content": "function (${1:int x}) => ${2}${3:;}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "funl": true
        },
        "opts": {}
      },
      {
        "content": "delegate (${1:int x}) => ${2}${3:;} ",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "del": true
        },
        "opts": {}
      },
      {
        "content": "int opApply(Dg)(Dg dg) if(ParameterTypeTuble!Dg.length == 2) {\n\t${0}\n}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "opApply": true
        },
        "opts": {}
      },
      {
        "content": "pure @safe nothrow",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "psn": true
        },
        "opts": {}
      },
      {
        "content": "@safe",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "safe": true
        },
        "opts": {}
      },
      {
        "content": "@trusted",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "trusted": true
        },
        "opts": {}
      },
      {
        "content": "@system",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "system": true
        },
        "opts": {}
      },
      {
        "content": "enum ${1} {\n\t${0}\n}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "enum": true
        },
        "opts": {}
      },
      {
        "content": "public",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "pu": true
        },
        "opts": {}
      },
      {
        "content": "private",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "pr": true
        },
        "opts": {}
      },
      {
        "content": "protected",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "po": true
        },
        "opts": {}
      },
      {
        "content": "this(${1}) {\n\t${0}\n} ",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ctor": true
        },
        "opts": {}
      },
      {
        "content": "~this(${1}) {\n\t${0}\n}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "dtor": true
        },
        "opts": {}
      },
      {
        "content": "alias ${1:b} = ${2:a};\n${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "al": true
        },
        "opts": {}
      },
      {
        "content": "alias ${1:value} this;\n${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "alth": true
        },
        "opts": {}
      },
      {
        "content": "void main() {\n\t${0}\n}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "main": true
        },
        "opts": {}
      },
      {
        "content": "void main(string[] args) {\n\t${0}\n}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "maina": true
        },
        "opts": {}
      },
      {
        "content": "module ${1:main};${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "mod": true
        },
        "opts": {}
      },
      {
        "content": "${1:auto} ${2:var} = ${0:1};",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "var": true
        },
        "opts": {}
      },
      {
        "content": "${1:auto} ${2:var} = new ${3:Object}(${4});\n${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "new": true
        },
        "opts": {}
      },
      {
        "content": "auto ${1:f} = File(${2:\"useful_info.xml\"}, ${3:\"rw\"});\n${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "file": true
        },
        "opts": {}
      },
      {
        "content": "map!(${1:f})(${2:xs});\n${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "map": true
        },
        "opts": {}
      },
      {
        "content": "filter!(${1:p})(${2:xs});\n${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "filter": true
        },
        "opts": {}
      },
      {
        "content": "reduce!(${1:f})(${2:xs});\n${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "reduce": true
        },
        "opts": {}
      },
      {
        "content": "find!(${1:p})($2:xs);\n${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "find": true
        },
        "opts": {}
      },
      {
        "content": "${1:int}[${2:string}] ${3:dict} = ${0};",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "aa": true
        },
        "opts": {}
      },
      {
        "content": "#!/usr/bin/env rdmd",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "#!": true
        },
        "opts": {}
      },
      {
        "content": "#!/usr/bin/env rdmd",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "bang": true
        },
        "opts": {}
      },
      {
        "content": "#!/usr/bin/env rdmd",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "rdmd": true
        },
        "opts": {}
      },
      {
        "content": "isSomeString!${1:S}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "isstr": true
        },
        "opts": {}
      },
      {
        "content": "isNumeric!${1:N}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "isnum": true
        },
        "opts": {}
      },
      {
        "content": "to!string(${1:x});\n${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "tos": true
        },
        "opts": {}
      },
      {
        "content": "to!int(${1:str});\n${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "toi": true
        },
        "opts": {}
      },
      {
        "content": "to!double(${1:str});\n${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "tod": true
        },
        "opts": {}
      },
      {
        "content": "unittest {\n\t${0}\n}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "un": true
        },
        "opts": {}
      },
      {
        "content": "version(${1:Posix}) {\n\t${0}\n}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ver": true
        },
        "opts": {}
      },
      {
        "content": "debug {\n\t${0}\n}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "de": true
        },
        "opts": {}
      },
      {
        "content": "shared static this(${1}) {\n\t${0}\n}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "sst": true
        },
        "opts": {}
      },
      {
        "content": "// Typedef is deprecated. Use alias instead.\ntypedef",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "td": true
        },
        "opts": {}
      },
      {
        "content": "inout",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ino": true
        },
        "opts": {}
      },
      {
        "content": "immutable",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "imm": true
        },
        "opts": {}
      },
      {
        "content": "final",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "fin": true
        },
        "opts": {}
      },
      {
        "content": "const",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "con": true
        },
        "opts": {}
      },
      {
        "content": "private static immutable ${1:int} ${2:Constant} = ${3:1};\n${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "psi": true
        },
        "opts": {}
      },
      {
        "content": "pragma(${1})",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "prag": true
        },
        "opts": {}
      },
      {
        "content": "pragma(msg, ${1:Warning});",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "pms": true
        },
        "opts": {}
      },
      {
        "content": "asm {\n\t${1}\n}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "asm": true
        },
        "opts": {}
      },
      {
        "content": "override",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "over": true
        },
        "opts": {}
      },
      {
        "content": "return ${1};",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ret": true
        },
        "opts": {}
      },
      {
        "content": "__FILE__",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "FILE": true
        },
        "opts": {}
      },
      {
        "content": "__MODULE__",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "MOD": true
        },
        "opts": {}
      },
      {
        "content": "__LINE__",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "LINE": true
        },
        "opts": {}
      },
      {
        "content": "__FUNCTION__",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "FUN": true
        },
        "opts": {}
      },
      {
        "content": "__PRETTY_FUNCTION__",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "PF": true
        },
        "opts": {}
      },
      {
        "content": "cast(${1:T})(${2:val});",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "cast": true
        },
        "opts": {}
      },
      {
        "content": "/*\n * ${1}\n*/",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "/*": true
        },
        "opts": {}
      },
      {
        "content": "// I don't know how this works. Don't touch it.",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "idk": true
        },
        "opts": {}
      },
      {
        "content": "// Don't FUCKING touch this.",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "idfk": true
        },
        "opts": {}
      },
      {
        "content": "import ${1:std.stdio};",
        "doc": null,
        "grammar": "snu",
        "label": "import (imp)",
        "matches": {
          "imp": true
        },
        "opts": {
          "b": true
        }
      },
      {
        "content": "public import ${1:/*module*/};",
        "doc": null,
        "grammar": "snu",
        "label": "public import (pimp)",
        "matches": {
          "pimp": true
        },
        "opts": {
          "b": true
        }
      },
      {
        "content": "override ${1:/*function*/}",
        "doc": null,
        "grammar": "snu",
        "label": "override (over)",
        "matches": {
          "over": true
        },
        "opts": {
          "b": true
        }
      },
      {
        "content": "alias ${1:/*orig*/} ${2:/*alias*/};",
        "doc": null,
        "grammar": "snu",
        "label": "alias (al)",
        "matches": {
          "al": true
        },
        "opts": {}
      },
      {
        "content": "mixin ${1:/*mixed_in*/} ${2:/*name*/};",
        "doc": null,
        "grammar": "snu",
        "label": "mixin (mixin)",
        "matches": {
          "mixin": true
        },
        "opts": {
          "b": true
        }
      },
      {
        "content": "new $1($2);",
        "doc": null,
        "grammar": "snu",
        "label": "new (new)",
        "matches": {
          "new": true
        },
        "opts": {}
      },
      {
        "content": "@safe const pure nothrow",
        "doc": null,
        "grammar": "snu",
        "label": "@safe const pure nothrow (scpn)",
        "matches": {
          "scpn": true
        },
        "opts": {}
      },
      {
        "content": "@safe pure nothrow",
        "doc": null,
        "grammar": "snu",
        "label": "@safe pure nothrow (spn)",
        "matches": {
          "spn": true
        },
        "opts": {}
      },
      {
        "content": "continue;",
        "doc": null,
        "grammar": "snu",
        "label": "continue (cont)",
        "matches": {
          "cont": true
        },
        "opts": {}
      },
      {
        "content": "@disable ${1:/*method*/};",
        "doc": null,
        "grammar": "snu",
        "label": "@disable (dis)",
        "matches": {
          "dis": true
        },
        "opts": {
          "b": true
        }
      },
      {
        "content": "public:\n\t${1:/*members*/}",
        "doc": null,
        "grammar": "snu",
        "label": "public (pub)",
        "matches": {
          "pub": true
        },
        "opts": {
          "b": true
        }
      },
      {
        "content": "private:\n\t${1:/*members*/}",
        "doc": null,
        "grammar": "snu",
        "label": "private (priv)",
        "matches": {
          "priv": true
        },
        "opts": {
          "b": true
        }
      },
      {
        "content": "protected:\n\t${1:/*members*/}",
        "doc": null,
        "grammar": "snu",
        "label": "protected (prot)",
        "matches": {
          "prot": true
        },
        "opts": {
          "b": true
        }
      },
      {
        "content": "package:\n\t${1:/*members*/}",
        "doc": null,
        "grammar": "snu",
        "label": "package (pack)",
        "matches": {
          "pack": true
        },
        "opts": {
          "b": true
        }
      },
      {
        "content": "return ${1:/*value to return*/};",
        "doc": null,
        "grammar": "snu",
        "label": "return (ret)",
        "matches": {
          "ret": true
        },
        "opts": {}
      },
      {
        "content": "auto ${1:/*variable*/} = ${2:/*value*/};",
        "doc": null,
        "grammar": "snu",
        "label": "auto (auto)",
        "matches": {
          "auto": true
        },
        "opts": {
          "b": true
        }
      },
      {
        "content": "const ${1:/*variable*/} = ${2:/*value*/};",
        "doc": null,
        "grammar": "snu",
        "label": "const (con)",
        "matches": {
          "con": true
        },
        "opts": {
          "b": true
        }
      },
      {
        "content": "size_t ${1:/*variable*/} = ${2:/*value*/};",
        "doc": null,
        "grammar": "snu",
        "label": "size_t (siz)",
        "matches": {
          "siz": true
        },
        "opts": {
          "b": true
        }
      },
      {
        "content": "super(${1:/*args*/});",
        "doc": null,
        "grammar": "snu",
        "label": "super (sup)",
        "matches": {
          "sup": true
        },
        "opts": {
          "b": true
        }
      },
      {
        "content": "tuple(${1:/*args*/})",
        "doc": null,
        "grammar": "snu",
        "label": "tuple (tup)",
        "matches": {
          "tup": true
        },
        "opts": {}
      },
      {
        "content": "writeln(${1:/*args*/});",
        "doc": null,
        "grammar": "snu",
        "label": "writeln (wr)",
        "matches": {
          "wr": true
        },
        "opts": {}
      },
      {
        "content": "to!(${1:/*type*/})(${2:/*arg*/})",
        "doc": null,
        "grammar": "snu",
        "label": "to (to)",
        "matches": {
          "to": true
        },
        "opts": {}
      },
      {
        "content": "enforce(${1:/*condition*/},\n\tnew $2Exception(${3:/*args*/}));",
        "doc": null,
        "grammar": "snu",
        "label": "enforce (enf)",
        "matches": {
          "enf": true
        },
        "opts": {
          "b": true
        }
      },
      {
        "content": "if(${1:/*condition*/})\n{\n\t${VISUAL}$0\n}",
        "doc": null,
        "grammar": "snu",
        "label": "if .. (if)",
        "matches": {
          "if": true
        },
        "opts": {}
      },
      {
        "content": "if(${1:/*condition*/})\n{\n\t$2\n}\nelse\n{\n\t${3:/*else*/}\n}",
        "doc": null,
        "grammar": "snu",
        "label": "if .. else (ife)",
        "matches": {
          "ife": true
        },
        "opts": {
          "b": true
        }
      },
      {
        "content": "else\n{\n\t${VISUAL}$1\n}",
        "doc": null,
        "grammar": "snu",
        "label": "else (el)",
        "matches": {
          "el": true
        },
        "opts": {
          "b": true
        }
      },
      {
        "content": "else if(${1:/*condition*/})\n{\n\t${VISUAL}$0\n}",
        "doc": null,
        "grammar": "snu",
        "label": "else if (elif)",
        "matches": {
          "elif": true
        },
        "opts": {
          "b": true
        }
      },
      {
        "content": "switch(${1:/*var*/})\n{\n\tcase ${2:/*value*/}:\n\t\t$3\n\t\tbreak;\n\tcase ${4:/*value*/}:\n\t\t$5\n\t\tbreak;\n\t${7:/*more cases*/}\n\tdefault:\n\t\t${6:assert(false);}\n}",
        "doc": null,
        "grammar": "snu",
        "label": "switch (sw)",
        "matches": {
          "sw": true
        },
        "opts": {}
      },
      {
        "content": "final switch(${1:/*var*/})\n{\n\tcase ${2:/*value*/}:\n\t\t$3\n\t\tbreak;\n\tcase ${4:/*value*/}:\n\t\t$5\n\t\tbreak;\n\t${7:/*more cases*/}\n}",
        "doc": null,
        "grammar": "snu",
        "label": "final switch (fsw)",
        "matches": {
          "fsw": true
        },
        "opts": {}
      },
      {
        "content": "case ${1:/*value*/}:\n\t$2\n\tbreak;",
        "doc": null,
        "grammar": "snu",
        "label": "case (case)",
        "matches": {
          "case": true
        },
        "opts": {
          "b": true
        }
      },
      {
        "content": "${1:/*condition*/} ? ${2:/*then*/} : ${3:/*else*/}$4",
        "doc": null,
        "grammar": "snu",
        "label": "ternary operator (?:)",
        "matches": {
          "?:": true
        },
        "opts": {}
      },
      {
        "content": "do\n{\n\t${VISUAL}$2\n} while(${1:/*condition*/});",
        "doc": null,
        "grammar": "snu",
        "label": "do while (do)",
        "matches": {
          "do": true
        },
        "opts": {
          "b": true
        }
      },
      {
        "content": "while(${1:/*condition*/})\n{\n\t${VISUAL}$2\n}",
        "doc": null,
        "grammar": "snu",
        "label": "while (wh)",
        "matches": {
          "wh": true
        },
        "opts": {
          "b": true
        }
      },
      {
        "content": "for (${4:size_t} ${2:i} = 0; $2 < ${1:count}; ${3:++$2})\n{\n\t${VISUAL}$0\n}",
        "doc": null,
        "grammar": "snu",
        "label": "for (for)",
        "matches": {
          "for": true
        },
        "opts": {
          "b": true
        }
      },
      {
        "content": "for(;;)\n{\n\t${VISUAL}$0\n}",
        "doc": null,
        "grammar": "snu",
        "label": "forever (forever)",
        "matches": {
          "forever": true
        },
        "opts": {
          "b": true
        }
      },
      {
        "content": "foreach(${1:/*elem*/}; ${2:/*range*/})\n{\n\t${VISUAL}$3\n}",
        "doc": null,
        "grammar": "snu",
        "label": "foreach (fore)",
        "matches": {
          "fore": true
        },
        "opts": {}
      },
      {
        "content": "foreach(${1:/*elem*/}; ${2:/*range*/}) if(${3:/*condition*/})\n{\n\t${VISUAL}$4\n}",
        "doc": null,
        "grammar": "snu",
        "label": "foreach if (forif)",
        "matches": {
          "forif": true
        },
        "opts": {
          "b": true
        }
      },
      {
        "content": "in\n{\n\tassert(${1:/*condition*/}, \"${2:error message}\");\n\t$3\n}\nbody",
        "doc": null,
        "grammar": "snu",
        "label": "in contract (in)",
        "matches": {
          "in": true
        },
        "opts": {
          "b": true
        }
      },
      {
        "content": "out${1:(result)}\n{\n\tassert(${2:/*condition*/}, \"${3:error message}\");\n\t$4\n}\nbody",
        "doc": null,
        "grammar": "snu",
        "label": "out contract (out)",
        "matches": {
          "out": true
        },
        "opts": {
          "b": true
        }
      },
      {
        "content": "invariant()\n{\n\tassert(${1:/*condition*/}, \"${2:error message}\");\n\t$3\n}",
        "doc": null,
        "grammar": "snu",
        "label": "invariant (inv)",
        "matches": {
          "inv": true
        },
        "opts": {
          "b": true
        }
      },
      {
        "content": "${1:void} ${2:/*function name*/}(${3:/*args*/}) ${4:@safe pure nothrow}\n{\n\t${VISUAL}$5\n}",
        "doc": null,
        "grammar": "snu",
        "label": "function definition (fun)",
        "matches": {
          "fun": true
        },
        "opts": {}
      },
      {
        "content": "void ${1:/*function name*/}(${2:/*args*/}) ${3:@safe pure nothrow}\n{\n\t${VISUAL}$4\n}",
        "doc": null,
        "grammar": "snu",
        "label": "void function definition (void)",
        "matches": {
          "void": true
        },
        "opts": {}
      },
      {
        "content": "this(${1:/*args*/})\n{\n\t${VISUAL}$2\n}",
        "doc": null,
        "grammar": "snu",
        "label": "ctor (this)",
        "matches": {
          "this": true
        },
        "opts": {
          "w": true
        }
      },
      {
        "content": "@property ${1:/*type*/} ${2:/*member_name*/}() const pure nothrow {return ${3:$2_};}",
        "doc": null,
        "grammar": "snu",
        "label": "getter property (get)",
        "matches": {
          "get": true
        },
        "opts": {}
      },
      {
        "content": "@property void ${1:/*member_name*/}(${2:/*type*/} rhs) pure nothrow {${3:$1_} = rhs;}",
        "doc": null,
        "grammar": "snu",
        "label": "setter property (set)",
        "matches": {
          "set": true
        },
        "opts": {}
      },
      {
        "content": "void main(string[] args)\n{\n\t${VISUAL}${0: /*code*/}\n}",
        "doc": null,
        "grammar": "snu",
        "label": "Main",
        "matches": {
          "main": true
        },
        "opts": {
          "b": true
        }
      },
      {
        "content": "mixin Signal!(${1:/*args*/}) ${2:/*name*/};",
        "doc": null,
        "grammar": "snu",
        "label": "signal (signal)",
        "matches": {
          "signal": true
        },
        "opts": {
          "b": true
        }
      },
      {
        "content": "scope(${1:exit})\n{\n\t${VISUAL}$2\n}",
        "doc": null,
        "grammar": "snu",
        "label": "scope (scope)",
        "matches": {
          "scope": true
        },
        "opts": {
          "b": true
        }
      },
      {
        "content": "with($1)\n{\n\t${VISUAL}$2\n}",
        "doc": null,
        "grammar": "snu",
        "label": "with (with)",
        "matches": {
          "with": true
        },
        "opts": {}
      },
      {
        "content": "try\n{\n\t${VISUAL}${1:/*code to try*/}\n}\ncatch($2Exception e)\n{\n\t${3:/*handle exception*/}\n}",
        "doc": null,
        "grammar": "snu",
        "label": "try/catch (try)",
        "matches": {
          "try": true
        },
        "opts": {
          "b": true
        }
      },
      {
        "content": "try\n{\n\t${VISUAL}${1:/*code to try*/}\n}\ncatch($2Exception e)\n{\n\t${3:/*handle exception*/}\n}\nfinally\n{\n\t${4:/*cleanup*/}\n}",
        "doc": null,
        "grammar": "snu",
        "label": "try/catch/finally (tryf)",
        "matches": {
          "tryf": true
        },
        "opts": {
          "b": true
        }
      },
      {
        "content": "catch($1Exception e)\n{\n\t${2:/*handle exception*/}\n}",
        "doc": null,
        "grammar": "snu",
        "label": "catch (catch)",
        "matches": {
          "catch": true
        },
        "opts": {
          "b": true
        }
      },
      {
        "content": "throw new $1Exception(\"$2\");",
        "doc": null,
        "grammar": "snu",
        "label": "throw (thr)",
        "matches": {
          "thr": true
        },
        "opts": {}
      },
      {
        "content": "/// ${3:/*documentation*/}\nclass $1Exception : $2Exception\n{\n\tpublic this(string msg, string file = __FILE__, int line = __LINE__)\n\t{\n\t\tsuper(msg, file, line);\n\t}\n}",
        "doc": null,
        "grammar": "snu",
        "label": "exception declaration (exc)",
        "matches": {
          "exc": true
        },
        "opts": {
          "b": true
        }
      },
      {
        "content": "version(${1:/*version name*/})\n{\n\t${VISUAL}$2\n}",
        "doc": null,
        "grammar": "snu",
        "label": "version (version)",
        "matches": {
          "version": true
        },
        "opts": {
          "b": true
        }
      },
      {
        "content": "debug\n{\n\t${VISUAL}$1\n}",
        "doc": null,
        "grammar": "snu",
        "label": "debug",
        "matches": {
          "debug": true
        },
        "opts": {
          "b": true
        }
      },
      {
        "content": "template ${2:/*name*/}(${1:/*args*/})\n{\n\t$3\n}",
        "doc": null,
        "grammar": "snu",
        "label": "template (temp)",
        "matches": {
          "temp": true
        },
        "opts": {
          "b": true
        }
      },
      {
        "content": "assert(${1:false}, \"${2:TODO}\");\n",
        "doc": null,
        "grammar": "snu",
        "label": "assert (ass)",
        "matches": {
          "ass": true
        },
        "opts": {
          "b": true
        }
      },
      {
        "content": "unittest\n{\n\t$1\n}",
        "doc": null,
        "grammar": "snu",
        "label": "unittest (unittest)",
        "matches": {
          "unittest": true
        },
        "opts": {
          "b": true
        }
      },
      {
        "content": "${1:/*return type*/} opDispatch(string s)()\n{\n\t$2;\n}",
        "doc": null,
        "grammar": "snu",
        "label": "opDispatch (opDis)",
        "matches": {
          "opDis": true
        },
        "opts": {
          "b": true
        }
      },
      {
        "content": "void opAssign($1 rhs) ${2:@safe pure nothrow}\n{\n\t$2\n}",
        "doc": null,
        "grammar": "snu",
        "label": "opAssign (op=)",
        "matches": {
          "op=": true
        },
        "opts": {
          "b": true
        }
      },
      {
        "content": "int opCmp($1 rhs) @safe const pure nothrow\n{\n\t$2\n}",
        "doc": null,
        "grammar": "snu",
        "label": "opCmp (opCmp)",
        "matches": {
          "opCmp": true
        },
        "opts": {
          "b": true
        }
      },
      {
        "content": "int opApply(int delegate(ref ${1:/*iterated type/s*/}) dg)\n{\n\tint result = 0;\n\t${2:/*loop*/}\n\t{\n\t\tresult = dg(${3:/*arg/s*/});\n\t\tif(result){break;}\n\t}\n\treturn result;\n}",
        "doc": null,
        "grammar": "snu",
        "label": "opApply (opApply)",
        "matches": {
          "opApply": true
        },
        "opts": {
          "b": true
        }
      },
      {
        "content": "string toString() @safe const pure nothrow\n{\n\t$1\n}",
        "doc": null,
        "grammar": "snu",
        "label": "toString (toString)",
        "matches": {
          "toString": true
        },
        "opts": {
          "b": true
        }
      },
      {
        "content": "// TODO: $1",
        "doc": null,
        "grammar": "snu",
        "label": "TODO (todo)",
        "matches": {
          "todo": true
        },
        "opts": {}
      },
      {
        "content": "/// ${1:description}\n///\n/// ${2:details}",
        "doc": null,
        "grammar": "snu",
        "label": "generic ddoc block (doc)",
        "matches": {
          "doc": true
        },
        "opts": {
          "b": true
        }
      },
      {
        "content": "/// ${1:description}\n///\n/// ${2:Params:  ${3:param} = ${4:param description}\n///\t\t\t $5}\n///\n/// ${6:Returns: ${7:return value}}\n///\n/// ${8:Throws:  $9Exception $10}",
        "doc": null,
        "grammar": "snu",
        "label": "function ddoc block (fdoc)",
        "matches": {
          "fdoc": true
        },
        "opts": {
          "b": true
        }
      },
      {
        "content": "Params:  ${1:param} = ${2:param description}\n///\t\t\t$3",
        "doc": null,
        "grammar": "snu",
        "label": "Params (Par)",
        "matches": {
          "Par": true
        },
        "opts": {}
      },
      {
        "content": "Returns:  ${1:return value/s}",
        "doc": null,
        "grammar": "snu",
        "label": "Returns (Ret)",
        "matches": {
          "Ret": true
        },
        "opts": {}
      },
      {
        "content": "Throws:  $1Exception $2",
        "doc": null,
        "grammar": "snu",
        "label": "Throws (Thr)",
        "matches": {
          "Thr": true
        },
        "opts": {}
      },
      {
        "content": "Examples:\n/// --------------------\n/// ${1:example code}\n/// --------------------",
        "doc": null,
        "grammar": "snu",
        "label": "Examples (Example)",
        "matches": {
          "Example": true
        },
        "opts": {}
      }
    ],
    "dart": [
      {
        "content": "library ${1};\n${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "lib": true
        },
        "opts": {}
      },
      {
        "content": "import 'package:${1}/${2}.dart';\n${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "im": true
        },
        "opts": {}
      },
      {
        "content": "new RegExp(r'${1}')",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "rgx": true
        },
        "opts": {}
      },
      {
        "content": "var ${1} = ${2};",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "var": true
        },
        "opts": {}
      },
      {
        "content": "main() {\n  ${0}\n}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "main": true
        },
        "opts": {}
      },
      {
        "content": "static ${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "st": true
        },
        "opts": {}
      },
      {
        "content": "final ${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "fi": true
        },
        "opts": {}
      },
      {
        "content": "return ${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "re": true
        },
        "opts": {}
      },
      {
        "content": "break;",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "br": true
        },
        "opts": {}
      },
      {
        "content": "throw ${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "th": true
        },
        "opts": {}
      },
      {
        "content": "implements ${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "imp": true
        },
        "opts": {}
      },
      {
        "content": "extends ${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ext": true
        },
        "opts": {}
      },
      {
        "content": "if (${1:true}) {\n  ${0}\n}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "if": true
        },
        "opts": {}
      },
      {
        "content": "if (${1:true}) {\n  ${2}\n} else {\n  ${0}\n}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ife": true
        },
        "opts": {}
      },
      {
        "content": "else",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "el": true
        },
        "opts": {}
      },
      {
        "content": "switch (${1}) {\n  ${0}\n}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "sw": true
        },
        "opts": {}
      },
      {
        "content": "case ${1}:\n  ${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "cs": true
        },
        "opts": {}
      },
      {
        "content": "default:\n  ${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "de": true
        },
        "opts": {}
      },
      {
        "content": "for (var ${2:i} = 0, len = ${1:things}.length; $2 < len; ${3:++}$2) {\n  ${0:$1[$2]}\n}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "for": true
        },
        "opts": {}
      },
      {
        "content": "for (final ${2:item} in ${1:itemList}) {\n  ${0}\n}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "fore": true
        },
        "opts": {}
      },
      {
        "content": "while (${1:/* condition */}) {\n  ${0}\n}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "wh": true
        },
        "opts": {}
      },
      {
        "content": "do {\n  ${0}\n} while (${0:/* condition */});",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "dowh": true
        },
        "opts": {}
      },
      {
        "content": "assert(${0:/* condition */});",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "as": true
        },
        "opts": {}
      },
      {
        "content": "try {\n  ${0:${VISUAL}}\n} catch (${1:Exception e}) {\n}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "try": true
        },
        "opts": {}
      },
      {
        "content": "try {\n  ${0:${VISUAL}}\n} catch (${1:Exception e}) {\n} finally {\n}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "tryf": true
        },
        "opts": {}
      }
    ],
    "dart-flutter": [
      {
        "content": "class $1 extends StatelessWidget {\n\t@override\n\tWidget build(BuildContext context) {\n\t\treturn Container(\n\t\t\t$2\n\t\t);\n\t}\n}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "stless": true
        },
        "opts": {}
      },
      {
        "content": "class $1 extends StatefulWidget {\n\t@override\n\t_$1State createState() => _$1State();\n}\nclass _$1State extends State<$1> {\n\t@override\n\tWidget build(BuildContext context) {\n\t\treturn Container(\n\t\t\t$2\n\t\t);\n\t}\n}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "stful": true
        },
        "opts": {}
      },
      {
        "content": "class $1 extends StatefulWidget {\n\t@override\n\t_$1State createState() => _$1State();\n}\nclass _$1State extends State<$1>\n\t\twith SingleTickerProviderStateMixin {\n\tAnimationController _controller;\n\t@override\n\tvoid initState() {\n\t\tsuper.initState();\n\t\t_controller = AnimationController(vsync: this);\n\t}\n\t@override\n\tvoid dispose() {\n\t\tsuper.dispose();\n\t\t_controller.dispose();\n\t}\n\t@override\n\tWidget build(BuildContext context) {\n\t\treturn Container(\n\t\t\t$2\n\t\t);\n\t}\n}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "stanim": true
        },
        "opts": {}
      }
    ],
    "diff": [],
    "django": [
      {
        "content": "${1:FIELDNAME} = models.AutoField(${0})",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "auto": true
        },
        "opts": {}
      },
      {
        "content": "${1:FIELDNAME} = models.BigIntegerField(${0})",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "bigint": true
        },
        "opts": {}
      },
      {
        "content": "${1:FIELDNAME} = models.BinaryField(${0})",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "binary": true
        },
        "opts": {}
      },
      {
        "content": "${1:FIELDNAME} = models.BooleanField(${0:default=True})",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "bool": true
        },
        "opts": {}
      },
      {
        "content": "${1:FIELDNAME} = models.CharField(max_length=${2}${0:, blank=True})",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "char": true
        },
        "opts": {}
      },
      {
        "content": "${1:FIELDNAME} = models.CommaSeparatedIntegerField(max_length=${2}${0:, blank=True})",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "comma": true
        },
        "opts": {}
      },
      {
        "content": "${1:FIELDNAME} = models.DateField(${2:auto_now_add=True, auto_now=True}${0:, blank=True, null=True})",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "date": true
        },
        "opts": {}
      },
      {
        "content": "${1:FIELDNAME} = models.DateTimeField(${2:auto_now_add=True, auto_now=True}${0:, blank=True, null=True})",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "datetime": true
        },
        "opts": {}
      },
      {
        "content": "${1:FIELDNAME} = models.DecimalField(max_digits=${2}, decimal_places=${0})",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "decimal": true
        },
        "opts": {}
      },
      {
        "content": "${1:FIELDNAME} = models.EmailField(max_length=${2:75}${0:, blank=True})",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "email": true
        },
        "opts": {}
      },
      {
        "content": "${1:FIELDNAME} = models.FileField(upload_to=${2:path/for/upload}${0:, max_length=100})",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "file": true
        },
        "opts": {}
      },
      {
        "content": "${1:FIELDNAME} = models.FilePathField(path=${2:\"/abs/path/to/dir\"}${3:, max_length=100}${4:, match=\"*.ext\"}${5:, recursive=True}${0:, blank=True, })",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "filepath": true
        },
        "opts": {}
      },
      {
        "content": "${1:FIELDNAME} = models.FloatField(${0})",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "float": true
        },
        "opts": {}
      },
      {
        "content": "${1:FIELDNAME} = models.ImageField(upload_to=${2:path/for/upload}${3:, height_field=height, width_field=width}${0:, max_length=100})",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "image": true
        },
        "opts": {}
      },
      {
        "content": "${1:FIELDNAME} = models.IntegerField(${0})",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "int": true
        },
        "opts": {}
      },
      {
        "content": "${1:FIELDNAME} = models.IPAddressField(${0})",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ip": true
        },
        "opts": {}
      },
      {
        "content": "${1:FIELDNAME} = models.NullBooleanField(${0})",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "nullbool": true
        },
        "opts": {}
      },
      {
        "content": "${1:FIELDNAME} = models.PositiveIntegerField(${0})",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "posint": true
        },
        "opts": {}
      },
      {
        "content": "${1:FIELDNAME} = models.PositiveSmallIntegerField(${0})",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "possmallint": true
        },
        "opts": {}
      },
      {
        "content": "${1:FIELDNAME} = models.SlugField(max_length=${2:50}${0:, blank=True})",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "slug": true
        },
        "opts": {}
      },
      {
        "content": "${1:FIELDNAME} = models.SmallIntegerField(${0})",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "smallint": true
        },
        "opts": {}
      },
      {
        "content": "${1:FIELDNAME} = models.TextField(${0:blank=True})",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "text": true
        },
        "opts": {}
      },
      {
        "content": "${1:FIELDNAME} = models.TimeField(${2:auto_now_add=True, auto_now=True}${0:, blank=True, null=True})",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "time": true
        },
        "opts": {}
      },
      {
        "content": "${1:FIELDNAME} = models.URLField(${2:verify_exists=False}${3:, max_length=200}${0:, blank=True})",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "url": true
        },
        "opts": {}
      },
      {
        "content": "${1:FIELDNAME} = models.XMLField(schema_path=${2:None}${0:, blank=True})",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "xml": true
        },
        "opts": {}
      },
      {
        "content": "${1:FIELDNAME} = models.ForeignKey(${2:OtherModel}${3:, related_name=''}${4:, limit_choices_to=}${0:, to_field=''})",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "fk": true
        },
        "opts": {}
      },
      {
        "content": "${1:FIELDNAME} = models.ManyToManyField(${2:OtherModel}${3:, related_name=''}${4:, limit_choices_to=}${5:, symmetrical=False}${6:, through=''}${0:, db_table=''})",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "m2m": true
        },
        "opts": {}
      },
      {
        "content": "${1:FIELDNAME} = models.OneToOneField(${2:OtherModel}${3:, parent_link=True}${4:, related_name=''}${5:, limit_choices_to=}${0:, to_field=''})",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "o2o": true
        },
        "opts": {}
      },
      {
        "content": "class ${1:FormName}(forms.Form):\n\t\"\"\"${2:docstring}\"\"\"\n\t${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "form": true
        },
        "opts": {}
      },
      {
        "content": "class ${1:ModelName}(models.Model):\n\t\"\"\"${2:docstring}\"\"\"\n\t${3}\n\tclass Meta:\n\t\t${4}\n\tdef __unicode__(self):\n\t\t${5}\n\tdef save(self, *args, **kwargs):\n\t\t${6}\n\t@models.permalink\n\tdef get_absolute_url(self):\n\t\treturn ('${7:view_or_url_name}' ${0})",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "model": true
        },
        "opts": {}
      },
      {
        "content": "class ${1:ModelName}Admin(admin.ModelAdmin):\n\t${0}\nadmin.site.register($1, $1Admin)",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "modeladmin": true
        },
        "opts": {}
      },
      {
        "content": "class ${0:ModelName}Inline(admin.TabularInline):\n\tmodel = $1",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "tabularinline": true
        },
        "opts": {}
      },
      {
        "content": "class ${0:ModelName}Inline(admin.StackedInline):\n\tmodel = $1",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "stackedinline": true
        },
        "opts": {}
      },
      {
        "content": "return render_to_response('${1:template.html}', {\n\t\t${2}\n\t}${0:, context_instance=RequestContext(request)}\n)",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "r2r": true
        },
        "opts": {}
      },
      {
        "content": "class ${1:FORMNAME}(forms.Form):\n\n\t${2:# TODO: Define form fields here}",
        "doc": null,
        "grammar": "snu",
        "label": "Form",
        "matches": {
          "form": true
        },
        "opts": {
          "b": true
        }
      },
      {
        "content": "class ${1:MODELNAME}Form(forms.ModelForm):\n\n\tclass Meta:\n\t\tmodel = $1",
        "doc": null,
        "grammar": "snu",
        "label": "ModelForm",
        "matches": {
          "modelform": true
        },
        "opts": {
          "b": true
        }
      },
      {
        "content": "${1:FIELDNAME} = forms.BooleanField($2)",
        "doc": null,
        "grammar": "snu",
        "label": "BooleanField",
        "matches": {
          "fbool": true
        },
        "opts": {
          "b": true
        }
      },
      {
        "content": "${1:FIELDNAME} = forms.CharField($2)",
        "doc": null,
        "grammar": "snu",
        "label": "CharField",
        "matches": {
          "fchar": true
        },
        "opts": {
          "b": true
        }
      },
      {
        "content": "${1:FIELDNAME} = forms.ChoiceField($2)",
        "doc": null,
        "grammar": "snu",
        "label": "ChoiceField",
        "matches": {
          "fchoice": true
        },
        "opts": {
          "b": true
        }
      },
      {
        "content": "${1:FIELDNAME} = forms.ComboField($2)",
        "doc": null,
        "grammar": "snu",
        "label": "ComboField",
        "matches": {
          "fcombo": true
        },
        "opts": {
          "b": true
        }
      },
      {
        "content": "${1:FIELDNAME} = forms.DateField($2)",
        "doc": null,
        "grammar": "snu",
        "label": "DateField",
        "matches": {
          "fdate": true
        },
        "opts": {
          "b": true
        }
      },
      {
        "content": "${1:FIELDNAME} = forms.DateTimeField($2)",
        "doc": null,
        "grammar": "snu",
        "label": "DateTimeField",
        "matches": {
          "fdatetime": true
        },
        "opts": {
          "b": true
        }
      },
      {
        "content": "${1:FIELDNAME} = forms.DecimalField($2)",
        "doc": null,
        "grammar": "snu",
        "label": "DecimalField",
        "matches": {
          "fdecimal": true
        },
        "opts": {
          "b": true
        }
      },
      {
        "content": "${1:FIELDNAME} = forms.EmailField($2)",
        "doc": null,
        "grammar": "snu",
        "label": "EmailField",
        "matches": {
          "fmail": true
        },
        "opts": {
          "b": true
        }
      },
      {
        "content": "${1:FIELDNAME} = forms.FileField($2)",
        "doc": null,
        "grammar": "snu",
        "label": "FileField",
        "matches": {
          "ffile": true
        },
        "opts": {
          "b": true
        }
      },
      {
        "content": "${1:FIELDNAME} = forms.FilePathField($2)",
        "doc": null,
        "grammar": "snu",
        "label": "FilePathField",
        "matches": {
          "ffilepath": true
        },
        "opts": {
          "b": true
        }
      },
      {
        "content": "${1:FIELDNAME} = forms.FloatField($2)",
        "doc": null,
        "grammar": "snu",
        "label": "FloatField",
        "matches": {
          "ffloat": true
        },
        "opts": {
          "b": true
        }
      },
      {
        "content": "${1:FIELDNAME} = forms.IPAddressField($2)",
        "doc": null,
        "grammar": "snu",
        "label": "IPAddressField",
        "matches": {
          "fip": true
        },
        "opts": {
          "b": true
        }
      },
      {
        "content": "${1:FIELDNAME} = forms.ImageField($2)",
        "doc": null,
        "grammar": "snu",
        "label": "ImageField",
        "matches": {
          "fimg": true
        },
        "opts": {
          "b": true
        }
      },
      {
        "content": "${1:FIELDNAME} = forms.IntegerField($2)",
        "doc": null,
        "grammar": "snu",
        "label": "IntegerField",
        "matches": {
          "fint": true
        },
        "opts": {
          "b": true
        }
      },
      {
        "content": "${1:FIELDNAME} = forms.ModelChoiceField($2)",
        "doc": null,
        "grammar": "snu",
        "label": "ModelChoiceField",
        "matches": {
          "fmochoice": true
        },
        "opts": {
          "b": true
        }
      },
      {
        "content": "${1:FIELDNAME} = forms.ModelMultipleChoiceField($2)",
        "doc": null,
        "grammar": "snu",
        "label": "ModelMultipleChoiceField",
        "matches": {
          "fmomuchoice": true
        },
        "opts": {
          "b": true
        }
      },
      {
        "content": "${1:FIELDNAME} = forms.MultiValueField($2)",
        "doc": null,
        "grammar": "snu",
        "label": "MultiValueField",
        "matches": {
          "fmuval": true
        },
        "opts": {
          "b": true
        }
      },
      {
        "content": "${1:FIELDNAME} = forms.MultipleChoiceField($2)",
        "doc": null,
        "grammar": "snu",
        "label": "MultipleChoiceField",
        "matches": {
          "fmuchoice": true
        },
        "opts": {
          "b": true
        }
      },
      {
        "content": "${1:FIELDNAME} = forms.NullBooleanField($2)",
        "doc": null,
        "grammar": "snu",
        "label": "NullBooleanField",
        "matches": {
          "fnullbool": true
        },
        "opts": {
          "b": true
        }
      },
      {
        "content": "${1:FIELDNAME} = forms.RegexField($2)",
        "doc": null,
        "grammar": "snu",
        "label": "RegexField",
        "matches": {
          "freg": true
        },
        "opts": {
          "b": true
        }
      },
      {
        "content": "${1:FIELDNAME} = forms.SlugField($2)",
        "doc": null,
        "grammar": "snu",
        "label": "SlugField",
        "matches": {
          "fslug": true
        },
        "opts": {
          "b": true
        }
      },
      {
        "content": "${1:FIELDNAME} = forms.SplitDateTimeField($2)",
        "doc": null,
        "grammar": "snu",
        "label": "SplitDateTimeField",
        "matches": {
          "fsdatetime": true
        },
        "opts": {
          "b": true
        }
      },
      {
        "content": "${1:FIELDNAME} = forms.TimeField($2)",
        "doc": null,
        "grammar": "snu",
        "label": "TimeField",
        "matches": {
          "ftime": true
        },
        "opts": {
          "b": true
        }
      },
      {
        "content": "${1:FIELDNAME} = forms.TypedChoiceField($2)",
        "doc": null,
        "grammar": "snu",
        "label": "TypedChoiceField",
        "matches": {
          "ftchoice": true
        },
        "opts": {
          "b": true
        }
      },
      {
        "content": "${1:FIELDNAME} = forms.TypedMultipleChoiceField($2)",
        "doc": null,
        "grammar": "snu",
        "label": "TypedMultipleChoiceField",
        "matches": {
          "ftmuchoice": true
        },
        "opts": {
          "b": true
        }
      },
      {
        "content": "${1:FIELDNAME} = forms.URLField($2)",
        "doc": null,
        "grammar": "snu",
        "label": "URLField",
        "matches": {
          "furl": true
        },
        "opts": {
          "b": true
        }
      },
      {
        "content": "class ${1:MODELNAME}(models.Model):\n\t$0\n\tclass Meta:\n\t\tverbose_name = \"$1\"\n\t\tverbose_name_plural = \"$1s\"\n\n\tdef __str__(self):\n\t\treturn super($1, self).__str__()\n",
        "doc": null,
        "grammar": "snu",
        "label": "Model",
        "matches": {
          "model": true
        },
        "opts": {
          "b": true
        }
      },
      {
        "content": "class ${1:MODELNAME}(models.Model):\n\t${2:# TODO: Define fields here}\n\n\tclass Meta:\n\t\tverbose_name = \"$1\"\n\t\tverbose_name_plural = \"$1s\"\n\n\tdef __str__(self):\n\t\treturn super($1, self).__str__()\n\n\tdef save(self):\n\t\treturn super($1, self).save()\n\n\tdef get_absolute_url(self):\n\t\treturn ('')\n\n\t${3:# TODO: Define custom methods here}\n",
        "doc": null,
        "grammar": "snu",
        "label": "Model",
        "matches": {
          "modelfull": true
        },
        "opts": {
          "b": true
        }
      },
      {
        "content": "${1:FIELDNAME} = models.AutoField($2)",
        "doc": null,
        "grammar": "snu",
        "label": "AutoField",
        "matches": {
          "mauto": true
        },
        "opts": {
          "b": true
        }
      },
      {
        "content": "${1:FIELDNAME} = models.BigIntegerField($2)",
        "doc": null,
        "grammar": "snu",
        "label": "BigIntegerField",
        "matches": {
          "mbigint": true
        },
        "opts": {
          "b": true
        }
      },
      {
        "content": "${1:FIELDNAME} = models.BooleanField($2)",
        "doc": null,
        "grammar": "snu",
        "label": "BooleanField",
        "matches": {
          "mbool": true
        },
        "opts": {
          "b": true
        }
      },
      {
        "content": "${1:FIELDNAME} = models.CharField($2, max_length=${3:50})",
        "doc": null,
        "grammar": "snu",
        "label": "CharField",
        "matches": {
          "mchar": true
        },
        "opts": {
          "b": true
        }
      },
      {
        "content": "${1:FIELDNAME} = models.CommaSeparatedIntegerField($2)",
        "doc": null,
        "grammar": "snu",
        "label": "CommaSeparatedIntegerField",
        "matches": {
          "mcoseint": true
        },
        "opts": {
          "b": true
        }
      },
      {
        "content": "${1:FIELDNAME} = models.DateField($2)",
        "doc": null,
        "grammar": "snu",
        "label": "DateField",
        "matches": {
          "mdate": true
        },
        "opts": {
          "b": true
        }
      },
      {
        "content": "${1:FIELDNAME} = models.DateTimeField($2)",
        "doc": null,
        "grammar": "snu",
        "label": "DateTimeField",
        "matches": {
          "mdatetime": true
        },
        "opts": {
          "b": true
        }
      },
      {
        "content": "${1:FIELDNAME} = models.DecimalField(max_digits=${2:10}, decimal_places=${3:2})",
        "doc": null,
        "grammar": "snu",
        "label": "DecimalField",
        "matches": {
          "mdecimal": true
        },
        "opts": {
          "b": true
        }
      },
      {
        "content": "${1:FIELDNAME} = models.EmailField($2)",
        "doc": null,
        "grammar": "snu",
        "label": "EmailField",
        "matches": {
          "memail": true
        },
        "opts": {
          "b": true
        }
      },
      {
        "content": "${1:FIELDNAME} = models.FileField($2)",
        "doc": null,
        "grammar": "snu",
        "label": "FileField",
        "matches": {
          "mfile": true
        },
        "opts": {
          "b": true
        }
      },
      {
        "content": "${1:FIELDNAME} = models.FilePathField($2)",
        "doc": null,
        "grammar": "snu",
        "label": "FilePathField",
        "matches": {
          "mfilepath": true
        },
        "opts": {
          "b": true
        }
      },
      {
        "content": "${1:FIELDNAME} = models.FloatField($2)",
        "doc": null,
        "grammar": "snu",
        "label": "FloatField",
        "matches": {
          "mfloat": true
        },
        "opts": {
          "b": true
        }
      },
      {
        "content": "${1:FIELDNAME} = models.ForeignKey($2)",
        "doc": null,
        "grammar": "snu",
        "label": "ForeignKey",
        "matches": {
          "fk": true
        },
        "opts": {
          "b": true
        }
      },
      {
        "content": "${1:FIELDNAME} = models.IPAddressField($2)",
        "doc": null,
        "grammar": "snu",
        "label": "IPAddressField",
        "matches": {
          "mip": true
        },
        "opts": {
          "b": true
        }
      },
      {
        "content": "${1:FIELDNAME} = models.ImageField($2)",
        "doc": null,
        "grammar": "snu",
        "label": "ImageField",
        "matches": {
          "mimg": true
        },
        "opts": {
          "b": true
        }
      },
      {
        "content": "${1:FIELDNAME} = models.IntegerField($2)",
        "doc": null,
        "grammar": "snu",
        "label": "IntegerField",
        "matches": {
          "mint": true
        },
        "opts": {
          "b": true
        }
      },
      {
        "content": "${1:FIELDNAME} = models.ManyToManyField($2)",
        "doc": null,
        "grammar": "snu",
        "label": "ManyToManyField",
        "matches": {
          "m2m": true
        },
        "opts": {
          "b": true
        }
      },
      {
        "content": "${1:FIELDNAME} = models.NullBooleanField($2)",
        "doc": null,
        "grammar": "snu",
        "label": "NullBooleanField",
        "matches": {
          "mnullbool": true
        },
        "opts": {
          "b": true
        }
      },
      {
        "content": "${1:FIELDNAME} = models.OneToOneField($2)",
        "doc": null,
        "grammar": "snu",
        "label": "OneToOneField",
        "matches": {
          "o2o": true
        },
        "opts": {
          "b": true
        }
      },
      {
        "content": "${1:FIELDNAME} = models.PhoneNumberField($2)",
        "doc": null,
        "grammar": "snu",
        "label": "PhoneNumberField",
        "matches": {
          "mphone": true
        },
        "opts": {
          "b": true
        }
      },
      {
        "content": "${1:FIELDNAME} = models.PositiveIntegerField($2)",
        "doc": null,
        "grammar": "snu",
        "label": "PositiveIntegerField",
        "matches": {
          "mposint": true
        },
        "opts": {
          "b": true
        }
      },
      {
        "content": "${1:FIELDNAME} = models.PositiveSmallIntegerField($2)",
        "doc": null,
        "grammar": "snu",
        "label": "PositiveSmallIntegerField",
        "matches": {
          "mpossmallint": true
        },
        "opts": {
          "b": true
        }
      },
      {
        "content": "${1:FIELDNAME} = models.SlugField($2)",
        "doc": null,
        "grammar": "snu",
        "label": "SlugField",
        "matches": {
          "mslug": true
        },
        "opts": {
          "b": true
        }
      },
      {
        "content": "${1:FIELDNAME} = models.SmallIntegerField($2)",
        "doc": null,
        "grammar": "snu",
        "label": "SmallIntegerField",
        "matches": {
          "msmallint": true
        },
        "opts": {
          "b": true
        }
      },
      {
        "content": "${1:FIELDNAME} = models.TextField($2)",
        "doc": null,
        "grammar": "snu",
        "label": "TextField",
        "matches": {
          "mtext": true
        },
        "opts": {
          "b": true
        }
      },
      {
        "content": "${1:FIELDNAME} = models.TimeField($2)",
        "doc": null,
        "grammar": "snu",
        "label": "TimeField",
        "matches": {
          "mtime": true
        },
        "opts": {
          "b": true
        }
      },
      {
        "content": "${1:FIELDNAME} = models.URLField($2)",
        "doc": null,
        "grammar": "snu",
        "label": "URLField",
        "matches": {
          "murl": true
        },
        "opts": {
          "b": true
        }
      },
      {
        "content": "${1:FIELDNAME} = models.USStateField($2)",
        "doc": null,
        "grammar": "snu",
        "label": "USStateField",
        "matches": {
          "musstate": true
        },
        "opts": {
          "b": true
        }
      },
      {
        "content": "${1:FIELDNAME} = models.XMLField($2)",
        "doc": null,
        "grammar": "snu",
        "label": "XMLField",
        "matches": {
          "mxml": true
        },
        "opts": {
          "b": true
        }
      },
      {
        "content": "class $1Admin(admin.ModelAdmin):\n\t'''\n\t\tAdmin View for $1\n\t'''\n\tlist_display = ('$2',)\n\tlist_filter = ('$3',)\n\tinlines = [\n\t\t$4Inline,\n\t]\n\traw_id_fields = ('$5',)\n\treadonly_fields = ('$6',)\n\tsearch_fields = ['$7']\nadmin.site.register($1, $1Admin)",
        "doc": null,
        "grammar": "snu",
        "label": "Model Admin View",
        "matches": {
          "adminview": true
        },
        "opts": {
          "b": true
        }
      },
      {
        "content": "class ${1:MODEL_NAME}CreateView(CreateView):\n\tmodel = $1\n\ttemplate_name = \"${2:TEMPLATE_NAME}\"",
        "doc": null,
        "grammar": "snu",
        "label": "Generic Create View",
        "matches": {
          "createview": true
        },
        "opts": {
          "b": true
        }
      },
      {
        "content": "class ${1:MODEL_NAME}DeleteView(DeleteView):\n\tmodel = $1\n\ttemplate_name = \"${2:TEMPLATE_NAME}\"",
        "doc": null,
        "grammar": "snu",
        "label": "Generic Delete View",
        "matches": {
          "deleteview": true
        },
        "opts": {
          "b": true
        }
      },
      {
        "content": "class ${1:MODEL_NAME}DetailView(DetailView):\n\tmodel = $1\n\ttemplate_name = \"${2:TEMPLATE_NAME}\"",
        "doc": null,
        "grammar": "snu",
        "label": "Generic Detail View",
        "matches": {
          "detailview": true
        },
        "opts": {
          "b": true
        }
      },
      {
        "content": "class ${1:MODEL_NAME}ListView(ListView):\n\tmodel = $1\n\ttemplate_name = \"${2:TEMPLATE_NAME}\"",
        "doc": null,
        "grammar": "snu",
        "label": "Generic List View",
        "matches": {
          "listview": true
        },
        "opts": {
          "b": true
        }
      },
      {
        "content": "class $1Inline(admin.StackedInline):\n\t'''\n\tStacked Inline View for $1\n\t'''\n\tmodel = ${2:$1}\n\tmin_num = ${3:3}\n\tmax_num = ${4:20}\n\textra = ${5:1}\n\traw_id_fields = ($6,)",
        "doc": null,
        "grammar": "snu",
        "label": "Stacked Inline",
        "matches": {
          "stackedinline": true
        },
        "opts": {
          "b": true
        }
      },
      {
        "content": "class $1Inline(admin.TabularInline):\n\t'''\n\tTabular Inline View for $1\n\t'''\n\tmodel = ${2:$1}\n\tmin_num = ${3:3}\n\tmax_num = ${4:20}\n\textra = ${5:1}\n\traw_id_fields = ($6,)",
        "doc": null,
        "grammar": "snu",
        "label": "Tabular Inline",
        "matches": {
          "tabularinline": true
        },
        "opts": {
          "b": true
        }
      },
      {
        "content": "class ${1:CLASS_NAME}(TemplateView):\n\ttemplate_name = \"${2:TEMPLATE_NAME}\"",
        "doc": null,
        "grammar": "snu",
        "label": "Generic Template View",
        "matches": {
          "templateview": true
        },
        "opts": {
          "b": true
        }
      },
      {
        "content": "class ${1:MODEL_NAME}UpdateView(UpdateView):\n\tmodel = $1\n\ttemplate_name = \"${2:TEMPLATE_NAME}\"",
        "doc": null,
        "grammar": "snu",
        "label": "Generic Update View",
        "matches": {
          "updateview": true
        },
        "opts": {
          "b": true
        }
      },
      {
        "content": "def dispatch(self, request, *args, **kwargs):\n\treturn super(${1:CLASS_NAME}, self).dispatch(request, *args, **kwargs)",
        "doc": null,
        "grammar": "snu",
        "label": "Dispatch View method",
        "matches": {
          "dispatch": true
        },
        "opts": {
          "b": true
        }
      },
      {
        "content": "def get_context_data(self, **kwargs):\n\tkwargs['extra_context'] = ${1:'New Value'}\n\treturn super(${2:CLASS_NAME}, self).get_context_data(**kwargs)",
        "doc": null,
        "grammar": "snu",
        "label": "get_context_data view method",
        "matches": {
          "context": true
        },
        "opts": {
          "b": true
        }
      }
    ],
    "dockerfile": [
      {
        "content": "# Client App\nFROM johnpapa/angular-cli as client-app\nLABEL authors=\"${1:John Papa}\"\nWORKDIR /usr/src/app\nCOPY [\"package.json\", \"npm-shrinkwrap.json*\", \"./\"]\nRUN npm install --silent\nCOPY . .\nRUN ng build --prod\n\n# Node server\nFROM ${2:node:12-alpine} as node-server\nWORKDIR /usr/src/app\nCOPY [\"package.json\", \"npm-shrinkwrap.json*\", \"./\"]\nRUN npm install --production --silent && mv node_modules ../\nCOPY ${3:server.js} .\nCOPY ${4:/server} /usr/src/app/server\n\n# Final image\nFROM ${2:node:12-alpine}\nWORKDIR /usr/src/app\nCOPY --from=node-server /usr/src /usr/src\nCOPY --from=client-app /usr/src/app/dist ./\nEXPOSE ${5:3000}\n# CMD [\"node\", \"server.js\"]\nCMD [\"npm\", \"start\"]\n$0",
        "doc": "Multi-stage Node and Angular Dockerfile",
        "grammar": "lsp",
        "label": "Multi-stage Node and Angular Dockerfile",
        "matches": {
          "docker-angular-node-multi-stage": true
        },
        "opts": {}
      }
    ],
    "dosini": [
      {
        "content": "; http://editorconfig.org\nroot = true\n[*]\nindent_style = ${1:space_or_tab}\nindent_size = ${2:indent_size}\nend_of_line = lf\ncharset = utf-8\ntrim_trailing_whitespace = true\ninsert_final_newline = true",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ec": true
        },
        "opts": {}
      }
    ],
    "dotenv": [
      {
        "content": "require('dotenv').config()",
        "doc": "As early as possible in your application, require and configure dotenv.",
        "grammar": "lsp",
        "label": "dotenv-require",
        "matches": {
          "dotenv require": true
        },
        "opts": {}
      },
      {
        "content": "require('dotenv').config({ path: '${1:/full/custom/path/to/your/env/vars}' })",
        "doc": "You may specify a custom path if your file containing environment variables is located elsewhere.",
        "grammar": "lsp",
        "label": "dotenv-path",
        "matches": {
          "dotenv path": true
        },
        "opts": {}
      },
      {
        "content": "require('dotenv').config({ encoding: '${1:latin1}' })",
        "doc": "You may specify the encoding of your file containing environment variables.",
        "grammar": "lsp",
        "label": "dotenv-encoding",
        "matches": {
          "dotenv encoding": true
        },
        "opts": {}
      },
      {
        "content": "require('dotenv').config({ debug: ${1|true,false|} })",
        "doc": "You may turn on logging to help debug why certain keys or values are not being set as you expect.",
        "grammar": "lsp",
        "label": "dotenv-debug",
        "matches": {
          "dotenv debug": true
        },
        "opts": {}
      }
    ],
    "dotenv-safe": [
      {
        "content": "require('dotenv-safe').config();",
        "doc": "As early as possible in your application, require and configure dotenv-safe. This will load environment variables from .env as usual, but will also read any variables defined in .env.example. If any variables are already defined in the environment before reading from .env, they will not be overwritten. If any variables are missing from the environment, a MissingEnvVarsError will be thrown, which lists the missing variables.",
        "grammar": "lsp",
        "label": "dotenv-safe-require",
        "matches": {
          "dotenv-safe require": true
        },
        "opts": {}
      },
      {
        "content": "require('dotenv-safe').config({ path: '${1:/full/custom/path/to/your/env/vars}' })",
        "doc": "You may specify a custom path if your file containing environment variables is located elsewhere.",
        "grammar": "lsp",
        "label": "dotenv-safe-path",
        "matches": {
          "dotenv-safe path": true
        },
        "opts": {}
      },
      {
        "content": "require('dotenv-safe').config({ encoding: '${1:latin1}' })",
        "doc": "You may specify the encoding of your file containing environment variables.",
        "grammar": "lsp",
        "label": "dotenv-safe-encoding",
        "matches": {
          "dotenv-safe encoding": true
        },
        "opts": {}
      },
      {
        "content": "require('dotenv-safe').config({ debug: ${1|true,false|} })",
        "doc": "You may turn on logging to help debug why certain keys or values are not being set as you expect.",
        "grammar": "lsp",
        "label": "dotenv-safe-debug",
        "matches": {
          "dotenv-safe debug": true
        },
        "opts": {}
      },
      {
        "content": "require('dotenv-safe').config({ allowEmptyValues: ${1|true,false|} })",
        "doc": "If a variable is defined in the example file and has an empty value in the environment, enabling this option will not throw an error after loading.",
        "grammar": "lsp",
        "label": "dotenv-safe-allowemptyvalues",
        "matches": {
          "dotenv-safe allowemptyvalues": true
        },
        "opts": {}
      }
    ],
    "eelixir": [
      {
        "content": "<% ${0} %>",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "% <% %>": true
        },
        "opts": {}
      },
      {
        "content": "<%= ${0} %>",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "= <%= %>": true
        },
        "opts": {}
      },
      {
        "content": "<%# ${0} %>",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "# <%# %>": true
        },
        "opts": {}
      },
      {
        "content": "<% end %>",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "end": true
        },
        "opts": {}
      },
      {
        "content": "<%= for ${1:item} <- ${2:items} ${3:@conn} do %>\n\t${0}\n<% end %>",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "for": true
        },
        "opts": {}
      },
      {
        "content": "<%= if ${1} do %>\n\t${0:${VISUAL}}\n<% end %>",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "if": true
        },
        "opts": {}
      },
      {
        "content": "<%= if ${1} do %>\n\t${2:${VISUAL}}\n<% else %>\n\t${0}\n<% end %>",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ife": true
        },
        "opts": {}
      },
      {
        "content": "<%= cond do %>\n\t<% ${1} -> %>\n\t\t${2:${VISUAL}}\n\t<% true -> %>\n\t\t${0}\n<% end %>",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "cond": true
        },
        "opts": {}
      },
      {
        "content": "<%= unless ${1} do %>\n\t${0:${VISUAL}}\n<% end %>",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "unless": true
        },
        "opts": {}
      },
      {
        "content": "<%= form_tag(${1:\"/users\"}, method: ${2::post}) %>\n\t${0}\n</form>",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ft form_tag": true
        },
        "opts": {}
      },
      {
        "content": "<%= select ${1:f}, :${2:field}, ${3:[{\"key\", \"value\"}]}, prompt: ${4:\"Prompt\"} %>",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "sl select": true
        },
        "opts": {}
      },
      {
        "content": "<%= submit ${1:\"Submit\"} %>",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "sb submit": true
        },
        "opts": {}
      },
      {
        "content": "<%= radio_button ${1:f}, :${2:field},  ${3:\"value\"} %>",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "rb radio_button": true
        },
        "opts": {}
      },
      {
        "content": "<%= error_tag ${1:f}, :${2:field} %>",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "et error_tag": true
        },
        "opts": {}
      },
      {
        "content": "<%= text_input ${1:f}, :${2:field} %>",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ti text_input": true
        },
        "opts": {}
      },
      {
        "content": "<%= label ${1:f}, :${2:field}, \"${3:Label}\" %>",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "la label": true
        },
        "opts": {}
      },
      {
        "content": "<%= password_input ${1:f}, :${2:password} %>",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "pi password_input": true
        },
        "opts": {}
      },
      {
        "content": "<%= render \"${1:index}.html\", ${2:var: @var} %>",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "render": true
        },
        "opts": {}
      },
      {
        "content": "<%= link \"${1:Submit}\", to: ${2:\"/users\"}, method: ${3::delete} %>",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "lin link": true
        },
        "opts": {}
      },
      {
        "content": "<%= form_for @changeset, ${1:\"/users\"}, fn f -> %>\n\t\t${0}\n\t<%= submit \"Submit\" %>\n<% end %>",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ff form_for": true
        },
        "opts": {}
      },
      {
        "content": "<% require IEx; IEx.pry %>",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "pry": true
        },
        "opts": {}
      },
      {
        "content": "<% $0 %>",
        "doc": null,
        "grammar": "snu",
        "label": "<% %>",
        "matches": {
          "%": true
        },
        "opts": {
          "w": true
        }
      },
      {
        "content": "<%= $0 %>",
        "doc": null,
        "grammar": "snu",
        "label": "<%= %>",
        "matches": {
          "=": true
        },
        "opts": {
          "w": true
        }
      },
      {
        "content": "<% end %>",
        "doc": null,
        "grammar": "snu",
        "label": "<% end %>",
        "matches": {
          "end": true
        },
        "opts": {
          "w": true
        }
      },
      {
        "content": "<%= for ${1:item} <- ${2:$1s} ${3:@conn} do %>\n\t$0\n<% end %>",
        "doc": null,
        "grammar": "snu",
        "label": null,
        "matches": {
          "for": true
        },
        "opts": {}
      },
      {
        "content": "<%= form_tag(${1:\"${2:/users}\"}, method: ${3::post}) %>\n\t$0\n</form>",
        "doc": null,
        "grammar": "snu",
        "label": "form_tag",
        "matches": {
          "ft": true
        },
        "opts": {
          "w": true
        }
      },
      {
        "content": "<%= link ${1:\"${2:Submit}\"}, to: ${3:\"${4:/users}\"}, method: ${5::delete} %>",
        "doc": null,
        "grammar": "snu",
        "label": "link",
        "matches": {
          "lin": true
        },
        "opts": {
          "w": true
        }
      },
      {
        "content": "<%= form_for @changeset, ${1:\"${2:/users}\"}, fn f -> %>\n\t\t$0\n\n\t<%= submit \"Submit\" %>\n<% end %>",
        "doc": null,
        "grammar": "snu",
        "label": "form_for",
        "matches": {
          "ff": true
        },
        "opts": {
          "w": true
        }
      },
      {
        "content": "<%= gettext(\"${0:${VISUAL}}\") %>",
        "doc": null,
        "grammar": "snu",
        "label": "gettext",
        "matches": {
          "gt": true
        },
        "opts": {
          "w": true
        }
      }
    ],
    "ejs": [
      {
        "content": "<% for (let ${1:i = 0}; ${2:i<arr.length}; ${3:i++}) { %>\n\t${0:body}\n<% } %>",
        "doc": null,
        "grammar": "snu",
        "label": "ejs for loop",
        "matches": {
          "for": true
        },
        "opts": {
          "b": true
        }
      },
      {
        "content": "<% ${1:array}.forEach((${2:single var}) => { %>\n\t${0:body}\n<% }) %>",
        "doc": null,
        "grammar": "snu",
        "label": "ejs for Each loop",
        "matches": {
          "forE": true
        },
        "opts": {
          "b": true
        }
      }
    ],
    "elixir": [
      {
        "content": "do\n  ${1:TARGET}\nend",
        "doc": "",
        "grammar": "snu",
        "label": "do...end",
        "matches": {
          "do": true
        },
        "opts": {
          "head": true
        }
      },
      {
        "content": "if ${1:true} do\n  ${2:TARGET}\nend",
        "doc": "",
        "grammar": "snu",
        "label": "if .. do .. end",
        "matches": {
          "if": true
        },
        "opts": {
          "head": true
        }
      },
      {
        "content": "if ${1:true} do\n  ${2:ok}\nelse\n  ${3:ok}\nend",
        "doc": "",
        "grammar": "snu",
        "label": "if .. do .. else .. end",
        "matches": {
          "ife": true
        },
        "opts": {
          "head": true
        }
      },
      {
        "content": "case ${1} do\n  ${2} -> ${3}\nend",
        "doc": "",
        "grammar": "snu",
        "label": "case .. end",
        "matches": {
          "case": true
        },
        "opts": {
          "head": true
        }
      },
      {
        "content": "def ${1:name} do\n  ${2:TARGET}\nend",
        "doc": "",
        "grammar": "snu",
        "label": "def .. do .. end",
        "matches": {
          "def": true
        },
        "opts": {
          "head": true
        }
      },
      {
        "content": "defmodule ${1:module_name} do\n  ${2:TARGET}\nend",
        "doc": "",
        "grammar": "snu",
        "label": "def module",
        "matches": {
          "defm": true
        },
        "opts": {
          "head": true
        }
      },
      {
        "content": "defp ${1:name} do\n  ${2:TARGET}\nend",
        "doc": "",
        "grammar": "snu",
        "label": "defp .. end",
        "matches": {
          "defp": true
        },
        "opts": {
          "head": true
        }
      },
      {
        "content": "@doc \"\"\"${0:TARGET}\"\"\"",
        "doc": "",
        "grammar": "snu",
        "label": "@doc \"\"\"...\"\"\"",
        "matches": {
          "doc": true
        },
        "opts": {
          "head": true
        }
      },
      {
        "content": "@moduledoc \"\"\"${0:TARGET}\"\"\"",
        "doc": "",
        "grammar": "snu",
        "label": "@moduledoc \"\"\"...\"\"\"",
        "matches": {
          "mdoc": true
        },
        "opts": {
          "head": true
        }
      },
      {
        "content": "fn(${1:args}) -> ${2:TARGET} end",
        "doc": "",
        "grammar": "snu",
        "label": "fn(..) -> .. end",
        "matches": {
          "fn": true
        },
        "opts": {
          "head": true
        }
      },
      {
        "content": "receive do\n${1} -> ${2}\nend",
        "doc": "",
        "grammar": "snu",
        "label": "receive .. do .. end",
        "matches": {
          "rec": true
        },
        "opts": {
          "head": true
        }
      },
      {
        "content": "test \"${1:test_name}\" do\n  ${2:TARGET}\nend",
        "doc": "",
        "grammar": "snu",
        "label": "test .. do .. end",
        "matches": {
          "test": true
        },
        "opts": {
          "head": true
        }
      },
      {
        "content": "try do\n  ${1:TARGET}\nrescue\n  ${2} -> ${3}",
        "doc": "",
        "grammar": "snu",
        "label": "try .. rescue .. end",
        "matches": {
          "try": true
        },
        "opts": {
          "head": true
        }
      },
      {
        "content": "with ${1}\ndo\n  ${2:TARGET}\nend",
        "doc": "",
        "grammar": "snu",
        "label": "with .. do .. end",
        "matches": {
          "with": true
        },
        "opts": {
          "head": true
        }
      },
      {
        "content": "describe \"${1:describe_name}\" do\n  ${2:TARGET}\nend",
        "doc": "",
        "grammar": "snu",
        "label": "describe .. do .. end",
        "matches": {
          "describe": true
        },
        "opts": {
          "head": true
        }
      },
      {
        "content": "IO.puts(${1})",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "puts": true
        },
        "opts": {}
      },
      {
        "content": "IO.inspect(${1})",
        "doc": "",
        "grammar": "snu",
        "label": "IO.inspect()",
        "matches": {
          "p": true
        },
        "opts": {}
      },
      {
        "content": "defmodule Main do\n  def main do\n    ${1:TARGET}\n  end\nend\nMain.main",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "main": true
        },
        "opts": {
          "head": true
        }
      },
      {
        "content": "do\n\t${0:${VISUAL}}\nend",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "do": true
        },
        "opts": {}
      },
      {
        "content": "IO.puts \"${0}\"",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "put IO.puts": true
        },
        "opts": {}
      },
      {
        "content": "IO.inspect ${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ins IO.inspect": true
        },
        "opts": {}
      },
      {
        "content": "IO.inspect(${0}label: \"${1:label}\")",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "insl IO.inspect with label": true
        },
        "opts": {}
      },
      {
        "content": "if ${1} do\n\t${0:${VISUAL}}\nend",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "if if .. do .. end": true
        },
        "opts": {}
      },
      {
        "content": "if ${1:condition}, do: ${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "if: if .. do: ..": true
        },
        "opts": {}
      },
      {
        "content": "if ${1:condition} do\n\t${2:${VISUAL}}\nelse\n\t${0}\nend",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ife if .. do .. else .. end": true
        },
        "opts": {}
      },
      {
        "content": "if ${1:condition}, do: ${2}, else: ${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ife: if .. do: .. else:": true
        },
        "opts": {}
      },
      {
        "content": "unless ${1} do\n\t${0:${VISUAL}}\nend",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "unless unless .. do .. end": true
        },
        "opts": {}
      },
      {
        "content": "unless ${1:condition}, do: ${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "unless: unless .. do: ..": true
        },
        "opts": {}
      },
      {
        "content": "unless ${1:condition} do\n\t${2:${VISUAL}}\nelse\n\t${0}\nend",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "unlesse unless .. do .. else .. end": true
        },
        "opts": {}
      },
      {
        "content": "unless ${1:condition}, do: ${2}, else: ${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "unlesse: unless .. do: .. else:": true
        },
        "opts": {}
      },
      {
        "content": "cond do\n\t${1} ->\n\t${0:${VISUAL}}\nend",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "cond": true
        },
        "opts": {}
      },
      {
        "content": "case ${1} do\n\t${2} ->\n\t\t${0}\nend",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "case": true
        },
        "opts": {}
      },
      {
        "content": "for ${1:item} <- ${2:items} do\n\t${0}\nend",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "for": true
        },
        "opts": {}
      },
      {
        "content": "for ${1:item} <- ${2:items}, do: ${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "for:": true
        },
        "opts": {}
      },
      {
        "content": "for ${1:item} <- ${2:items}, into: ${3} do\n\t${0}\nend",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "fori": true
        },
        "opts": {}
      },
      {
        "content": "with ${1:item} <- ${2:items} do\n\t${0}\nend",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "wi": true
        },
        "opts": {}
      },
      {
        "content": "with(\n\t${1:item} <- ${2:items}\n) do\n\t${3}\nelse\n\t${4} ->\n\t\t${0}\nend",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "wie": true
        },
        "opts": {}
      },
      {
        "content": "@spec ${1:name}(${2:args}) :: ${3:returns}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "sp": true
        },
        "opts": {}
      },
      {
        "content": "@opaque ${1:type_name} :: ${2:type}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "op": true
        },
        "opts": {}
      },
      {
        "content": "@type ${1:type_name} :: ${2:type}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ty": true
        },
        "opts": {}
      },
      {
        "content": "@typep ${1:type_name} :: ${2:type}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "typ": true
        },
        "opts": {}
      },
      {
        "content": "@callback ${1:name}(${2:args}) :: ${3:returns}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "cb": true
        },
        "opts": {}
      },
      {
        "content": "def ${1:name}, do: ${2}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "df": true
        },
        "opts": {}
      },
      {
        "content": "def ${1:name}(${2:args}) when ${3:guard}, do:",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "dfw": true
        },
        "opts": {}
      },
      {
        "content": "def ${1:name} do\n\t${0}\nend",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "def": true
        },
        "opts": {}
      },
      {
        "content": "@doc \"\"\"\n${1:doc string}\n\"\"\"\ndef ${2:name} do\n\t${0}\nend",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "defd": true
        },
        "opts": {}
      },
      {
        "content": "@spec ${1:name}(${2:arg types}) :: ${3:no_return}\ndef $1(${4:args}) do\n\t${0}\nend",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "defs": true
        },
        "opts": {}
      },
      {
        "content": "@doc \"\"\"\n${1:doc string}\n\"\"\"\n@spec ${2:name}(${3:arg types}) :: ${4:no_return}\ndef $2(${5:args}) do\n\t${0}\nend",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "defsd": true
        },
        "opts": {}
      },
      {
        "content": "def ${1:name}(${2:args}) when ${3:guard} do\n\t${0}\nend",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "defw": true
        },
        "opts": {}
      },
      {
        "content": "defimpl ${1:protocol_name}, for: ${2:data_type} do\n\t${0}\nend",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "defim": true
        },
        "opts": {}
      },
      {
        "content": "defmacro ${1:name} do\n\t${0}\nend",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "defma": true
        },
        "opts": {}
      },
      {
        "content": "%__MODULE__{\n\t${1:key_name}: ${2:value}\n}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "%M": true
        },
        "opts": {}
      },
      {
        "content": "@enforce_keys [:${1:key_name}]",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "enfk": true
        },
        "opts": {}
      },
      {
        "content": "defp ${1:name}, do: ${2}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "dfp": true
        },
        "opts": {}
      },
      {
        "content": "defp ${1:name}(${2:args}) when ${3:guard}, do: ${4}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "dfpw": true
        },
        "opts": {}
      },
      {
        "content": "defp ${1:name} do\n\t${0}\nend",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "defp": true
        },
        "opts": {}
      },
      {
        "content": "defp ${1:name}(${2:args}) when ${3:guard} do\n\t${0}\nend",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "defpw": true
        },
        "opts": {}
      },
      {
        "content": "defprotocol ${1:name}, [${0:function}]",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "defpr": true
        },
        "opts": {}
      },
      {
        "content": "defrecord ${1:record_name}, ${0:fields}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "defr": true
        },
        "opts": {}
      },
      {
        "content": "@doc \"\"\"\n${0}\n\"\"\"",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "doc": true
        },
        "opts": {}
      },
      {
        "content": "@doc ~S\"\"\"\n${0}\n\"\"\"",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "docs": true
        },
        "opts": {}
      },
      {
        "content": "@doc false",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "docf": true
        },
        "opts": {}
      },
      {
        "content": "@impl true",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "im": true
        },
        "opts": {}
      },
      {
        "content": "fn ${1:args} -> ${0} end",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "fn": true
        },
        "opts": {}
      },
      {
        "content": "@moduledoc \"\"\"\n${0}\n\"\"\"",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "mdoc": true
        },
        "opts": {}
      },
      {
        "content": "@moduledoc ~S\"\"\"\n${0}\n\"\"\"",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "mdocs": true
        },
        "opts": {}
      },
      {
        "content": "@moduledoc false",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "mdocf": true
        },
        "opts": {}
      },
      {
        "content": "receive do\n\t${1} ->\n\t\t${0}\nend",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "rec": true
        },
        "opts": {}
      },
      {
        "content": "require ${0:Logger}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "req": true
        },
        "opts": {}
      },
      {
        "content": "import ${0:module_name}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "imp": true
        },
        "opts": {}
      },
      {
        "content": "alias ${0:module_name}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ali": true
        },
        "opts": {}
      },
      {
        "content": "test \"${1:test name}\" do\n\t${0}\nend",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "test": true
        },
        "opts": {}
      },
      {
        "content": "test \"${1:test_name}\", ctx do\n\t${0}\nend",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "testc": true
        },
        "opts": {}
      },
      {
        "content": "test \"${1:test_name}\", %{${2:arg: arg}} do\n\t${0}\nend",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "testa": true
        },
        "opts": {}
      },
      {
        "content": "describe \"${1:test group subject}\" do\n\t${0}\nend",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "des": true
        },
        "opts": {}
      },
      {
        "content": "@describetag :${1:describe tag}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "destag": true
        },
        "opts": {}
      },
      {
        "content": "@moduletag :${1:module tag}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "mtag": true
        },
        "opts": {}
      },
      {
        "content": "doctest ${1:filename}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "dt": true
        },
        "opts": {}
      },
      {
        "content": "@tag :pending",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "tp": true
        },
        "opts": {}
      },
      {
        "content": "setup do\n\t${1}\nend",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "setup": true
        },
        "opts": {}
      },
      {
        "content": "setup_all do\n\t${1}\nend",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "setupa": true
        },
        "opts": {}
      },
      {
        "content": "try do\n\t${1:${VISUAL}}\nrescue\n\t${2} -> ${0}\nend",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "try try .. rescue .. end": true
        },
        "opts": {}
      },
      {
        "content": "require IEx; IEx.pry\n${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "pry": true
        },
        "opts": {}
      },
      {
        "content": "|> (fn x -> require IEx; IEx.pry; x end).()${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ppry": true
        },
        "opts": {}
      },
      {
        "content": "quote do\n\t${1}\nend",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "qu": true
        },
        "opts": {}
      },
      {
        "content": "@behaviour ${1:Mix.Task}\n${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "beh": true
        },
        "opts": {}
      },
      {
        "content": "|> ${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "p": true
        },
        "opts": {}
      },
      {
        "content": "|> Enum.each(fn ${1} -> ${0} end)",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          ">e pipe to each": true
        },
        "opts": {}
      },
      {
        "content": "|> Enum.map(fn ${1} -> ${0} end)",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          ">m pipe to map": true
        },
        "opts": {}
      },
      {
        "content": "|> Enum.filter(fn ${1} -> ${0} end)",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          ">f pipe to filter": true
        },
        "opts": {}
      },
      {
        "content": "|> Enum.reduce(${1:acc}, fn ${2}, ${3:acc} -> ${0} end)",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          ">r pipe to reduce": true
        },
        "opts": {}
      },
      {
        "content": "|> IO.inspect",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          ">i pipe to inspect": true
        },
        "opts": {}
      },
      {
        "content": "|> IO.inspect(label: \"${1:label}\")",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          ">il pipe to inspect with label": true
        },
        "opts": {}
      },
      {
        "content": "@doc false\ndef child_spec(${1:_opts}) do\n\t%{\n\t\tid: __MODULE__,\n\t\tstart: {__MODULE__, :start_link, ${2:[]}},\n\t\trestart: ${3::permanent},\n\t\tshutdown: ${4:5000},\n\t\ttype: ${5::worker}\n\t}\nend",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "cs": true
        },
        "opts": {}
      },
      {
        "content": "use GenServer\n@doc false\ndef start_link do\n\tGenServer.start_link(__MODULE__, ${1:Map.new})\nend\n@impl true\ndef init(state) do\n\t{:ok, state}\nend",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "genserver basic genserver structure": true
        },
        "opts": {}
      },
      {
        "content": "use GenServer\n@doc false\ndef start_link, do: GenServer.start_link(__MODULE__, ${1:Map.new})\n@impl true\ndef init(state), do: {:ok, state}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "genserver: basic genserver structure": true
        },
        "opts": {}
      },
      {
        "content": "@impl true\ndef ${1:name} do\n\t${0}\nend",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "impl": true
        },
        "opts": {}
      },
      {
        "content": "~w(${0})",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "wl word list": true
        },
        "opts": {}
      },
      {
        "content": "~w(${0})a",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "al atom list": true
        },
        "opts": {}
      }
    ],
    "elm": [
      {
        "content": "import ${1:String}\n${0}",
        "doc": "",
        "grammar": "snu",
        "label": "import",
        "matches": {
          "imp": true,
          "import": true
        },
        "opts": {
          "head": true
        }
      },
      {
        "content": "import ${1} as ${2}\n${0}",
        "doc": "",
        "grammar": "snu",
        "label": "import ... as ...",
        "matches": {
          "impa": true,
          "importAs": true
        },
        "opts": {
          "head": true
        }
      },
      {
        "content": "import ${1:Html} exposing (${2:..})\n${0}",
        "doc": "",
        "grammar": "snu",
        "label": "import ... exposing (..)",
        "matches": {
          "impe": true,
          "importExposing": true
        },
        "opts": {
          "head": true
        }
      },
      {
        "content": "import ${1:Html} as ${2} exposing (${2:..})\n${0}",
        "doc": "",
        "grammar": "snu",
        "label": "import ... as ... exposing (..)",
        "matches": {
          "impae": true,
          "importAsExposing": true
        },
        "opts": {
          "head": true
        }
      },
      {
        "content": "main : Program Never ${2:Model} ${3:Msg}\nmain =\n\t${4:Html.}program\n\t\t{ init: ${6:( model, Cmd.none )}\n\t\t, update: ${7:update}\n\t\t, subscriptions: ${8:subscriptions}\n\t\t${9:, view: ${10:view\\}}\n\t\t}\n${0}",
        "doc": "",
        "grammar": "snu",
        "label": "main : Program",
        "matches": {
          "main": true,
          "prog": true
        },
        "opts": {
          "head": true
        }
      },
      {
        "content": "main : Program ${1:Flags} ${2:Model} ${3:Msg}\nmain =\n\t${4:Html.}programWithFlags\n\t\t{ init: ${6:initWithFlags}\n\t\t, update: ${7:update}\n\t\t, subscriptions: ${8:subscriptions}\n\t\t${9:, view: ${10:view\\}}\n\t\t}\n${0}",
        "doc": "",
        "grammar": "snu",
        "label": "main : Program",
        "matches": {
          "progf mainf": true,
          "programWithFlags": true
        },
        "opts": {
          "head": true
        }
      },
      {
        "content": "main : Program Never ${2:Model} ${3:Msg}\nmain =\n\t${4:Html.}beginnerProgram\n\t\t{ init: ${6:init}\n\t\t, update: ${7:update}\n\t\t, subscriptions: ${8:subscriptions}\n\t\t${9:, view: ${10:view\\}}\n\t\t}\n${0}",
        "doc": "",
        "grammar": "snu",
        "label": "main : Program",
        "matches": {
          "basicProgram": true,
          "progb mainb": true
        },
        "opts": {
          "head": true
        }
      },
      {
        "content": "case ${1:#:expression} of\n\t${2:#:value} ->\n\t\t${3:TARGET}",
        "doc": "",
        "grammar": "snu",
        "label": "case ... of",
        "matches": {
          "case": true
        },
        "opts": {}
      },
      {
        "content": "if ${1:#:condition} then\n\t${2}\nelse\n\t${3}",
        "doc": "",
        "grammar": "snu",
        "label": "if ... then ... else ...",
        "matches": {
          "if": true
        },
        "opts": {}
      },
      {
        "content": "let\n\t${1} =\n\t\t${2}\nin\n\t${0}",
        "doc": "",
        "grammar": "snu",
        "label": "let ... in ...",
        "matches": {
          "let": true
        },
        "opts": {
          "head": true
        }
      },
      {
        "content": "\\\\${1:x} -> ${0}",
        "doc": "",
        "grammar": "snu",
        "label": "λ",
        "matches": {
          "lambda": true
        },
        "opts": {}
      },
      {
        "content": "import ${0:Http}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "imp": true
        },
        "opts": {}
      },
      {
        "content": "import ${1:Html} exposing (${0:..})",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "impe": true
        },
        "opts": {}
      },
      {
        "content": "import ${1:Json.Encode} as ${2:Encode} exposing (${0:Value})",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "impae": true
        },
        "opts": {}
      },
      {
        "content": "${1:fn} : ${2:a} -> ${3:a}\n$1 ${4} =\n\t${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "fn": true
        },
        "opts": {}
      },
      {
        "content": "${1:fn} : ${2:a} -> ${3:a}\n$1 ${4} =\n\t${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "fn1": true
        },
        "opts": {}
      },
      {
        "content": "${1:fn} : ${2:a} -> ${3:a} -> ${4:a}\n$1 ${5} =\n\t${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "fn2": true
        },
        "opts": {}
      },
      {
        "content": "${1:fn} : ${2:a} -> ${3:a} -> ${4:a} -> ${5:a}\n$1 ${6} =\n\t${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "fn3": true
        },
        "opts": {}
      },
      {
        "content": "${1:fn} : ${2:a}\n$1 =\n\t${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "fn0": true
        },
        "opts": {}
      },
      {
        "content": "case ${1} of\n\t${2} ->\n\t\t${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "case": true
        },
        "opts": {}
      },
      {
        "content": "${1} ->\n\t${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "-": true
        },
        "opts": {}
      },
      {
        "content": "let\n\t${1} =\n\t\t${2}\nin\n\t${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "let": true
        },
        "opts": {}
      },
      {
        "content": "if ${1} then\n\t${2:${VISUAL}}\nelse\n\t${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "if": true
        },
        "opts": {}
      },
      {
        "content": "type ${1:Msg}\n\t= ${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ty": true
        },
        "opts": {}
      },
      {
        "content": "type alias ${1:Model} =\n\t${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "tya": true
        },
        "opts": {}
      },
      {
        "content": "test \"${1}\" <| \\_ -> $0",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "test": true
        },
        "opts": {}
      },
      {
        "content": "describe \"${1}\" [ $0 ]",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "desc": true
        },
        "opts": {}
      },
      {
        "content": "{-| ${0}\n-}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "doc": true
        },
        "opts": {}
      },
      {
        "content": "|> ${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "p": true
        },
        "opts": {}
      },
      {
        "content": "import Html exposing (Html)\ntype alias Model =\n\t{}\ntype Msg\n\t= Noop\nmain : Program Never Model Msg\nmain =\n\tHtml.program\n\t\t{ init = init\n\t\t, view = view\n\t\t, update = update\n\t\t, subscriptions = subscriptions\n\t\t}\ninit : ( Model, Cmd Msg )\ninit =\n\t{} ! []\nupdate : Msg -> Model -> ( Model, Cmd Msg )\nupdate msg model =\n\tcase msg of\n\t\tNoop ->\n\t\t\tmodel ! []\nsubscriptions : Model -> Sub Msg\nsubscriptions model =\n\tSub.none\nview : Model -> Html Msg\nview model =\n\tHtml.text \"Hello, sailor!\"",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "program Elm 0.18 program": true
        },
        "opts": {}
      },
      {
        "content": "module Main exposing (Model, Msg(..), init, main, subscriptions, update, view)\nimport Browser\nimport Html exposing (..)\nimport Json.Encode\nmain : Program Flags Model Msg\nmain =\n\tBrowser.element\n\t\t{ init = init\n\t\t, update = update\n\t\t, subscriptions = subscriptions\n\t\t, view = view\n\t\t}\ntype alias Model =\n\t{}\ntype alias Flags =\n\tJson.Encode.Value\ninit : Flags -> ( Model, Cmd Msg )\ninit flags_ =\n\t( {}\n\t, Cmd.none\n\t)\ntype Msg\n\t= Noop\nupdate : Msg -> Model -> ( Model, Cmd Msg )\nupdate msg model =\n\tcase msg of\n\t\tNoop ->\n\t\t\t( model\n\t\t\t, Cmd.none\n\t\t\t)\nsubscriptions : Model -> Sub Msg\nsubscriptions model =\n\tSub.none\nview : Model -> Html Msg\nview model =\n\th1 [] [ text \"Hello, world!\" ]",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "element": true
        },
        "opts": {}
      }
    ],
    "erlang": [
      {
        "content": "main(_) -> io:format(\"Hello, world!\\n\").",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "helloworld": true
        },
        "opts": {
          "head": true
        }
      },
      {
        "content": "-module(${0:module}).",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "-module": true
        },
        "opts": {
          "head": true
        }
      },
      {
        "content": "-export([${0:f/1}]).",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "-export": true
        },
        "opts": {
          "head": true
        }
      },
      {
        "content": "io:format(\"${1:~w~n}\"${2:, []})",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ioformat": true
        },
        "opts": {
          "word": true
        }
      },
      {
        "content": "main(_) -> ${0}.",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "main": true
        },
        "opts": {
          "head": true
        }
      },
      {
        "content": "case ${0:TARGET} of\n    ${1}\nend",
        "doc": "",
        "grammar": "snu",
        "label": "case",
        "matches": {
          "case": true
        },
        "opts": {
          "head": true
        }
      },
      {
        "content": "<<\"${0:TARGET}\">>",
        "doc": "",
        "grammar": "snu",
        "label": "<<\"...\">>",
        "matches": {
          "bs": true
        },
        "opts": {}
      },
      {
        "content": "erlang:display(${0}),",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "d": true
        },
        "opts": {}
      },
      {
        "content": "erlang:display({${1}, ${0}}),",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "dt": true
        },
        "opts": {}
      },
      {
        "content": "-define(${1:macro}, ${2:body}).",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "def": true
        },
        "opts": {}
      },
      {
        "content": "-export([${1:function}/${0:arity}]).",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "exp": true
        },
        "opts": {}
      },
      {
        "content": "-include(\"${1:file}\").",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "inc": true
        },
        "opts": {}
      },
      {
        "content": "-include_lib(\"${1:lib}/include/${1}.hrl\").${2}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "incl": true
        },
        "opts": {}
      },
      {
        "content": "-behaviour(${1:behaviour}).",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "beh": true
        },
        "opts": {}
      },
      {
        "content": "-ifdef(${1:TEST}).\n${0}\n-endif.",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ifd": true
        },
        "opts": {}
      },
      {
        "content": "-ifndef(${1:TEST}).\n${0}\n-endif.",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ifnd": true
        },
        "opts": {}
      },
      {
        "content": "-undef(${1:macro}).",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "undef": true
        },
        "opts": {}
      },
      {
        "content": "if\n\t${1:guard} ->\n\t\t${0:body}\nend",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "if": true
        },
        "opts": {}
      },
      {
        "content": "case ${1:expression} of\n\t${2:pattern} ->\n\t\t${0:body};\nend",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "case": true
        },
        "opts": {}
      },
      {
        "content": "fun (${1:Parameters}) -> ${2:body} end",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "fun": true
        },
        "opts": {}
      },
      {
        "content": "try\n\t${1:${VISUAL}}\ncatch\n\t${2:_:_} -> ${0:got_some_exception}\nend",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "try": true
        },
        "opts": {}
      },
      {
        "content": "receive\n${1:\t${2:pattern}${3: when ${4:guard}} ->\n\t\t${5:body}}\n${6:after\n\t${7:expression} ->\n\t\t${8:body}}\nend",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "rcv \"Receive Expression\"": true
        },
        "opts": {}
      },
      {
        "content": "-record(${1:record}, {${2:field}=${3:value}}).",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "rec": true
        },
        "opts": {}
      },
      {
        "content": "%% TODO: ${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "todo": true
        },
        "opts": {}
      },
      {
        "content": "%% @doc ${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "%d": true
        },
        "opts": {}
      },
      {
        "content": "%% @end",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "%e": true
        },
        "opts": {}
      },
      {
        "content": "%% @spec ${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "%s": true
        },
        "opts": {}
      },
      {
        "content": "%% @private",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "%p": true
        },
        "opts": {}
      },
      {
        "content": "-ifdef(TEST).\n-include_lib(\"eunit/include/eunit.hrl\").\n${0}\n-endif.",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ieunit": true
        },
        "opts": {}
      },
      {
        "content": "-ifdef(TEST).\n${1}_test() ->\n\t${0}\n-endif.",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "itest": true
        },
        "opts": {}
      },
      {
        "content": "${1}_test() ->\n\t${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "test": true
        },
        "opts": {}
      },
      {
        "content": "?assert(${0})",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "as": true
        },
        "opts": {}
      },
      {
        "content": "?assertNot(${0})",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "asn": true
        },
        "opts": {}
      },
      {
        "content": "?assertEqual(${1}, ${0})",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "aseq": true
        },
        "opts": {}
      },
      {
        "content": "?assertNotEqual(${1}, ${0})",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "asneq": true
        },
        "opts": {}
      },
      {
        "content": "?assertMatch(${1:Pattern}, ${0:Expression})",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "asmat": true
        },
        "opts": {}
      },
      {
        "content": "?assertNotMatch(${1:Pattern}, ${0:Expression})",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "asnmat": true
        },
        "opts": {}
      },
      {
        "content": "?assertError(${1:Pattern}, ${0:Expression})",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "aserr": true
        },
        "opts": {}
      },
      {
        "content": "?assertExit(${1:Pattern}, ${0:Expression})",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "asex": true
        },
        "opts": {}
      },
      {
        "content": "?assertException(${1:Class}, ${2:Pattern}, ${0:Expression})",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "asexc": true
        },
        "opts": {}
      },
      {
        "content": "${1:pattern}${2: when ${3:guard}} ->\n\t${4:body}",
        "doc": null,
        "grammar": "snu",
        "label": "Case:Receive:Try Clause",
        "matches": {
          "pat": true
        },
        "opts": {}
      },
      {
        "content": "[${1:X} || ${2:X} <- ${3:List}${4:, gen}]",
        "doc": null,
        "grammar": "snu",
        "label": "List Comprehension",
        "matches": {
          "||": true
        },
        "opts": {}
      },
      {
        "content": "${1:X} <- ${2:List}${3:, gen}",
        "doc": null,
        "grammar": "snu",
        "label": "Generator Expression",
        "matches": {
          "gen": true
        },
        "opts": {}
      }
    ],
    "eruby": [
      {
        "content": "<%= ${1:TARGET} %>${2}",
        "doc": "",
        "grammar": "snu",
        "label": "<%= %>",
        "matches": {
          "ruby_print": true
        },
        "opts": {
          "word": true
        }
      },
      {
        "content": "<% ${1:TARGET} %>${2}",
        "doc": "",
        "grammar": "snu",
        "label": "<% %>",
        "matches": {
          "ruby_code": true
        },
        "opts": {
          "word": true
        }
      },
      {
        "content": "<%= ${1:TARGET} -%>${2}",
        "doc": "",
        "grammar": "snu",
        "label": "<%= -%>",
        "matches": {
          "ruby_print_nonl": true
        },
        "opts": {
          "word": true
        }
      },
      {
        "content": "<% ${1:TARGET} -%>${2}",
        "doc": "",
        "grammar": "snu",
        "label": "<% -%>",
        "matches": {
          "ruby_code_nonl": true
        },
        "opts": {
          "word": true
        }
      },
      {
        "content": "<%# ${1:TARGET} %>${2}",
        "doc": "",
        "grammar": "snu",
        "label": "<%# %>",
        "matches": {
          "comment": true
        },
        "opts": {
          "word": true
        }
      },
      {
        "content": "<% ${0} %>",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "rc": true
        },
        "opts": {}
      },
      {
        "content": "<%= ${1} %>",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "rce": true
        },
        "opts": {}
      },
      {
        "content": "<% ${0} %>",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "%": true
        },
        "opts": {}
      },
      {
        "content": "<%= ${1} %>",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "=": true
        },
        "opts": {}
      },
      {
        "content": "<% end %>",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "end": true
        },
        "opts": {}
      },
      {
        "content": "<% ${1}.each do |${2}| %>\n\t${0}\n<% end %>",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ead": true
        },
        "opts": {}
      },
      {
        "content": "<% for ${2:item} in ${1} %>\n\t${0}\n<% end %>",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "for": true
        },
        "opts": {}
      },
      {
        "content": "<%= render partial: '${0:item}' %>",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "rp": true
        },
        "opts": {}
      },
      {
        "content": "<%= render partial: '${1:item}', locals: { :${2:name} => '${3:value}'${0} } %>",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "rpl": true
        },
        "opts": {}
      },
      {
        "content": "<%= render partial: '${1:item}', status: ${0:500} %>",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "rps": true
        },
        "opts": {}
      },
      {
        "content": "<%= render partial: '${1:item}', collection: ${0:items} %>",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "rpc": true
        },
        "opts": {}
      },
      {
        "content": "<%= link_to '${1:link text...}', action: '${0:index}' %>",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "lia": true
        },
        "opts": {}
      },
      {
        "content": "<%= link_to '${1:link text...}', action: '${2:edit}', id: ${0:@item} %>",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "liai": true
        },
        "opts": {}
      },
      {
        "content": "<%= link_to '${1:link text...}', controller: '${0:items}' %>",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "lic": true
        },
        "opts": {}
      },
      {
        "content": "<%= link_to '${1:link text...}', controller: '${2:items}', action: '${0:index}' %>",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "lica": true
        },
        "opts": {}
      },
      {
        "content": "<%= link_to '${1:link text...}', controller: '${2:items}', action: '${3:edit}', id: ${0:@item} %>",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "licai": true
        },
        "opts": {}
      },
      {
        "content": "<%= yield ${1::content_symbol} %>",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "yield": true
        },
        "opts": {}
      },
      {
        "content": "<% content_for :${1:head} do %>\n\t${0}\n<% end %>",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "conf": true
        },
        "opts": {}
      },
      {
        "content": "<%= collection_select(:${1:object}, :${2:method}, ${3:collection}, :${4:value_method}, :${5:text_method}, options = {${0:prompt: true}}) %>        ",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "cs": true
        },
        "opts": {}
      },
      {
        "content": "<%= content_tag '${1:DIV}', ${2:content}${0:,options} %>",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ct": true
        },
        "opts": {}
      },
      {
        "content": "<%= form_for @${1:model} do |f| %>\n\t${0}\n<% end %>",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ff": true
        },
        "opts": {}
      },
      {
        "content": "<%= ${1:f}.input :${0:attribute} %>",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ffi": true
        },
        "opts": {}
      },
      {
        "content": "<%= ${1:f}.check_box :${0:attribute} %>",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ffcb": true
        },
        "opts": {}
      },
      {
        "content": "<% error_messages_for :${1:model} %>\n<%= form_for @${2:model} do |f| %>\n\t${0}\n<% end %>",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ffe": true
        },
        "opts": {}
      },
      {
        "content": "<%= ${1:f}.file_field :${0:attribute} %>",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ffff": true
        },
        "opts": {}
      },
      {
        "content": "<%= ${1:f}.hidden_field :${0:attribute} %>",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ffhf": true
        },
        "opts": {}
      },
      {
        "content": "<%= ${1:f}.label :${2:attribute}, '${0:$2}' %>",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ffl": true
        },
        "opts": {}
      },
      {
        "content": "<%= ${1:f}.password_field :${0:attribute} %>",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ffpf": true
        },
        "opts": {}
      },
      {
        "content": "<%= ${1:f}.radio_button :${2:attribute}, :${0:tag_value} %>",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ffrb": true
        },
        "opts": {}
      },
      {
        "content": "<%= ${1:f}.submit \"${0:submit}\" %>",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ffs": true
        },
        "opts": {}
      },
      {
        "content": "<%= ${1:f}.text_area :${0:attribute} %>",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ffta": true
        },
        "opts": {}
      },
      {
        "content": "<%= ${1:f}.text_field :${0:attribute} %>",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "fftf": true
        },
        "opts": {}
      },
      {
        "content": "<%= ${1:f}.collection_select(:${2:method}, ${3:collection}, :${4:value_method}, :${5:text_method}, options = {${0:prompt: true}}) %>",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "fcs": true
        },
        "opts": {}
      },
      {
        "content": "<%= fields_for :${1:model}, @$1 do |${2:f}| %>\n\t${0}\n<% end %>",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "fields": true
        },
        "opts": {}
      },
      {
        "content": "I18n.t('${1:type.key}')",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "i18": true
        },
        "opts": {}
      },
      {
        "content": "<%= image_tag \"${1}\"${0} %>",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "it": true
        },
        "opts": {}
      },
      {
        "content": "<%= javascript_include_tag ${0::all} %>",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "jit": true
        },
        "opts": {}
      },
      {
        "content": "<%= javascript_include_tag \"${0}\" %>",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "jsit": true
        },
        "opts": {}
      },
      {
        "content": "<%= link_to ${1:model}.${2:name}, ${3:$1}_path(${0:$1}) %>",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "lim": true
        },
        "opts": {}
      },
      {
        "content": "<%= link_to \"${1:Link text...}\", ${2:parent}_${3:child}_path(${4:@$2}, ${0:@$3}) %>",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "linp": true
        },
        "opts": {}
      },
      {
        "content": "<%= link_to \"${1:Link text...}\", ${2:parent}_${3:child}_path(${0:@$2}) %>",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "linpp": true
        },
        "opts": {}
      },
      {
        "content": "<%= link_to \"${1:Link text...}\", ${2:model}_path(${0:@$2}) %>",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "lip": true
        },
        "opts": {}
      },
      {
        "content": "<%= link_to \"${1:Link text...}\", ${0:model}s_path %>",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "lipp": true
        },
        "opts": {}
      },
      {
        "content": "<%= link_to \"${1:name}\", ${0:dest} %>",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "lt": true
        },
        "opts": {}
      },
      {
        "content": "<%= number_to_currency(${1}) %>",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ntc": true
        },
        "opts": {}
      },
      {
        "content": "<%= options_from_collection_for_select ${1:collection}, ${2:value_method}, ${3:text_method}, ${0:selected_value} %>",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ofcfs": true
        },
        "opts": {}
      },
      {
        "content": "<%= options_for_select ${1:collection}, ${2:value_method} %>",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ofs": true
        },
        "opts": {}
      },
      {
        "content": "<%= render file: \"${1:file}\"${0} %>",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "rf": true
        },
        "opts": {}
      },
      {
        "content": "<%= render template: \"${1:file}\"${0} %>",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "rt": true
        },
        "opts": {}
      },
      {
        "content": "<%= stylesheet_link_tag ${1::all}, cache: ${0:true} %>",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "slt": true
        },
        "opts": {}
      },
      {
        "content": "<%= stylesheet_link_tag \"${0}\" %>",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "sslt": true
        },
        "opts": {}
      },
      {
        "content": "<% if ${1} %>\n\t${0:${VISUAL}}\n<% end %>",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "if": true
        },
        "opts": {}
      },
      {
        "content": "<% if ${1} %>\n\t${2}\n<% else %>\n\t${0}\n<% end %>",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ife": true
        },
        "opts": {}
      },
      {
        "content": "<% require 'pry'; binding.pry %>",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "pry": true
        },
        "opts": {}
      }
    ],
    "falcon": [
      {
        "content": "#!/usr/bin/env falcon",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "#!": true
        },
        "opts": {}
      },
      {
        "content": "import ${0:module}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "imp": true
        },
        "opts": {}
      },
      {
        "content": "function ${2:function_name}(${3})\n\t${0}\nend",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "fun": true
        },
        "opts": {}
      },
      {
        "content": "class ${1:class_name}(${2:class_params})\n\t${0:/* members/methods */}\nend",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "class": true
        },
        "opts": {}
      },
      {
        "content": "if ${1:condition}\n\t${0}\nend",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "if": true
        },
        "opts": {}
      },
      {
        "content": "if ${1:condition}\n\t${0}\nelse\n    ${1}\nend",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ife": true
        },
        "opts": {}
      },
      {
        "content": "elif ${1:condition}\n\t${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "eif": true
        },
        "opts": {}
      },
      {
        "content": "switch ${1:expression}\n\tcase ${2:item}\n\tcase ${0:item}\n\tdefault\nend",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "switch": true
        },
        "opts": {}
      },
      {
        "content": "select ${1:variable}\n\tcase ${2:TypeSpec}\n\tcase ${0:TypeSpec}\n\tdefault\nend",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "select": true
        },
        "opts": {}
      },
      {
        "content": "for ${1:element} in ${2:container}\n\t${0}\nend",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "forin": true
        },
        "opts": {}
      },
      {
        "content": "for ${1:lowerbound} to ${2:upperbound}\n\t${0}\nend",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "forto": true
        },
        "opts": {}
      },
      {
        "content": "while ${1:conidition}\n\t${0}\nend",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "wh": true
        },
        "opts": {}
      }
    ],
    "fortran": [
      {
        "content": "program ${1:main}\n\t${2}\nend program $1",
        "doc": "",
        "grammar": "snu",
        "label": "program",
        "matches": {
          "pr": true
        },
        "opts": {
          "head": true
        }
      },
      {
        "content": "function ${1:}(${2})\n\t${3}\nend function $1",
        "doc": "",
        "grammar": "snu",
        "label": "function",
        "matches": {
          "fu": true
        },
        "opts": {
          "head": true
        }
      },
      {
        "content": "integer, parameter :: ",
        "doc": "",
        "grammar": "snu",
        "label": "integer parameter",
        "matches": {
          "inp": true
        },
        "opts": {
          "head": true
        }
      },
      {
        "content": "integer :: ",
        "doc": "",
        "grammar": "snu",
        "label": "integer",
        "matches": {
          "in": true
        },
        "opts": {
          "head": true
        }
      },
      {
        "content": "integer, intent(in)  :: ",
        "doc": "",
        "grammar": "snu",
        "label": "integer intent(in)",
        "matches": {
          "ini": true
        },
        "opts": {
          "head": true
        }
      },
      {
        "content": "integer, intent(out) :: ",
        "doc": "",
        "grammar": "snu",
        "label": "integer intent(out)",
        "matches": {
          "ino": true
        },
        "opts": {
          "head": true
        }
      },
      {
        "content": "real, parameter :: ",
        "doc": "",
        "grammar": "snu",
        "label": "real parameter",
        "matches": {
          "rep": true
        },
        "opts": {
          "head": true
        }
      },
      {
        "content": "real :: ",
        "doc": "",
        "grammar": "snu",
        "label": "real",
        "matches": {
          "re": true
        },
        "opts": {
          "head": true
        }
      },
      {
        "content": "real, intent(in)  :: ",
        "doc": "",
        "grammar": "snu",
        "label": "real intent(in)",
        "matches": {
          "rei": true
        },
        "opts": {
          "head": true
        }
      },
      {
        "content": "real, intent(out) :: ",
        "doc": "",
        "grammar": "snu",
        "label": "real intent(out)",
        "matches": {
          "reo": true
        },
        "opts": {
          "head": true
        }
      },
      {
        "content": "integer, dimension(${1::})${2:#:, allocatable} :: ${3}",
        "doc": "",
        "grammar": "snu",
        "label": "integer dimension",
        "matches": {
          "ind": true
        },
        "opts": {
          "head": true
        }
      },
      {
        "content": "integer, dimension(${1}), intent(in)  :: ${2}",
        "doc": "",
        "grammar": "snu",
        "label": "integer dimension intent(in)",
        "matches": {
          "indi": true
        },
        "opts": {
          "head": true
        }
      },
      {
        "content": "integer, dimension(${1}), intent(out) :: ${2}",
        "doc": "",
        "grammar": "snu",
        "label": "integer dimension intent(out)",
        "matches": {
          "indo": true
        },
        "opts": {
          "head": true
        }
      },
      {
        "content": "real, dimension(${1::})${2:#:, allocatable} :: ${3}",
        "doc": "",
        "grammar": "snu",
        "label": "real dimension",
        "matches": {
          "red": true
        },
        "opts": {
          "head": true
        }
      },
      {
        "content": "real, dimension(${1}), intent(in)  :: ${2}",
        "doc": "",
        "grammar": "snu",
        "label": "real dimension intent(in)",
        "matches": {
          "redi": true
        },
        "opts": {
          "head": true
        }
      },
      {
        "content": "real, dimension(${1}), intent(out) :: ${2}",
        "doc": "",
        "grammar": "snu",
        "label": "real dimension intent(out)",
        "matches": {
          "redo": true
        },
        "opts": {
          "head": true
        }
      },
      {
        "content": "character(${1}) :: ${2}",
        "doc": "",
        "grammar": "snu",
        "label": "character",
        "matches": {
          "ch": true
        },
        "opts": {
          "head": true
        }
      },
      {
        "content": "character(${1}), dimension(${2}) :: ${3}",
        "doc": "",
        "grammar": "snu",
        "label": "character dimension",
        "matches": {
          "chd": true
        },
        "opts": {
          "head": true
        }
      },
      {
        "content": "logical :: ${1:fileExsit}",
        "doc": "",
        "grammar": "snu",
        "label": "logical",
        "matches": {
          "lo": true
        },
        "opts": {
          "head": true
        }
      },
      {
        "content": "if (${1}) ${2}",
        "doc": "",
        "grammar": "snu",
        "label": "if",
        "matches": {
          "if": true
        },
        "opts": {
          "head": true
        }
      },
      {
        "content": "if (${1}) then\n\t${2}\nend if",
        "doc": "",
        "grammar": "snu",
        "label": "if then",
        "matches": {
          "ift": true
        },
        "opts": {
          "head": true
        }
      },
      {
        "content": "read(${1:*},${2:*}) ${3}",
        "doc": "",
        "grammar": "snu",
        "label": "read",
        "matches": {
          "read": true
        },
        "opts": {
          "head": true
        }
      },
      {
        "content": "write(${1:*},${2:*}) ${3}",
        "doc": "",
        "grammar": "snu",
        "label": "write",
        "matches": {
          "wr": true
        },
        "opts": {
          "head": true
        }
      },
      {
        "content": "open(${1:11},file=${2},status=${3:#:old}${4:#:,position='append'})\n${5}\nclose($1)",
        "doc": "",
        "grammar": "snu",
        "label": "open",
        "matches": {
          "op": true
        },
        "opts": {
          "head": true
        }
      },
      {
        "content": "select case (${1})\n${2}\nend select",
        "doc": "",
        "grammar": "snu",
        "label": "select case",
        "matches": {
          "se": true
        },
        "opts": {
          "head": true
        }
      },
      {
        "content": "case(${1})\n\t${2}",
        "doc": "",
        "grammar": "snu",
        "label": "case",
        "matches": {
          "case": true
        },
        "opts": {
          "head": true
        }
      },
      {
        "content": "do ${1}\nend do",
        "doc": "",
        "grammar": "snu",
        "label": "do",
        "matches": {
          "do": true
        },
        "opts": {
          "head": true
        }
      },
      {
        "content": "type ${1:}\n\t${2}\nend type $1",
        "doc": "",
        "grammar": "snu",
        "label": "type",
        "matches": {
          "ty": true
        },
        "opts": {
          "head": true
        }
      },
      {
        "content": "type(${1}), dimension(${2::}), allcatable :: ${3}",
        "doc": "",
        "grammar": "snu",
        "label": "type dimension",
        "matches": {
          "tyd": true
        },
        "opts": {
          "head": true
        }
      },
      {
        "content": "implicit none\n\t${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "impl": true
        },
        "opts": {}
      },
      {
        "content": "program ${1:main}\n\t${0}\nend program $1",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "prog": true
        },
        "opts": {}
      },
      {
        "content": "module ${1:modulename}\n\t${0}\nend module $1",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "mod": true
        },
        "opts": {}
      },
      {
        "content": "procedure ${1:name}\n\t${0}\nend procedure $1",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "proc": true
        },
        "opts": {}
      },
      {
        "content": "interface ${1:name}\n\t${0}\nend interface $1",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "iface": true
        },
        "opts": {}
      },
      {
        "content": "!> @param[${1}]${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "doxp": true
        },
        "opts": {}
      },
      {
        "content": "logical :: ${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "bool": true
        },
        "opts": {}
      },
      {
        "content": "integer :: ${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "int": true
        },
        "opts": {}
      },
      {
        "content": "real :: ${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "real": true
        },
        "opts": {}
      },
      {
        "content": "double precision :: ${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "double": true
        },
        "opts": {}
      },
      {
        "content": "character(len=${1:*}) :: ${0:}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "str": true
        },
        "opts": {}
      },
      {
        "content": "type(${1:name})\n\t${0}\nend type",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "type": true
        },
        "opts": {}
      },
      {
        "content": "${1:type}, parameter :: $2 = ${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "const": true
        },
        "opts": {}
      },
      {
        "content": "${1:type}, ${2:allocatable, }dimension(${3::}) :: ${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "arr": true
        },
        "opts": {}
      },
      {
        "content": "${1:type}, intent(inout) :: ${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "intent": true
        },
        "opts": {}
      },
      {
        "content": "(/ $1 /) ${2:,&} ${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "/": true
        },
        "opts": {}
      },
      {
        "content": "if (${1:condition}) then\n\t${0}\nend if",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "if": true
        },
        "opts": {}
      },
      {
        "content": "select case (${1:expr})\n\tcase ($2)\n\tcase default\n\t\t$3\nend select ${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "case": true
        },
        "opts": {}
      },
      {
        "content": "do ${1:i} = ${2:start}, ${3:end}, ${4:incr}\n\t${0}\nend do",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "do": true
        },
        "opts": {}
      },
      {
        "content": "do while (${1:condition})\n\t$2\nend do",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "dow": true
        },
        "opts": {}
      },
      {
        "content": "subroutine ${1:name}($2)\n\t${0}\nend subroutine $1",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "sub": true
        },
        "opts": {}
      },
      {
        "content": "function ${1:name}($2) result($3)\n\t${0}\nend function $1",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "func": true
        },
        "opts": {}
      },
      {
        "content": "write(*,*) ${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "pr": true
        },
        "opts": {}
      },
      {
        "content": "write(*,*) '$1 = ', $1",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "dpr": true
        },
        "opts": {}
      },
      {
        "content": "read(unit = ${1:fp}, file = ${2:filename}, iostat = ${3:ierr}) ${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "read": true
        },
        "opts": {}
      },
      {
        "content": "write(unit = ${1:fp}, file = ${2:filename}, iostat = ${3:ierr}) ${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "write": true
        },
        "opts": {}
      },
      {
        "content": "open(unit = ${1:fp}, file = ${2:filename}, status = ${3:unknown}, iostat = ${4:ierr}) ${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "open": true
        },
        "opts": {}
      },
      {
        "content": "close(unit = ${1:fp}) ${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "close": true
        },
        "opts": {}
      }
    ],
    "framer-motion": [
      {
        "content": "import { motion } from 'framer-motion'",
        "doc": null,
        "grammar": "lsp",
        "label": "framer-import",
        "matches": {
          "framer-motion import": true
        },
        "opts": {}
      },
      {
        "content": "<motion.${1:div}\n  initial=\"${2:hidden}\"\n  animate=\"${3:visible}\"\n></motion.${1:div}>",
        "doc": null,
        "grammar": "lsp",
        "label": "framer-motion",
        "matches": {
          "framer-motion motion": true,
          "motion": true
        },
        "opts": {}
      },
      {
        "content": "const ${1:variants} = {\n  ${2:hidden}: {\n    ${3:style}\n  },\n  ${4:visible}: {\n    ${5:style}\n  },\n};",
        "doc": null,
        "grammar": "lsp",
        "label": "framer-variants",
        "matches": {
          "framer-motion variants": true,
          "variants": true
        },
        "opts": {}
      },
      {
        "content": "const ${1:sequence} = async () => {\n  await ${2:animateControls}.start({ ${5:opacity: 1} })\n}",
        "doc": "sequence for animation controls",
        "grammar": "lsp",
        "label": "framer-sequence",
        "matches": {
          "framer-motion sequence": true,
          "sequence": true
        },
        "opts": {}
      },
      {
        "content": "const ${controls} = useAnimation()",
        "doc": "useAnimation()\nuseAnimation hook can be used to create a set of imperative AnimationControls with a start and stop method.",
        "grammar": "lsp",
        "label": "framer-use-animation",
        "matches": {
          "framer-motion use-animation": true,
          "use-animation": true
        },
        "opts": {}
      },
      {
        "content": "${1:controls}.start({ ${2:opacity: 1} })",
        "doc": "AnimationControls with a start and stop method",
        "grammar": "lsp",
        "label": "framer-animation-controls",
        "matches": {
          "controls": true,
          "framer-motion controls": true
        },
        "opts": {}
      },
      {
        "content": "const ${1:scale} = useMotionValue(${2:1})",
        "doc": "useMotionValue()\nCreates a MotionValue to track the state and velocity of a value.",
        "grammar": "lsp",
        "label": "framer-use-motion-value",
        "matches": {
          "framer-motion use-motion-value": true,
          "use-motion-value": true
        },
        "opts": {}
      },
      {
        "content": "const ${1:y} = useTransform(${2:x}, ${3:value => value * 2})",
        "doc": "useTransform()\nCreate a MotionValue that transforms the output of another MotionValue through a function.",
        "grammar": "lsp",
        "label": "framer-use-transform",
        "matches": {
          "framer-motion use-transform": true,
          "use-transform": true
        },
        "opts": {}
      },
      {
        "content": "const ${1:x} = useSpring(${2:0}, { ${3:stiffness}: ${4:300} })",
        "doc": "useSpring()\nCreates a MotionValue that, when set, will use a spring animation to animate to its new state.",
        "grammar": "lsp",
        "label": "framer-use-spring",
        "matches": {
          "framer-motion use-spring": true,
          "use-spring": true
        },
        "opts": {}
      },
      {
        "content": "const { ${1:scrollYProgress} } = useElementScroll(${2:ref})",
        "doc": "useElementScroll(ref): Returns MotionValues that update when the provided element scrolls.",
        "grammar": "lsp",
        "label": "framer-use-element-scroll",
        "matches": {
          "framer-motion use-element-scroll": true,
          "use-element-scroll": true
        },
        "opts": {}
      },
      {
        "content": "const { ${scrollYProgress} } = useViewportScroll()",
        "doc": "useViewportScroll(): ScrollMotionValues Returns MotionValues that update when the viewport scrolls.",
        "grammar": "lsp",
        "label": "framer-use-viewport-scroll",
        "matches": {
          "framer-motion use-viewport-scroll": true,
          "use-viewport-scroll": true
        },
        "opts": {}
      },
      {
        "content": "const { ${1:scaleX}, ${2:scaleY} } = useInvertedScale()",
        "doc": "useInvertedScale(scale): ScaleMotionValues Returns a MotionValue each for scaleX and scaleY that update with the inverse of their respective parent scales.",
        "grammar": "lsp",
        "label": "framer-use-inverted-scale",
        "matches": {
          "framer-motion use-inverted-scale": true,
          "use-inverted-scale": true
        },
        "opts": {}
      },
      {
        "content": "const [${1:x}, ${2:cycleX}] = useCycle(${3:0}, ${4:50}, ${5:100})",
        "doc": "useCycle(items): CycleState It works similar to useState in React. It is provided an initial array of possible states, and returns an array of two arguments.",
        "grammar": "lsp",
        "label": "framer-use-cycle",
        "matches": {
          "framer-motion use-cycle": true,
          "use-cycle": true
        },
        "opts": {}
      },
      {
        "content": "const ${shouldReduceMotion} = useReducedMotion()",
        "doc": "A hook that returns true if we should be using reduced motion based on the current device's Reduced Motion setting.",
        "grammar": "lsp",
        "label": "framer-use-reduce-motion",
        "matches": {
          "framer-motion use-reduce-motion": true,
          "use-reduce-motion": true
        },
        "opts": {}
      },
      {
        "content": "const [${1:isPresent}, ${2:safeToRemove}] = usePresence()",
        "doc": "usePresence()\nIf isPresent is false, it means that a component has been removed the tree, but AnimatePresence won't really remove it until safeToRemove has been called.",
        "grammar": "lsp",
        "label": "framer-use-presence",
        "matches": {
          "framer-motion use-presence": true,
          "use-presence": true
        },
        "opts": {}
      },
      {
        "content": "const ${dragControls} = useDragControls()",
        "doc": "useDragControls()\nBy creating a dragControls using the useDragControls hook, we can pass this into the draggable component's dragControls prop.",
        "grammar": "lsp",
        "label": "framer-use-drag-controls",
        "matches": {
          "framer-motion use-drag-controls": true,
          "use-drag-controls": true
        },
        "opts": {}
      },
      {
        "content": "import { motion, AnimatePresence } from \"framer-motion\"",
        "doc": null,
        "grammar": "lsp",
        "label": "framer-animate-presence-import",
        "matches": {
          "animate-presence": true,
          "framer-motion import animate-presence": true
        },
        "opts": {}
      },
      {
        "content": "<AnimatePresence>\n    {${1:isVisible} && (\n      <motion.div\n        initial={{ ${3:style} }}\n        animate={{ ${4:style} }}\n        exit={{ ${5:style} }}\n      />\n    )}\n</AnimatePresence>",
        "doc": "AnimatePresence allows components to animate out when they're removed from the React tree.",
        "grammar": "lsp",
        "label": "framer-animate-presence",
        "matches": {
          "animate-presence": true,
          "framer-motion animate-presence": true
        },
        "opts": {}
      },
      {
        "content": "import { motion, AnimateSharedLayout } from \"framer-motion\"",
        "doc": null,
        "grammar": "lsp",
        "label": "framer-import-animate-shared-layout",
        "matches": {
          "animate-presence": true,
          "framer-motion import animate-shared-layout": true
        },
        "opts": {}
      },
      {
        "content": "<AnimateSharedLayout>\n</AnimateSharedLayout>",
        "doc": "Animate between different components that share a layout ID",
        "grammar": "lsp",
        "label": "framer-animate-shared-layout",
        "matches": {
          "animate-shared-layout": true,
          "framer-motion animate-shared-layout": true
        },
        "opts": {}
      }
    ],
    "freemarker": [
      {
        "content": "\\${.version}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ver \"${.version}\"": true
        },
        "opts": {}
      },
      {
        "content": "\\${${0:interpolation${VISUAL}}\\}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "int \"${interpolation}\"": true
        },
        "opts": {}
      },
      {
        "content": "\\${${0:interpolation${VISUAL}}!\"${1:default_string}\"\\}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "intd \"${interpolation!\"default_string\"}\"": true
        },
        "opts": {}
      },
      {
        "content": "<#-- ${0:comment${VISUAL}} -->",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "com \"<#-- comment -->\"": true
        },
        "opts": {}
      },
      {
        "content": "<#assign ${1:variable_name} = ${0:value${VISUAL}} />",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ass \"<#assign variable_name = value />\"": true
        },
        "opts": {}
      },
      {
        "content": "<#assign\n\t${1:variable_name} = ${0:value${VISUAL}}\n/>",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "assm \"<#assign <#-- multiple lines --> />\"": true
        },
        "opts": {}
      },
      {
        "content": "<#local ${1:variable_name} = ${0:value${VISUAL}} />",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "loc \"<#local variable_name = value />\"": true
        },
        "opts": {}
      },
      {
        "content": "<#local\n\t${1:variable_name} = ${0:value${VISUAL}}\n/>",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "locm \"<#local <#-- multiple lines --> />\"": true
        },
        "opts": {}
      },
      {
        "content": "<#include \"${0:file.ftl${VISUAL}}\" />",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "inc \"<#include \\\"file.ftl\\\" />\"": true
        },
        "opts": {}
      },
      {
        "content": "<#if ${1:true}>\n\t${0:${VISUAL}}\n</#if>",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "if \"<#if condition>...</#if>\"": true
        },
        "opts": {}
      },
      {
        "content": "<#if ${1:true}>\n\t${0:${VISUAL}}\n<#else>\n\t${2}\n</#if>",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ife \"<#if condition>...<#else>...</#if>\"": true
        },
        "opts": {}
      },
      {
        "content": "<#list ${1:sequence} as ${2:element}>\n\t${0:${VISUAL}}\n</#list>",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "lis \"<#list sequence as element>...</#list>\"": true
        },
        "opts": {}
      },
      {
        "content": "<#list ${1:hashmap}?keys as ${2:key}>\n\t\\${$2\\}: \\${$1[$2]\\}${0:${VISUAL}}\n</#list>",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "lish \"<#list hashmap?keys as element>...</#list>\"": true
        },
        "opts": {}
      },
      {
        "content": "<#macro ${1:macro_name} ${2:param1}>\n\t${0:${VISUAL}}\n</#macro>",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "mac \"<#macro macro_name param1>...</#macro>\"": true
        },
        "opts": {}
      },
      {
        "content": "<#function ${1:function_name} ${2:param1}>\n\t${0:${VISUAL}}\n</#function>",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "fun \"<#function function_name param1>...</#function>\"": true
        },
        "opts": {}
      },
      {
        "content": "<#attempt>\n\t${0:${VISUAL}}\n<#recover>\n</#attempt>",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "att \"<#attempt>...<#recover></#attempt>\"": true
        },
        "opts": {}
      },
      {
        "content": "?then(${1:true}, ${0:false${VISUAL}})",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "?th \"?then(true, false)\"": true
        },
        "opts": {}
      }
    ],
    "fsharp": [
      {
        "content": "if ${1:TARGET}\nthen ${2}\nelse ${0}",
        "doc": "",
        "grammar": "snu",
        "label": "if..then..else",
        "matches": {
          "If": true
        },
        "opts": {
          "head": true
        }
      },
      {
        "content": "if ${1:TARGET} then ${2} else ${0}",
        "doc": "",
        "grammar": "snu",
        "label": "if..then..else - oneline",
        "matches": {
          "if": true
        },
        "opts": {
          "head": true
        }
      },
      {
        "content": "match ${1:TARGET} with\n| ${2} -> ${0}",
        "doc": "",
        "grammar": "snu",
        "label": "match",
        "matches": {
          "match": true
        },
        "opts": {}
      },
      {
        "content": "(fun ${1:x} -> ${2:x})",
        "doc": "",
        "grammar": "snu",
        "label": "(fun x -> ..)",
        "matches": {
          "fun": true
        },
        "opts": {
          "head": true
        }
      },
      {
        "content": "[| ${0:TARGET} |]",
        "doc": "",
        "grammar": "snu",
        "label": "array literal [| |]",
        "matches": {
          "arl": true
        },
        "opts": {}
      },
      {
        "content": "[<${0:TARGET}>]",
        "doc": "",
        "grammar": "snu",
        "label": "attribute [<..>]",
        "matches": {
          "att": true
        },
        "opts": {
          "head": true
        }
      },
      {
        "content": "#if ${1}\n  ${2:TARGET}\n#endif",
        "doc": "",
        "grammar": "snu",
        "label": "#if .. #endif",
        "matches": {
          "#if": true
        },
        "opts": {
          "head": true
        }
      },
      {
        "content": "#if ${1}\n  ${2}\nelse\n  #{3}\n#endif",
        "doc": "",
        "grammar": "snu",
        "label": "#if .. else .. #endif",
        "matches": {
          "#ife": true
        },
        "opts": {
          "head": true
        }
      },
      {
        "content": "__SOURCE_DIRECTORY__",
        "doc": "",
        "grammar": "snu",
        "label": "__SOURCE_DIRECTORY__",
        "matches": {
          "sourced": true
        },
        "opts": {}
      },
      {
        "content": "__LINE__",
        "doc": "",
        "grammar": "snu",
        "label": "__LINE__",
        "matches": {
          "line": true
        },
        "opts": {}
      },
      {
        "content": "__SOURCE_FILE__",
        "doc": "",
        "grammar": "snu",
        "label": "__FILE__",
        "matches": {
          "sourcef": true
        },
        "opts": {}
      },
      {
        "content": "/// ${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "doc": true
        },
        "opts": {}
      },
      {
        "content": "// ${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "comment": true
        },
        "opts": {}
      },
      {
        "content": "let ${1} = ${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "let": true
        },
        "opts": {}
      },
      {
        "content": "[<Literal>]\nlet ${1} = ${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "lit": true
        },
        "opts": {}
      },
      {
        "content": "type ${1} = { ${0} }",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "rec": true
        },
        "opts": {}
      },
      {
        "content": "{| ${0} |}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "arec": true
        },
        "opts": {}
      },
      {
        "content": "let ${1} =\n\t${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "fn": true
        },
        "opts": {}
      },
      {
        "content": "let rec ${1} =\n\t${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "fnr": true
        },
        "opts": {}
      },
      {
        "content": "(fun ${1} -> ${0})",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "lam": true
        },
        "opts": {}
      },
      {
        "content": "module ${1} =\n\t${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "mod": true
        },
        "opts": {}
      },
      {
        "content": "for ${1} in ${2} do\n\t${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "for": true
        },
        "opts": {}
      },
      {
        "content": "if ${1} then\n\t${2}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "if": true
        },
        "opts": {}
      },
      {
        "content": "if ${1} then\n\t${2}\nelse\n\t${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ife": true
        },
        "opts": {}
      },
      {
        "content": "if ${1} then\n\t${2}\nelif ${3} then\n\t${4}\nelse\n\t${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ifee": true
        },
        "opts": {}
      },
      {
        "content": "elif ${1} then\n\t${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "eif": true
        },
        "opts": {}
      },
      {
        "content": "else\n\t${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "el": true
        },
        "opts": {}
      },
      {
        "content": "try\n\t${1}\nwith ${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "try": true
        },
        "opts": {}
      },
      {
        "content": "match ${1} with\n| ${2} -> ${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "match": true
        },
        "opts": {}
      },
      {
        "content": "| ${1} -> ${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "|": true
        },
        "opts": {}
      },
      {
        "content": "|> ${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "p": true
        },
        "opts": {}
      },
      {
        "content": "printfn \"${1}\" ${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "pr": true
        },
        "opts": {}
      },
      {
        "content": "printfn \\$\"${0}\"",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "pri": true
        },
        "opts": {}
      },
      {
        "content": "|> Array.map (fun ${1} -> ${0})",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "amap": true
        },
        "opts": {}
      },
      {
        "content": "|> List.map (fun ${1} -> ${0})",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "lmap": true
        },
        "opts": {}
      },
      {
        "content": "|> Seq.map (fun ${1} -> ${0})",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "smap": true
        },
        "opts": {}
      },
      {
        "content": "|> Array.map (fun x -> printfn \"%A\" x; x) // tap",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "atap": true
        },
        "opts": {}
      },
      {
        "content": "|> List.map (fun x -> printfn \"%A\" x; x) // tap",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ltap": true
        },
        "opts": {}
      },
      {
        "content": "|> Seq.map (fun x -> printfn \"%A\" x; x) // tap",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "stap": true
        },
        "opts": {}
      },
      {
        "content": "[<EntryPoint>]\nlet main argv =\n\t${0}\n\t0",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "main": true
        },
        "opts": {}
      }
    ],
    "gatsby": [
      {
        "content": "import { graphql } from 'gatsby';",
        "doc": null,
        "grammar": "lsp",
        "label": "gatsby-graphql-import",
        "matches": {
          "gatsby import graphql": true
        },
        "opts": {}
      },
      {
        "content": "import { useStaticQuery, graphql } from \"gatsby\"",
        "doc": null,
        "grammar": "lsp",
        "label": "gatsby-usestaticquery-import",
        "matches": {
          "gatsby import usestaticquery": true
        },
        "opts": {}
      },
      {
        "content": "const {${1:site}} = useStaticQuery(\n  graphql`${2:query}`\n);",
        "doc": null,
        "grammar": "lsp",
        "label": "gatsby-usestatic-query",
        "matches": {
          "gatsby usestaticquery": true
        },
        "opts": {}
      },
      {
        "content": "export const query = graphql`${1:query}`;",
        "doc": "Gatsby uses the concept of a page query, which is a query for a specific page in a site.Note that you can only have one page query per file.",
        "grammar": "lsp",
        "label": "gatsby-export-query",
        "matches": {
          "gatsby export query": true
        },
        "opts": {}
      },
      {
        "content": "<Link to=\"${1:/blog}\">${2:Text}</Link>",
        "doc": null,
        "grammar": "lsp",
        "label": "gatsby-link",
        "matches": {
          "gatsby link": true
        },
        "opts": {}
      },
      {
        "content": "<Link to=\"${1:/blog}\" activeStyle={{ ${2:color}: \"${3:red}\" }} >Text</Link>",
        "doc": null,
        "grammar": "lsp",
        "label": "gatsby-link-activestyle",
        "matches": {
          "gatsby link activestyle": true
        },
        "opts": {}
      },
      {
        "content": "<Link to=\"${1:/blog}\" activeClassName={\"${2:myActiveClassName}\"} >Text</Link>",
        "doc": null,
        "grammar": "lsp",
        "label": "gatsby-link-activeclassname",
        "matches": {
          "gatsby link activeclassname": true
        },
        "opts": {}
      },
      {
        "content": "import { Link } from \"gatsby\"",
        "doc": null,
        "grammar": "lsp",
        "label": "gatsby-link-import",
        "matches": {
          "gatsby link import": true
        },
        "opts": {}
      }
    ],
    "gatsby-image": [
      {
        "content": "const {\n  ${1:queryName}: { childImageSharp: {fluid: ${2:imageFluid}}}\n} = useStaticQuery(graphql`\n  query {\n    ${1:queryName}: file(relativePath: { eq: \"${3:imagePath.png}\" }) {\n      childImageSharp {\n        fluid(maxWidth: ${4:300}) {\n          ...${5|GatsbyImageSharpFluid,GatsbyImageSharpFluid_noBase64,GatsbyImageSharpFluid_tracedSVG,GatsbyImageSharpFluid_withWebp,GatsbyImageSharpFluid_withWebp_noBase64,GatsbyImageSharpFluid_withWebp_tracedSVG|}\n        }\n      }\n    }\n  }\n`)",
        "doc": null,
        "grammar": "lsp",
        "label": "gatsby-image-usestaticquery-fluid",
        "matches": {
          "gatsby-image usestaticquery fluid": true
        },
        "opts": {}
      },
      {
        "content": "const {\n  ${1:queryName}: { childImageSharp: {fixed: ${2:imageFixed}}}\n} = useStaticQuery(graphql`\n  query {\n    ${1:queryName}: file(relativePath: { eq: \"${3:imagePath.png}\" }) {\n      childImageSharp {\n        fixed(width: ${4:300}) {\n          ...${5|GatsbyImageSharpFixed,GatsbyImageSharpFixed_noBase64,GatsbyImageSharpFixed_tracedSVG,GatsbyImageSharpFixed_withWebp,GatsbyImageSharpFixed_withWebp_noBase64,GatsbyImageSharpFixed_withWebp_tracedSVG|}\n        }\n      }\n    }\n  }\n`)",
        "doc": null,
        "grammar": "lsp",
        "label": "gatsby-image-usestaticquery-fixed",
        "matches": {
          "gatsby-image usestaticquery fixed": true
        },
        "opts": {}
      },
      {
        "content": "import ${1:Img} from 'gatsby-image';",
        "doc": null,
        "grammar": "lsp",
        "label": "gatsby-image-import",
        "matches": {
          "gatsby-image import": true
        },
        "opts": {}
      },
      {
        "content": "import ${1:Img} from \"gatsby-image/withIEPolyfill\"",
        "doc": null,
        "grammar": "lsp",
        "label": "gatsby-image-import-withiepolyfill",
        "matches": {
          "gatsby-image import withiepolyfill": true
        },
        "opts": {}
      }
    ],
    "gitcommit": [
      {
        "content": "Co-authored-by: ${1} <${2}>",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "co": true
        },
        "opts": {}
      },
      {
        "content": "fix(${1:scope}): ${2:title}\n\n${0:${VISUAL}}",
        "doc": null,
        "grammar": "snu",
        "label": "fix conventional commit",
        "matches": {
          "fix": true
        },
        "opts": {}
      },
      {
        "content": "feat(${1:scope}): ${2:title}\n\n${0:${VISUAL}}",
        "doc": null,
        "grammar": "snu",
        "label": "feat conventional commit",
        "matches": {
          "feat": true
        },
        "opts": {}
      },
      {
        "content": "chore(${1:scope}): ${2:title}\n\n${0:${VISUAL}}",
        "doc": null,
        "grammar": "snu",
        "label": "chore conventional commit",
        "matches": {
          "chore": true
        },
        "opts": {}
      },
      {
        "content": "docs(${1:scope}): ${2:title}\n\n${0:${VISUAL}}",
        "doc": null,
        "grammar": "snu",
        "label": "docs conventional commit",
        "matches": {
          "docs": true
        },
        "opts": {}
      },
      {
        "content": "improvement(${1:scope}): ${2:title}\n\n${0:${VISUAL}}",
        "doc": null,
        "grammar": "snu",
        "label": "improvement conventional commit",
        "matches": {
          "improvement": true
        },
        "opts": {}
      },
      {
        "content": "perf(${1:scope}): ${2:title}\n\n${0:${VISUAL}}",
        "doc": null,
        "grammar": "snu",
        "label": "perf conventional commit",
        "matches": {
          "perf": true
        },
        "opts": {}
      },
      {
        "content": "refactor(${1:scope}): ${2:title}\n\n${0:${VISUAL}}",
        "doc": null,
        "grammar": "snu",
        "label": "refactor conventional commit",
        "matches": {
          "refactor": true
        },
        "opts": {}
      },
      {
        "content": "test(${1:scope}): ${2:title}\n\n${0:${VISUAL}}",
        "doc": null,
        "grammar": "snu",
        "label": "test conventional commit",
        "matches": {
          "test": true
        },
        "opts": {}
      },
      {
        "content": "ci(${1:scope}): ${2:title}\n\n${0:${VISUAL}}",
        "doc": null,
        "grammar": "snu",
        "label": "ci conventional commit",
        "matches": {
          "ci": true
        },
        "opts": {}
      },
      {
        "content": "build(${1:scope}): ${2:title}\n\n${0:${VISUAL}}",
        "doc": null,
        "grammar": "snu",
        "label": "build conventional commit",
        "matches": {
          "build": true
        },
        "opts": {}
      }
    ],
    "gnuplot": [
      {
        "content": "set ${1:#:axis}range [${2:*}:${3:*}]",
        "doc": "",
        "grammar": "snu",
        "label": "set x/y range.",
        "matches": {
          "range": true
        },
        "opts": {
          "head": true
        }
      },
      {
        "content": "set xrange [${1:*}:${2:*}]",
        "doc": "",
        "grammar": "snu",
        "label": "set xrange [X1:X2]",
        "matches": {
          "xrange": true
        },
        "opts": {
          "head": true
        }
      },
      {
        "content": "set yrange [${1:*}:${2:*}]",
        "doc": "",
        "grammar": "snu",
        "label": "set yrange [Y1:Y2]",
        "matches": {
          "yrange": true
        },
        "opts": {
          "head": true
        }
      },
      {
        "content": "set title ${1:#:title}",
        "doc": "",
        "grammar": "snu",
        "label": "set title '...'",
        "matches": {
          "title": true
        },
        "opts": {
          "head": true
        }
      },
      {
        "content": "set ${1:#:axis}label ${2:#:label}",
        "doc": "",
        "grammar": "snu",
        "label": "set title '...'",
        "matches": {
          "labelaxis": true
        },
        "opts": {
          "head": true
        }
      },
      {
        "content": "set ${1:#:axis}tics ${2:#:start}, ${3:#:incr}, ${4:#:end}",
        "doc": "",
        "grammar": "snu",
        "label": "set x/y tics start, incr, end",
        "matches": {
          "tics": true
        },
        "opts": {
          "head": true
        }
      },
      {
        "content": "set xtics ${1:#:start}, ${2:#:incr}, ${3:#:end}",
        "doc": "",
        "grammar": "snu",
        "label": "set xtics start, incr, end",
        "matches": {
          "xtics": true
        },
        "opts": {
          "head": true
        }
      },
      {
        "content": "set ytics ${1:#:start}, ${2:#:incr}, ${3:#:end}",
        "doc": "",
        "grammar": "snu",
        "label": "set ytics start, incr, end",
        "matches": {
          "ytics": true
        },
        "opts": {
          "head": true
        }
      },
      {
        "content": "set datafile separator '${1:#:separator}'",
        "doc": "",
        "grammar": "snu",
        "label": "set datafile separator 'separator'",
        "matches": {
          "datasep": true
        },
        "opts": {
          "head": true
        }
      },
      {
        "content": "set terminal ${1:#:terminal}",
        "doc": "",
        "grammar": "snu",
        "label": "set terminal",
        "matches": {
          "term": true
        },
        "opts": {
          "head": true
        }
      },
      {
        "content": "set output '${1:#:filename}'",
        "doc": "",
        "grammar": "snu",
        "label": "set output 'filename'",
        "matches": {
          "out": true
        },
        "opts": {
          "head": true
        }
      },
      {
        "content": "set key",
        "doc": "",
        "grammar": "snu",
        "label": "set key",
        "matches": {
          "key": true
        },
        "opts": {
          "head": true
        }
      },
      {
        "content": "unset key",
        "doc": "",
        "grammar": "snu",
        "label": "unset key",
        "matches": {
          "key!": true
        },
        "opts": {
          "head": true
        }
      },
      {
        "content": "set grid",
        "doc": "",
        "grammar": "snu",
        "label": "set grid",
        "matches": {
          "grid": true
        },
        "opts": {
          "head": true
        }
      },
      {
        "content": "unset grid",
        "doc": "",
        "grammar": "snu",
        "label": "unset grid",
        "matches": {
          "grid!": true
        },
        "opts": {
          "head": true
        }
      },
      {
        "content": "set border",
        "doc": "",
        "grammar": "snu",
        "label": "set border",
        "matches": {
          "border": true
        },
        "opts": {
          "head": true
        }
      },
      {
        "content": "print(${1:#:string}}",
        "doc": "",
        "grammar": "snu",
        "label": "print",
        "matches": {
          "print": true
        },
        "opts": {
          "head": true
        }
      },
      {
        "content": "sprintf('${1:#:format}', ${2:#:vars})",
        "doc": "",
        "grammar": "snu",
        "label": "sprintf",
        "matches": {
          "sprintf": true
        },
        "opts": {
          "head": true
        }
      },
      {
        "content": "set multiplot\n${1:#:plot code}\nunset multiplot",
        "doc": "",
        "grammar": "snu",
        "label": "set multiplot ... unset multiplot",
        "matches": {
          "multiplot": true
        },
        "opts": {
          "head": true
        }
      },
      {
        "content": "if (${1:#:condition}) {\n    ${2:#:commands}\n}",
        "doc": "",
        "grammar": "snu",
        "label": "if (...) {...}",
        "matches": {
          "if": true
        },
        "opts": {
          "head": true
        }
      },
      {
        "content": "else {\n    ${1:#:commands}\n}",
        "doc": "",
        "grammar": "snu",
        "label": "else {...}",
        "matches": {
          "else": true
        },
        "opts": {
          "head": true
        }
      },
      {
        "content": "if (${1:#:condition}) {\n    ${2:#:commands}\n} else {\n    ${3:#:commands}\n}",
        "doc": "",
        "grammar": "snu",
        "label": "if (...) {...} else {...}",
        "matches": {
          "ifelse": true
        },
        "opts": {
          "head": true
        }
      },
      {
        "content": "while (${1:#:expression}) {\n    ${2:#:commands}\n}",
        "doc": "",
        "grammar": "snu",
        "label": "while (...) {...}",
        "matches": {
          "while": true
        },
        "opts": {
          "head": true
        }
      },
      {
        "content": "do for ${1:#:iter} {\n    ${2:#:commands}\n}",
        "doc": "",
        "grammar": "snu",
        "label": "do for <iter> {...}",
        "matches": {
          "do": true
        },
        "opts": {
          "head": true
        }
      },
      {
        "content": "for [${1:str} in '${2:#:string list}']",
        "doc": "",
        "grammar": "snu",
        "label": "for [string in \"A B C...\"]",
        "matches": {
          "fors": true
        },
        "opts": {
          "head": true
        }
      },
      {
        "content": "for [${1:i} = ${2:#:start}, ${3:#:end}, ${4:1}",
        "doc": "",
        "grammar": "snu",
        "label": "for [intvar = start, end, incr]",
        "matches": {
          "fori": true
        },
        "opts": {
          "head": true
        }
      },
      {
        "content": "set logscale ${1:#:axis}",
        "doc": "",
        "grammar": "snu",
        "label": "set logscale <axis>",
        "matches": {
          "logscale": true
        },
        "opts": {
          "head": true
        }
      }
    ],
    "go": [
      {
        "content": "package main\nimport (\n  \"fmt\"\n)\nfunc main() {\n  fmt.Printf(\"Hello, world\\n\")\n}",
        "doc": "",
        "grammar": "snu",
        "label": "package main\\nimport fmt...",
        "matches": {
          "helloworld": true
        },
        "opts": {
          "head": true
        }
      },
      {
        "content": "func ${1:fname}(${2}) ${3:int }{\n  ${0:TARGET:return }\n}",
        "doc": "",
        "grammar": "snu",
        "label": "func ...() { ... }",
        "matches": {
          "fn": true,
          "func": true
        },
        "opts": {
          "head": true
        }
      },
      {
        "content": "import (\n  \"${1:fmt}\"\n)\n${0:TARGET}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "im": true,
          "import": true
        },
        "opts": {
          "head": true
        }
      },
      {
        "content": "package ${1:main}\n${0:TARGET}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "package": true,
          "pk": true
        },
        "opts": {
          "head": true
        }
      },
      {
        "content": "fmt.Printf(\"${1}\\n\"${2:})",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "pf": true,
          "printf": true
        },
        "opts": {
          "head": true
        }
      },
      {
        "content": "fmt.Println(${0:TARGET})",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "pl": true,
          "println": true
        },
        "opts": {
          "head": true
        }
      },
      {
        "content": "type ${1} struct {\n  ${0:TARGET}\n}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "struct": true,
          "ts": true
        },
        "opts": {
          "head": true
        }
      },
      {
        "content": "type ${1} interface {\n  ${0:TARGET}\n}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "interface": true,
          "ti": true
        },
        "opts": {
          "head": true
        }
      },
      {
        "content": "for ${1} {\n  ${0:TARGET}\n}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "for": true
        },
        "opts": {
          "head": true
        }
      },
      {
        "content": "for ${1:v} := range ${2:#:iterator} {\n  ${0:TARGET}\n}",
        "doc": "",
        "grammar": "snu",
        "label": "for range",
        "matches": {
          "range": true
        },
        "opts": {
          "head": true
        }
      },
      {
        "content": "if ${1:#:condition} {\n  ${0:TARGET}\n}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "if": true
        },
        "opts": {
          "head": true
        }
      },
      {
        "content": "switch ${1:#:v} {\ncase ${2:#:condition}:\n  ${0:TARGET}\n}",
        "doc": "",
        "grammar": "snu",
        "label": "switch {}",
        "matches": {
          "switch": true
        },
        "opts": {
          "head": true
        }
      },
      {
        "content": "select {\ncase ${1:#:condition}:\n  ${0:TARGET}\n}",
        "doc": "",
        "grammar": "snu",
        "label": "select {}",
        "matches": {
          "select": true
        },
        "opts": {
          "head": true
        }
      },
      {
        "content": "case ${1:#:condition}:\n  ${2:TARGET}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "case": true
        },
        "opts": {
          "head": true
        }
      },
      {
        "content": "func Test${1} (${2:t *testing.T}) {\n  for i := 0; i < ${3:t.N}; i++ {\n    ${4}\n  }\n}",
        "doc": "",
        "grammar": "snu",
        "label": "func Test... (t *testing.T) { ... }",
        "matches": {
          "funcTest": true
        },
        "opts": {
          "head": true
        }
      },
      {
        "content": "func Benchmark${1} (${2:b *testing.B}) {\n  for i := 0; i < ${3:b.N}; i++ {\n    ${4}\n  }\n}",
        "doc": "",
        "grammar": "snu",
        "label": "func Benchmark... (b *testing.B) { ... }",
        "matches": {
          "funcbench": true
        },
        "opts": {
          "head": true
        }
      },
      {
        "content": "var tests = []struct {\n    name string\n    expected string\n    given string\n}{\n    {\"${2}\", \"${3}\", \"${4}\",},\n}\nfor _, tt := range tests {\n    tt := tt\n    t.Run(tt.name, func(t *testing.T){\n        actual := ${1:Function}(tt.given)\n        if actual != tt.expected {\n            t.Errorf(\"given(%s): expected %s, actual %s\", tt.given, tt.expected, actual)\n        }\n    })\n}",
        "doc": "",
        "grammar": "snu",
        "label": "var test = {...}{...} for {t.Run(){...}}",
        "matches": {
          "testtable": true
        },
        "opts": {
          "head": true
        }
      },
      {
        "content": "${1} := ${0}",
        "doc": "",
        "grammar": "snu",
        "label": "v := value",
        "matches": {
          ":": true
        },
        "opts": {}
      },
      {
        "content": "${1:fn} := func() {\n\t${0}\n}",
        "doc": "",
        "grammar": "snu",
        "label": "fn := func() { ... }",
        "matches": {
          "anon": true
        },
        "opts": {}
      },
      {
        "content": "append(${1:slice}, ${0:value})",
        "doc": "",
        "grammar": "snu",
        "label": "append(slice, value)",
        "matches": {
          "ap": true
        },
        "opts": {}
      },
      {
        "content": "${1:slice} = append($1, ${0:value})",
        "doc": "",
        "grammar": "snu",
        "label": "slice = append(slice, value)",
        "matches": {
          "ap=": true
        },
        "opts": {}
      },
      {
        "content": "break",
        "doc": "",
        "grammar": "snu",
        "label": "break",
        "matches": {
          "br": true
        },
        "opts": {}
      },
      {
        "content": "chan ${0:int}",
        "doc": "",
        "grammar": "snu",
        "label": "chan Type",
        "matches": {
          "ch": true
        },
        "opts": {}
      },
      {
        "content": "case ${1:value}:\n\t${0}",
        "doc": "",
        "grammar": "snu",
        "label": "case ...:",
        "matches": {
          "case": true
        },
        "opts": {}
      },
      {
        "content": "const ${1:NAME} ${2:Type} = ${0:0}",
        "doc": "",
        "grammar": "snu",
        "label": "const XXX Type = ...",
        "matches": {
          "con": true
        },
        "opts": {}
      },
      {
        "content": "const (\n\t${1:NAME} ${2:Type} = ${3:value}\n\t${0}\n)",
        "doc": "",
        "grammar": "snu",
        "label": "const ( ... )",
        "matches": {
          "cons": true
        },
        "opts": {}
      },
      {
        "content": "const (\n\t${1:NAME} ${2:Type} = iota\n\t${0}\n)",
        "doc": "",
        "grammar": "snu",
        "label": "const ( ... = iota )",
        "matches": {
          "iota": true
        },
        "opts": {}
      },
      {
        "content": "continue",
        "doc": "",
        "grammar": "snu",
        "label": "continue",
        "matches": {
          "cn": true
        },
        "opts": {}
      },
      {
        "content": "default:\n\t${0}",
        "doc": "",
        "grammar": "snu",
        "label": "default: ...",
        "matches": {
          "default": true
        },
        "opts": {}
      },
      {
        "content": "defer ${1:func}(${2})\n${0}",
        "doc": "",
        "grammar": "snu",
        "label": "defer someFunction()",
        "matches": {
          "df": true
        },
        "opts": {}
      },
      {
        "content": "defer func() {\n\t${0}\n}()",
        "doc": "",
        "grammar": "snu",
        "label": "defer func() { ... }",
        "matches": {
          "def": true
        },
        "opts": {}
      },
      {
        "content": "defer func() {\n\tif err := recover(); err != nil {\n\t\t${0}\n\t}\n}()",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "defr": true
        },
        "opts": {}
      },
      {
        "content": "import (\n\t\"${1:package}\"\n)",
        "doc": "",
        "grammar": "snu",
        "label": "import ( ... )",
        "matches": {
          "import": true
        },
        "opts": {}
      },
      {
        "content": "type ${1:Interface} interface {\n\t${2:/* TODO: add methods */}\n}",
        "doc": "",
        "grammar": "snu",
        "label": "interface I { ... }",
        "matches": {
          "interface": true
        },
        "opts": {}
      },
      {
        "content": "if ${1:condition} {\n\t${0}\n}",
        "doc": "",
        "grammar": "snu",
        "label": "else { ... }",
        "matches": {
          "if": true
        },
        "opts": {}
      },
      {
        "content": "else {\n\t${0}\n}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "else": true
        },
        "opts": {}
      },
      {
        "content": "if err := ${1:condition}; err != nil {\n\t${0}\n}",
        "doc": "",
        "grammar": "snu",
        "label": "if err := ...; err != nil { ... }",
        "matches": {
          "ife": true
        },
        "opts": {}
      },
      {
        "content": "if err != nil {\n\treturn err\n}\n${0}",
        "doc": "",
        "grammar": "snu",
        "label": "if err != nil { return err }",
        "matches": {
          "errn": true
        },
        "opts": {}
      },
      {
        "content": "if err != nil {\n\tt.Fatal(err)\n}",
        "doc": "",
        "grammar": "snu",
        "label": "if err != nil { t.Fatal(err) }",
        "matches": {
          "errt": true
        },
        "opts": {}
      },
      {
        "content": "if err != nil {\n\tlog.Fatal(err)\n}",
        "doc": "",
        "grammar": "snu",
        "label": "if err != nil { log.Fatal(err) }",
        "matches": {
          "errl": true
        },
        "opts": {}
      },
      {
        "content": "if err != nil {\n\treturn ${1:nil}, err\n}\n${0}",
        "doc": "",
        "grammar": "snu",
        "label": "if err != nil { return [...], err }",
        "matches": {
          "errn,": true
        },
        "opts": {}
      },
      {
        "content": "if err != nil {\n\t${1}\n\treturn\n}\n${0}",
        "doc": "",
        "grammar": "snu",
        "label": "if err != nil { ... return }",
        "matches": {
          "errh": true
        },
        "opts": {}
      },
      {
        "content": "if err != nil {\n\tpanic(${1})\n}\n${0}",
        "doc": "",
        "grammar": "snu",
        "label": "if err != nil { panic(...) }",
        "matches": {
          "errp": true
        },
        "opts": {}
      },
      {
        "content": "fallthrough",
        "doc": "",
        "grammar": "snu",
        "label": "fallthrough",
        "matches": {
          "ft": true
        },
        "opts": {}
      },
      {
        "content": "for ${1} {\n\t${0}\n}",
        "doc": "",
        "grammar": "snu",
        "label": "for ... { ... }",
        "matches": {
          "for": true
        },
        "opts": {}
      },
      {
        "content": "for ${1:i} := 0; $1 < ${2:N}; $1++ {\n\t${0}\n}",
        "doc": "",
        "grammar": "snu",
        "label": "for 0..N-1 { ... }",
        "matches": {
          "fori": true
        },
        "opts": {}
      },
      {
        "content": "for ${2:k}, ${3:v} := range ${1} {\n\t${0}\n}",
        "doc": "",
        "grammar": "snu",
        "label": "for k, v := range items { ... }",
        "matches": {
          "forr": true
        },
        "opts": {}
      },
      {
        "content": "func ${1:function}(${2}) ${3:error }{\n\t${0}\n}",
        "doc": "",
        "grammar": "snu",
        "label": "func function(...) [error] { ... }",
        "matches": {
          "func": true
        },
        "opts": {}
      },
      {
        "content": "fmt.Printf(\"${1} = %+v\\n\", $1)\n${0}",
        "doc": "",
        "grammar": "snu",
        "label": "fmt.Printf(...)",
        "matches": {
          "ff": true
        },
        "opts": {}
      },
      {
        "content": "fmt.Println(\"${1}\")",
        "doc": "",
        "grammar": "snu",
        "label": "fmt.Println(...)",
        "matches": {
          "fn": true
        },
        "opts": {}
      },
      {
        "content": "fmt.Errorf(\"${1}\")",
        "doc": "",
        "grammar": "snu",
        "label": "fmt.Errorf(...)",
        "matches": {
          "fe": true
        },
        "opts": {}
      },
      {
        "content": "log.Printf(\"${1} = %+v\\n\", $1)",
        "doc": "",
        "grammar": "snu",
        "label": "log.Printf(...)",
        "matches": {
          "lf": true
        },
        "opts": {}
      },
      {
        "content": "log.Println(\"${1}\")",
        "doc": "",
        "grammar": "snu",
        "label": "log.Println(...)",
        "matches": {
          "ln": true
        },
        "opts": {}
      },
      {
        "content": "make(${1:[]string}, ${2:0})${0}",
        "doc": "",
        "grammar": "snu",
        "label": "make(Type, size)",
        "matches": {
          "make": true
        },
        "opts": {}
      },
      {
        "content": "map[${1:string}]${0:int}",
        "doc": "",
        "grammar": "snu",
        "label": "map[Type]Type",
        "matches": {
          "map": true
        },
        "opts": {}
      },
      {
        "content": "func main() {\n\t${0}\n}",
        "doc": "",
        "grammar": "snu",
        "label": "func main() { ... }",
        "matches": {
          "main": true
        },
        "opts": {
          "head": true
        }
      },
      {
        "content": "func (${1:self} ${2:Type}) ${3:Do}(${4}) ${5:error }{\n\t${0}\n}",
        "doc": "",
        "grammar": "snu",
        "label": "func (self Type) Method(...) [error] { ... }",
        "matches": {
          "meth": true
        },
        "opts": {}
      },
      {
        "content": "if !ok {\n\t${0}\n}",
        "doc": "",
        "grammar": "snu",
        "label": "if !ok { ... }",
        "matches": {
          "ok": true
        },
        "opts": {}
      },
      {
        "content": "// Package $1 provides ${2:...}\npackage ${1:main}\n${0}",
        "doc": "",
        "grammar": "snu",
        "label": "package ...",
        "matches": {
          "package": true
        },
        "opts": {}
      },
      {
        "content": "panic(\"${0}\")",
        "doc": "",
        "grammar": "snu",
        "label": "panic(\"...\")",
        "matches": {
          "panic": true,
          "pn": true
        },
        "opts": {}
      },
      {
        "content": "return ${0}",
        "doc": "",
        "grammar": "snu",
        "label": "return ...",
        "matches": {
          "return": true,
          "rt": true
        },
        "opts": {}
      },
      {
        "content": "select {\ncase ${1:v1} := <-${2:chan1}\n\t${0}\n}",
        "doc": "",
        "grammar": "snu",
        "label": "select { case a := <-chan: ... }",
        "matches": {
          "select": true
        },
        "opts": {}
      },
      {
        "content": "type ${1:Type} struct {\n\t${0}\n}",
        "doc": "",
        "grammar": "snu",
        "label": "type T struct { ... }",
        "matches": {
          "st": true
        },
        "opts": {}
      },
      {
        "content": "switch ${1:var} {\ncase ${2:value1}:\n\t${0}\n}",
        "doc": "",
        "grammar": "snu",
        "label": "switch x { ... }",
        "matches": {
          "switch": true
        },
        "opts": {}
      },
      {
        "content": "fmt.Sprintf(\"%${1:s}\", ${2:var})",
        "doc": "",
        "grammar": "snu",
        "label": "fmt.Sprintf(...)",
        "matches": {
          "sp": true
        },
        "opts": {}
      },
      {
        "content": "go ${1:funcName}(${0})",
        "doc": "",
        "grammar": "snu",
        "label": "go someFunc(...)",
        "matches": {
          "go": true
        },
        "opts": {}
      },
      {
        "content": "go func(${1}) {\n\t${3:/* TODO */}\n}(${2})",
        "doc": "",
        "grammar": "snu",
        "label": "go func(...) { ... }(...)",
        "matches": {
          "gof": true
        },
        "opts": {}
      },
      {
        "content": "func Test${1:Function}(t *testing.T) {\n\t${0}\n}",
        "doc": "",
        "grammar": "snu",
        "label": "func TestXYZ(t *testing.T) { ... }",
        "matches": {
          "test": true
        },
        "opts": {}
      },
      {
        "content": "t.Run(\"${0}\", func(t *testing.T){\n})",
        "doc": "",
        "grammar": "snu",
        "label": "t.Run(\"test name\", func(t *testing.T){ ... })",
        "matches": {
          "tr": true
        },
        "opts": {}
      },
      {
        "content": "var tests = []struct {\n    name string\n    expected string\n    given string\n}{\n    {\"${2}\", \"${3}\", \"${4}\",},\n}\nfor _, tt := range tests {\n    tt := tt\n    t.Run(tt.name, func(t *testing.T){\n        actual := ${1:Function}(tt.given)\n        if actual != tt.expected {\n            t.Errorf(\"given(%s): expected %s, actual %s\", tt.given, tt.expected, actual)\n        }\n    })\n}",
        "doc": "",
        "grammar": "snu",
        "label": "var test = {...}{...} for {t.Run(){...}}",
        "matches": {
          "tt": true
        },
        "opts": {}
      },
      {
        "content": "if err != nil {\n  t.Errorf(\"${1}\")\n}",
        "doc": "",
        "grammar": "snu",
        "label": "if err != nil { t.Errorf(...) }",
        "matches": {
          "ter": true
        },
        "opts": {}
      },
      {
        "content": "if err != nil {\n  t.Fatalf(\"${1}\")\n}",
        "doc": "",
        "grammar": "snu",
        "label": "if err != nil { t.Fatalf(...) }",
        "matches": {
          "terf": true
        },
        "opts": {}
      },
      {
        "content": "func Example${1:Method}() {\n\t${0}\n\t// Output:\n}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "example": true
        },
        "opts": {}
      },
      {
        "content": "func Benchmark${1:Method}(b *testing.B) {\n\tfor i := 0; i < b.N; i++ {\n\t\t${0}\n\t}\n}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "benchmark": true
        },
        "opts": {}
      },
      {
        "content": "if !reflect.DeepEqual(${1:expected}, ${2:actual}) {\n\t_, file, line, _ := runtime.Caller(0)\n\tfmt.Printf(\"%s:%d:\\n\\n\\texp: %#v\\n\\n\\tgot: %#v\\n\\n\", filepath.Base(file), line, $1, $2)\n\tt.FailNow()\n}",
        "doc": "",
        "grammar": "snu",
        "label": "equals: test two identifiers with DeepEqual",
        "matches": {
          "eq": true
        },
        "opts": {}
      },
      {
        "content": "func ${1:handler}(w http.ResponseWriter, r *http.Request) {\n  ${0:fmt.Fprintf(w, \"hello world\")}\n}",
        "doc": "",
        "grammar": "snu",
        "label": "http.HandlerFunc",
        "matches": {
          "hf": true
        },
        "opts": {}
      },
      {
        "content": "${1:http}.HandleFunc(\"${2:/}\", func(w http.ResponseWriter, r *http.Request) {\n  ${0:fmt.Fprintf(w, \"hello world\")}\n})",
        "doc": "",
        "grammar": "snu",
        "label": "mux.HandleFunc(...)",
        "matches": {
          "hhf": true
        },
        "opts": {}
      },
      {
        "content": "${1} := ${2}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "v \"shorthand variable declaration\"": true
        },
        "opts": {}
      },
      {
        "content": "var ${1:t} ${0:string}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "vr \"variable initialization\"": true
        },
        "opts": {}
      },
      {
        "content": "var ${1} ${2} = ${3}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "var \"variable declaration\"": true
        },
        "opts": {}
      },
      {
        "content": "var (\n\t${1} ${2} = ${3}\n)",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "vars \"variables declaration\"": true
        },
        "opts": {}
      },
      {
        "content": "append(${1:slice}, ${0:value})",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ap \"append\"": true
        },
        "opts": {}
      },
      {
        "content": "bool",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "bl \"bool\"": true
        },
        "opts": {}
      },
      {
        "content": "byte",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "bt \"byte\"": true
        },
        "opts": {}
      },
      {
        "content": "break",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "br \"break\"": true
        },
        "opts": {}
      },
      {
        "content": "chan ${0:int}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ch \"channel\"": true
        },
        "opts": {}
      },
      {
        "content": "case ${1:value}:\n\t${0:${VISUAL}}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "cs \"case\"": true
        },
        "opts": {}
      },
      {
        "content": "const (\n\t${1:NAME1} = iota\n\t${0:NAME2}\n)",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "co \"constants with iota\"": true
        },
        "opts": {}
      },
      {
        "content": "continue",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "cn \"continue\"": true
        },
        "opts": {}
      },
      {
        "content": "defer ${0:func}()",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "df \"defer\"": true
        },
        "opts": {}
      },
      {
        "content": "defer func() {\n\tif err := recover(); err != nil {\n\t\t${0:${VISUAL}}\n\t}\n}()",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "dfr \"defer recover\"": true
        },
        "opts": {}
      },
      {
        "content": "import (\n\t\"${1:package}\"\n)",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "im \"import\"": true
        },
        "opts": {}
      },
      {
        "content": "interface{}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "in \"interface\"": true
        },
        "opts": {}
      },
      {
        "content": "interface ${1:name} {\n\t${2:/* methods */}\n}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "inf \"full interface \"": true
        },
        "opts": {}
      },
      {
        "content": "if ${1:/* condition */} {\n\t${2:${VISUAL}}\n}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "if \"if condition\"": true
        },
        "opts": {}
      },
      {
        "content": "if ${1:/* condition */} {\n\t${2:${VISUAL}}\n} else {\n\t${0}\n}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ife \"if else condition\"": true
        },
        "opts": {}
      },
      {
        "content": "else {\n\t${0:${VISUAL}}\n}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "el \"else\"": true
        },
        "opts": {}
      },
      {
        "content": "if err != nil {\n\treturn err\n}\n${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ir \"if error not nil, return err\"": true
        },
        "opts": {}
      },
      {
        "content": "false",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "f \"false\"": true
        },
        "opts": {}
      },
      {
        "content": "fallthrough",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ft \"fallthrough\"": true
        },
        "opts": {}
      },
      {
        "content": "float32",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "fl \"float\"": true
        },
        "opts": {}
      },
      {
        "content": "float32",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "f3 \"float32\"": true
        },
        "opts": {}
      },
      {
        "content": "float64",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "f6 \"float64\"": true
        },
        "opts": {}
      },
      {
        "content": "for ${1}{\n\t${0:${VISUAL}}\n}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "for \"for loop\"": true
        },
        "opts": {}
      },
      {
        "content": "for ${2:i} := 0; $2 < ${1:count}; $2${3:++} {\n\t${0:${VISUAL}}\n}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "fori \"for int loop\"": true
        },
        "opts": {}
      },
      {
        "content": "for ${1:e} := range ${2:collection} {\n\t${0:${VISUAL}}\n}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "forr \"for range loop\"": true
        },
        "opts": {}
      },
      {
        "content": "func ${1:funcName}(${2}) ${3:error} {\n\t${4}\n}\n${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "fun \"function\"": true
        },
        "opts": {}
      },
      {
        "content": "func (${1:receiver} ${2:type}) ${3:funcName}(${4}) ${5:error} {\n\t${6}\n}\n${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "fum \"method\"": true
        },
        "opts": {}
      },
      {
        "content": "func (${1:receiver} ${2:type}) ${3:funcName}(${4:w} http.ResponseWriter, ${5:r} *http.Request) {\n\t${0:${VISUAL}}\n}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "fumh \"http handler function on receiver\"": true
        },
        "opts": {}
      },
      {
        "content": "log.Printf(\"%${1:s}\", ${2:var})",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "lf \"log printf\"": true
        },
        "opts": {}
      },
      {
        "content": "log.Println(\"${1}\")",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "lp \"log println\"": true
        },
        "opts": {}
      },
      {
        "content": "make(${1:[]string}, ${0:0})",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "mk \"make\"": true
        },
        "opts": {}
      },
      {
        "content": "map[${1:string}]${0:int}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "mp \"map\"": true
        },
        "opts": {}
      },
      {
        "content": "func main() {\n\t${1}\n}\n${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "main \"func main()\"": true
        },
        "opts": {}
      },
      {
        "content": "new(${0:type})",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "nw \"new\"": true
        },
        "opts": {}
      },
      {
        "content": "package ${1:main}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "pa \"package\"": true
        },
        "opts": {}
      },
      {
        "content": "panic(\"${0:msg}\")",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "pn \"panic\"": true
        },
        "opts": {}
      },
      {
        "content": "fmt.Printf(\"%${1:s}\\n\", ${2:var})",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "pf \"fmt.Printf()\"": true
        },
        "opts": {}
      },
      {
        "content": "fmt.Println(\"${1:s}\")",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "pl \"fmt.Println()\"": true
        },
        "opts": {}
      },
      {
        "content": "range ${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "rn \"range\"": true
        },
        "opts": {}
      },
      {
        "content": "return ${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "rt \"return\"": true
        },
        "opts": {}
      },
      {
        "content": "result",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "rs \"result\"": true
        },
        "opts": {}
      },
      {
        "content": "select {\ncase ${1:v1} := <-${2:chan1}\n\t${3}\ndefault:\n\t${0}\n}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "sl \"select\"": true
        },
        "opts": {}
      },
      {
        "content": "string",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "sr \"string\"": true
        },
        "opts": {}
      },
      {
        "content": "struct ${1:name} {\n\t${2:/* data */}\n}\n${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "st \"struct\"": true
        },
        "opts": {}
      },
      {
        "content": "switch ${1:var} {\ncase ${2:value1}:\n\t${3}\ncase ${4:value2}:\n\t${5}\ndefault:\n\t${0}\n}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "sw \"switch\"": true
        },
        "opts": {}
      },
      {
        "content": "fmt.Sprintf(\"%${1:s}\", ${2:var})",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ps \"fmt.Sprintf\"": true
        },
        "opts": {}
      },
      {
        "content": "true",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "t \"true\"": true
        },
        "opts": {}
      },
      {
        "content": "go ${1:funcName}(${0})",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "g \"goroutine named function\"": true
        },
        "opts": {}
      },
      {
        "content": "go func(${1} ${2:type}) {\n\t${3:/* code */}\n}(${0})",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ga \"goroutine anonymous function\"": true
        },
        "opts": {}
      },
      {
        "content": "func Test${1:name}(t *testing.T) {\n\t${0:${VISUAL}}\n}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "test \"test function\"": true
        },
        "opts": {}
      },
      {
        "content": "func Test${1:name}(t *testing.T) {\n\ttests := []struct {\n\t\tname string\n\t}{\n\t\t{\n\t\t\tname: \"${2:test name}\",\n\t\t},\n\t}\n\tfor _, test := range tests {\n\t\tt.Run(test.name, func(t *testing.T) {\n\t\t\t${0:${VISUAL}}\n\t\t})\n\t}\n}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "testt \"table test function\"": true
        },
        "opts": {}
      },
      {
        "content": "func Benchmark${1:name}(b *testing.B) {\n\tfor i := 0; i < b.N; i++ {\n\t\t${2}\n\t}\n}\n${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "bench \"benchmark function\"": true
        },
        "opts": {}
      },
      {
        "content": "type ${1:name} struct {\n\t${2:attrName} ${3:attrType}\n}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "cl \"composite literals\"": true
        },
        "opts": {}
      },
      {
        "content": "if ${1:value}, ok := ${2:map}[${3:key}]; ok == true {\n\t${4:/* code */}\n}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "om \"if key in a map\"": true
        },
        "opts": {}
      },
      {
        "content": "var ${1:var} = struct{\n\t${2:name} ${3:type}\n}{\n\t$2: ${4:value},\n}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "gg \"Grouped globals with anonymous struct\"": true
        },
        "opts": {}
      },
      {
        "content": "type ${1:parentType}Alias $1\nfunc (p *$1) MarshalJSON() ([]byte, error) {\n\treturn json.Marshal(&struct{ *$1Alias }{(*$1Alias)(p)})\n}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ja \"Marshalable json alias\"": true
        },
        "opts": {}
      },
      {
        "content": "if ${1}err != nil {\n\treturn errors.Wrap(err, \"${2}\")\n}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "errwr \"Error handling with errors.Wrap\"": true
        },
        "opts": {}
      },
      {
        "content": "${1} := ${0}",
        "doc": null,
        "grammar": "snu",
        "label": "v := value",
        "matches": {
          ":": true
        },
        "opts": {}
      },
      {
        "content": "${1:fn} := func() {\n\t${2:${VISUAL}}\n}\n${0}",
        "doc": null,
        "grammar": "snu",
        "label": "fn := func() { ... }",
        "matches": {
          "anon": true
        },
        "opts": {}
      },
      {
        "content": "append(${1:slice}, ${0:value})",
        "doc": null,
        "grammar": "snu",
        "label": "append(slice, value)",
        "matches": {
          "ap": true
        },
        "opts": {}
      },
      {
        "content": "${1:slice} = append($1, ${0:value})",
        "doc": null,
        "grammar": "snu",
        "label": "a = append(a, value)",
        "matches": {
          "ap=": true
        },
        "opts": {}
      },
      {
        "content": "break",
        "doc": null,
        "grammar": "snu",
        "label": "break",
        "matches": {
          "br": true
        },
        "opts": {}
      },
      {
        "content": "chan ${0:int}",
        "doc": null,
        "grammar": "snu",
        "label": "chan Type",
        "matches": {
          "ch": true
        },
        "opts": {}
      },
      {
        "content": "case ${1:value}:\n\t${0:${VISUAL}}",
        "doc": null,
        "grammar": "snu",
        "label": "case ...:",
        "matches": {
          "case": true
        },
        "opts": {}
      },
      {
        "content": "const ${1:NAME} ${2:Type} = ${0:0}",
        "doc": null,
        "grammar": "snu",
        "label": "const XXX Type = ...",
        "matches": {
          "con": true
        },
        "opts": {}
      },
      {
        "content": "const (\n\t${1:NAME} ${2:Type} = ${3:value}\n\t${0}\n)",
        "doc": null,
        "grammar": "snu",
        "label": "const ( ... )",
        "matches": {
          "cons": true
        },
        "opts": {}
      },
      {
        "content": "const (\n\t${1:NAME} ${2:Type} = iota\n\t${0}\n)",
        "doc": null,
        "grammar": "snu",
        "label": "const ( ... = iota )",
        "matches": {
          "iota": true
        },
        "opts": {}
      },
      {
        "content": "continue",
        "doc": null,
        "grammar": "snu",
        "label": "continue",
        "matches": {
          "cn": true
        },
        "opts": {}
      },
      {
        "content": "default:\n\t${0:${VISUAL}}",
        "doc": null,
        "grammar": "snu",
        "label": "default: ...",
        "matches": {
          "default": true
        },
        "opts": {}
      },
      {
        "content": "defer ${1:func}(${2})\n${0}",
        "doc": null,
        "grammar": "snu",
        "label": "defer someFunction()",
        "matches": {
          "df": true
        },
        "opts": {}
      },
      {
        "content": "defer func() {\n\t${0:${VISUAL}}\n}()",
        "doc": null,
        "grammar": "snu",
        "label": "defer func() { ... }",
        "matches": {
          "def": true
        },
        "opts": {}
      },
      {
        "content": "defer func() {\n\tif err := recover(); err != nil {\n\t\t${0:${VISUAL}}\n\t}\n}()",
        "doc": null,
        "grammar": "snu",
        "label": null,
        "matches": {
          "defr": true
        },
        "opts": {}
      },
      {
        "content": "import (\n\t\"${1:package}\"\n)",
        "doc": null,
        "grammar": "snu",
        "label": "import ( ... )",
        "matches": {
          "import": true
        },
        "opts": {}
      },
      {
        "content": "type ${1:Interface} interface {\n\t${2:/* TODO: add methods */}\n}",
        "doc": null,
        "grammar": "snu",
        "label": "interface I { ... }",
        "matches": {
          "interface": true
        },
        "opts": {}
      },
      {
        "content": "if ${1:condition} {\n\t${0:${VISUAL}}\n}",
        "doc": null,
        "grammar": "snu",
        "label": "if ... { ... }",
        "matches": {
          "if": true
        },
        "opts": {}
      },
      {
        "content": "else {\n\t${0:${VISUAL}}\n}",
        "doc": null,
        "grammar": "snu",
        "label": null,
        "matches": {
          "else": true
        },
        "opts": {}
      },
      {
        "content": "if err := ${1:condition}; err != nil {\n\t${0:${VISUAL}}\n}",
        "doc": null,
        "grammar": "snu",
        "label": "If with inline error",
        "matches": {
          "ife": true
        },
        "opts": {}
      },
      {
        "content": "errors.Wrap(${1:err}, \"${2:message}\")",
        "doc": null,
        "grammar": "snu",
        "label": "errors.Wrap",
        "matches": {
          "ew": true
        },
        "opts": {}
      },
      {
        "content": "errors.Wrapf(${1:err}, \"${2:message %v}\", ${3:args...})",
        "doc": null,
        "grammar": "snu",
        "label": "errors.Wrapf",
        "matches": {
          "ewf": true
        },
        "opts": {}
      },
      {
        "content": "if err != nil {\n\treturn err\n}\n${0}",
        "doc": null,
        "grammar": "snu",
        "label": "Error return",
        "matches": {
          "errn": true
        },
        "opts": {
          "b": true
        }
      },
      {
        "content": "if err != nil {\n\treturn errors.Wrap(err, \"${1:message}\")\n}\n${0}",
        "doc": null,
        "grammar": "snu",
        "label": "Error return wrap",
        "matches": {
          "errnw": true
        },
        "opts": {
          "b": true
        }
      },
      {
        "content": "if err != nil {\n\treturn errors.Wrapf(err, \"${1:message %v}\", ${2:args...})\n}\n${0}",
        "doc": null,
        "grammar": "snu",
        "label": "Error return wrapf",
        "matches": {
          "errnwf": true
        },
        "opts": {
          "b": true
        }
      },
      {
        "content": "if err != nil {\n\tlog.Fatal(err)\n}\n${0}",
        "doc": null,
        "grammar": "snu",
        "label": "Error with log.Fatal(err)",
        "matches": {
          "errl": true
        },
        "opts": {
          "b": true
        }
      },
      {
        "content": "if err != nil {\n\treturn ${1:nil}, ${2:err}\n}\n${0}",
        "doc": null,
        "grammar": "snu",
        "label": "Error return with two return values",
        "matches": {
          "errn,": true
        },
        "opts": {
          "b": true
        }
      },
      {
        "content": "if err != nil {\n\treturn nil, errors.Wrap(err, \"${1:message}\")\n}\n${0}",
        "doc": null,
        "grammar": "snu",
        "label": "Error return wrap with two return values",
        "matches": {
          "errn,w": true
        },
        "opts": {
          "b": true
        }
      },
      {
        "content": "if err != nil {\n\treturn nil, errors.Wrapf(err, \"${1:message %v}\", ${2:args...})\n}\n${0}",
        "doc": null,
        "grammar": "snu",
        "label": "Error return wrapf with two return values",
        "matches": {
          "errn,wf": true
        },
        "opts": {
          "b": true
        }
      },
      {
        "content": "if err != nil {\n\tpanic(${1})\n}\n${0}",
        "doc": null,
        "grammar": "snu",
        "label": "Error panic",
        "matches": {
          "errp": true
        },
        "opts": {
          "b": true
        }
      },
      {
        "content": "if err != nil {\n\tt.Fatal(err)\n}\n${0}",
        "doc": null,
        "grammar": "snu",
        "label": "Error test fatal ",
        "matches": {
          "errt": true
        },
        "opts": {
          "b": true
        }
      },
      {
        "content": "if err != nil {\n\t${1}\n\treturn\n}\n${0}",
        "doc": null,
        "grammar": "snu",
        "label": "Error handle and return",
        "matches": {
          "errh": true
        },
        "opts": {
          "b": true
        }
      },
      {
        "content": "fallthrough",
        "doc": null,
        "grammar": "snu",
        "label": "fallthrough",
        "matches": {
          "ft": true
        },
        "opts": {}
      },
      {
        "content": "for ${1} {\n\t${0:${VISUAL}}\n}",
        "doc": null,
        "grammar": "snu",
        "label": "for ... { ... }",
        "matches": {
          "for": true
        },
        "opts": {}
      },
      {
        "content": "for ${1:i} := 0; $1 < ${2:N}; $1++ {\n\t${0:${VISUAL}}\n}",
        "doc": null,
        "grammar": "snu",
        "label": "for 0..N-1 { ... }",
        "matches": {
          "fori": true
        },
        "opts": {}
      },
      {
        "content": "for ${2:k}, ${3:v} := range ${1} {\n\t${0:${VISUAL}}\n}",
        "doc": null,
        "grammar": "snu",
        "label": "for k, v := range items { ... }",
        "matches": {
          "forr": true
        },
        "opts": {}
      },
      {
        "content": "for {\n\tselect {\n\t\tcase ${2:${1:result} := }<- ${3:channel}:\n\t\t\t${0}\n\t}\n}",
        "doc": null,
        "grammar": "snu",
        "label": "for select",
        "matches": {
          "forsel": true
        },
        "opts": {}
      },
      {
        "content": "case ${1:${2:var} := }<-${3:channel}:\n  ${0}",
        "doc": null,
        "grammar": "snu",
        "label": "select case",
        "matches": {
          "selc": true
        },
        "opts": {
          "b": true
        }
      },
      {
        "content": "fmt.Printf(\"$1 = %+v\\n\", ${1:${VISUAL}})",
        "doc": null,
        "grammar": "snu",
        "label": "fmt.Printf(...)",
        "matches": {
          "ff": true
        },
        "opts": {}
      },
      {
        "content": "fmt.Printf(\"$1 = %#v\\n\", ${1:${VISUAL}})",
        "doc": null,
        "grammar": "snu",
        "label": "fmt.Printf(#...) hash",
        "matches": {
          "ffh": true
        },
        "opts": {}
      },
      {
        "content": "fmt.Println(\"${1:${VISUAL}}\")",
        "doc": null,
        "grammar": "snu",
        "label": "fmt.Println(...)",
        "matches": {
          "fn": true
        },
        "opts": {}
      },
      {
        "content": "fmt.Errorf(\"${1:${VISUAL}}\")",
        "doc": null,
        "grammar": "snu",
        "label": "fmt.Errorf(...)",
        "matches": {
          "fe": true
        },
        "opts": {}
      },
      {
        "content": "log.Printf(\"${1:${VISUAL}} = %+v\\n\", $1)",
        "doc": null,
        "grammar": "snu",
        "label": "log.Printf(...)",
        "matches": {
          "lf": true
        },
        "opts": {}
      },
      {
        "content": "log.Println(\"${1:${VISUAL}}\")",
        "doc": null,
        "grammar": "snu",
        "label": "log.Println(...)",
        "matches": {
          "ln": true
        },
        "opts": {}
      },
      {
        "content": "make(${1:[]string}, ${2:0})${0}",
        "doc": null,
        "grammar": "snu",
        "label": "make(Type, size)",
        "matches": {
          "make": true
        },
        "opts": {}
      },
      {
        "content": "map[${1:string}]${0:int}",
        "doc": null,
        "grammar": "snu",
        "label": "map[Type]Type",
        "matches": {
          "map": true
        },
        "opts": {}
      },
      {
        "content": "func main() {\n\t${0:${VISUAL}}\n}",
        "doc": null,
        "grammar": "snu",
        "label": "func main() { ... }",
        "matches": {
          "main": true
        },
        "opts": {}
      },
      {
        "content": "if !ok {\n\t${0:${VISUAL}}\n}",
        "doc": null,
        "grammar": "snu",
        "label": "if !ok { ... }",
        "matches": {
          "ok": true
        },
        "opts": {}
      },
      {
        "content": "// Package $1 provides ${2:...}\npackage ${1:main}\n${0}",
        "doc": null,
        "grammar": "snu",
        "label": "package ...",
        "matches": {
          "package": true
        },
        "opts": {}
      },
      {
        "content": "panic(\"${0:msg}\")",
        "doc": null,
        "grammar": "snu",
        "label": "panic()",
        "matches": {
          "pn": true
        },
        "opts": {}
      },
      {
        "content": "return ${0:${VISUAL}}",
        "doc": null,
        "grammar": "snu",
        "label": "return",
        "matches": {
          "rt": true
        },
        "opts": {}
      },
      {
        "content": "select {\ncase ${1:v1} := <-${2:chan1}:\n\t${0}\n}",
        "doc": null,
        "grammar": "snu",
        "label": "select { case a := <-chan: ... }",
        "matches": {
          "select": true
        },
        "opts": {}
      },
      {
        "content": "type ${1:Type} struct {\n\t${0}\n}",
        "doc": null,
        "grammar": "snu",
        "label": "type T struct { ... }",
        "matches": {
          "st": true
        },
        "opts": {}
      },
      {
        "content": "switch ${1:var} {\ncase ${2:value1}:\n\t${0}\n}",
        "doc": null,
        "grammar": "snu",
        "label": "switch x { ... }",
        "matches": {
          "switch": true
        },
        "opts": {}
      },
      {
        "content": "switch ${2:$1 := }${1:v}.(type) {\n\t${0}\n}",
        "doc": null,
        "grammar": "snu",
        "label": "type switch x { ... }",
        "matches": {
          "tswitch": true
        },
        "opts": {}
      },
      {
        "content": "fmt.Sprintf(\"%${1:s}\", ${2:var})",
        "doc": null,
        "grammar": "snu",
        "label": "fmt.Sprintf(...)",
        "matches": {
          "sp": true
        },
        "opts": {}
      },
      {
        "content": "go ${1:funcName}(${0})",
        "doc": null,
        "grammar": "snu",
        "label": "go someFunc(...)",
        "matches": {
          "go": true
        },
        "opts": {}
      },
      {
        "content": "go func() {\n\t${1:${VISUAL}}\n}()\n${0}",
        "doc": null,
        "grammar": "snu",
        "label": "go func() { ... }()",
        "matches": {
          "gof": true
        },
        "opts": {}
      },
      {
        "content": "func Test${1:Function}(t *testing.T) {\n\t${0:${VISUAL}}\n}",
        "doc": null,
        "grammar": "snu",
        "label": "func TestXYZ(t *testing.T) { ... }",
        "matches": {
          "test": true
        },
        "opts": {}
      },
      {
        "content": "t.Run(\"${0}\", func(t *testing.T){\n\n})",
        "doc": null,
        "grammar": "snu",
        "label": "t.Run(XYZ, func(t *testing.T){ ... })",
        "matches": {
          "tr": true
        },
        "opts": {}
      },
      {
        "content": "var tests = []struct {\n\tname string\n\texpected string\n\tgiven string\n}{\n\t{\"${1}\", \"${2}\", \"${3}\",},\n}\nfor _, tt := range tests {\n\ttt := tt\n\tt.Run(tt.name, func(t *testing.T){\n\t\tactual := ${0:${VISUAL}}(tt.given)\n\t\tif actual != tt.expected {\n\t\t\t\tt.Errorf(\"$0(%s): expected %s, actual %s\", tt.given, tt.expected, actual)\n\t\t}\n\n\t})\n}",
        "doc": null,
        "grammar": "snu",
        "label": null,
        "matches": {
          "tt": true
        },
        "opts": {}
      },
      {
        "content": "func ${1:handler}(w http.ResponseWriter, r *http.Request) {\n\t${0:fmt.Fprintf(w, \"hello world\")}\n}",
        "doc": null,
        "grammar": "snu",
        "label": "http.HandlerFunc",
        "matches": {
          "hf": true
        },
        "opts": {}
      },
      {
        "content": "${1:http}.HandleFunc(\"${2:/}\", func(w http.ResponseWriter, r *http.Request) {\n\t${0:fmt.Fprintf(w, \"hello world\")}\n})",
        "doc": null,
        "grammar": "snu",
        "label": "mux.HandleFunc",
        "matches": {
          "hhf": true
        },
        "opts": {
          "b": true
        }
      },
      {
        "content": "if err != nil {\n\tt.Errorf(\"${0:message}\")\n}",
        "doc": null,
        "grammar": "snu",
        "label": "if err != nil { t.Errorf(...) }",
        "matches": {
          "ter": true
        },
        "opts": {}
      },
      {
        "content": "if err != nil {\n\tt.Fatalf(\"${0:message}\")\n}",
        "doc": null,
        "grammar": "snu",
        "label": "if err != nil { t.Fatalf(...) }",
        "matches": {
          "terf": true
        },
        "opts": {}
      },
      {
        "content": "func Example${1:Method}() {\n\t${0:${VISUAL}}\n\t// Output:\n}",
        "doc": null,
        "grammar": "snu",
        "label": "func ExampleXYZ() { ... }",
        "matches": {
          "example": true
        },
        "opts": {}
      },
      {
        "content": "func Benchmark${1:Method}(b *testing.B) {\n\tfor i := 0; i < b.N; i++ {\n\t\t${0:${VISUAL}}\n\t}\n}",
        "doc": null,
        "grammar": "snu",
        "label": "func BenchmarkXYZ(b *testing.B) { ... }",
        "matches": {
          "benchmark": true
        },
        "opts": {}
      },
      {
        "content": "var ${1:x} ${2:Type}${3: = ${0:value}}",
        "doc": null,
        "grammar": "snu",
        "label": "var x Type [= ...]",
        "matches": {
          "var": true
        },
        "opts": {}
      },
      {
        "content": "var (\n\t${1:x} ${2:Type}${3: = ${0:value}}\n)",
        "doc": null,
        "grammar": "snu",
        "label": "var ( ... )",
        "matches": {
          "vars": true
        },
        "opts": {}
      },
      {
        "content": "if !reflect.DeepEqual(${1:expected}, ${2:actual}) {\n\t_, file, line, _ := runtime.Caller(0)\n\tfmt.Printf(\"%s:%d:\\n\\n\\texp: %#v\\n\\n\\tgot: %#v\\n\\n\", filepath.Base(file), line, $1, $2)\n\tt.FailNow()\n}",
        "doc": null,
        "grammar": "snu",
        "label": "equals: test two identifiers with DeepEqual",
        "matches": {
          "eq": true
        },
        "opts": {}
      },
      {
        "content": "import (\n\t\"${1:package}\"\n)",
        "doc": null,
        "grammar": "snu",
        "label": "Import declaration",
        "matches": {
          "/^import/": true
        },
        "opts": {
          "r": true
        }
      },
      {
        "content": "// Package $1 provides ...\npackage ${1:main}",
        "doc": null,
        "grammar": "snu",
        "label": "Package declaration",
        "matches": {
          "/^package/": true
        },
        "opts": {
          "r": true
        }
      },
      {
        "content": "type ${1:Struct} struct {\n\t${0:${VISUAL}}\n}",
        "doc": null,
        "grammar": "snu",
        "label": "Struct declaration",
        "matches": {
          "struct": true
        },
        "opts": {
          "b": true
        }
      },
      {
        "content": "type ${1:Interface} interface {\n\t${0:${VISUAL}}\n}",
        "doc": null,
        "grammar": "snu",
        "label": "Interface declaration",
        "matches": {
          "interface": true
        },
        "opts": {
          "b": true
        }
      },
      {
        "content": "func main() {\n\t${0:${VISUAL}}\n}",
        "doc": null,
        "grammar": "snu",
        "label": "Main function",
        "matches": {
          "/^main/": true
        },
        "opts": {
          "r": true
        }
      },
      {
        "content": "func ${1:handler}(${2:w} http.ResponseWriter, ${3:r} *http.Request) {\n\t${0:${VISUAL}}\n}",
        "doc": null,
        "grammar": "snu",
        "label": "HTTP handler",
        "matches": {
          "funch": true
        },
        "opts": {
          "b": true
        }
      },
      {
        "content": "map[${1:keytype}]${2:valtype}",
        "doc": null,
        "grammar": "snu",
        "label": "Map type",
        "matches": {
          "map": true
        },
        "opts": {
          "b": true
        }
      },
      {
        "content": "${1:name} := ${0:value}",
        "doc": null,
        "grammar": "snu",
        "label": "Variable declaration :=",
        "matches": {
          ":": true
        },
        "opts": {
          "b": true
        }
      },
      {
        "content": "if err != nil {\n\tlog.${1:Fatal}(err)\n}",
        "doc": null,
        "grammar": "snu",
        "label": "Basic error handling",
        "matches": {
          "err": true
        },
        "opts": {
          "b": true
        }
      }
    ],
    "graphql-request": [
      {
        "content": "import { request } from 'graphql-request';",
        "doc": null,
        "grammar": "lsp",
        "label": "graphql-request-import-request",
        "matches": {
          "graphql-request import request": true
        },
        "opts": {}
      },
      {
        "content": "const { GraphQLClient } = require('graphql-request');",
        "doc": null,
        "grammar": "lsp",
        "label": "graphql-request-require-client",
        "matches": {
          "graphql-request require client": true
        },
        "opts": {}
      },
      {
        "content": "const { request } = require('graphql-request');",
        "doc": null,
        "grammar": "lsp",
        "label": "graphql-request-require-request",
        "matches": {
          "graphql-request require request": true
        },
        "opts": {}
      },
      {
        "content": "import { GraphQLClient } from 'graphql-request';",
        "doc": null,
        "grammar": "lsp",
        "label": "graphql-request-import-client",
        "matches": {
          "graphql-request import client": true
        },
        "opts": {}
      },
      {
        "content": "const ${1:client} = new GraphQLClient(\n  ${2:url},\n  {\n    headers: {\n      ${3:key}: ${4:value}\n    },\n  }\n);",
        "doc": null,
        "grammar": "lsp",
        "label": "graphql-request-client",
        "matches": {
          "graphql-request client": true
        },
        "opts": {}
      },
      {
        "content": "const ${1:results} = await request(\n  ${2:url},\n  ${3:query}\n);",
        "doc": null,
        "grammar": "lsp",
        "label": "graphql-request-request",
        "matches": {
          "graphql-request request": true
        },
        "opts": {}
      },
      {
        "content": "const ${1:results} = await request(\n  ${2:url},\n  ${3:query},\n  ${4:variables}\n);",
        "doc": null,
        "grammar": "lsp",
        "label": "graphql-request-request-variables",
        "matches": {
          "graphql-request request variables": true
        },
        "opts": {}
      },
      {
        "content": "const ${1:queryName} = `query ${1:queryName} {\n  ${2:query}\n}\n`;",
        "doc": null,
        "grammar": "lsp",
        "label": "graphql-request-query",
        "matches": {
          "graphql-request query": true
        },
        "opts": {}
      },
      {
        "content": "const ${1:results} = await ${2:client}.request(\n  ${3:query}\n);",
        "doc": null,
        "grammar": "lsp",
        "label": "graphql-request-client-request",
        "matches": {
          "graphql-request client request": true
        },
        "opts": {}
      },
      {
        "content": "const ${1:results} = await ${2:client}.request(\n  ${3:query},\n  ${4:variables}\n);",
        "doc": null,
        "grammar": "lsp",
        "label": "graphql-request-client-request-variables",
        "matches": {
          "graphql-request client request variables": true
        },
        "opts": {}
      }
    ],
    "groovy": [
      {
        "content": "package ${1:com.github.ujihisa}\nclass ${2:TARGET} {\n  public static void main(String[] args) {\n    println(\"Hello world!\")\n  }\n}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "helloworld": true
        },
        "opts": {
          "head": true
        }
      }
    ],
    "haml": [
      {
        "content": "%table\n\t%tr\n\t\t%th\n\t\t\t${1:headers}\n\t%tr\n\t\t%td\n\t\t\t${0:headers}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "t": true
        },
        "opts": {}
      },
      {
        "content": "%ul\n\t%li\n\t\t${0:item}\n\t%li",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ul": true
        },
        "opts": {}
      },
      {
        "content": "= render :partial => \"${0:item}\"",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "rp": true
        },
        "opts": {}
      },
      {
        "content": "= render :partial => \"${1:item}\", :collection => ${0:@$1s}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "rpc": true
        },
        "opts": {}
      },
      {
        "content": "= render :partial => \"${1:item}\", :locals => { :${2:$1} => ${0:@$1} }",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "rpl": true
        },
        "opts": {}
      },
      {
        "content": "= render :partial => \"${1:item}\", :object => ${0:@$1}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "rpo": true
        },
        "opts": {}
      },
      {
        "content": "= link_to ${1:name}, ${2:dest}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "lt": true
        },
        "opts": {}
      },
      {
        "content": "= mail_to ${1:email_address}, ${2:name}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "mt": true
        },
        "opts": {}
      },
      {
        "content": "= mail_to ${1:email_address}, ${2:name}, :subject => ${3}, :body => ${4}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "mts": true
        },
        "opts": {}
      },
      {
        "content": "- if ${1:condition}\n\t${2:${VISUAL}}\n- else\n\t${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ife": true
        },
        "opts": {}
      },
      {
        "content": "- if ${1:condition}.presence?\n\t${0:${VISUAL}}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ifp": true
        },
        "opts": {}
      },
      {
        "content": "= number_to_currency(${1})",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ntc": true
        },
        "opts": {}
      }
    ],
    "handlebars": [
      {
        "content": "{{#if ${1:value}}}\n${0:${VISUAL}}\n{{/if}}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "if # {{#if value}} ... {{/if}}": true
        },
        "opts": {}
      },
      {
        "content": "{{#unless ${1:value}}}\n${0:${VISUAL}}\n{{/unless}}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ifn # {{#unless value}} ... {{/unless}}": true
        },
        "opts": {}
      },
      {
        "content": "{{#if ${1:value}}}\n${2:${VISUAL}}\n{{else}}\n${3}\n{{/if}}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ife # {{#if value}} ... {{else}} .. {{/if}}": true
        },
        "opts": {}
      }
    ],
    "haskell": [
      {
        "content": "import qualified ${1} as ${2}",
        "doc": "",
        "grammar": "snu",
        "label": "import qualified ... as ...",
        "matches": {
          "import": true
        },
        "opts": {}
      },
      {
        "content": "import ${1} (${2})",
        "doc": "",
        "grammar": "snu",
        "label": "import ... (...)",
        "matches": {
          "importOnly": true
        },
        "opts": {}
      },
      {
        "content": "{-# LANGUAGE ${1} #-}",
        "doc": "",
        "grammar": "snu",
        "label": "{-# LANGUAGE ... #-}",
        "matches": {
          "language": true
        },
        "opts": {}
      },
      {
        "content": "case ${1} of\n\t${2} -> ${0}",
        "doc": "",
        "grammar": "snu",
        "label": "case ... of",
        "matches": {
          "case": true
        },
        "opts": {}
      },
      {
        "content": "main = do\n  ${0}",
        "doc": "",
        "grammar": "snu",
        "label": "main = do",
        "matches": {
          "main": true
        },
        "opts": {}
      },
      {
        "content": "class ${1:Class} ${2:a} where\n  ${3:function} :: ${4:Type}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "class": true
        },
        "opts": {
          "head": true
        }
      },
      {
        "content": "instance ${1:Class} ${2:Type} where\n  ${3:function} ${4:self} = ${0:TARGET}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "instance": true
        },
        "opts": {
          "head": true
        }
      },
      {
        "content": "\\ ${1:x} -> ${0}",
        "doc": "",
        "grammar": "snu",
        "label": "λ",
        "matches": {
          "lambda": true
        },
        "opts": {}
      },
      {
        "content": "{-# LANGUAGE ${0:OverloadedStrings} #-}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "lang": true
        },
        "opts": {}
      },
      {
        "content": "{-# OPTIONS_HADDOCK ${0:hide} #-}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "haddock": true
        },
        "opts": {}
      },
      {
        "content": "{-# OPTIONS_GHC ${0:-fno-warn-unused-imports} #-}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ghc": true
        },
        "opts": {}
      },
      {
        "content": "{-# INLINE ${0:name} #-}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "inline": true
        },
        "opts": {}
      },
      {
        "content": "import ${0:Data.Text}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "imp": true
        },
        "opts": {}
      },
      {
        "content": "import ${0:Data.Text}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "import": true
        },
        "opts": {}
      },
      {
        "content": "import ${1:Data.Text} (${0:head})",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "import2": true
        },
        "opts": {}
      },
      {
        "content": "import qualified ${1:Data.Text} as ${0:T}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "impq": true
        },
        "opts": {}
      },
      {
        "content": "import qualified ${1:Data.Text} as ${0:T}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "importq": true
        },
        "opts": {}
      },
      {
        "content": "instance ${1:Monoid} ${2:Type} where\n\t${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "inst": true
        },
        "opts": {}
      },
      {
        "content": "type ${1:Type} = ${0:Type}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ty": true
        },
        "opts": {}
      },
      {
        "content": "type ${1:Type} = ${0:Type}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "type": true
        },
        "opts": {}
      },
      {
        "content": "data ${1:Type} = ${2:$1} ${0:Int}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "da": true
        },
        "opts": {}
      },
      {
        "content": "data ${1:Type} = ${2:$1} ${0:Int}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "data": true
        },
        "opts": {}
      },
      {
        "content": "newtype ${1:Type} = ${2:$1} ${0:Int}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "newtype": true
        },
        "opts": {}
      },
      {
        "content": "class ${1:Class} a where\n\t${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "class": true
        },
        "opts": {}
      },
      {
        "content": "main :: IO ()\nmain = ${0:undefined}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "main": true
        },
        "opts": {}
      },
      {
        "content": "${1:name} :: ${2:a}\n$1 = ${0:undefined}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "const": true
        },
        "opts": {}
      },
      {
        "content": "${1:fn} :: ${2:a} -> ${3:a}\n$1 ${4} = ${0:undefined}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "fn": true
        },
        "opts": {}
      },
      {
        "content": "${1:fn} :: ${2:a}\n$1 = ${0:undefined}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "fn0": true
        },
        "opts": {}
      },
      {
        "content": "${1:fn} :: ${2:a} -> ${3:a}\n$1 ${4} = ${0:undefined}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "fn1": true
        },
        "opts": {}
      },
      {
        "content": "${1:fn} :: ${2:a} -> ${3:a} -> ${4:a}\n$1 ${5} = ${0:undefined}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "fn2": true
        },
        "opts": {}
      },
      {
        "content": "${1:fn} :: ${2:a} -> ${3:a} -> ${4:a} -> ${5:a}\n$1 ${6} = ${0:undefined}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "fn3": true
        },
        "opts": {}
      },
      {
        "content": "(${1:Class} ${2:a}) => $2",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "=> \"Type constraint\"": true
        },
        "opts": {}
      },
      {
        "content": "${1:map} ${2:fn} ${0:list}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ap": true
        },
        "opts": {}
      },
      {
        "content": "\\\\${1:x} -> ${0:expression}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "\\": true
        },
        "opts": {}
      },
      {
        "content": "(\\\\${1:x} -> ${0:expression})",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "(\\": true
        },
        "opts": {}
      },
      {
        "content": "${1:a} <- ${0:m a}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "<-": true
        },
        "opts": {}
      },
      {
        "content": "${1:m a} -> ${0:a}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "->": true
        },
        "opts": {}
      },
      {
        "content": "(${1:a}, ${0:b})",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "tup": true
        },
        "opts": {}
      },
      {
        "content": "(${1:a}, ${2:b}, ${0:c})",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "tup2": true
        },
        "opts": {}
      },
      {
        "content": "(${1:a}, ${2:b}, ${3:c}, ${0:d})",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "tup3": true
        },
        "opts": {}
      },
      {
        "content": "${1:Record} { ${2:recFieldA} = ${3:undefined}\n\t\t\t, ${4:recFieldB} = ${0:undefined}\n\t\t\t}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "rec": true
        },
        "opts": {}
      },
      {
        "content": "case ${1:something} of\n\t${2} -> ${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "case": true
        },
        "opts": {}
      },
      {
        "content": "let ${1} = ${2}\nin ${3}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "let": true
        },
        "opts": {}
      },
      {
        "content": "where\n\t${1:fn} = ${0:undefined}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "where": true
        },
        "opts": {}
      },
      {
        "content": "describe \"${1}\" $ do\n\t$0",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "desc": true
        },
        "opts": {}
      },
      {
        "content": "it \"${1}\" $\n\t$0",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "it": true
        },
        "opts": {}
      },
      {
        "content": "it \"${1}\" $ property $\n\t$0",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "itp": true
        },
        "opts": {}
      },
      {
        "content": "{-| ${0}\n-}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "doc": true
        },
        "opts": {}
      },
      {
        "content": "import ${1:${2:Data}.${0:Text}}",
        "doc": null,
        "grammar": "snu",
        "label": "Simple import",
        "matches": {
          "imp": true
        },
        "opts": {}
      },
      {
        "content": "import ${1:${2:Data}.${3:Text}} (${4})${0}",
        "doc": null,
        "grammar": "snu",
        "label": "Selective import",
        "matches": {
          "imp2": true
        },
        "opts": {
          "b": true
        }
      }
    ],
    "helm": [
      {
        "content": "apiVersion: v1\nkind: Service\nmetadata:\n{{- if .Values.$1.service.annotations }}\n  annotations:\n{{ toYaml .Values.$1.service.annotations | indent 4 }}\n{{- end }}\n  labels:\n{{- if .Values.$1.service.labels }}\n{{ toYaml .Values.$1.service.labels | indent 4 }}\n{{- end }}\n\tapp: {{ template \"$2.name\" . }}\n\tchart: {{ .Chart.Name }}-{{ .Chart.Version }}\n\tcomponent: \"{{ .Values.$1.name }}\"\n\theritage: {{ .Release.Service }}\n\trelease: {{ .Release.Name }}\n  name: {{ template \"$2.$1.fullname\" . }}\nspec:\n  clusterIP: \"{{ .Values.$1.service.clusterIP }}\"\n{{- if .Values.$1.service.externalIPs }}\n  externalIPs:\n{{ toYaml .Values.$1.service.externalIPs | indent 4 }}\n{{- end }}\n{{- if .Values.$1.service.loadBalancerIP }}\n  loadBalancerIP: \"{{ .Values.$1.service.loadBalancerIP }}\"\n{{- end }}\n{{- if .Values.$1.service.loadBalancerSourceRanges }}\n  loadBalancerSourceRanges:\n{{ toYaml .Values.$1.service.loadBalancerSourceRanges | indent 4 }}\n{{- end }}\n  healthCheckNodePort: {{ .Values.$1.service.healthCheckNodePort }}\n  ports:\n\t- name: http\n\t  port: 80\n\t  protocol: TCP\n\t  targetPort: {{ .Values.$1.service.targetPorts.http }}\n\t  {{- if (and (eq .Values.$1.service.type \"NodePort\") (not (empty .Values.$1.service.nodePorts.http))) }}\n\t  nodePort: {{ .Values.$1.service.nodePorts.http }}\n\t  {{- end }}\n\t- name: https\n\t  port: 443\n\t  protocol: TCP\n\t  targetPort: {{ .Values.$1.service.targetPorts.https }}\n\t  {{- if (and (eq .Values.$1.service.type \"NodePort\") (not (empty .Values.$1.service.nodePorts.https))) }}\n\t  nodePort: {{ .Values.$1.service.nodePorts.https }}\n\t  {{- end }}\n  {{- range $key, $value := .Values.tcp }}\n\t- name: \"{{ $key }}-tcp\"\n\t  port: {{ $key }}\n\t  protocol: TCP\n\t  targetPort: \"{{ $key }}-tcp\"\n  {{- end }}\n  {{- range $key, $value := .Values.udp }}\n\t- name: \"{{ $key }}-udp\"\n\t  port: {{ $key }}\n\t  protocol: UDP\n\t  targetPort: \"{{ $key }}-udp\"\n  {{- end }}\n  selector:\n\tapp: {{ template \"${2:chartName}.name\" . }}\n\tcomponent: \"{{ .Values.$1.name }}\"\n\trelease: {{ .Release.Name }}\n  type: \"{{ .Values.${1:value_key}.service.type }}\"",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "service_sample_spec": true
        },
        "opts": {}
      },
      {
        "content": "apiVersion: v1\nkind: Service\nmetadata:\n{{- if .Values.$1.service.annotations }}\n  annotations:\n{{ toYaml .Values.$1.service.annotations | indent 4 }}\n{{- end }}\n  labels:\n{{- if .Values.$1.service.labels }}\n{{ toYaml .Values.$1.service.labels | indent 4 }}\n{{- end }}\n\tapp: {{ template \"$2.name\" . }}\n\tchart: {{ .Chart.Name }}-{{ .Chart.Version }}\n\tcomponent: \"{{ .Values.$1.name }}\"\n\theritage: {{ .Release.Service }}\n\trelease: {{ .Release.Name }}\n  name: {{ template \"${2:chartName}.${1:value_key}.fullname\" . }}\n# spec\n${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "service_spec": true
        },
        "opts": {}
      },
      {
        "content": "{{- if .Values.$1.service.annotations }}\n  annotations:\n{{ toYaml .Values.${1:value_key}.service.annotations | indent 4 }}\n{{- end }}\n${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "annotations_spec": true
        },
        "opts": {}
      },
      {
        "content": " labels:\n{{- if .Values.$1.service.labels }}\n{{ toYaml .Values.$1.service.labels | indent 4 }}\n{{- end }}\n\tapp: {{ template \"$2.name\" . }}\n\tchart: {{ .Chart.Name }}-{{ .Chart.Version }}\n\tcomponent: \"{{ .Values.$1.name }}\"\n\theritage: {{ .Release.Service }}\n\trelease: {{ .Release.Name }}\n  name: {{ template \"${2:chartName}.${1:value_key}.fullname\" . }}\n${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "labels_spec": true
        },
        "opts": {}
      },
      {
        "content": "spec:\n  type: \"{{ .Values.$1.service.type }}\"\n  clusterIP: \"{{ .Values.$1.service.clusterIP }}\"\n{{- if .Values.$1.service.externalIPs }}\n  externalIPs:\n{{ toYaml .Values.$1.service.externalIPs | indent 4 }}\n{{- end }}\n{{- if .Values.$1.service.loadBalancerIP }}\n  loadBalancerIP: \"{{ .Values.$1.service.loadBalancerIP }}\"\n{{- end }}\n{{- if .Values.$1.service.loadBalancerSourceRanges }}\n  loadBalancerSourceRanges:\n{{ toYaml .Values.$1.service.loadBalancerSourceRanges | indent 4 }}\n{{- end }}\n{{- if and (semverCompare \">=1.7-0\" .Capabilities.KubeVersion.GitVersion) (.Values.$1.service.externalTrafficPolicy) }}\n  externalTrafficPolicy: \"{{ .Values.$1.service.externalTrafficPolicy }}\"\n{{- end }}\n{{- if and (semverCompare \">=1.7-0\" .Capabilities.KubeVersion.GitVersion) (.Values.$1.service.healthCheckNodePort) }}\n  healthCheckNodePort: {{ .Values.${1:value_key}.service.healthCheckNodePort }}\n{{- end }}\n${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "service_spec": true
        },
        "opts": {}
      },
      {
        "content": "ports:\n${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ports_spec": true
        },
        "opts": {}
      },
      {
        "content": "- name: http\n  port: 80\n  protocol: TCP\n  targetPort: {{ .Values.$1.service.targetPorts.http }}\n  {{- if (and (eq .Values.$1.service.type \"NodePort\") (not (empty .Values.$1.service.nodePorts.http))) }}\n  nodePort: {{ .Values.${1:value_key}.service.nodePorts.http }}\n  {{- end }}\n  ${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "portHTTP_spec": true
        },
        "opts": {}
      },
      {
        "content": "- name: https\n  port: 443\n  protocol: TCP\n  targetPort: {{ .Values.$1.service.targetPorts.https }}\n  {{- if (and (eq .Values.$1.service.type \"NodePort\") (not (empty .Values.$1.service.nodePorts.https))) }}\n  nodePort: {{ .Values.${1:value_key}.service.nodePorts.https }}\n  {{- end }}\n  ${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "portHTTPS_spec": true
        },
        "opts": {}
      },
      {
        "content": "{{- range $key, $value := .Values.tcp }}\n  - name: \"{{ $key }}-tcp\"\n\tport: {{ $key }}\n\tprotocol: TCP\n\ttargetPort: \"{{ $key }}-tcp\"\n{{- end }}\n${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "portTCP_spec": true
        },
        "opts": {}
      },
      {
        "content": "{{- range $key, $value := .Values.udp }}\n  - name: \"{{ $key }}-udp\"\n\tport: {{ $key }}\n\tprotocol: UDP\n\ttargetPort: \"{{ $key }}-udp\"\n{{- end }}\n${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "portUDP_spec": true
        },
        "opts": {}
      },
      {
        "content": "selector:\n  app: {{ template \"${2:chartName}.name\" . }}\n  component: \"{{ .Values.${1:value_key}.name }}\"\n  release: {{ .Release.Name }}\n  ${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "selector_spec": true
        },
        "opts": {}
      },
      {
        "content": "{{- if .Values.$1.enabled }}\napiVersion: extensions/v1beta1\nkind: Deployment\nmetadata:\n  labels:\n\tapp: {{ template \"$2.name\" . }}\n\tchart: {{ .Chart.Name }}-{{ .Chart.Version }}\n\tcomponent: \"{{ .Values.$1.name }}\"\n\theritage: {{ .Release.Service }}\n\trelease: {{ .Release.Name }}\n  name: {{ template \"$2.$1.fullname\" . }}\nspec:\n  replicas: {{ .Values.$1.replicaCount }}\n  revisionHistoryLimit: {{ .Values.revisionHistoryLimit }}\n  template:\n\tmetadata:\n\t{{- if .Values.$1.podAnnotations }}\n\t  annotations:\n{{ toYaml .Values.$1.podAnnotations | indent 8 }}\n\t{{- end }}\n\t  labels:\n\t\tapp: {{ template \"$2.name\" . }}\n\t\tcomponent: \"{{ .Values.$1.name }}\"\n\t\trelease: {{ .Release.Name }}\n\t\t{{- if .Values.$1.podLabels }}\n{{ toYaml .Values.$1.podLabels | indent 8 }}\n\t\t{{- end }}\n\tspec:\n\t  {{- if .Values.imagePullSecrets }}\n\t  imagePullSecrets:\n{{ toYaml .Values.imagePullSecrets | indent 8 }}\n\t  {{- end }}\n\t  containers:\n\t\t- name: {{ template \"${2:chartName}.name\" . }}-{{ .Values.$1.name }}\n\t\t  image: \"{{ .Values.$1.image.repository }}:{{ .Values.$1.image.tag }}\"\n\t\t  imagePullPolicy: \"{{ .Values.$1.image.pullPolicy }}\"\n\t\t  args:\n\t\t  {{- range $key, $value := .Values.$1.extraArgs }}\n\t\t\t{{- if $value }}\n\t\t\t- --{{ $key }}={{ $value }}\n\t\t\t{{- else }}\n\t\t\t- --{{ $key }}\n\t\t\t{{- end }}\n\t\t  {{- end }}\n\t\t  livenessProbe:\n\t\t\thttpGet:\n\t\t\t  path: /healthz\n\t\t\t  port: 8080\n\t\t\t  scheme: HTTP\n\t\t\tinitialDelaySeconds: 30\n\t\t\ttimeoutSeconds: 5\n\t\t  ports:\n\t\t\t- name: http\n\t\t\t  containerPort: 8080\n\t\t\t  protocol: TCP\n\t\t  resources:\n{{ toYaml .Values.$1.resources | indent 12 }}\n\t{{- if .Values.$1.nodeSelector }}\n\t  nodeSelector:\n{{ toYaml .Values.$1.nodeSelector | indent 8 }}\n\t{{- end }}\n\t{{- if .Values.$1.tolerations }}\n\t  tolerations:\n{{ toYaml .Values.$1.tolerations | indent 8 }}\n\t{{- end }}\n\t{{- if .Values.$1.affinity }}\n\t  affinity:\n{{ toYaml .Values.${1:value_key}.affinity | indent 8 }}\n\t{{- end }}\n\t  terminationGracePeriodSeconds: 60\n{{- end }}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "deploy_sample_spec": true
        },
        "opts": {}
      },
      {
        "content": "{{- if .Values.$1.enabled }}\napiVersion: extensions/v1beta1\nkind: Deployment\nmetadata:\n  labels:\n\tapp: {{ template \"$2.name\" . }}\n\tchart: {{ .Chart.Name }}-{{ .Chart.Version }}\n\tcomponent: \"{{ .Values.$1.name }}\"\n\theritage: {{ .Release.Service }}\n\trelease: {{ .Release.Name }}\n  name: {{ template \"${2:chartName}.${1:value_key}.fullname\" . }}\n# spec\n\t# containers_spec\n\t# livenessProbe_spec\n\t# PersistentVolumeClaim_spec\n\t# initContainers_spec\n\t# resources_spec\n\t# nodeselector_spec\n\t# tolerations_spec\n\t# affinity_spec\n${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "deploy_spec": true
        },
        "opts": {}
      },
      {
        "content": "spec:\n  replicas: {{ .Values.$1.replicaCount }}\n  revisionHistoryLimit: {{ .Values.revisionHistoryLimit }}\n  template:\n\tmetadata:\n\t{{- if .Values.$1.podAnnotations }}\n\t  annotations:\n{{ toYaml .Values.$1.podAnnotations | indent 8 }}\n\t{{- end }}\n\t  labels:\n\t\tapp: {{ template \"${2:chartName}.name\" . }}\n\t\tcomponent: \"{{ .Values.$1.name }}\"\n\t\trelease: {{ .Release.Name }}\n\t\t{{- if .Values.$1.podLabels }}\n{{ toYaml .Values.${1:value_key}.podLabels | indent 8 }}\n\t\t{{- end }}\n\tspec:\n\t  {{- if .Values.imagePullSecrets }}\n\t  imagePullSecrets:\n{{ toYaml .Values.imagePullSecrets | indent 8 }}\n\t  {{- end }}\n\t  ${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "spec_spec": true
        },
        "opts": {}
      },
      {
        "content": "\t  {{- if .Values.imagePullSecrets }}\n\t  imagePullSecrets:\n{{ toYaml .Values.imagePullSecrets | indent 8 }}\n\t  {{- end }}\n${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "imagePullSecrets_spec": true
        },
        "opts": {}
      },
      {
        "content": "imagePullPolicy: ${1:imagePullPolicy}\n${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "imagePullPolicy_spec": true
        },
        "opts": {}
      },
      {
        "content": "containers:\n  - name: {{ template \"${2:chartName}.name\" . }}-{{ .Values.$1.name }}\n\timage: \"{{ .Values.$1.image.repository }}:{{ .Values.$1.image.tag }}\"\n\timagePullPolicy: \"{{ .Values.${1:value_key}.image.pullPolicy }}\"\n${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "containers_spec": true
        },
        "opts": {}
      },
      {
        "content": "args:\n{{- range $key, $value := .Values.${1:value_key}.extraArgs }}\n  {{- if $value }}\n  - --{{ $key }}={{ $value }}\n  {{- else }}\n  - --{{ $key }}\n  {{- end }}\n{{- end }}\n${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "args_spec": true
        },
        "opts": {}
      },
      {
        "content": "livenessProbe:\n  httpGet:\n\tpath: /healthz\n\tport: 8080\n\tscheme: HTTP\n  initialDelaySeconds: 30\n  timeoutSeconds: 5\n${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "livenessProbe_spec": true
        },
        "opts": {}
      },
      {
        "content": "readinessProbe:\n  httpGet:\n\tpath: /go/api/v1/health\n\tport: 8153\n  initialDelaySeconds: {{ .Values.$1.healthCheck.initialDelaySeconds }}\n  periodSeconds: {{ .Values.$1.healthCheck.periodSeconds }}\n  failureThreshold: {{ .Values.$1.healthCheck.failureThreshold }}\n${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "readinessProbe_spec": true
        },
        "opts": {}
      },
      {
        "content": "resources:\n{{ toYaml .Values.${1:value_key}.resources | indent 12 }}\n${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "resources_spec": true
        },
        "opts": {}
      },
      {
        "content": "{{- if .Values.$1.nodeSelector }}\n  nodeSelector:\n{{ toYaml .Values.${1:value_key}.nodeSelector | indent 8 }}\n{{- end }}\n${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "nodeselector_spec": true
        },
        "opts": {}
      },
      {
        "content": "{{- if .Values.$1.tolerations }}\n  tolerations:\n{{ toYaml .Values.${1:value_key}.tolerations | indent 8 }}\n{{- end }}\n${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "tolerations_spec": true
        },
        "opts": {}
      },
      {
        "content": "{{- if .Values.$1.affinity }}\n  affinity:\n{{ toYaml .Values.${1:value_key}.affinity | indent 8 }}\n{{- end }}\n  terminationGracePeriodSeconds: 60\n{{- end }}\n${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "affinity_spec": true
        },
        "opts": {}
      },
      {
        "content": "kind: PersistentVolumeClaim\napiVersion: v1\nmetadata:\n  name: {{ template \"${2}.$1.fullname\" . }}\n  labels:\n\tapp: {{ template \"${2:chartName}.name\" . }}\n\tchart: \"{{ .Chart.Name }}-{{ .Chart.Version }}\"\n\trelease: \"{{ .Release.Name }}\"\n\theritage: \"{{ .Release.Service }}\"\nspec:\n  accessModes:\n\t- {{ .Values.$1.persistence.accessMode | quote }}\n  resources:\n\trequests:\n\t  storage: {{ .Values.$1.persistence.size | quote }}\n{{- if .Values.$1.persistence.storageClass }}\n{{- if (eq \"-\" .Values.$1.persistence.storageClass) }}\n  storageClassName: \"\"\n{{- else }}\n  storageClassName: \"{{ .Values.${1:value_key}.persistence.storageClass }}\"\n{{- end }}\n{{- end }}\n{{- end }}\n{{- end }}\n${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "PersistentVolumeClaim_spec": true
        },
        "opts": {}
      },
      {
        "content": "{{- if .Values.artifactory.enabled -}}\n  apiVersion: v1\n  kind: ConfigMap\n  metadata:\n\tname: {{ template \"${2:chartName}.fullname\" . }}-${1:value_key}-config\n\tlabels:\n\t  app: {{ template \"${2}.name\" . }}\n\t  chart: {{ .Chart.Name }}-{{ .Chart.Version }}\n\t  heritage: {{ .Release.Service }}\n\t  release: {{ .Release.Name }}\n  data:\n\t${3:nameOfConfigFile}.conf: |\n\t  # data goes here\n{{- end -}}\n${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "configMap_spec": true
        },
        "opts": {}
      },
      {
        "content": "{{- if .Values.$1.initContainers }}\n\t  initContainers:\n\t  - name: wait-workers\n\t\timage: \"{{ .Values.$1.image.repository }}:{{ .Values.$1.image.tag }}\"\n\t\timagePullPolicy: {{ .Values.${1:value_key}.image.pullPolicy }}\n\t\t# env\n\t\tcommand:\n\t\t  - sh\n\t\t  - -c\n\t\t  - |\n\t\t\tuntil printf \".\" && nc -z -w 2 {{ template \"${2:chartName}.fullname\" . }} {{ .Values.postgresql.service.port }}; do\n\t\t\t\tsleep 2;\n\t\t\tdone;\n\t\t\techo 'PostgreSQL OK ✓'\n\t\t# args\n{{- end }}\n${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "initContainers_spec": true
        },
        "opts": {}
      },
      {
        "content": "kind: PersistentVolumeClaim\napiVersion: v1\nmetadata:\n  name: {{ template \"$2.fullname\" . }}\n  labels:\n\tchart: \"{{ .Chart.Name }}-{{ .Chart.Version }}\"\n\trelease: \"{{ .Release.Name }}\"\n\theritage: \"{{ .Release.Service }}\"\n\tapp: {{ template \"${2:chartName}.fullname\" . }}\nspec:\n  accessModes:\n\t- {{ .Values.persistence.accessMode | quote }}\n  resources:\n\trequests:\n\t  storage: {{ .Values.persistence.size | quote }}\n{{- if .Values.persistence.storageClass }}\n{{- if (eq \"-\" .Values.persistence.storageClass) }}\n  storageClassName: \"\"\n{{- else }}\n  storageClassName: \"{{ .Values.persistence.storageClass }}\"\n{{- end }}\n{{- end }}\n{{- end }}\n${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "pvc_spec": true
        },
        "opts": {}
      },
      {
        "content": "apiVersion: v1\nkind: PersistentVolume\nmetadata:\n  name: {{ template \"$2.fullname\" . }}-data-pv\n  labels:\n\tapp: {{ template \"$2.name\" . }}\n\tchart: {{ .Chart.Name }}-{{ .Chart.Version }}\n\theritage: {{ .Release.Service }}\n\trelease: {{ .Release.Name }}\n\tid: {{ template \"${2:chartName}.name\" . }}-data-pv\n\ttype: nfs-volume\nspec:\n  capacity:\n\tstorage: {{ .Values.$1.persistence.nfs.capacity }}\n  accessModes:\n  - ReadWriteOnce\n  persistentVolumeReclaimPolicy: Retain\n  nfs:\n\tserver: {{ .Values.$1.persistence.nfs.ip }}\n\tpath: \"{{ .Values.${1:value_key}.persistence.nfs.haDataMount }}\"\n\treadOnly: false\n${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "pv_nfs_spec": true
        },
        "opts": {}
      },
      {
        "content": "{{- if and .Values.persistence.enabled .Values.persistence.$1.hostPath (not\n.Values.persistence.$1.existingClaim) -}}\napiVersion: v1\nkind: PersistentVolume\nmetadata:\n  name: {{ template \"${2:chartName}.fullname\" . }}-$1\nspec:\n  accessModes:\n\t- {{ .Values.persistence.$1.accessMode | quote }}\n  capacity:\n\tstorage: {{ .Values.persistence.$1.size | quote }}\n  hostPath:\n\tpath: {{ .Values.persistence.${1:value_key}.hostPath | quote }}\n{{- end -}}\n${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "pvc_hostpath_spec": true
        },
        "opts": {}
      },
      {
        "content": "$1:\n  name: ${1:value_key}\n  image:\n\trepository: \n\ttag: \n\tpullPolicy: IfNotPresent\n  hostNetwork: false\n  dnsPolicy: ClusterFirst\n  daemonset:\n\tuseHostPort: false\n  podLabels: {}\n  scope:\n\tenabled: false\n\tnamespace: \"\"   # defaults to .Release.Namespace\n  extraArgs: {}\n  extraEnvs: []\n  kind: Deployment\n  updateStrategy: {}\n  minReadySeconds: 0\n  tolerations: []\n  affinity: {}\n  nodeSelector: {}\n  podAnnotations: {}\n  replicaCount: 1\n  minAvailable: 1\n  resources: {}\n  autoscaling:\n\tenabled: false\n  extraContainers: {}\n  extraVolumeMounts: {}\n  extraVolumes: {}\n  extraInitContainers: []\n  lifecycle: {}\nrevisionHistoryLimit: 10\n${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "deploy_values": true
        },
        "opts": {}
      },
      {
        "content": "${1:value_key}:\nrbac:\n  create: true\nserviceAccount:\n  create: true\n  name:\nimagePullSecrets: []\n${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "rbac_values": true
        },
        "opts": {}
      },
      {
        "content": "${1:value_key}:\n  service:\n\tannotations: {}\n\tlabels: {}\n\tclusterIP: \"\"\n\texternalIPs: []\n\tloadBalancerIP: \"\"\n\tloadBalancerSourceRanges: []\n\texternalTrafficPolicy: \"\"\n\thealthCheckNodePort: 0\n\ttargetPorts:\n\t  http: http\n\t  https: https\n\ttype: LoadBalancer\n\tnodePorts:\n\t  http: \"\"\n\t  https: \"\"\n${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "service_values": true
        },
        "opts": {}
      },
      {
        "content": "${1:value_key}:\n  readinessProbe:\n\tfailureThreshold: 3\n\tinitialDelaySeconds: 10\n\tperiodSeconds: 10\n\tsuccessThreshold: 1\n\ttimeoutSeconds: 1\n\tport: 10254\n${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "readinessProbe_values": true
        },
        "opts": {}
      },
      {
        "content": "${1:value_key}:\n  livenessProbe:\n\tfailureThreshold: 3\n\tinitialDelaySeconds: 10\n\tperiodSeconds: 10\n\tsuccessThreshold: 1\n\ttimeoutSeconds: 1\n\tport: 10254\n${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "livenessProbe_values": true
        },
        "opts": {}
      }
    ],
    "help": [],
    "html": [
      {
        "content": "[class]=\"${1:expression}\"",
        "doc": "Angular [class] binding",
        "grammar": "lsp",
        "label": "class",
        "matches": {
          "a-class": true
        },
        "opts": {}
      },
      {
        "content": "[style.${1:property}]=\"${2:expression}\"",
        "doc": "Angular [style] binding",
        "grammar": "lsp",
        "label": "style",
        "matches": {
          "a-style": true
        },
        "opts": {}
      },
      {
        "content": "[ngClass]=\"{${1:cssClass}: ${2:expression}}\"",
        "doc": "Angular ngClass",
        "grammar": "lsp",
        "label": "ngClass",
        "matches": {
          "a-ngClass": true
        },
        "opts": {}
      },
      {
        "content": "*ngFor=\"let ${1:item} of ${2:list}\"${0}",
        "doc": "Angular *ngFor",
        "grammar": "lsp",
        "label": "ngFor",
        "matches": {
          "a-ngFor": true
        },
        "opts": {}
      },
      {
        "content": "*ngFor=\"let ${1:item} of ${2:list}; trackBy:${1:item}.id\"${0}",
        "doc": "Angular *ngFor with trackBy",
        "grammar": "lsp",
        "label": "ngFor with trackBy",
        "matches": {
          "a-ngFor-trackBy": true
        },
        "opts": {}
      },
      {
        "content": "*ngFor=\"let ${1:item} of ${2:stream} | async as ${3:list}\"${0}",
        "doc": "Angular *ngForAsync",
        "grammar": "lsp",
        "label": "ngForAsync",
        "matches": {
          "a-ngForAsync": true
        },
        "opts": {}
      },
      {
        "content": "<form (ngSubmit)=\"onSubmit()\" #${1:form}=\"ngForm\">\n</form>",
        "doc": "Form with ngSubmit and form attributes",
        "grammar": "lsp",
        "label": "ngForm",
        "matches": {
          "a-form": true
        },
        "opts": {}
      },
      {
        "content": "formArrayName=\"${1:control}\"",
        "doc": "Angular formArrayName",
        "grammar": "lsp",
        "label": "ngFormArrayName",
        "matches": {
          "a-formArrayName": true
        },
        "opts": {}
      },
      {
        "content": "formControlName=\"${1:control}\"",
        "doc": "Angular formControlName",
        "grammar": "lsp",
        "label": "ngFormControlName",
        "matches": {
          "a-formControlName": true
        },
        "opts": {}
      },
      {
        "content": "[formGroup]=\"${1:form}\"",
        "doc": "Angular formGroup",
        "grammar": "lsp",
        "label": "ngFormGroup",
        "matches": {
          "a-formGroup": true
        },
        "opts": {}
      },
      {
        "content": "[formGroupName]=\"${1:name}\"",
        "doc": "Angular formGroupName",
        "grammar": "lsp",
        "label": "ngFormGroupName",
        "matches": {
          "a-formGroupName": true
        },
        "opts": {}
      },
      {
        "content": "<button type=\"submit\" [disabled]=\"!${1:form}.form.valid\">\n\tSave\n</button>",
        "doc": "Angular form submit",
        "grammar": "lsp",
        "label": "ngFormSubmit",
        "matches": {
          "a-form-submit": true
        },
        "opts": {}
      },
      {
        "content": "*ngIf=\"${1:expression}\"",
        "doc": "Angular *ngIf",
        "grammar": "lsp",
        "label": "ngIf",
        "matches": {
          "a-ngIf": true
        },
        "opts": {}
      },
      {
        "content": "*ngIf=\"${1:expression};else ${2:templateName}\"",
        "doc": "Angular *ngIfElse",
        "grammar": "lsp",
        "label": "ngIfElse",
        "matches": {
          "a-ngIfElse": true
        },
        "opts": {}
      },
      {
        "content": "[(ngModel)]=\"${1:binding}\"",
        "doc": "Angular ngModel",
        "grammar": "lsp",
        "label": "ngModel",
        "matches": {
          "a-ngModel": true
        },
        "opts": {}
      },
      {
        "content": "[routerLink]=\"['/${1:routePath}']\" routerLinkActive=\"${2:router-link-active}\" $0",
        "doc": "Angular routerLink",
        "grammar": "lsp",
        "label": "ngRouterLink",
        "matches": {
          "a-routerLink": true
        },
        "opts": {}
      },
      {
        "content": "[routerLink]=\"['${1:routePath}', ${2:routeParameterValue}]\"\nrouterLinkActive=\"${3:router-link-active}\"$0",
        "doc": "Angular routerLink with a route parameter",
        "grammar": "lsp",
        "label": "ngRouterLinkWithParameter",
        "matches": {
          "a-routerLink-param": true
        },
        "opts": {}
      },
      {
        "content": "<select [(ngModel)]=\"${1:model}\">\n\t<option *ngFor=\"let ${2:item} of ${3:list}\" [value]=\"${2:item}\">{{${2:item}}}</option>\n</select>",
        "doc": "<select> control with ngModel",
        "grammar": "lsp",
        "label": "ngSelect",
        "matches": {
          "a-select": true
        },
        "opts": {}
      },
      {
        "content": "[ngStyle]=\"{${1:style}: ${2:expression}}\"",
        "doc": "Angular ngStyle",
        "grammar": "lsp",
        "label": "ngStyle",
        "matches": {
          "a-ngStyle": true
        },
        "opts": {}
      },
      {
        "content": "<div [ngSwitch]=\"${1:conditionExpression}\">\n\t<div *ngSwitchCase=\"${2:expression}\">${3:output}</div>\n\t<div *ngSwitchDefault>${4:output2}</div>\n</div>",
        "doc": "Angular ngSwitch",
        "grammar": "lsp",
        "label": "ngSwitch",
        "matches": {
          "a-ngSwitch": true
        },
        "opts": {}
      },
      {
        "content": "<pre>{{${1:model} | json}}</pre>$0",
        "doc": "Angular pre debug | json",
        "grammar": "lsp",
        "label": "pre w/ json",
        "matches": {
          "a-prej": true
        },
        "opts": {}
      },
      {
        "content": "<pre>{{${1:model} | async | json}}</pre>$0",
        "doc": "Angular pre debug | async | json",
        "grammar": "lsp",
        "label": "pre w/ async json",
        "matches": {
          "a-preja": true
        },
        "opts": {}
      },
      {
        "content": "<ng-container $0></ng-container>",
        "doc": "Angular ng-container",
        "grammar": "lsp",
        "label": "ng-container",
        "matches": {
          "a-ng-container": true
        },
        "opts": {}
      },
      {
        "content": "<ng-template [ngTemplateOutlet]=\"${1:outlet}\" [ngOutletContext]=\"${2:context}\"></ng-template>",
        "doc": "Angular ng-template",
        "grammar": "lsp",
        "label": "ng-template",
        "matches": {
          "a-ng-template": true
        },
        "opts": {}
      },
      {
        "content": "<ng-content select=\"${0:selector}\"></ng-content>",
        "doc": "Angular ng-content",
        "grammar": "lsp",
        "label": "ng-content",
        "matches": {
          "a-ng-content": true
        },
        "opts": {}
      },
      {
        "content": "<!DOCTYPE html\nPUBLIC \"-//W3C//DTD XHTML 1.0 Strict//EN\"\n\"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "doctypetransitional": true
        },
        "opts": {}
      },
      {
        "content": "<!DOCTYPE html\nPUBLIC \"-//W3C//DTD XHTML 1.0 Strict//EN\"\n\"http://www.w3.org/TR/xhtml1/DTD/xhtml1-frameset.dtd\">",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "doctypeframeset": true
        },
        "opts": {}
      },
      {
        "content": "<!DOCTYPE html\nPUBLIC \"-//W3C//DTD XHTML 1.0 Strict//EN\"\n\"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd\">",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "doctypestrict": true
        },
        "opts": {}
      },
      {
        "content": "<!doctype html>\n<html lang=\"${1:en}\">\n    <head>\n        <meta charset=\"${2:utf-8}\">\n        <meta name=\"viewport\" content=\"${3:width=device-width, initial-scale=1}\">\n        <title>${4}</title>\n    </head>\n    <body>\n        ${5}\n    </body>\n</html>",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "html5": true
        },
        "opts": {}
      },
      {
        "content": "<head>\n    <meta charset=\"${1:utf-8}\">\n    <title>${2}</title>\n<style>\n    ${3}\n</style>\n    ${4}\n</head>${5}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "head": true
        },
        "opts": {}
      },
      {
        "content": "<meta name=\"author\" content=\"${1}\">${2}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "metaauthor": true
        },
        "opts": {}
      },
      {
        "content": "<meta name=\"keywords\" content=\"${1}\">${2}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "keywords": true
        },
        "opts": {}
      },
      {
        "content": "<meta name=\"others\" content=\"${1}\">${2}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "metaothers": true
        },
        "opts": {}
      },
      {
        "content": "<meta name=\"generator\" content=\"${1}\">${2}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "metagenerator": true
        },
        "opts": {}
      },
      {
        "content": "<meta name=\"description\" content=\"${1}\">${2}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "metadescription": true
        },
        "opts": {}
      },
      {
        "content": "<meta name=\"viewport\" content=\"${1:width=device-width, initial-scale=1}\">",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "metaviewport": true
        },
        "opts": {}
      },
      {
        "content": "<meta name=\"theme-color\" content=\"#${1}\">",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "metatheme": true
        },
        "opts": {}
      },
      {
        "content": "<script charset=\"${1:UTF-8}\">\n${2:TARGET}\n</script>${3}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "scriptcharset": true
        },
        "opts": {}
      },
      {
        "content": "<script>\n${1:TARGET}\n</script>${2}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "script": true
        },
        "opts": {}
      },
      {
        "content": "<script src=\"${1}\"${2: defer}></script>${3}",
        "doc": "",
        "grammar": "snu",
        "label": "js",
        "matches": {
          "scriptsrc": true
        },
        "opts": {}
      },
      {
        "content": "<body>\n   ${1:TARGET}\n</body>",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "body": true
        },
        "opts": {}
      },
      {
        "content": "<h${1:1}>${2}</h$1>${3}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "h": true
        },
        "opts": {
          "word": true
        }
      },
      {
        "content": "<p>${1}</p>${2}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "p": true
        },
        "opts": {
          "word": true
        }
      },
      {
        "content": "<br>",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "br": true
        },
        "opts": {
          "word": true
        }
      },
      {
        "content": "<hr>",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "hr": true
        },
        "opts": {
          "word": true
        }
      },
      {
        "content": "<!--${1:TARGET}-->${2}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "comment": true
        },
        "opts": {
          "word": true
        }
      },
      {
        "content": "<b>${1:TARGET}</b>${2}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "b": true
        },
        "opts": {
          "word": true
        }
      },
      {
        "content": "<small>${1:TARGET}</small>${2}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "small": true
        },
        "opts": {
          "word": true
        }
      },
      {
        "content": "<strong>${1:TARGET}</strong>${2}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "strong": true
        },
        "opts": {
          "word": true
        }
      },
      {
        "content": "<sub>${1:TARGET}</sub>${2}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "sub": true
        },
        "opts": {
          "word": true
        }
      },
      {
        "content": "<sup>${1:TARGET}</sup>${2}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "sup": true
        },
        "opts": {
          "word": true
        }
      },
      {
        "content": "<ins>${1:TARGET}</ins>${2}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ins": true
        },
        "opts": {
          "word": true
        }
      },
      {
        "content": "<del>${1:TARGET}</del>${2}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "del": true
        },
        "opts": {
          "word": true
        }
      },
      {
        "content": "<em>${1:TARGET}</em>${2}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "em": true
        },
        "opts": {
          "word": true
        }
      },
      {
        "content": "<bdo dir=\"${1:rtl}\">${2:TARGET}</bdo>${3}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "bdo": true
        },
        "opts": {
          "word": true
        }
      },
      {
        "content": "<pre>\n${1:TARGET}\n</pre>${2}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "pre": true
        },
        "opts": {}
      },
      {
        "content": "<blockquote>\n${1}\n</blockquote>\n${2}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "blockquote": true
        },
        "opts": {}
      },
      {
        "content": "<link rel=\"${1:stylesheet}\" href=\"${2}.css\"${3}>${4}",
        "doc": "",
        "grammar": "snu",
        "label": "link stylesheet css",
        "matches": {
          "link": true
        },
        "opts": {}
      },
      {
        "content": "<link rel=\"manifest\" href=\"${1:manifest.json}\">${2}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "manifest": true
        },
        "opts": {}
      },
      {
        "content": "text-align=\"left\"",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "alignl": true
        },
        "opts": {}
      },
      {
        "content": "text-align=\"right\"",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "alignr": true
        },
        "opts": {}
      },
      {
        "content": "text-align=\"center\"",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "alignc": true
        },
        "opts": {}
      },
      {
        "content": "bgcolor=\"${1}\"${2}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "bgcolor": true
        },
        "opts": {}
      },
      {
        "content": "<a href=\"${1}\">${2:TARGET}</a>${3}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ahref": true
        },
        "opts": {
          "word": true
        }
      },
      {
        "content": "<a href=\"${1}\" target=\"_blank\" rel=\"noopener\">${2:TARGET}</a>${3}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ahref_blank": true
        },
        "opts": {
          "word": true
        }
      },
      {
        "content": "<a href=\"${1}\" target=\"_parent\">${2:TARGET}</a>${3}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ahref_parent": true
        },
        "opts": {
          "word": true
        }
      },
      {
        "content": "<a href=\"${1}\" target=\"_top\">${2:TARGET}</a>${3}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ahref_top": true
        },
        "opts": {
          "word": true
        }
      },
      {
        "content": "<a name=\"${1}\">${2:TARGET}</a>${3}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "aname": true
        },
        "opts": {
          "word": true
        }
      },
      {
        "content": "<frameset cols=\"${1}\">\n${2:TARGET}\n</frameset>${3}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "framesetcols": true
        },
        "opts": {}
      },
      {
        "content": "<frameset rows=\"${1}\"\n${2:TARGET}\n</frameset>${3}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "framesetrows": true
        },
        "opts": {}
      },
      {
        "content": "<iframe src=\"${1}\"></iframe>${2}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "iframe": true
        },
        "opts": {
          "word": true
        }
      },
      {
        "content": "<table border=\"${1}\">\n${2:TARGET}\n</table>${3}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "table": true
        },
        "opts": {}
      },
      {
        "content": "<th>${1:TARGET}</th>${2}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "th": true
        },
        "opts": {
          "word": true
        }
      },
      {
        "content": "<ul type=\"square\">${1:TARGET}</ul>${2}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ulsquare": true
        },
        "opts": {
          "word": true
        }
      },
      {
        "content": "<ul type=\"circle\">${1:TARGET}</ul>${2}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ulcircle": true
        },
        "opts": {
          "word": true
        }
      },
      {
        "content": "<ul type=\"disc\">${1:TARGET}</ul>${2}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "uldisc": true
        },
        "opts": {
          "word": true
        }
      },
      {
        "content": "<ol>${1:TARGET}</ol>${2}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ol": true
        },
        "opts": {
          "word": true
        }
      },
      {
        "content": "<ol type=\"A\">${1:TARGET}</ol>${2}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "olA": true
        },
        "opts": {
          "word": true
        }
      },
      {
        "content": "<ol type=\"a\">${1:TARGET}</ol>${2}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ola": true
        },
        "opts": {
          "word": true
        }
      },
      {
        "content": "<ol type=\"I\">${1:TARGET}</ol>${2}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "olI": true
        },
        "opts": {
          "word": true
        }
      },
      {
        "content": "<ol type=\"i\">${1:TARGET}</ol>${2}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "oli": true
        },
        "opts": {
          "word": true
        }
      },
      {
        "content": "<li>${1:TARGET}</li>${2}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "li": true
        },
        "opts": {
          "word": true
        }
      },
      {
        "content": "<dl>${1:TARGET}</dl>${2}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "dl": true
        },
        "opts": {
          "word": true
        }
      },
      {
        "content": "<dt>${1:TARGET}</dt>${2}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "dt": true
        },
        "opts": {
          "word": true
        }
      },
      {
        "content": "<dd>${1:TARGET}</dd>${2}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "dd": true
        },
        "opts": {
          "word": true
        }
      },
      {
        "content": "<form>\n${1:TARGET}\n</form>${2}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "form": true
        },
        "opts": {}
      },
      {
        "content": "<input type=\"text\" name=\"${1:user}\">${2}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "inputtext": true
        },
        "opts": {
          "word": true
        }
      },
      {
        "content": "<input type=\"password\" name=\"${1:password}\">${2}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "inputpassword": true
        },
        "opts": {
          "word": true
        }
      },
      {
        "content": "<input type=\"radio\" name=\"${1}\" value=\"value\">${2}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "inputradio": true
        },
        "opts": {
          "word": true
        }
      },
      {
        "content": "<input type=\"checkbox\" name=\"${1}\">${2}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "inputcheckbox": true
        },
        "opts": {
          "word": true
        }
      },
      {
        "content": "<textarea rows=\"${1}\" cols=\"${2}\">\n${3:TARGET}\n</textarea>\n${4}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "textarea": true
        },
        "opts": {}
      },
      {
        "content": "<button>${1:TARGET}</button>${2}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "button": true
        },
        "opts": {
          "word": true
        }
      },
      {
        "content": "<button type=\"submit\">${1:TARGET}</button>${2}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "buttonsubmit": true
        },
        "opts": {
          "word": true
        }
      },
      {
        "content": "<select>${1:TARGET}</select>${2}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "select": true
        },
        "opts": {
          "word": true
        }
      },
      {
        "content": "<optgroup label=\"${1}\">\n${2:TARGET}\n<optgroup>${3}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "optgroup": true
        },
        "opts": {}
      },
      {
        "content": "<option value=\"${1}\">${2:TARGET}</option>${3}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "option": true
        },
        "opts": {
          "word": true
        }
      },
      {
        "content": "<label>${1}: <input type=\"${2:TARGET}\" /></label>${3}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "label": true
        },
        "opts": {
          "word": true
        }
      },
      {
        "content": "<label for=\"${1}:id\">${2:TARGET}</label>${3}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "labelfor": true
        },
        "opts": {
          "word": true
        }
      },
      {
        "content": "<fieldset>${1:TARGET}</fieldset>${2}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "fieldset": true
        },
        "opts": {
          "word": true
        }
      },
      {
        "content": "<legend>${1:TARGET}</legend>${2}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "legend": true
        },
        "opts": {
          "word": true
        }
      },
      {
        "content": "id=\"${1}\"${2}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "id": true
        },
        "opts": {
          "word": true
        }
      },
      {
        "content": "class=\"${1}\"${2}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "class": true
        },
        "opts": {
          "word": true
        }
      },
      {
        "content": "<p class=\"${1}\">${2:TARGET}</p>${3}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "pclass": true
        },
        "opts": {
          "word": true
        }
      },
      {
        "content": "<p id=\"${1}\">${2:TARGET}</p>${3}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "pid": true
        },
        "opts": {
          "word": true
        }
      },
      {
        "content": "<div id=\"${1}\">${2:TARGET}</div>${3}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "divid": true
        },
        "opts": {
          "word": true
        }
      },
      {
        "content": "<div class=\"${1}\">${2:TARGET}</div>${3}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "divclass": true
        },
        "opts": {
          "word": true
        }
      },
      {
        "content": "<img src=\"${1}\" alt=\"${2}\">${3}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "img": true
        },
        "opts": {
          "word": true
        }
      },
      {
        "content": "<header>\n    ${1}\n</header>",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "header": true
        },
        "opts": {
          "word": true
        }
      },
      {
        "content": "<nav>\n    ${1}\n</nav>",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "nav": true
        },
        "opts": {
          "word": true
        }
      },
      {
        "content": "<main>\n    ${1}\n</main>",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "main": true
        },
        "opts": {
          "word": true
        }
      },
      {
        "content": "<footer>\n    ${1}\n</footer>",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "footer": true
        },
        "opts": {
          "word": true
        }
      },
      {
        "content": "<details${2}>\n    <summary>${1}</summary>\n    ${3}\n</details>",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "details": true
        },
        "opts": {}
      },
      {
        "content": "&nbsp;",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "nbs": true
        },
        "opts": {}
      },
      {
        "content": "&#x2190;",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "left": true
        },
        "opts": {}
      },
      {
        "content": "&#x2192;",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "right": true
        },
        "opts": {}
      },
      {
        "content": "&#x2191;",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "up": true
        },
        "opts": {}
      },
      {
        "content": "&#x2193;",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "down": true
        },
        "opts": {}
      },
      {
        "content": "&#x21A9;",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "return": true
        },
        "opts": {}
      },
      {
        "content": "&#x21E4;",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "backtab": true
        },
        "opts": {}
      },
      {
        "content": "&#x21E5;",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "tab": true
        },
        "opts": {}
      },
      {
        "content": "&#x21E7;",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "shift": true
        },
        "opts": {}
      },
      {
        "content": "&#x2303;",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ctrl": true
        },
        "opts": {}
      },
      {
        "content": "&#x2305;",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "enter": true
        },
        "opts": {}
      },
      {
        "content": "&#x2318;",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "cmd": true
        },
        "opts": {}
      },
      {
        "content": "&#x2325;",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "option": true
        },
        "opts": {}
      },
      {
        "content": "&#x2326;",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "delete": true
        },
        "opts": {}
      },
      {
        "content": "&#x232B;",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "backspace": true
        },
        "opts": {}
      },
      {
        "content": "&#x238B;",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "esc": true
        },
        "opts": {}
      },
      {
        "content": "<!-- ${1} -->${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "//": true
        },
        "opts": {}
      },
      {
        "content": "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.01//EN\"\n\"http://www.w3.org/TR/html4/strict.dtd\">",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "docts": true
        },
        "opts": {}
      },
      {
        "content": "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\"\n\"http://www.w3.org/TR/html4/loose.dtd\">",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "doct": true
        },
        "opts": {}
      },
      {
        "content": "<!DOCTYPE HTML>",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "doct5": true
        },
        "opts": {}
      },
      {
        "content": "<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Frameset//EN\"\n\"http://www.w3.org/TR/xhtml1/DTD/xhtml1-frameset.dtd\">",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "docxf": true
        },
        "opts": {}
      },
      {
        "content": "<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Strict//EN\"\n\"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd\">",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "docxs": true
        },
        "opts": {}
      },
      {
        "content": "<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\"\n\"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "docxt": true
        },
        "opts": {}
      },
      {
        "content": "<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.1//EN\"\n\"http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd\">",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "docx": true
        },
        "opts": {}
      },
      {
        "content": "${1:attribute}=\"${0:property}\"",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "attr": true
        },
        "opts": {}
      },
      {
        "content": "${1:attribute}=\"${2:property}\" attr+",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "attr+": true
        },
        "opts": {}
      },
      {
        "content": "class=\"${1}\"",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          ".": true
        },
        "opts": {}
      },
      {
        "content": "id=\"${1}\"",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "#": true
        },
        "opts": {}
      },
      {
        "content": "alt=\"${1}\"",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "alt": true
        },
        "opts": {}
      },
      {
        "content": "charset=\"${1:utf-8}\"",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "charset": true
        },
        "opts": {}
      },
      {
        "content": "data-${1}=\"${2:$1}\"",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "data": true
        },
        "opts": {}
      },
      {
        "content": "for=\"${1}\"",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "for": true
        },
        "opts": {}
      },
      {
        "content": "height=\"${1}\"",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "height": true
        },
        "opts": {}
      },
      {
        "content": "href=\"${1:#}\"",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "href": true
        },
        "opts": {}
      },
      {
        "content": "lang=\"${1:en}\"",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "lang": true
        },
        "opts": {}
      },
      {
        "content": "media=\"${1}\"",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "media": true
        },
        "opts": {}
      },
      {
        "content": "name=\"${1}\"",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "name": true
        },
        "opts": {}
      },
      {
        "content": "rel=\"${1}\"",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "rel": true
        },
        "opts": {}
      },
      {
        "content": "scope=\"${1:row}\"",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "scope": true
        },
        "opts": {}
      },
      {
        "content": "src=\"${1}\"",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "src": true
        },
        "opts": {}
      },
      {
        "content": "title=\"${1}\"",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "title=": true
        },
        "opts": {}
      },
      {
        "content": "type=\"${1}\"",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "type": true
        },
        "opts": {}
      },
      {
        "content": "value=\"${1}\"",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "value": true
        },
        "opts": {}
      },
      {
        "content": "width=\"${1}\"",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "width": true
        },
        "opts": {}
      },
      {
        "content": "<a href=\"${1:#}\">${0:$1}</a>",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "a": true
        },
        "opts": {}
      },
      {
        "content": "<a class=\"${1}\" href=\"${2:#}\">${0:$1}</a>",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "a.": true
        },
        "opts": {}
      },
      {
        "content": "<a id=\"${1}\" href=\"${2:#}\">${0:$1}</a>",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "a#": true
        },
        "opts": {}
      },
      {
        "content": "<a href=\"http://${1:example.com}\">${0:$1}</a>",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "a:ext": true
        },
        "opts": {}
      },
      {
        "content": "<a href=\"mailto:${1:joe@example.com}?subject=${2:feedback}\">${0:email me}</a>",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "a:mail": true
        },
        "opts": {}
      },
      {
        "content": "<abbr title=\"${1}\">${0}</abbr>",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "abbr": true
        },
        "opts": {}
      },
      {
        "content": "<address>\n\t${0}\n</address>",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "address": true
        },
        "opts": {}
      },
      {
        "content": "<area shape=\"${1:rect}\" coords=\"${2}\" href=\"${3}\" alt=\"${0}\">",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "area": true
        },
        "opts": {}
      },
      {
        "content": "<area shape=\"${1:rect}\" coords=\"${2}\" href=\"${3}\" alt=\"${4}\">\narea+",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "area+": true
        },
        "opts": {}
      },
      {
        "content": "<area shape=\"circle\" coords=\"${1}\" href=\"${2}\" alt=\"${0}\">",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "area:c": true
        },
        "opts": {}
      },
      {
        "content": "<area shape=\"default\" coords=\"${1}\" href=\"${2}\" alt=\"${0}\">",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "area:d": true
        },
        "opts": {}
      },
      {
        "content": "<area shape=\"poly\" coords=\"${1}\" href=\"${2}\" alt=\"${0}\">",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "area:p": true
        },
        "opts": {}
      },
      {
        "content": "<area shape=\"rect\" coords=\"${1}\" href=\"${2}\" alt=\"${0}\">",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "area:r": true
        },
        "opts": {}
      },
      {
        "content": "<article>\n\t${0}\n</article>",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "article": true
        },
        "opts": {}
      },
      {
        "content": "<article class=\"${1}\">\n\t${0}\n</article>",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "article.": true
        },
        "opts": {}
      },
      {
        "content": "<article id=\"${1}\">\n\t${0}\n</article>",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "article#": true
        },
        "opts": {}
      },
      {
        "content": "<aside>\n\t${0}\n</aside>",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "aside": true
        },
        "opts": {}
      },
      {
        "content": "<aside class=\"${1}\">\n\t${0}\n</aside>",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "aside.": true
        },
        "opts": {}
      },
      {
        "content": "<aside id=\"${1}\">\n\t${0}\n</aside>",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "aside#": true
        },
        "opts": {}
      },
      {
        "content": "<audio src=\"${1}\">${0}</audio>",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "audio": true
        },
        "opts": {}
      },
      {
        "content": "<b>${0}</b>",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "b": true
        },
        "opts": {}
      },
      {
        "content": "<base href=\"${1}\" target=\"${0}\">",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "base": true
        },
        "opts": {}
      },
      {
        "content": "<bdi>${0}</bdo>",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "bdi": true
        },
        "opts": {}
      },
      {
        "content": "<bdo dir=\"${1}\">${0}</bdo>",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "bdo": true
        },
        "opts": {}
      },
      {
        "content": "<bdo dir=\"ltr\">${0}</bdo>",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "bdo:l": true
        },
        "opts": {}
      },
      {
        "content": "<bdo dir=\"rtl\">${0}</bdo>",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "bdo:r": true
        },
        "opts": {}
      },
      {
        "content": "<blockquote>\n\t${0}\n</blockquote>",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "blockquote": true
        },
        "opts": {}
      },
      {
        "content": "<body>\n\t${0}\n</body>",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "body": true
        },
        "opts": {}
      },
      {
        "content": "<br>",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "br": true
        },
        "opts": {}
      },
      {
        "content": "<button type=\"${1:submit}\">${0}</button>",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "button": true
        },
        "opts": {}
      },
      {
        "content": "<button class=\"${1:button}\" type=\"${2:submit}\">${0}</button>",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "button.": true
        },
        "opts": {}
      },
      {
        "content": "<button id=\"${1}\" type=\"${2:submit}\">${0}</button>",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "button#": true
        },
        "opts": {}
      },
      {
        "content": "<button type=\"submit\">${0}</button>",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "button:s": true
        },
        "opts": {}
      },
      {
        "content": "<button type=\"reset\">${0}</button>",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "button:r": true
        },
        "opts": {}
      },
      {
        "content": "<canvas>\n\t${0}\n</canvas>",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "canvas": true
        },
        "opts": {}
      },
      {
        "content": "<caption>${0}</caption>",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "caption": true
        },
        "opts": {}
      },
      {
        "content": "<cite>${0}</cite>",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "cite": true
        },
        "opts": {}
      },
      {
        "content": "<code>${0}</code>",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "code": true
        },
        "opts": {}
      },
      {
        "content": "<col>",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "col": true
        },
        "opts": {}
      },
      {
        "content": "<colgroup>\n\t${0}\n</colgroup>",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "colgroup": true
        },
        "opts": {}
      },
      {
        "content": "<colgroup>\n\t<col>\n\tcol+${0}\n</colgroup>",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "colgroup+": true
        },
        "opts": {}
      },
      {
        "content": "<command type=\"command\" label=\"${1}\" icon=\"${0}\">",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "command": true
        },
        "opts": {}
      },
      {
        "content": "<command type=\"checkbox\" label=\"${1}\" icon=\"${0}\">",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "command:c": true
        },
        "opts": {}
      },
      {
        "content": "<command type=\"radio\" radiogroup=\"${1}\" label=\"${2}\" icon=\"${0}\">",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "command:r": true
        },
        "opts": {}
      },
      {
        "content": "<datagrid>\n\t${0}\n</datagrid>",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "datagrid": true
        },
        "opts": {}
      },
      {
        "content": "<datalist>\n\t${0}\n</datalist>",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "datalist": true
        },
        "opts": {}
      },
      {
        "content": "<datatemplate>\n\t${0}\n</datatemplate>",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "datatemplate": true
        },
        "opts": {}
      },
      {
        "content": "<dd>${0}</dd>",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "dd": true
        },
        "opts": {}
      },
      {
        "content": "<dd class=\"${1}\">${0}</dd>",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "dd.": true
        },
        "opts": {}
      },
      {
        "content": "<dd id=\"${1}\">${0}</dd>",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "dd#": true
        },
        "opts": {}
      },
      {
        "content": "<del>${0}</del>",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "del": true
        },
        "opts": {}
      },
      {
        "content": "<details>${0}</details>",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "details": true
        },
        "opts": {}
      },
      {
        "content": "<dfn>${0}</dfn>",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "dfn": true
        },
        "opts": {}
      },
      {
        "content": "<dialog>\n\t${0}\n</dialog>",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "dialog": true
        },
        "opts": {}
      },
      {
        "content": "<div>\n\t${0}\n</div>",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "div": true
        },
        "opts": {}
      },
      {
        "content": "<div class=\"${1}\">\n\t${0}\n</div>",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "div.": true
        },
        "opts": {}
      },
      {
        "content": "<div id=\"${1}\">\n\t${0}\n</div>",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "div#": true
        },
        "opts": {}
      },
      {
        "content": "<dl>\n\t${0}\n</dl>",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "dl": true
        },
        "opts": {}
      },
      {
        "content": "<dl class=\"${1}\">\n\t${0}\n</dl>",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "dl.": true
        },
        "opts": {}
      },
      {
        "content": "<dl id=\"${1}\">\n\t${0}\n</dl>",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "dl#": true
        },
        "opts": {}
      },
      {
        "content": "<dl>\n\t<dt>${1}</dt>\n\t<dd>${2}</dd>\n\tdt+${0}\n</dl>",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "dl+": true
        },
        "opts": {}
      },
      {
        "content": "<dt>${0}</dt>",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "dt": true
        },
        "opts": {}
      },
      {
        "content": "<dt class=\"${1}\">${0}</dt>",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "dt.": true
        },
        "opts": {}
      },
      {
        "content": "<dt id=\"${1}\">${0}</dt>",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "dt#": true
        },
        "opts": {}
      },
      {
        "content": "<dt>${1}</dt>\n<dd>${2}</dd>\ndt+${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "dt+": true
        },
        "opts": {}
      },
      {
        "content": "<em>${0}</em>",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "em": true
        },
        "opts": {}
      },
      {
        "content": "<embed src=\"${1}\" type=\"${0}\">",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "embed": true
        },
        "opts": {}
      },
      {
        "content": "<fieldset>\n\t${0}\n</fieldset>",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "fieldset": true
        },
        "opts": {}
      },
      {
        "content": "<fieldset class=\"${1}\">\n\t${0}\n</fieldset>",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "fieldset.": true
        },
        "opts": {}
      },
      {
        "content": "<fieldset id=\"${1}\">\n\t${0}\n</fieldset>",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "fieldset#": true
        },
        "opts": {}
      },
      {
        "content": "<fieldset>\n\t<legend><span>${1}</span></legend>\n\t${2}\n</fieldset>\nfieldset+${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "fieldset+": true
        },
        "opts": {}
      },
      {
        "content": "<figcaption>${0}</figcaption>",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "figcaption": true
        },
        "opts": {}
      },
      {
        "content": "<figure>${0}</figure>",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "figure": true
        },
        "opts": {}
      },
      {
        "content": "<figure id=\"${1}\">\n\t${0}\n</figure>",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "figure#": true
        },
        "opts": {}
      },
      {
        "content": "<figure class=\"${1}\">\n\t${0}\n</figure>",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "figure.": true
        },
        "opts": {}
      },
      {
        "content": "<footer>\n\t${0}\n</footer>",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "footer": true
        },
        "opts": {}
      },
      {
        "content": "<footer class=\"${1}\">\n\t${0}\n</footer>",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "footer.": true
        },
        "opts": {}
      },
      {
        "content": "<footer id=\"${1}\">\n\t${0}\n</footer>",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "footer#": true
        },
        "opts": {}
      },
      {
        "content": "<form action=\"${1}\" method=\"${2:post}\">\n\t${0}\n</form>",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "form": true
        },
        "opts": {}
      },
      {
        "content": "<form class=\"${1}\" action=\"${2}\" method=\"${3:post}\">\n\t${0}\n</form>",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "form.": true
        },
        "opts": {}
      },
      {
        "content": "<form id=\"${1}\" action=\"${2}\" method=\"${3:post}\">\n\t${0}\n</form>",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "form#": true
        },
        "opts": {}
      },
      {
        "content": "<h1>${0}</h1>",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "h1": true
        },
        "opts": {}
      },
      {
        "content": "<h1 class=\"${1}\">${0}</h1>",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "h1.": true
        },
        "opts": {}
      },
      {
        "content": "<h1 id=\"${1}\">${0}</h1>",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "h1#": true
        },
        "opts": {}
      },
      {
        "content": "<h2>${0}</h2>",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "h2": true
        },
        "opts": {}
      },
      {
        "content": "<h2 class=\"${1}\">${0}</h2>",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "h2.": true
        },
        "opts": {}
      },
      {
        "content": "<h2 id=\"${1}\">${0}</h2>",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "h2#": true
        },
        "opts": {}
      },
      {
        "content": "<h3>${0}</h3>",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "h3": true
        },
        "opts": {}
      },
      {
        "content": "<h3 class=\"${1}\">${0}</h3>",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "h3.": true
        },
        "opts": {}
      },
      {
        "content": "<h3 id=\"${1}\">${0}</h3>",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "h3#": true
        },
        "opts": {}
      },
      {
        "content": "<h4>${0}</h4>",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "h4": true
        },
        "opts": {}
      },
      {
        "content": "<h4 class=\"${1}\">${0}</h4>",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "h4.": true
        },
        "opts": {}
      },
      {
        "content": "<h4 id=\"${1}\">${0}</h4>",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "h4#": true
        },
        "opts": {}
      },
      {
        "content": "<h5>${0}</h5>",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "h5": true
        },
        "opts": {}
      },
      {
        "content": "<h5 class=\"${1}\">${0}</h5>",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "h5.": true
        },
        "opts": {}
      },
      {
        "content": "<h5 id=\"${1}\">${0}</h5>",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "h5#": true
        },
        "opts": {}
      },
      {
        "content": "<h6>${0}</h6>",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "h6": true
        },
        "opts": {}
      },
      {
        "content": "<h6 class=\"${1}\">${0}</h6>",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "h6.": true
        },
        "opts": {}
      },
      {
        "content": "<h6 id=\"${1}\">${0}</h6>",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "h6#": true
        },
        "opts": {}
      },
      {
        "content": "<header>\n\t${0}\n</header>",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "header": true
        },
        "opts": {}
      },
      {
        "content": "<header class=\"${1}\">\n\t${0}\n</header>",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "header.": true
        },
        "opts": {}
      },
      {
        "content": "<header id=\"${1}\">\n\t${0}\n</header>",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "header#": true
        },
        "opts": {}
      },
      {
        "content": "<hgroup>\n\t${0}\n</hgroup>",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "hgroup": true
        },
        "opts": {}
      },
      {
        "content": "<hgroup class=\"${1}>\n\t${0}\n</hgroup>",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "hgroup.": true
        },
        "opts": {}
      },
      {
        "content": "<hr>",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "hr": true
        },
        "opts": {}
      },
      {
        "content": "<html>\n${0}\n</html>",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "html": true
        },
        "opts": {}
      },
      {
        "content": "<html xmlns=\"http://www.w3.org/1999/xhtml\">\n${0}\n</html>",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "xhtml": true
        },
        "opts": {}
      },
      {
        "content": "<i>${0}</i>",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "i": true
        },
        "opts": {}
      },
      {
        "content": "<iframe src=\"${1}\" frameborder=\"0\"></iframe>",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "iframe": true
        },
        "opts": {}
      },
      {
        "content": "<iframe class=\"${1}\" src=\"${2}\" frameborder=\"0\"></iframe>",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "iframe.": true
        },
        "opts": {}
      },
      {
        "content": "<iframe id=\"${1}\" src=\"${2}\" frameborder=\"0\"></iframe>",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "iframe#": true
        },
        "opts": {}
      },
      {
        "content": "<img src=\"${1}\" alt=\"${2}\">",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "img": true
        },
        "opts": {}
      },
      {
        "content": "<img class=\"${1}\" src=\"${2}\" alt=\"${3}\">",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "img.": true
        },
        "opts": {}
      },
      {
        "content": "<img id=\"${1}\" src=\"${2}\" alt=\"${3}\">",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "img#": true
        },
        "opts": {}
      },
      {
        "content": "<input type=\"${1:text/submit/hidden/button/image}\" name=\"${2}\" id=\"${3:$2}\" value=\"${4}\">",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "input": true
        },
        "opts": {}
      },
      {
        "content": "<input class=\"${1}\" type=\"${2:text/submit/hidden/button/image}\" name=\"${3}\" id=\"${4:$3}\" value=\"${5}\">",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "input.": true
        },
        "opts": {}
      },
      {
        "content": "<input type=\"text\" name=\"${1}\" id=\"${2:$1}\" value=\"${3}\">",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "input:text": true
        },
        "opts": {}
      },
      {
        "content": "<input type=\"submit\" name=\"${1}\" id=\"${2:$1}\" value=\"${3}\">",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "input:submit": true
        },
        "opts": {}
      },
      {
        "content": "<input type=\"hidden\" name=\"${1}\" id=\"${2:$1}\" value=\"${3}\">",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "input:hidden": true
        },
        "opts": {}
      },
      {
        "content": "<input type=\"button\" name=\"${1}\" id=\"${2:$1}\" value=\"${3}\">",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "input:button": true
        },
        "opts": {}
      },
      {
        "content": "<input type=\"image\" name=\"${1}\" id=\"${2:$1}\" src=\"${3}\" alt=\"${4}\">",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "input:image": true
        },
        "opts": {}
      },
      {
        "content": "<input type=\"checkbox\" name=\"${1}\" id=\"${2:$1}\">",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "input:checkbox": true
        },
        "opts": {}
      },
      {
        "content": "<input type=\"radio\" name=\"${1}\" id=\"${2:$1}\">",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "input:radio": true
        },
        "opts": {}
      },
      {
        "content": "<input type=\"color\" name=\"${1}\" id=\"${2:$1}\" value=\"${3}\">",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "input:color": true
        },
        "opts": {}
      },
      {
        "content": "<input type=\"date\" name=\"${1}\" id=\"${2:$1}\" value=\"${3}\">",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "input:date": true
        },
        "opts": {}
      },
      {
        "content": "<input type=\"datetime\" name=\"${1}\" id=\"${2:$1}\" value=\"${3}\">",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "input:datetime": true
        },
        "opts": {}
      },
      {
        "content": "<input type=\"datetime-local\" name=\"${1}\" id=\"${2:$1}\" value=\"${3}\">",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "input:datetime-local": true
        },
        "opts": {}
      },
      {
        "content": "<input type=\"email\" name=\"${1}\" id=\"${2:$1}\" value=\"${3}\">",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "input:email": true
        },
        "opts": {}
      },
      {
        "content": "<input type=\"file\" name=\"${1}\" id=\"${2:$1}\" value=\"${3}\">",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "input:file": true
        },
        "opts": {}
      },
      {
        "content": "<input type=\"month\" name=\"${1}\" id=\"${2:$1}\" value=\"${3}\">",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "input:month": true
        },
        "opts": {}
      },
      {
        "content": "<input type=\"number\" name=\"${1}\" id=\"${2:$1}\" value=\"${3}\">",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "input:number": true
        },
        "opts": {}
      },
      {
        "content": "<input type=\"password\" name=\"${1}\" id=\"${2:$1}\" value=\"${3}\">",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "input:password": true
        },
        "opts": {}
      },
      {
        "content": "<input type=\"range\" name=\"${1}\" id=\"${2:$1}\" value=\"${3}\">",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "input:range": true
        },
        "opts": {}
      },
      {
        "content": "<input type=\"reset\" name=\"${1}\" id=\"${2:$1}\" value=\"${3}\">",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "input:reset": true
        },
        "opts": {}
      },
      {
        "content": "<input type=\"search\" name=\"${1}\" id=\"${2:$1}\" value=\"${3}\">",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "input:search": true
        },
        "opts": {}
      },
      {
        "content": "<input type=\"time\" name=\"${1}\" id=\"${2:$1}\" value=\"${3}\">",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "input:time": true
        },
        "opts": {}
      },
      {
        "content": "<input type=\"url\" name=\"${1}\" id=\"${2:$1}\" value=\"${3}\">",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "input:url": true
        },
        "opts": {}
      },
      {
        "content": "<input type=\"week\" name=\"${1}\" id=\"${2:$1}\" value=\"${3}\">",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "input:week": true
        },
        "opts": {}
      },
      {
        "content": "<ins>${0}</ins>",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ins": true
        },
        "opts": {}
      },
      {
        "content": "<kbd>${0}</kbd>",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "kbd": true
        },
        "opts": {}
      },
      {
        "content": "<label for=\"${0:$1}\">${1}</label>",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "label": true
        },
        "opts": {}
      },
      {
        "content": "<label for=\"${2:$1}\">${1}</label>\n<input type=\"${3:text/submit/hidden/button}\" name=\"${4:$2}\" id=\"${5:$2}\" value=\"${6}\" />",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "label:i": true
        },
        "opts": {}
      },
      {
        "content": "<label for=\"${2:$1}\">${1}</label>\n<select name=\"${3:$2}\" id=\"${4:$2}\">\n\t<option value=\"${5}\">${0:$5}</option>\n</select>",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "label:s": true
        },
        "opts": {}
      },
      {
        "content": "<legend>${0}</legend>",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "legend": true
        },
        "opts": {}
      },
      {
        "content": "<legend><span>${0}</span></legend>",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "legend+": true
        },
        "opts": {}
      },
      {
        "content": "<li>${0}</li>",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "li": true
        },
        "opts": {}
      },
      {
        "content": "<li class=\"${1}\">${0}</li>",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "li.": true
        },
        "opts": {}
      },
      {
        "content": "<li>${1}</li>\nli+",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "li+": true
        },
        "opts": {}
      },
      {
        "content": "<li><a href=\"${0:#}\">${1}</a></li>",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "lia": true
        },
        "opts": {}
      },
      {
        "content": "<li><a href=\"${2:#}\">${1}</a></li>\nlia+",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "lia+": true
        },
        "opts": {}
      },
      {
        "content": "<link rel=\"${1}\" href=\"${2}\" title=\"${3}\" type=\"${4}\">",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "link": true
        },
        "opts": {}
      },
      {
        "content": "<link rel=\"alternate\" href=\"${1:atom.xml}\" title=\"Atom\" type=\"application/atom+xml\">",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "link:atom": true
        },
        "opts": {}
      },
      {
        "content": "<link rel=\"stylesheet\" href=\"${1:style.css}\">",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "link:s": true
        },
        "opts": {}
      },
      {
        "content": "<link rel=\"stylesheet\" href=\"${1:style.css}\" type=\"text/css\" media=\"${2:all}\">",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "link:css": true
        },
        "opts": {}
      },
      {
        "content": "<link rel=\"shortcut icon\" href=\"${1:favicon.ico}\" type=\"image/x-icon\">",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "link:favicon": true
        },
        "opts": {}
      },
      {
        "content": "<link rel=\"alternate\" href=\"${1:rss.xml}\" title=\"RSS\" type=\"application/atom+xml\">",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "link:rss": true
        },
        "opts": {}
      },
      {
        "content": "<link rel=\"apple-touch-icon\" href=\"${1:favicon.png}\">",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "link:touch": true
        },
        "opts": {}
      },
      {
        "content": "<main role=\"main\">\n\t${0}\n</main>",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "main": true
        },
        "opts": {}
      },
      {
        "content": "<map name=\"${1}\">\n\t${0}\n</map>",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "map": true
        },
        "opts": {}
      },
      {
        "content": "<map class=\"${1}\" name=\"${2}\">\n\t${0}\n</map>",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "map.": true
        },
        "opts": {}
      },
      {
        "content": "<map name=\"${1}\" id=\"${2:$1}>\n\t${0}\n</map>",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "map#": true
        },
        "opts": {}
      },
      {
        "content": "<map name=\"${1}\">\n\t<area shape=\"${2}\" coords=\"${3}\" href=\"${4}\" alt=\"${5}\" />${6}\n</map>",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "map+": true
        },
        "opts": {}
      },
      {
        "content": "<mark>${0}</mark>",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "mark": true
        },
        "opts": {}
      },
      {
        "content": "<menu>\n\t${0}\n</menu>",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "menu": true
        },
        "opts": {}
      },
      {
        "content": "<menu type=\"context\">\n\t${0}\n</menu>",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "menu:c": true
        },
        "opts": {}
      },
      {
        "content": "<menu type=\"toolbar\">\n\t${0}\n</menu>",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "menu:t": true
        },
        "opts": {}
      },
      {
        "content": "<meta http-equiv=\"${1}\" content=\"${2}\">",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "meta": true
        },
        "opts": {}
      },
      {
        "content": "<meta ${0}>",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "meta:s": true
        },
        "opts": {}
      },
      {
        "content": "<meta name=\"description\" content=\"${0}\">",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "meta:d": true
        },
        "opts": {}
      },
      {
        "content": "<meta http-equiv=\"X-UA-Compatible\" content=\"IE=${1:7,8,edge}\">",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "meta:compat": true
        },
        "opts": {}
      },
      {
        "content": "<meta http-equiv=\"refresh\" content=\"text/html;charset=UTF-8\">",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "meta:refresh": true
        },
        "opts": {}
      },
      {
        "content": "<meta http-equiv=\"content-type\" content=\"text/html;charset=UTF-8\">",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "meta:utf": true
        },
        "opts": {}
      },
      {
        "content": "<meter>${0}</meter>",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "meter": true
        },
        "opts": {}
      },
      {
        "content": "<nav>\n\t${0}\n</nav>",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "nav": true
        },
        "opts": {}
      },
      {
        "content": "<nav class=\"${1}\">\n\t${0}\n</nav>",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "nav.": true
        },
        "opts": {}
      },
      {
        "content": "<nav id=\"${1}\">\n\t${0}\n</nav>",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "nav#": true
        },
        "opts": {}
      },
      {
        "content": "<noscript>\n\t${0}\n</noscript>",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "noscript": true
        },
        "opts": {}
      },
      {
        "content": "<object data=\"${1}\" type=\"${2}\">\n\t${3}\n</object>",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "object": true
        },
        "opts": {}
      },
      {
        "content": "<object width=\"$2\" height=\"$3\" classid=\"clsid:02BF25D5-8C17-4B23-BC80-D3488ABDDC6B\"\ncodebase=\"http://www.apple.com/qtactivex/qtplugin.cab\">\n\t<param name=\"src\" value=\"$1\">\n\t<param name=\"controller\" value=\"$4\">\n\t<param name=\"autoplay\" value=\"$5\">\n\t<embed src=\"${1:movie.mov}\"\n\t\twidth=\"${2:320}\" height=\"${3:240}\"\n\t\tcontroller=\"${4:true}\" autoplay=\"${5:true}\"\n\t\tscale=\"tofit\" cache=\"true\"\n\t\tpluginspage=\"http://www.apple.com/quicktime/download/\">\n</object>",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "movie": true
        },
        "opts": {}
      },
      {
        "content": "<ol>\n\t${0}\n</ol>",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ol": true
        },
        "opts": {}
      },
      {
        "content": "<ol class=\"${1}\">\n\t${0}\n</ol>",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ol.": true
        },
        "opts": {}
      },
      {
        "content": "<ol id=\"${1}\">\n\t${0}\n</ol>",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ol#": true
        },
        "opts": {}
      },
      {
        "content": "<ol>\n\t<li>${1}</li>\n\tli+${0}\n</ol>",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ol+": true
        },
        "opts": {}
      },
      {
        "content": "<option value=\"${1}\">${0:$1}</option>",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "opt": true
        },
        "opts": {}
      },
      {
        "content": "<option value=\"${1}\">${2:$1}</option>\nopt+${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "opt+": true
        },
        "opts": {}
      },
      {
        "content": "<option>${0}</option>",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "optt": true
        },
        "opts": {}
      },
      {
        "content": "<optgroup>\n\t<option value=\"${1}\">${2:$1}</option>\n\topt+${0}\n</optgroup>",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "optgroup": true
        },
        "opts": {}
      },
      {
        "content": "<output>${0}</output>",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "output": true
        },
        "opts": {}
      },
      {
        "content": "<p>${0}</p>",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "p": true
        },
        "opts": {}
      },
      {
        "content": "<p class=\"${1}\">${0}</p>",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "p.": true
        },
        "opts": {}
      },
      {
        "content": "<p id=\"${1}\">${0}</p>",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "p#": true
        },
        "opts": {}
      },
      {
        "content": "<param name=\"${1}\" value=\"${2}\">",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "param": true
        },
        "opts": {}
      },
      {
        "content": "<pre>\n\t${0}\n</pre>",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "pre": true
        },
        "opts": {}
      },
      {
        "content": "<progress>${0}</progress>",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "progress": true
        },
        "opts": {}
      },
      {
        "content": "<q>${0}</q>",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "q": true
        },
        "opts": {}
      },
      {
        "content": "<rp>${0}</rp>",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "rp": true
        },
        "opts": {}
      },
      {
        "content": "<rt>${0}</rt>",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "rt": true
        },
        "opts": {}
      },
      {
        "content": "<ruby>\n\t<rp><rt>${0}</rt></rp>\n</ruby>",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ruby": true
        },
        "opts": {}
      },
      {
        "content": "<s>${0}</s>",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "s": true
        },
        "opts": {}
      },
      {
        "content": "<samp>\n\t${0}\n</samp>",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "samp": true
        },
        "opts": {}
      },
      {
        "content": "<script>\n\t${0}\n</script>",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "script": true
        },
        "opts": {}
      },
      {
        "content": "<script src=\"${0}.js\"></script>",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "scripts": true
        },
        "opts": {}
      },
      {
        "content": "<script type=\"${1}\" id=\"${2}\">\n\t${0}\n</script>",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "scriptt": true
        },
        "opts": {}
      },
      {
        "content": "<script src=\"${0}.js\" charset=\"utf-8\"></script>",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "scriptsrc": true
        },
        "opts": {}
      },
      {
        "content": "<section>\n\t${0}\n</section>",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "section": true
        },
        "opts": {}
      },
      {
        "content": "<section class=\"${1}\">\n\t${0}\n</section>",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "section.": true
        },
        "opts": {}
      },
      {
        "content": "<section id=\"${1}\">\n\t${0}\n</section>",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "section#": true
        },
        "opts": {}
      },
      {
        "content": "<select name=\"${1}\" id=\"${2:$1}\">\n\t${0}\n</select>",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "select": true
        },
        "opts": {}
      },
      {
        "content": "<select name=\"${1}\" id=\"${2:$1}\" class=\"${3}>\n\t${0}\n</select>",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "select.": true
        },
        "opts": {}
      },
      {
        "content": "<select name=\"${1}\" id=\"${2:$1}\">\n\t<option value=\"${3}\">${4:$3}</option>\n\topt+${0}\n</select>",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "select+": true
        },
        "opts": {}
      },
      {
        "content": "<small>${0}</small>",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "small": true
        },
        "opts": {}
      },
      {
        "content": "<source src=\"${1}\" type=\"${2}\" media=\"${0}\">",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "source": true
        },
        "opts": {}
      },
      {
        "content": "<span>${0}</span>",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "span": true
        },
        "opts": {}
      },
      {
        "content": "<span class=\"${1}\">${0}</span>",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "span.": true
        },
        "opts": {}
      },
      {
        "content": "<span id=\"${1}\">${0}</span>",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "span#": true
        },
        "opts": {}
      },
      {
        "content": "<strong>${0}</strong>",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "strong": true
        },
        "opts": {}
      },
      {
        "content": "<style type=\"text/css\" media=\"${1:all}\">\n\t${0}\n</style>",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "style": true
        },
        "opts": {}
      },
      {
        "content": "<sub>${0}</sub>",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "sub": true
        },
        "opts": {}
      },
      {
        "content": "<summary>\n\t${0}\n</summary>",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "summary": true
        },
        "opts": {}
      },
      {
        "content": "<sup>${0}</sup>",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "sup": true
        },
        "opts": {}
      },
      {
        "content": "<table>\n\t${0}\n</table>",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "table": true
        },
        "opts": {}
      },
      {
        "content": "<table class=\"${1}\">\n\t${0}\n</table>",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "table.": true
        },
        "opts": {}
      },
      {
        "content": "<table id=\"${1}\">\n\t${0}\n</table>",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "table#": true
        },
        "opts": {}
      },
      {
        "content": "<tbody>\n\t${0}\n</tbody>",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "tbody": true
        },
        "opts": {}
      },
      {
        "content": "<td>${0}</td>",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "td": true
        },
        "opts": {}
      },
      {
        "content": "<td class=\"${1}\">${0}</td>",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "td.": true
        },
        "opts": {}
      },
      {
        "content": "<td id=\"${1}\">${0}</td>",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "td#": true
        },
        "opts": {}
      },
      {
        "content": "<td>${1}</td>\ntd+${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "td+": true
        },
        "opts": {}
      },
      {
        "content": "<textarea name=\"${1}\" id=\"${2:$1}\" rows=\"${3:8}\" cols=\"${4:40}\">${5}</textarea>",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "textarea": true
        },
        "opts": {}
      },
      {
        "content": "<tfoot>\n\t${0}\n</tfoot>",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "tfoot": true
        },
        "opts": {}
      },
      {
        "content": "<th>${0}</th>",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "th": true
        },
        "opts": {}
      },
      {
        "content": "<th class=\"${1}\">${0}</th>",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "th.": true
        },
        "opts": {}
      },
      {
        "content": "<th id=\"${1}\">${0}</th>",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "th#": true
        },
        "opts": {}
      },
      {
        "content": "<th>${1}</th>\nth+${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "th+": true
        },
        "opts": {}
      },
      {
        "content": "<thead>\n\t${0}\n</thead>",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "thead": true
        },
        "opts": {}
      },
      {
        "content": "<time datetime=\"${1}\" pubdate=\"${2:$1}\">${0:$1}</time>",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "time": true
        },
        "opts": {}
      },
      {
        "content": "<tr>\n\t${0}\n</tr>",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "tr": true
        },
        "opts": {}
      },
      {
        "content": "<tr>\n\t<td>${1}</td>\n\ttd+${0}\n</tr>",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "tr+": true
        },
        "opts": {}
      },
      {
        "content": "<track src=\"${1}\" srclang=\"${2}\" label=\"${3}\" default=\"${4:default}>${5}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "track": true
        },
        "opts": {}
      },
      {
        "content": "<ul>\n\t${0}\n</ul>",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ul": true
        },
        "opts": {}
      },
      {
        "content": "<ul class=\"${1}\">\n\t${0}\n</ul>",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ul.": true
        },
        "opts": {}
      },
      {
        "content": "<ul id=\"${1}\">\n\t${0}\n</ul>",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ul#": true
        },
        "opts": {}
      },
      {
        "content": "<ul>\n\t<li>${1}</li>\n\tli+${0}\n</ul>",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ul+": true
        },
        "opts": {}
      },
      {
        "content": "<var>${0}</var>",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "var": true
        },
        "opts": {}
      },
      {
        "content": "<video src=\"${1}\" height=\"${2}\" width=\"${3}\" preload=\"${4:none}\" autoplay=\"${5:autoplay}\">${6}</video>",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "video": true
        },
        "opts": {}
      },
      {
        "content": "<video class=\"${1}\" src=\"${2}\" height=\"${3}\" width=\"${4}\" preload=\"${5:none}\" autoplay=\"${6:autoplay}\">${7}</video>",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "video.": true
        },
        "opts": {}
      },
      {
        "content": "<wbr>",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "wbr": true
        },
        "opts": {}
      },
      {
        "content": "<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "viewport": true
        },
        "opts": {}
      }
    ],
    "html_minimal": [
      {
        "content": "id=\"$1\"$2",
        "doc": null,
        "grammar": "snu",
        "label": null,
        "matches": {
          "id": true
        },
        "opts": {}
      },
      {
        "content": "id=\"$1\" name=\"${2:$1}\"",
        "doc": null,
        "grammar": "snu",
        "label": null,
        "matches": {
          "idn": true
        },
        "opts": {}
      },
      {
        "content": "<label for=\"${2:$1}\">$1</label>\n<input type=\"${3:text}\" name=\"${4:$2}\"${5: id=\"${6:$2}\"} value=\"$7\" />$8",
        "doc": null,
        "grammar": "snu",
        "label": null,
        "matches": {
          "label_and_input": true
        },
        "opts": {}
      },
      {
        "content": "<input type=\"${1:text}\" value=\"$2\" name=\"$3\"${4: id=\"${5:$3}\"}/>$7",
        "doc": null,
        "grammar": "snu",
        "label": null,
        "matches": {
          "input": true
        },
        "opts": {}
      },
      {
        "content": "<input type=\"submit\" value=\"$2\" $3/>$7",
        "doc": null,
        "grammar": "snu",
        "label": null,
        "matches": {
          "submit": true
        },
        "opts": {}
      },
      {
        "content": "<textarea name=\"$2\"${3: id=\"$4\"}>$5</textarea>",
        "doc": null,
        "grammar": "snu",
        "label": null,
        "matches": {
          "textarea": true
        },
        "opts": {}
      },
      {
        "content": "<img src=\"$1\"${2: alt=\"$3\"}/>",
        "doc": null,
        "grammar": "snu",
        "label": null,
        "matches": {
          "img": true
        },
        "opts": {}
      }
    ],
    "htmldjango": [
      {
        "content": "{% ${1} %}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "%": true
        },
        "opts": {}
      },
      {
        "content": "{% ${1:tag_name} %}\n${0}\n{% end$1 %}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "%%": true
        },
        "opts": {}
      },
      {
        "content": "{{ ${1} }}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "{": true
        },
        "opts": {}
      },
      {
        "content": "{% autoescape ${1:off} %}\n\t${0}\n{% endautoescape %}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "autoescape": true
        },
        "opts": {}
      },
      {
        "content": "{% block ${1} %}\n\t${0}\n{% endblock %}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "block": true
        },
        "opts": {}
      },
      {
        "content": "{# ${0:comment} #}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "#": true
        },
        "opts": {}
      },
      {
        "content": "{% comment %}\n\t${0}\n{% endcomment %}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "comment": true
        },
        "opts": {}
      },
      {
        "content": "{% cycle ${1:val1} ${2:val2} ${3:as ${4}} %}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "cycle": true
        },
        "opts": {}
      },
      {
        "content": "{% debug %}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "debug": true
        },
        "opts": {}
      },
      {
        "content": "{% extends \"${0:base.html}\" %}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "extends": true
        },
        "opts": {}
      },
      {
        "content": "{% filter ${1} %}\n\t${0}\n{% endfilter %}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "filter": true
        },
        "opts": {}
      },
      {
        "content": "{% firstof ${1} %}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "firstof": true
        },
        "opts": {}
      },
      {
        "content": "{% for ${1} in ${2} %}\n\t${0}\n{% endfor %}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "for": true
        },
        "opts": {}
      },
      {
        "content": "{% empty %}\n${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "empty": true
        },
        "opts": {}
      },
      {
        "content": "{% if ${1} %}\n\t${0}\n{% endif %}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "if": true
        },
        "opts": {}
      },
      {
        "content": "{% else %}\n\t${1}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "el": true
        },
        "opts": {}
      },
      {
        "content": "{% elif ${1} %}\n\t${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "eif": true
        },
        "opts": {}
      },
      {
        "content": "{% ifchanged %}${1}{% endifchanged %}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ifchanged": true
        },
        "opts": {}
      },
      {
        "content": "{% ifequal ${1} ${2} %}\n\t${0}\n{% endifequal %}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ifequal": true
        },
        "opts": {}
      },
      {
        "content": "{% ifnotequal ${1} ${2} %}\n\t${0}\n{% endifnotequal %}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ifnotequal": true
        },
        "opts": {}
      },
      {
        "content": "{% include \"${0}\" %}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "include": true
        },
        "opts": {}
      },
      {
        "content": "{% load ${0} %}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "load": true
        },
        "opts": {}
      },
      {
        "content": "{% now \"${0:jS F Y H:i}\" %}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "now": true
        },
        "opts": {}
      },
      {
        "content": "{% regroup ${1} by ${2} as ${0} %}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "regroup": true
        },
        "opts": {}
      },
      {
        "content": "{% spaceless %}${0}{% endspaceless %}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "spaceless": true
        },
        "opts": {}
      },
      {
        "content": "{% ssi ${0} %}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ssi": true
        },
        "opts": {}
      },
      {
        "content": "{% trans \"${0:string}\" %}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "trans": true
        },
        "opts": {}
      },
      {
        "content": "{% url ${1} as ${0} %}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "url": true
        },
        "opts": {}
      },
      {
        "content": "{% widthratio ${1:this_value} ${2:max_value} ${0:100} %}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "widthratio": true
        },
        "opts": {}
      },
      {
        "content": "{% with ${1} as ${2} %}\n\t${0}\n{% endwith %}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "with": true
        },
        "opts": {}
      },
      {
        "content": "add:\"${0}\"",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "add": true
        },
        "opts": {}
      },
      {
        "content": "center:\"${0}\"",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "center": true
        },
        "opts": {}
      },
      {
        "content": "cut:\"${0}\"",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "cut": true
        },
        "opts": {}
      },
      {
        "content": "date:\"${0}\"",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "date": true
        },
        "opts": {}
      },
      {
        "content": "default:\"${0}\"",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "default": true
        },
        "opts": {}
      },
      {
        "content": "default_if_none:\"${0}\"",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "defaultifnone": true
        },
        "opts": {}
      },
      {
        "content": "dictsort:\"${0}\"",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "dictsort": true
        },
        "opts": {}
      },
      {
        "content": "dictsortreversed:\"${0}\"",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "dictsortrev": true
        },
        "opts": {}
      },
      {
        "content": "divisibleby:\"${0}\"",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "divisibleby": true
        },
        "opts": {}
      },
      {
        "content": "floatformat:\"${0}\"",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "floatformat": true
        },
        "opts": {}
      },
      {
        "content": "get_digit:\"${0}\"",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "getdigit": true
        },
        "opts": {}
      },
      {
        "content": "join:\"${0}\"",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "join": true
        },
        "opts": {}
      },
      {
        "content": "length_is:\"${0}\"",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "lengthis": true
        },
        "opts": {}
      },
      {
        "content": "pluralize:\"${0}\"",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "pluralize": true
        },
        "opts": {}
      },
      {
        "content": "removetags:\"${0}\"",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "removetags": true
        },
        "opts": {}
      },
      {
        "content": "slice:\"${0}\"",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "slice": true
        },
        "opts": {}
      },
      {
        "content": "stringformat:\"${0}\"",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "stringformat": true
        },
        "opts": {}
      },
      {
        "content": "time:\"${0}\"",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "time": true
        },
        "opts": {}
      },
      {
        "content": "truncatewords:${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "truncatewords": true
        },
        "opts": {}
      },
      {
        "content": "truncatewords_html:${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "truncatewordshtml": true
        },
        "opts": {}
      },
      {
        "content": "urlizetrunc:${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "urlizetrunc": true
        },
        "opts": {}
      },
      {
        "content": "wordwrap:${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "wordwrap": true
        },
        "opts": {}
      },
      {
        "content": "{% $1 %}$2",
        "doc": null,
        "grammar": "snu",
        "label": "",
        "matches": {
          "%": true
        },
        "opts": {
          "b": true,
          "i": true
        }
      },
      {
        "content": "{% ${1:tag_name} %}\n\t$2\n{% end$1 %}",
        "doc": null,
        "grammar": "snu",
        "label": "",
        "matches": {
          "%%": true
        },
        "opts": {
          "b": true,
          "i": true
        }
      },
      {
        "content": "{{ $1 }}$2",
        "doc": null,
        "grammar": "snu",
        "label": "",
        "matches": {
          "{": true
        },
        "opts": {
          "b": true,
          "i": true
        }
      },
      {
        "content": "{% autoescape ${1:off} %}\n\t$2\n{% endautoescape %}",
        "doc": null,
        "grammar": "snu",
        "label": "",
        "matches": {
          "autoescape": true
        },
        "opts": {
          "b": true,
          "i": true
        }
      },
      {
        "content": "{% block $1 %}\n\t$2\n{% endblock $1 %}",
        "doc": null,
        "grammar": "snu",
        "label": "",
        "matches": {
          "block": true
        },
        "opts": {
          "b": true,
          "i": true
        }
      },
      {
        "content": "{# ${1:comment} #}",
        "doc": null,
        "grammar": "snu",
        "label": "",
        "matches": {
          "#": true
        },
        "opts": {
          "b": true,
          "i": true
        }
      },
      {
        "content": "{% comment %}\n\t$1\n{% endcomment %}",
        "doc": null,
        "grammar": "snu",
        "label": "",
        "matches": {
          "comment": true
        },
        "opts": {
          "b": true,
          "i": true
        }
      },
      {
        "content": "{% cycle ${1:val1} ${2:val2} ${3:as $4} %}",
        "doc": null,
        "grammar": "snu",
        "label": "",
        "matches": {
          "cycle": true
        },
        "opts": {
          "b": true,
          "i": true
        }
      },
      {
        "content": "{% debug %}",
        "doc": null,
        "grammar": "snu",
        "label": "",
        "matches": {
          "debug": true
        },
        "opts": {
          "b": true,
          "i": true
        }
      },
      {
        "content": "{% extends \"${1:base.html}\" %}",
        "doc": null,
        "grammar": "snu",
        "label": "",
        "matches": {
          "extends": true
        },
        "opts": {
          "b": true,
          "i": true
        }
      },
      {
        "content": "{% filter $1 %}\n\t$2\n{% endfilter %}",
        "doc": null,
        "grammar": "snu",
        "label": "",
        "matches": {
          "filter": true
        },
        "opts": {
          "b": true,
          "i": true
        }
      },
      {
        "content": "{% firstof $1 %}",
        "doc": null,
        "grammar": "snu",
        "label": "",
        "matches": {
          "firstof": true
        },
        "opts": {
          "b": true,
          "i": true
        }
      },
      {
        "content": "{% for $1 in $2 %}\n\t$3\n{% endfor %}",
        "doc": null,
        "grammar": "snu",
        "label": "",
        "matches": {
          "for": true
        },
        "opts": {
          "b": true,
          "i": true
        }
      },
      {
        "content": "{% empty %}\n\t$1",
        "doc": null,
        "grammar": "snu",
        "label": "",
        "matches": {
          "empty": true
        },
        "opts": {
          "b": true,
          "i": true
        }
      },
      {
        "content": "{% if $1 %}\n\t$2\n{% endif %}",
        "doc": null,
        "grammar": "snu",
        "label": "",
        "matches": {
          "if": true
        },
        "opts": {
          "b": true,
          "i": true
        }
      },
      {
        "content": "{% if $1 %}$2{% endif %}",
        "doc": null,
        "grammar": "snu",
        "label": "",
        "matches": {
          "iif": true
        },
        "opts": {
          "b": true,
          "i": true
        }
      },
      {
        "content": "{% else %}$1",
        "doc": null,
        "grammar": "snu",
        "label": "",
        "matches": {
          "ielse": true
        },
        "opts": {
          "b": true,
          "i": true
        }
      },
      {
        "content": "{% else %}\n\t$1",
        "doc": null,
        "grammar": "snu",
        "label": "",
        "matches": {
          "else": true
        },
        "opts": {
          "b": true,
          "i": true
        }
      },
      {
        "content": "{% elif %}$1",
        "doc": null,
        "grammar": "snu",
        "label": "",
        "matches": {
          "ielif": true
        },
        "opts": {
          "b": true,
          "i": true
        }
      },
      {
        "content": "{% elif %}\n\t$1",
        "doc": null,
        "grammar": "snu",
        "label": "",
        "matches": {
          "elif": true
        },
        "opts": {
          "b": true,
          "i": true
        }
      },
      {
        "content": "{% ifchanged %}$1{% endifchanged %}",
        "doc": null,
        "grammar": "snu",
        "label": "",
        "matches": {
          "ifchanged": true
        },
        "opts": {
          "b": true,
          "i": true
        }
      },
      {
        "content": "{% ifequal $1 $2 %}\n\t$3\n{% endifequal %}",
        "doc": null,
        "grammar": "snu",
        "label": "",
        "matches": {
          "ifequal": true
        },
        "opts": {
          "b": true,
          "i": true
        }
      },
      {
        "content": "{% ifnotequal $1 $2 %}\n\t$3\n{% endifnotequal %}",
        "doc": null,
        "grammar": "snu",
        "label": "",
        "matches": {
          "ifnotequal": true
        },
        "opts": {
          "b": true,
          "i": true
        }
      },
      {
        "content": "{% include \"$1\" %}",
        "doc": null,
        "grammar": "snu",
        "label": "",
        "matches": {
          "include": true
        },
        "opts": {
          "b": true,
          "i": true
        }
      },
      {
        "content": "{% load $1 %}",
        "doc": null,
        "grammar": "snu",
        "label": "",
        "matches": {
          "load": true
        },
        "opts": {
          "b": true,
          "i": true
        }
      },
      {
        "content": "{% now \"${1:jS F Y H:i}\" %}",
        "doc": null,
        "grammar": "snu",
        "label": "",
        "matches": {
          "now": true
        },
        "opts": {
          "b": true,
          "i": true
        }
      },
      {
        "content": "{% regroup $1 by $2 as $3 %}",
        "doc": null,
        "grammar": "snu",
        "label": "",
        "matches": {
          "regroup": true
        },
        "opts": {
          "b": true,
          "i": true
        }
      },
      {
        "content": "{% spaceless %}$1{% endspaceless %}",
        "doc": null,
        "grammar": "snu",
        "label": "",
        "matches": {
          "spaceless": true
        },
        "opts": {
          "b": true,
          "i": true
        }
      },
      {
        "content": "{% ssi $1 %}",
        "doc": null,
        "grammar": "snu",
        "label": "",
        "matches": {
          "ssi": true
        },
        "opts": {
          "b": true,
          "i": true
        }
      },
      {
        "content": "{% trans \"${1:string}\" %}",
        "doc": null,
        "grammar": "snu",
        "label": "",
        "matches": {
          "trans": true
        },
        "opts": {
          "b": true,
          "i": true
        }
      },
      {
        "content": "{% url $1 as $2 %}",
        "doc": null,
        "grammar": "snu",
        "label": "",
        "matches": {
          "url": true
        },
        "opts": {
          "b": true,
          "i": true
        }
      },
      {
        "content": "{% widthratio ${1:this_value} ${2:max_value} ${3:100} %}",
        "doc": null,
        "grammar": "snu",
        "label": "",
        "matches": {
          "widthratio": true
        },
        "opts": {
          "b": true,
          "i": true
        }
      },
      {
        "content": "{% with $1 as $2 %}\n\t${VISUAL}\n{% endwith %}",
        "doc": null,
        "grammar": "snu",
        "label": "",
        "matches": {
          "with": true
        },
        "opts": {
          "b": true,
          "i": true
        }
      },
      {
        "content": "{% verbatim %}\n\t${VISUAL}\n{% endverbatim %}",
        "doc": null,
        "grammar": "snu",
        "label": "",
        "matches": {
          "verbatim": true
        },
        "opts": {
          "b": true,
          "i": true
        }
      },
      {
        "content": "{{ block.super }}",
        "doc": null,
        "grammar": "snu",
        "label": "",
        "matches": {
          "super": true
        },
        "opts": {
          "b": true,
          "i": true
        }
      },
      {
        "content": "{{ STATIC_URL }}",
        "doc": null,
        "grammar": "snu",
        "label": "",
        "matches": {
          "staticu": true
        },
        "opts": {
          "b": true,
          "i": true
        }
      },
      {
        "content": "{% static \"${VISUAL}\" %}",
        "doc": null,
        "grammar": "snu",
        "label": "",
        "matches": {
          "static": true
        },
        "opts": {
          "b": true,
          "i": true
        }
      },
      {
        "content": "{{ MEDIA_URL }}",
        "doc": null,
        "grammar": "snu",
        "label": "",
        "matches": {
          "mediau": true
        },
        "opts": {
          "b": true,
          "i": true
        }
      },
      {
        "content": "{% block ${1:blockname} %}${VISUAL}{% endblock $1 %}",
        "doc": null,
        "grammar": "snu",
        "label": "",
        "matches": {
          "iblock": true
        },
        "opts": {
          "b": true,
          "i": true
        }
      },
      {
        "content": "{% csrf_token %}",
        "doc": null,
        "grammar": "snu",
        "label": "",
        "matches": {
          "csrf": true
        },
        "opts": {
          "b": true,
          "i": true
        }
      },
      {
        "content": "{% blocktrans %}\n    ${VISUAL}\n{% endblocktrans %}",
        "doc": null,
        "grammar": "snu",
        "label": "",
        "matches": {
          "blocktrans": true
        },
        "opts": {
          "b": true,
          "i": true
        }
      },
      {
        "content": "{% lorem $1 %}",
        "doc": null,
        "grammar": "snu",
        "label": "",
        "matches": {
          "lorem": true
        },
        "opts": {
          "b": true,
          "i": true
        }
      },
      {
        "content": "add:\"$1\"",
        "doc": null,
        "grammar": "snu",
        "label": "",
        "matches": {
          "add": true
        },
        "opts": {
          "b": true,
          "i": true
        }
      },
      {
        "content": "center:\"$1\"",
        "doc": null,
        "grammar": "snu",
        "label": "",
        "matches": {
          "center": true
        },
        "opts": {
          "b": true,
          "i": true
        }
      },
      {
        "content": "cut:\"$1\"",
        "doc": null,
        "grammar": "snu",
        "label": "",
        "matches": {
          "cut": true
        },
        "opts": {
          "b": true,
          "i": true
        }
      },
      {
        "content": "date:\"$1\"",
        "doc": null,
        "grammar": "snu",
        "label": "",
        "matches": {
          "date": true
        },
        "opts": {
          "b": true,
          "i": true
        }
      },
      {
        "content": "default:\"$1\"",
        "doc": null,
        "grammar": "snu",
        "label": "",
        "matches": {
          "default": true
        },
        "opts": {
          "b": true,
          "i": true
        }
      },
      {
        "content": "default_if_none:\"$1\"",
        "doc": null,
        "grammar": "snu",
        "label": "",
        "matches": {
          "defaultifnone": true
        },
        "opts": {
          "b": true,
          "i": true
        }
      },
      {
        "content": "dictsort:\"$1\"",
        "doc": null,
        "grammar": "snu",
        "label": "",
        "matches": {
          "dictsort": true
        },
        "opts": {
          "b": true,
          "i": true
        }
      },
      {
        "content": "dictsortreversed:\"$1\"",
        "doc": null,
        "grammar": "snu",
        "label": "",
        "matches": {
          "dictsortrev": true
        },
        "opts": {
          "b": true,
          "i": true
        }
      },
      {
        "content": "divisibleby:\"$1\"",
        "doc": null,
        "grammar": "snu",
        "label": "",
        "matches": {
          "divisibleby": true
        },
        "opts": {
          "b": true,
          "i": true
        }
      },
      {
        "content": "floatformat:\"$1\"",
        "doc": null,
        "grammar": "snu",
        "label": "",
        "matches": {
          "floatformat": true
        },
        "opts": {
          "b": true,
          "i": true
        }
      },
      {
        "content": "get_digit:\"$1\"",
        "doc": null,
        "grammar": "snu",
        "label": "",
        "matches": {
          "getdigit": true
        },
        "opts": {
          "b": true,
          "i": true
        }
      },
      {
        "content": "join:\"$1\"",
        "doc": null,
        "grammar": "snu",
        "label": "",
        "matches": {
          "join": true
        },
        "opts": {
          "b": true,
          "i": true
        }
      },
      {
        "content": "length_is:\"$1\"",
        "doc": null,
        "grammar": "snu",
        "label": "",
        "matches": {
          "lengthis": true
        },
        "opts": {
          "b": true,
          "i": true
        }
      },
      {
        "content": "pluralize:\"$1\"",
        "doc": null,
        "grammar": "snu",
        "label": "",
        "matches": {
          "pluralize": true
        },
        "opts": {
          "b": true,
          "i": true
        }
      },
      {
        "content": "removetags:\"$1\"",
        "doc": null,
        "grammar": "snu",
        "label": "",
        "matches": {
          "removetags": true
        },
        "opts": {
          "b": true,
          "i": true
        }
      },
      {
        "content": "slice:\"$1\"",
        "doc": null,
        "grammar": "snu",
        "label": "",
        "matches": {
          "slice": true
        },
        "opts": {
          "b": true,
          "i": true
        }
      },
      {
        "content": "stringformat:\"$1\"",
        "doc": null,
        "grammar": "snu",
        "label": "",
        "matches": {
          "stringformat": true
        },
        "opts": {
          "b": true,
          "i": true
        }
      },
      {
        "content": "time:\"$1\"",
        "doc": null,
        "grammar": "snu",
        "label": "",
        "matches": {
          "time": true
        },
        "opts": {
          "b": true,
          "i": true
        }
      },
      {
        "content": "truncatewords:$1",
        "doc": null,
        "grammar": "snu",
        "label": "",
        "matches": {
          "truncatewords": true
        },
        "opts": {
          "b": true,
          "i": true
        }
      },
      {
        "content": "truncatewords_html:$1",
        "doc": null,
        "grammar": "snu",
        "label": "",
        "matches": {
          "truncatewordshtml": true
        },
        "opts": {
          "b": true,
          "i": true
        }
      },
      {
        "content": "urlizetrunc:$1",
        "doc": null,
        "grammar": "snu",
        "label": "",
        "matches": {
          "urlizetrunc": true
        },
        "opts": {
          "b": true,
          "i": true
        }
      },
      {
        "content": "wordwrap:$1",
        "doc": null,
        "grammar": "snu",
        "label": "",
        "matches": {
          "wordwrap": true
        },
        "opts": {
          "b": true,
          "i": true
        }
      }
    ],
    "htmljinja": [],
    "htmltornado": [
      {
        "content": "{{ ${0} }}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "{": true
        },
        "opts": {}
      },
      {
        "content": "{% extends \"${0:base.html}\" %}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "extends": true
        },
        "opts": {}
      },
      {
        "content": "{% autoescape ${0:xhtml_escape | None} %}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "autoescape": true
        },
        "opts": {}
      },
      {
        "content": "{% apply ${1:function} %}\n  ${0}\n{% end %}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "apply": true
        },
        "opts": {}
      },
      {
        "content": "{% block ${1} %}\n  ${0}\n{% end %}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "block": true
        },
        "opts": {}
      },
      {
        "content": "{% for ${1:item} in ${2} %}\n  ${0}\n{% end %}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "for": true
        },
        "opts": {}
      },
      {
        "content": "{% from ${1:x} import ${0:y} %}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "from": true
        },
        "opts": {}
      },
      {
        "content": "{% if ${1:condition} %}\n  ${0}\n{% end %}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "if": true
        },
        "opts": {}
      },
      {
        "content": "{% elif ${0:condition} %}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "eif": true
        },
        "opts": {}
      },
      {
        "content": "{% else %}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "el": true
        },
        "opts": {}
      },
      {
        "content": "{% import ${0:module} %}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "import": true
        },
        "opts": {}
      },
      {
        "content": "{% include \"${0:filename}\" %}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "include": true
        },
        "opts": {}
      },
      {
        "content": "{% module ${0:expression} %}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "module": true
        },
        "opts": {}
      },
      {
        "content": "{% raw ${0:expression} %}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "raw": true
        },
        "opts": {}
      },
      {
        "content": "{% set ${1:x} = ${0:y} %}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "set": true
        },
        "opts": {}
      },
      {
        "content": "{% try %}\n  ${1:${VISUAL}}\n{% except %}\n  ${2}\n{% finallly %}\n  ${0}\n{% end %}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "try": true
        },
        "opts": {}
      },
      {
        "content": "{% while ${1:condition} %}\n  ${0}\n{% end %}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "wh": true
        },
        "opts": {}
      }
    ],
    "idris": [
      {
        "content": "import ${0:List}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "imp": true
        },
        "opts": {}
      },
      {
        "content": "${1:fn} : ${2:a} -> ${3:a}\n$1 ${4} =\n\t${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "fn": true
        },
        "opts": {}
      },
      {
        "content": "${1:fn} : ${2:a} -> ${3:a}\n$1 ${4} =\n\t${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "fn1": true
        },
        "opts": {}
      },
      {
        "content": "${1:fn} : ${2:a} -> ${3:a} -> ${4:a}\n$1 ${5} =\n\t${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "fn2": true
        },
        "opts": {}
      },
      {
        "content": "${1:fn} : ${2:a} -> ${3:a} -> ${4:a} -> ${5:a}\n$1 ${6} =\n\t${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "fn3": true
        },
        "opts": {}
      },
      {
        "content": "${1:fn} : ${2:a}\n$1 =\n\t${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "fn0": true
        },
        "opts": {}
      },
      {
        "content": "case ${1} of\n\t${2} =>\n\t\t${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "case": true
        },
        "opts": {}
      },
      {
        "content": "let\n\t${1} =\n\t\t${2}\nin\n\t${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "let": true
        },
        "opts": {}
      },
      {
        "content": "where\n\t${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "wh": true
        },
        "opts": {}
      },
      {
        "content": "if ${1} then\n\t${2:${VISUAL}}\nelse\n\t${0}\n${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "if": true
        },
        "opts": {}
      },
      {
        "content": "(\\\\${1:_} => ${0})",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "\\ \"Lambda function (\\x => ...)\"": true
        },
        "opts": {}
      }
    ],
    "ignore": [
      {
        "content": "### OSX ###\n*.DS_Store\n.AppleDouble\n.LSOverride\n\n# Icon must end with two \r\nIcon\n# Thumbnails\n._*\n# Files that might appear in the root of a volume\n.DocumentRevisions-V100\n.fseventsd\n.Spotlight-V100\n.TemporaryItems\n.Trashes\n.VolumeIcon.icns\n.com.apple.timemachine.donotpresent\n# Directories potentially created on remote AFP share\n.AppleDB\n.AppleDesktop\nNetwork Trash Folder\nTemporary Items\n.apdisk\n\n### Node ###\n# Logs\nlogs\n*.log\nnpm-debug.log*\n\n# Runtime data\npids\n*.pid\n*.seed\n*.pid.lock\n\n# Directory for instrumented libs generated by jscoverage/JSCover\nlib-cov\n\n# Coverage directory used by tools like istanbul\ncoverage\n\n# nyc test coverage\n.nyc_output\n\n# Grunt intermediate storage (http://gruntjs.com/creating-plugins#storing-task-files)\n.grunt\n\n# node-waf configuration\n.lock-wscript\n\n# Compiled binary addons (http://nodejs.org/api/addons.html)\nbuild/Release\n\n# Dependency directories\nnode_modules\njspm_packages\n\n# Optional npm cache directory\n.npm\n\n# Optional eslint cache\n.eslintcache\n\n# Optional REPL history\n.node_repl_history\n\n# Output of 'npm pack'\n*.tgz\n\n# Yarn Integrity file\n.yarn-integrity\n\n# Nuxt build\n.nuxt\n\n# Nuxt generate\ndist",
        "doc": "gitignore file",
        "grammar": "lsp",
        "label": "Gitignore",
        "matches": {
          "gitignore": true
        },
        "opts": {}
      }
    ],
    "jade": [
      {
        "content": "div(ng-repeat='${1} in ${2}')",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "rep": true
        },
        "opts": {}
      },
      {
        "content": "div(ng-repeat='${1} in ${2}' | ${3})",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "repf": true
        },
        "opts": {}
      },
      {
        "content": "div(ng-repeat='${1} in ${2}' track by $index)",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "repi": true
        },
        "opts": {}
      },
      {
        "content": "div(ng-hide='${1}')",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "hide": true
        },
        "opts": {}
      },
      {
        "content": "div(ng-show='${1}')",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "show": true
        },
        "opts": {}
      },
      {
        "content": "div(ng-if='${1}')",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "if": true
        },
        "opts": {}
      }
    ],
    "java": [
      {
        "content": "class ${1} ${2:#:extends_or_implements}{\n    ${0:TARGET}\n}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "class": true
        },
        "opts": {}
      },
      {
        "content": "interface ${1} ${2:#:extends}{\n    ${0:TARGET}\n}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "interface": true
        },
        "opts": {}
      },
      {
        "content": "${1:void} ${2:#:method}(${3}) ${4:throws} {\n    ${0:TARGET}\n}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "method": true
        },
        "opts": {}
      },
      {
        "content": "enum ${1:#:name} {\n    ${0:TARGET}\n}",
        "doc": "",
        "grammar": "snu",
        "label": "enum {}",
        "matches": {
          "enum": true
        },
        "opts": {}
      },
      {
        "content": "public void set${1:Name}(${2:String} ${3:name}) {\nthis.$3 = $3;\n}${0:TARGET}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "set": true
        },
        "opts": {}
      },
      {
        "content": "public ${1:String} get${2:Name}() {\nreturn $2;\n}${0:TARGET}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "get": true
        },
        "opts": {}
      },
      {
        "content": "public void set${1:Name}(${2:String} ${3:name}) {\nthis.$3 = $3;\n}\npublic $2 get$1() {\nreturn $1;\n}${0:TARGET}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "setget": true
        },
        "opts": {}
      },
      {
        "content": "${1:#:type} ${2:#:var}${3};",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "var": true
        },
        "opts": {}
      },
      {
        "content": "static public final ${1:#:type} ${2:#:var} = ${3};${4}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "const": true
        },
        "opts": {}
      },
      {
        "content": "static public final String ${1:var} = \"${2}\";${4}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "const_string": true
        },
        "opts": {}
      },
      {
        "content": "public final ${1:#:type} ${2:#:var} = ${3};",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "final": true
        },
        "opts": {}
      },
      {
        "content": "assert ${1:#:test} : ${2:#:Failure message};${3}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "assert": true
        },
        "opts": {}
      },
      {
        "content": "if (${1}) {\n    ${2:TARGET}\n}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "if": true
        },
        "opts": {}
      },
      {
        "content": "else {\n    ${1:TARGET}\n}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "else": true
        },
        "opts": {}
      },
      {
        "content": "else if (${1}) {\n    ${2:TARGET}\n}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "elif": true,
          "elseif": true
        },
        "opts": {}
      },
      {
        "content": "while (${1}) {\n    ${2:TARGET}\n}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "while": true
        },
        "opts": {}
      },
      {
        "content": "for (${1}; ${2}; ${3}) {\n    ${4:TARGET}\n}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "for": true
        },
        "opts": {}
      },
      {
        "content": "for (${1} : ${2}) {\n    ${3:TARGET}\n}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "fore": true,
          "foreach": true
        },
        "opts": {}
      },
      {
        "content": "switch (${1}) {\n    ${2:TARGET}\n}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "switch": true
        },
        "opts": {}
      },
      {
        "content": "case ${1}:\n    ${2:TARGET}\n${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "case": true
        },
        "opts": {}
      },
      {
        "content": "break;",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "br": true
        },
        "opts": {}
      },
      {
        "content": "default:\n    ${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "de": true,
          "default": true
        },
        "opts": {}
      },
      {
        "content": "try {\n    ${0:TARGET}\n} catch (${1:Exception} ${2:e}) {\n    ${3:e.printStackTrace();}\n}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "try": true
        },
        "opts": {}
      },
      {
        "content": "try (${1:#:Resources}) {\n    ${0:TARGET}\n} catch (${2:Exception} ${3:e}) {\n    ${4:e.printStackTrace();}\n}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "try_resources": true
        },
        "opts": {}
      },
      {
        "content": "try {\n    ${0:TARGET}\n} catch (${1:Exception} ${2:e}) {\n    ${3:e.printStackTrace();}\n} finally {\n    ${4}\n}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "try_finally": true
        },
        "opts": {}
      },
      {
        "content": "catch (${1:Exception} ${2:e}) {\n    ${0:e.printStackTrace();}\n}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "catch": true
        },
        "opts": {}
      },
      {
        "content": "finally {\n    ${0:TARGET}\n}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "finally": true
        },
        "opts": {}
      },
      {
        "content": "throw ${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "th": true
        },
        "opts": {
          "word": true
        }
      },
      {
        "content": "synchronized",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "sy": true
        },
        "opts": {
          "word": true
        }
      },
      {
        "content": "public class ${1} extends ${2:TestCase} {\n    ${0:TARGET}\n}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "tc": true,
          "testclass": true
        },
        "opts": {
          "head": true
        }
      },
      {
        "content": "public void test${1:#:Name}() throws Exception {\n    ${0:TARGET}\n}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "test": true
        },
        "opts": {
          "head": true
        }
      },
      {
        "content": "import ${1};\n${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "import": true,
          "imt": true
        },
        "opts": {}
      },
      {
        "content": "java.util.",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "j.u": true
        },
        "opts": {}
      },
      {
        "content": "java.io.",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "j.i": true
        },
        "opts": {}
      },
      {
        "content": "java.beans.",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "j.b": true
        },
        "opts": {}
      },
      {
        "content": "java.net",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "j.n": true
        },
        "opts": {}
      },
      {
        "content": "java.math.",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "j.m": true
        },
        "opts": {}
      },
      {
        "content": "System.out.println(${1});",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "println": true,
          "sout": true
        },
        "opts": {
          "word": true
        }
      },
      {
        "content": "System.out.printf(\"${1}\", ${2});",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "printf": true,
          "souf": true
        },
        "opts": {
          "word": true
        }
      },
      {
        "content": "System.out.print(${1});",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "print": true
        },
        "opts": {
          "word": true
        }
      },
      {
        "content": "System.out.format(${1});",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "format": true
        },
        "opts": {
          "word": true
        }
      },
      {
        "content": "/**\n * ${0:TARGET}\n */",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "comment": true
        },
        "opts": {}
      },
      {
        "content": "@author ${0:$TM_FULLNAME}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "author": true
        },
        "opts": {}
      },
      {
        "content": "{@code ${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "{code": true
        },
        "opts": {}
      },
      {
        "content": "@deprecated ${0:#:description}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "deprecated": true
        },
        "opts": {}
      },
      {
        "content": "{@docRoot",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "{docRoot": true
        },
        "opts": {}
      },
      {
        "content": "{@inheritDoc",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "{inheritDoc": true
        },
        "opts": {}
      },
      {
        "content": "{@link ${1:#:target} ${0:#:label}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "{link": true
        },
        "opts": {}
      },
      {
        "content": "{@linkplain ${1:#:target} ${0:#:label}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "{linkplain": true
        },
        "opts": {}
      },
      {
        "content": "{@literal ${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "{literal": true
        },
        "opts": {}
      },
      {
        "content": "@param ${1:#:var} ${0:#:description}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "param": true
        },
        "opts": {}
      },
      {
        "content": "@return ${0:#:description}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "return": true
        },
        "opts": {}
      },
      {
        "content": "@see ${0:#:reference}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "see": true
        },
        "opts": {}
      },
      {
        "content": "@serial ${0:#:description}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "serial": true
        },
        "opts": {}
      },
      {
        "content": "@serialField ${0:#:description}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "sd": true
        },
        "opts": {}
      },
      {
        "content": "@serialField ${1:#:name} ${2:#:type} ${0:#:description}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "sf": true
        },
        "opts": {}
      },
      {
        "content": "@since ${0:#:version}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "since": true
        },
        "opts": {}
      },
      {
        "content": "@throws ${1:#:class} ${0:#:description}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "throws": true
        },
        "opts": {}
      },
      {
        "content": "{@value ${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "{value": true
        },
        "opts": {}
      },
      {
        "content": "@version ${0:#:version}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ver": true,
          "version": true
        },
        "opts": {}
      },
      {
        "content": "public class ${1:Hello} {\n  static public void main(String args[]) {\n    System.out.println(\"Hello, world!\");\n  }\n}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "helloworld": true
        },
        "opts": {
          "head": true
        }
      },
      {
        "content": "protected ${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "po": true
        },
        "opts": {}
      },
      {
        "content": "public ${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "pu": true
        },
        "opts": {}
      },
      {
        "content": "private ${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "pr": true
        },
        "opts": {}
      },
      {
        "content": "@Before\nstatic void ${1:intercept}(${2:args}) { ${0} }",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "before": true
        },
        "opts": {}
      },
      {
        "content": "@ManyToMany\n${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "mm": true
        },
        "opts": {}
      },
      {
        "content": "@ManyToOne\n${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "mo": true
        },
        "opts": {}
      },
      {
        "content": "@OneToMany${1:(cascade=CascadeType.ALL)}\n${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "om": true
        },
        "opts": {}
      },
      {
        "content": "@OneToOne\n${1}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "oo": true
        },
        "opts": {}
      },
      {
        "content": "import ${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "im": true
        },
        "opts": {}
      },
      {
        "content": "java.beans.",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "j.b": true
        },
        "opts": {}
      },
      {
        "content": "java.io.",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "j.i": true
        },
        "opts": {}
      },
      {
        "content": "java.math.",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "j.m": true
        },
        "opts": {}
      },
      {
        "content": "java.net.",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "j.n": true
        },
        "opts": {}
      },
      {
        "content": "java.util.",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "j.u": true
        },
        "opts": {}
      },
      {
        "content": "extends ${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ext": true
        },
        "opts": {}
      },
      {
        "content": "implements ${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "imp": true
        },
        "opts": {}
      },
      {
        "content": "/*\n * ${0}\n */",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "/*": true
        },
        "opts": {}
      },
      {
        "content": "static public final ${1:String} ${2:var} = ${3};",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "co": true
        },
        "opts": {}
      },
      {
        "content": "static public final String ${1:var} = \"${2}\";",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "cos": true
        },
        "opts": {}
      },
      {
        "content": "case ${1}:\n\t${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "case": true
        },
        "opts": {}
      },
      {
        "content": "default:\n\t${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "def": true
        },
        "opts": {}
      },
      {
        "content": "else",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "el": true
        },
        "opts": {}
      },
      {
        "content": "else if (${1}) ${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "eif": true
        },
        "opts": {}
      },
      {
        "content": "if (${1}) ${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "if": true
        },
        "opts": {}
      },
      {
        "content": "switch (${1}) {\n\t${0}\n}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "sw": true
        },
        "opts": {}
      },
      {
        "content": "${1:void} ${2:method}(${3}) ${4:throws }",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "m": true
        },
        "opts": {}
      },
      {
        "content": "${1:String} ${2:var}${3: = null}${4};",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "v": true
        },
        "opts": {}
      },
      {
        "content": "List<${1:Object}> ${2:list} = new ArrayList<$1>();${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "d.al": true
        },
        "opts": {}
      },
      {
        "content": "Map<${1:Object}, ${2:Object}> ${3:map} = new HashMap<$1, $2>();${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "d.hm": true
        },
        "opts": {}
      },
      {
        "content": "Set<${1:Object}> ${2:set} = new HashSet<$1>();${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "d.hs": true
        },
        "opts": {}
      },
      {
        "content": "Stack<${1:Object}> ${2:stack} = new Stack<$1>();${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "d.st": true
        },
        "opts": {}
      },
      {
        "content": "abstract ${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ab": true
        },
        "opts": {}
      },
      {
        "content": "final ${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "fi": true
        },
        "opts": {}
      },
      {
        "content": "static ${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "st": true
        },
        "opts": {}
      },
      {
        "content": "synchronized ${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "sy": true
        },
        "opts": {}
      },
      {
        "content": "System.err.print(\"${0:Message}\");",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "err": true
        },
        "opts": {}
      },
      {
        "content": "System.err.printf(\"${1:Message}\", ${0:exception});",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "errf": true
        },
        "opts": {}
      },
      {
        "content": "System.err.println(\"${0:Message}\");",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "errln": true
        },
        "opts": {}
      },
      {
        "content": "assert ${1:test} : \"${2:Failure message}\";",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "as": true
        },
        "opts": {}
      },
      {
        "content": "assertEquals(\"${1:Failure message}\", ${2:expected}, ${3:actual});",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ae": true
        },
        "opts": {}
      },
      {
        "content": "assertArrayEquals(\"${1:Failure message}\", ${2:expecteds}, ${3:actuals});",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "aae": true
        },
        "opts": {}
      },
      {
        "content": "assertFalse(\"${1:Failure message}\", ${2:condition});",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "af": true
        },
        "opts": {}
      },
      {
        "content": "assertTrue(\"${1:Failure message}\", ${2:condition});",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "at": true
        },
        "opts": {}
      },
      {
        "content": "assertNull(\"${1:Failure message}\", ${2:object});",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "an": true
        },
        "opts": {}
      },
      {
        "content": "assertNotNull(\"${1:Failure message}\", ${2:object});",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ann": true
        },
        "opts": {}
      },
      {
        "content": "assertSame(\"${1:Failure message}\", ${2:expected}, ${3:actual});",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ass": true
        },
        "opts": {}
      },
      {
        "content": "assertNotSame(\"${1:Failure message}\", ${2:expected}, ${3:actual});",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "asns": true
        },
        "opts": {}
      },
      {
        "content": "fail(\"${1:Failure message}\");",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "fa": true
        },
        "opts": {}
      },
      {
        "content": "catch(${1:Exception} ${2:e}) ${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ca": true
        },
        "opts": {}
      },
      {
        "content": "throw ${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "thr": true
        },
        "opts": {}
      },
      {
        "content": "throws ${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ths": true
        },
        "opts": {}
      },
      {
        "content": "try {\n\t${0:${VISUAL}}\n} catch(${1:Exception} ${2:e}) {\n}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "try": true
        },
        "opts": {}
      },
      {
        "content": "try {\n\t${0:${VISUAL}}\n} catch(${1:Exception} ${2:e}) {\n} finally {\n}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "tryf": true
        },
        "opts": {}
      },
      {
        "content": "List<${1:listName}> ${2:items} = $1.findAll();",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "findall": true
        },
        "opts": {}
      },
      {
        "content": "${1:var} ${2:item} = $1.findById(${3});",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "findbyid": true
        },
        "opts": {}
      },
      {
        "content": "/**\n * ${0}\n */",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "/**": true
        },
        "opts": {}
      },
      {
        "content": "@brief ${0:Description}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "@br": true
        },
        "opts": {}
      },
      {
        "content": "@param ${0:param}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "@pa": true
        },
        "opts": {}
      },
      {
        "content": "@return ${0:param}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "@re": true
        },
        "opts": {}
      },
      {
        "content": "Logger.debug(${1:param});",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "debug": true
        },
        "opts": {}
      },
      {
        "content": "Logger.error(${1:param});",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "error": true
        },
        "opts": {}
      },
      {
        "content": "Logger.info(${1:param});",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "info": true
        },
        "opts": {}
      },
      {
        "content": "Logger.warn(${1:param});",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "warn": true
        },
        "opts": {}
      },
      {
        "content": "for (${1} : ${2}) ${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "enfor": true
        },
        "opts": {}
      },
      {
        "content": "for (${1}; ${2}; ${3}) ${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "for": true
        },
        "opts": {}
      },
      {
        "content": "while (${1}) ${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "wh": true
        },
        "opts": {}
      },
      {
        "content": "public static void main (String[] args) {\n\t${0}\n}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "psvm": true
        },
        "opts": {}
      },
      {
        "content": "public static void main (String[] args) {\n\t${0}\n}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "main": true
        },
        "opts": {}
      },
      {
        "content": "System.out.println(${0});",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "sout": true
        },
        "opts": {}
      },
      {
        "content": "System.err.println(${0});",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "serr": true
        },
        "opts": {}
      },
      {
        "content": "System.out.print(\"${0:Message}\");",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "print": true
        },
        "opts": {}
      },
      {
        "content": "System.out.printf(\"${1:Message}\", ${0:args});",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "printf": true
        },
        "opts": {}
      },
      {
        "content": "System.out.println(${0});",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "println": true
        },
        "opts": {}
      },
      {
        "content": "System.out.println(Arrays.toString(${0}));",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "printlna": true
        },
        "opts": {}
      },
      {
        "content": "render(${1:param});",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ren": true
        },
        "opts": {}
      },
      {
        "content": "renderArgs.put(\"${1}\", ${2});",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "rena": true
        },
        "opts": {}
      },
      {
        "content": "renderBinary(${1:param});",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "renb": true
        },
        "opts": {}
      },
      {
        "content": "renderJSON(${1:param});",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "renj": true
        },
        "opts": {}
      },
      {
        "content": "renderXml(${1:param});",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "renx": true
        },
        "opts": {}
      },
      {
        "content": "${1:public} void set${3:}(${2:String} ${0:}){\n\tthis.$4 = $4;\n}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "set": true
        },
        "opts": {}
      },
      {
        "content": "${1:public} ${2:String} get${3:}(){\n\treturn this.${0:};\n}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "get": true
        },
        "opts": {}
      },
      {
        "content": "return ${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "re": true
        },
        "opts": {}
      },
      {
        "content": "break;",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "br": true
        },
        "opts": {}
      },
      {
        "content": "public void test${1:Name}() throws Exception {\n\t${0}\n}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "t": true
        },
        "opts": {}
      },
      {
        "content": "@Test\npublic void test${1:Name}() throws Exception {\n\t${0}\n}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "test": true
        },
        "opts": {}
      },
      {
        "content": "Scanner",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "Sc": true
        },
        "opts": {}
      },
      {
        "content": "public static void ${1:index}(${2:args}) { ${0} }",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "action": true
        },
        "opts": {}
      },
      {
        "content": "notFound(${1:param});",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "rnf": true
        },
        "opts": {}
      },
      {
        "content": "notFoundIfNull(${1:param});",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "rnfin": true
        },
        "opts": {}
      },
      {
        "content": "redirect(${1:param});",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "rr": true
        },
        "opts": {}
      },
      {
        "content": "unauthorized(${1:param});",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ru": true
        },
        "opts": {}
      },
      {
        "content": "(unless=${1:param});",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "unless": true
        },
        "opts": {}
      }
    ],
    "javascript": [
      {
        "content": "const express = require('express');\nconst app = express();\nconst port = process.env.PORT || ${1:port};\nconst www = process.env.WWW || '${2:./}';\napp.use(express.static(www));\nconsole.log(`serving \\${www}`);\napp.get('*', (req, res) => {\n\tres.sendFile(`index.html`, { root: www });\n});\napp.listen(port, () => console.log(`listening on http://localhost:\\${port}`));\n$0",
        "doc": "Node.js Express Server",
        "grammar": "lsp",
        "label": "Node.js Express Server",
        "matches": {
          "ex-node-server-simple": true
        },
        "opts": {}
      },
      {
        "content": "${1:#:method_name}: function(${2:#:attribute}) {\n  ${0:TARGET}\n}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          ":f": true
        },
        "opts": {
          "head": true
        }
      },
      {
        "content": "function ${1:#:function_name}(${2:#:argument}) {\n  ${0:TARGET}\n}",
        "doc": "",
        "grammar": "snu",
        "label": "func",
        "matches": {
          "function": true
        },
        "opts": {
          "word": true
        }
      },
      {
        "content": "function ${1:function_name}(${2:argument}) {\n  ${0:TARGET}\n}",
        "doc": "",
        "grammar": "snu",
        "label": "func2",
        "matches": {
          "function2": true
        },
        "opts": {
          "head": true
        }
      },
      {
        "content": "${1:#:class_name}.prototype.${2:#:method_name} = function(${3:#:first_argument}) {\n  ${0:TARGET}\n};",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "proto": true
        },
        "opts": {
          "head": true
        }
      },
      {
        "content": "function(${1}) { ${0:TARGET} };",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "f": true
        },
        "opts": {
          "word": true
        }
      },
      {
        "content": "if (${1:true}) {\n  ${0:TARGET}\n}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "if": true
        },
        "opts": {
          "head": true
        }
      },
      {
        "content": "if (${1:#:condition}) {\n  ${2:TARGET}\n} else {\n  ${3}\n}",
        "doc": "",
        "grammar": "snu",
        "label": "ife",
        "matches": {
          "if-else": true
        },
        "opts": {
          "head": true
        }
      },
      {
        "content": "for (let ${1:i} = 0; $1 < ${2:#:Things}.length; ++$1) {\n  ${0:TARGET}\n}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "for": true
        },
        "opts": {
          "head": true
        }
      },
      {
        "content": "for (let ${1:i} in ${2:#:Things}) {\n  ${0:TARGET}\n}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "forin": true
        },
        "opts": {
          "head": true
        }
      },
      {
        "content": "for (let ${1:i} of ${2:#:Things}) {\n  ${0:TARGET}\n}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "forof": true
        },
        "opts": {
          "head": true
        }
      },
      {
        "content": "while (${1:true}) {\n  ${0:TARGET}\n}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "while": true
        },
        "opts": {
          "head": true
        }
      },
      {
        "content": "switch (${1:#:let}) {\n  case ${2:#:val}:\n    ${0:TARGET}\n    break;\n}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "switch": true
        },
        "opts": {
          "head": true
        }
      },
      {
        "content": "try {\n  ${1:TARGET}\n} catch (${2:e}) {\n  ${3}\n}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "try": true
        },
        "opts": {
          "head": true
        }
      },
      {
        "content": "try {\n  ${1:TARGET}\n} catch (${2:e}) {\n  ${3}\n} finally {\n  ${4}\n}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "try_finally": true
        },
        "opts": {
          "head": true
        }
      },
      {
        "content": "${1:#:value_name}: ${0:#:value},",
        "doc": "",
        "grammar": "snu",
        "label": ":,",
        "matches": {
          "key-value": true
        },
        "opts": {
          "word": true
        }
      },
      {
        "content": "setTimeout(function() { ${0} }, ${1:10});",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "setTimeout-function": true
        },
        "opts": {
          "head": true
        }
      },
      {
        "content": "debugger;",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "db": true,
          "debugger": true
        },
        "opts": {
          "head": true
        }
      },
      {
        "content": "console.log(${0:TARGET});",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "cl": true,
          "console-log": true
        },
        "opts": {
          "head": true
        }
      },
      {
        "content": "console.trace();",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "console-trace": true,
          "ct": true
        },
        "opts": {
          "head": true
        }
      },
      {
        "content": "console.error(${0:TARGET});",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ce": true,
          "console-error": true
        },
        "opts": {
          "head": true
        }
      },
      {
        "content": "console.warn(${0:TARGET});",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "console-warn": true,
          "cw": true
        },
        "opts": {
          "head": true
        }
      },
      {
        "content": "console.info(${0:TARGET});",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ci": true,
          "console-info": true
        },
        "opts": {
          "head": true
        }
      },
      {
        "content": "(function(${1}) {\n  'use strict';\n  ${0:TARGET}\n})(${2});",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "iife": true
        },
        "opts": {
          "head": true
        }
      },
      {
        "content": "JSON.stringify(${1:TARGET}, null, 2);",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "js": true
        },
        "opts": {
          "head": true
        }
      },
      {
        "content": "console.log(JSON.stringify(${1:TARGET}, null, 2));",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "jsc": true
        },
        "opts": {
          "head": true
        }
      },
      {
        "content": "class ${1:#:NAME} {\n  constructor(${2:#:ARGS}) {\n    ${0:TARGET}\n  }\n}",
        "doc": "",
        "grammar": "snu",
        "label": "class {...}",
        "matches": {
          "class": true
        },
        "opts": {
          "head": true
        }
      },
      {
        "content": "class ${1:#:NAME} extends ${2:#:SuperClass} {\n  constructor(${3:#:ARGS}) {\n    ${0:TARGET}\n  }\n}",
        "doc": "",
        "grammar": "snu",
        "label": "class extends {...}",
        "matches": {
          "class-extends": true
        },
        "opts": {
          "head": true
        }
      },
      {
        "content": "static ${1:#:NAME}(${2:#:ARGS}) {\n  ${0:TARGET}\n}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "static": true
        },
        "opts": {
          "head": true
        }
      },
      {
        "content": "set ${1:#:NAME}(${2:#:ARGS}) {\n  ${0:TARGET}\n}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "set": true
        },
        "opts": {
          "head": true
        }
      },
      {
        "content": "get ${1:#:NAME}() {\n  ${0:TARGET}\n}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "get": true
        },
        "opts": {
          "head": true
        }
      },
      {
        "content": "import { ${1:MEMBERS} } from \"${0:TARGET}\";",
        "doc": "",
        "grammar": "snu",
        "label": "import { member, ... } from \"module-name\";",
        "matches": {
          "import": true
        },
        "opts": {
          "head": true
        }
      },
      {
        "content": "import ${1:defaultMember} from \"${0:TARGET}\";",
        "doc": "",
        "grammar": "snu",
        "label": "import defaultMember from \"module-name\";",
        "matches": {
          "import-default": true
        },
        "opts": {
          "head": true
        }
      },
      {
        "content": "import * as ${1:NAME} from \"${0:TARGET}\";",
        "doc": "",
        "grammar": "snu",
        "label": "import * as NAME from \"...\";",
        "matches": {
          "import-all": true
        },
        "opts": {
          "head": true
        }
      },
      {
        "content": "import ${1:defaultMember}, { ${2:MEMBERS} } from \"${0:TARGET}\";",
        "doc": "",
        "grammar": "snu",
        "label": "import defaultMember, { member, ... } from \"module-name\";",
        "matches": {
          "import-default-member": true
        },
        "opts": {
          "head": true
        }
      },
      {
        "content": "${1:class_name}.prototype.${2:method_name} = function(${3}) {\n\t${0:${VISUAL}}\n};",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "proto": true
        },
        "opts": {}
      },
      {
        "content": "function ${1:function_name}(${2}) {\n\t${0:${VISUAL}}\n}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "fun \"function\"": true
        },
        "opts": {}
      },
      {
        "content": "async function ${1:function_name}(${2}) {\n\t${0:${VISUAL}}\n}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "asf \"async function\"": true
        },
        "opts": {}
      },
      {
        "content": "function(${1}) {\n\t${0:${VISUAL}}\n}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "anf \"\" w": true
        },
        "opts": {}
      },
      {
        "content": "var ${1:function_name} = function(${2}) {\n\t${0:${VISUAL}}\n};",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "vaf": true
        },
        "opts": {}
      },
      {
        "content": "var ${1:function_name} = function $1(${2}) {\n\t${0:${VISUAL}}\n};",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "vf": true
        },
        "opts": {}
      },
      {
        "content": "(function(${1}) {\n\t${0:${VISUAL}}\n}(${2}));",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "(f": true
        },
        "opts": {}
      },
      {
        "content": ";(function(${1}) {\n\t${0:${VISUAL}}\n}(${2}))",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          ";fe": true
        },
        "opts": {}
      },
      {
        "content": "var ${1:function_name} = function (${2:argument}) {\n\t${3}\n\t$1 = function ($2) {\n\t\t${0:${VISUAL}}\n\t};\n};",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "sdf": true
        },
        "opts": {}
      },
      {
        "content": "if (${1:true}) {\n\t${0:${VISUAL}}\n}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "if \"if (condition) { ... }\"": true
        },
        "opts": {}
      },
      {
        "content": "if (${1:true}) {\n\t${0:${VISUAL}}\n} else {\n\t${2}\n}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ife \"if (condition) { ... } else { ... }\"": true
        },
        "opts": {}
      },
      {
        "content": "${1:/* condition */} ? ${2:/* if true */} : ${0:/* if false */}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ter": true
        },
        "opts": {}
      },
      {
        "content": "switch (${1:expression}) {\n\tcase '${3:case}':\n\t\t${4}\n\t\tbreak;\n\t${0}\n\tdefault:\n\t\t${2}\n}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "switch": true
        },
        "opts": {}
      },
      {
        "content": "case '${1:case}':\n\t${0:${VISUAL}}\n\tbreak;",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "case \"case 'xyz': ... break\"": true
        },
        "opts": {}
      },
      {
        "content": "try {\n\t${0:${VISUAL}}\n} catch (${1:e}) {\n\t${2:/* handle error */}\n}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "try \"try { ... } catch(e) { ... }\"": true
        },
        "opts": {}
      },
      {
        "content": "try {\n\t${0:${VISUAL}}\n} catch (${1:e}) {\n\t${2:/* handle error */}\n} finally {\n\t${3:/* be executed regardless of the try / catch result*/}\n}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "tryf \"try { ... } catch(e) { ... } finally { ... }\"": true
        },
        "opts": {}
      },
      {
        "content": "throw new Error('${1:error message}')",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "terr": true
        },
        "opts": {}
      },
      {
        "content": "return ${0:result};",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ret": true
        },
        "opts": {}
      },
      {
        "content": "for (let ${1:i} = 0, ${2:len} = ${3:Things.length}; $1 < $2; $1++) {\n\t${0:${VISUAL}}\n}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "for \"for (...) {...}\"": true
        },
        "opts": {}
      },
      {
        "content": "for (let ${2:i} = ${1:Things.length} - 1; $2 >= 0; $2--) {\n\t${0:${VISUAL}}\n}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "forr \"reversed for (...) {...}\"": true
        },
        "opts": {}
      },
      {
        "content": "while (${1:/* condition */}) {\n\t${0:${VISUAL}}\n}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "wh \"(condition) { ... }\"": true
        },
        "opts": {}
      },
      {
        "content": "do {\n\t${0:${VISUAL}}\n} while (${1:/* condition */});",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "do \"do { ... } while (condition)\"": true
        },
        "opts": {}
      },
      {
        "content": "for (let ${1:prop} in ${2:object}) {\n\t${0:$2[$1]}\n}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "fori": true
        },
        "opts": {}
      },
      {
        "content": "${1:method_name}: function (${2:attribute}) {\n\t${0:${VISUAL}}\n},",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          ":f": true
        },
        "opts": {}
      },
      {
        "content": "hasOwnProperty(${0})",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "has": true
        },
        "opts": {}
      },
      {
        "content": "function ${1:Singleton} (${2:argument}) {\n\t// the cached instance\n\tvar instance;\n\t// rewrite the constructor\n\t$1 = function $1($2) {\n\t\treturn instance;\n\t};\n\t// carry over the prototype properties\n\t$1.prototype = this;\n\t// the instance\n\tinstance = new $1();\n\t// reset the constructor pointer\n\tinstance.constructor = $1;\n\t${0}\n\treturn instance;\n}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "sing": true
        },
        "opts": {}
      },
      {
        "content": "function object(o) {\n\tfunction F() {}\n\tF.prototype = o;\n\treturn new F();\n}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "obj": true
        },
        "opts": {}
      },
      {
        "content": "var ${1:my_object} = Object.defineProperties(\n\t${2:new Object()},\n\t{\n\t\t${3:property} : {\n\t\t\tget : function $1_$3_getter() {\n\t\t\t\t// getter code\n\t\t\t},\n\t\t\tset : function $1_$3_setter(value) {\n\t\t\t\t// setter code\n\t\t\t},\n\t\t\tvalue        : ${4:value},\n\t\t\twriteable    : ${5:boolean},\n\t\t\tenumerable   : ${6:boolean},\n\t\t\tconfigurable : ${0:boolean}\n\t\t}\n\t}\n);",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "props": true
        },
        "opts": {}
      },
      {
        "content": "Object.defineProperty(\n\t${1:object},\n\t'${2:property}',\n\t{\n\t\tget : function $1_$2_getter() {\n\t\t\t// getter code\n\t\t},\n\t\tset : function $1_$2_setter(value) {\n\t\t\t// setter code\n\t\t},\n\t\tvalue        : ${3:value},\n\t\twriteable    : ${4:boolean},\n\t\tenumerable   : ${5:boolean},\n\t\tconfigurable : ${0:boolean}\n\t}\n);",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "prop": true
        },
        "opts": {}
      },
      {
        "content": "/**\n * ${0:description}\n *\n */",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "/**": true
        },
        "opts": {}
      },
      {
        "content": "@param {${1:type}} ${2:name} ${0:description}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "@par": true
        },
        "opts": {}
      },
      {
        "content": "@return {${1:type}} ${0:description}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "@ret": true
        },
        "opts": {}
      },
      {
        "content": "JSON.parse(${0:jstr});",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "jsonp": true
        },
        "opts": {}
      },
      {
        "content": "JSON.stringify(${0:object});",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "jsons": true
        },
        "opts": {}
      },
      {
        "content": "getElementsBy${1:TagName}('${0}')",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "get": true
        },
        "opts": {}
      },
      {
        "content": "getElementBy${1:Id}('${0}')",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "gett": true
        },
        "opts": {}
      },
      {
        "content": "${1:document}.getElementsByClassName('${0:class}')",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "by.": true
        },
        "opts": {}
      },
      {
        "content": "${1:document}.getElementById('${0:element ID}')",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "by#": true
        },
        "opts": {}
      },
      {
        "content": "${1:document}.querySelector('${0:CSS selector}')",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "qs": true
        },
        "opts": {}
      },
      {
        "content": "${1:document}.querySelectorAll('${0:CSS selector}')",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "qsa": true
        },
        "opts": {}
      },
      {
        "content": "debugger;",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "de": true
        },
        "opts": {}
      },
      {
        "content": "console.log(${0});",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "cl \"console.log\"": true
        },
        "opts": {}
      },
      {
        "content": "console.debug(${0});",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "cd \"console.debug\"": true
        },
        "opts": {}
      },
      {
        "content": "console.error(${0});",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ce \"console.error\"": true
        },
        "opts": {}
      },
      {
        "content": "console.warn(${0});",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "cw \"console.warn\"": true
        },
        "opts": {}
      },
      {
        "content": "console.info(${0});",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ci \"console.info\"": true
        },
        "opts": {}
      },
      {
        "content": "console.trace(${0:label});",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ct \"console.trace\"": true
        },
        "opts": {}
      },
      {
        "content": "console.time(\"${1:label}\");\n${0:${VISUAL}}\nconsole.timeEnd(\"$1\");",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ctime \"console.time ... console.timeEnd\"": true
        },
        "opts": {}
      },
      {
        "content": "console.timeStamp(\"${1:label}\");",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ctimestamp \"console.timeStamp\"": true
        },
        "opts": {}
      },
      {
        "content": "console.assert(${1:expression}, ${0:obj});",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ca \"console.assert\"": true
        },
        "opts": {}
      },
      {
        "content": "console.clear();",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "cclear \"console.clear\"": true
        },
        "opts": {}
      },
      {
        "content": "console.dir(${0:obj});",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "cdir \"console.dir\"": true
        },
        "opts": {}
      },
      {
        "content": "console.dirxml(${1:object});",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "cdirx \"console.dirxml\"": true
        },
        "opts": {}
      },
      {
        "content": "console.group(\"${1:label}\");\n${0:${VISUAL}}\nconsole.groupEnd();",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "cgroup \"console.group\"": true
        },
        "opts": {}
      },
      {
        "content": "console.groupCollapsed(\"${1:label}\");\n${0:${VISUAL}}\nconsole.groupEnd();",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "cgroupc \"console.groupCollapsed\"": true
        },
        "opts": {}
      },
      {
        "content": "console.profile(\"${1:label}\");\n${0:${VISUAL}}\nconsole.profileEnd();",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "cprof \"console.profile\"": true
        },
        "opts": {}
      },
      {
        "content": "console.table(${1:\"${2:value}\"});",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ctable \"console.table\"": true
        },
        "opts": {}
      },
      {
        "content": "console.log(JSON.stringify(${0}, null, 2));",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "clstr \"console.log stringified\"": true
        },
        "opts": {}
      },
      {
        "content": "'use strict';",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "us": true
        },
        "opts": {}
      },
      {
        "content": "setTimeout(function () {${0}}${2}, ${1:10});",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "timeout": true
        },
        "opts": {}
      },
      {
        "content": "const ${1} = ${0};",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "const": true
        },
        "opts": {}
      },
      {
        "content": "const ${1} = new ${0};",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "constn": true
        },
        "opts": {}
      },
      {
        "content": "let ${1} = ${0};",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "let": true
        },
        "opts": {}
      },
      {
        "content": "import ${1} from '${2:$1}';",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "im \"import xyz from 'xyz'\"": true
        },
        "opts": {}
      },
      {
        "content": "import * as ${1} from '${2:$1}';",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "imas \"import * as xyz from 'xyz'\"": true
        },
        "opts": {}
      },
      {
        "content": "import { ${1} } from '${2}';",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "imm \"import { member } from 'xyz'\"": true
        },
        "opts": {}
      },
      {
        "content": "class ${1} {\n\t${0:${VISUAL}}\n}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "cla": true
        },
        "opts": {}
      },
      {
        "content": "class ${1} extends ${2} {\n\t${0:${VISUAL}}\n}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "clax": true
        },
        "opts": {}
      },
      {
        "content": "class ${1} {\n\tconstructor(${2}) {\n\t\t${0:${VISUAL}}\n\t}\n}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "clac": true
        },
        "opts": {}
      },
      {
        "content": "for (const ${1:prop} of ${2:object}) {\n\t${0:$1}\n}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "foro \"for (const prop of object}) { ... }\"": true
        },
        "opts": {}
      },
      {
        "content": "for (let ${1:prop} of ${2:object}) {\n\t${0:$1}\n}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "forl \"for (let prop of object}) { ... }\"": true
        },
        "opts": {}
      },
      {
        "content": "function* ${1:function_name}(${2}) {\n\t${0:${VISUAL}}\n}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "fun*": true
        },
        "opts": {}
      },
      {
        "content": "const ${1:function_name} = (${2}) => {\n\t${0:${VISUAL}}\n}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "c=>": true
        },
        "opts": {}
      },
      {
        "content": "const ${1:function_name} = async (${2}) => {\n\t${0:${VISUAL}}\n}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ca=>": true
        },
        "opts": {}
      },
      {
        "content": "const ${1:function_name} = (${2}) => {\n\t${0:${VISUAL}}\n}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "caf": true
        },
        "opts": {}
      },
      {
        "content": "const ${1:function_name} = async (${2}) => {\n\t${0:${VISUAL}}\n}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "casf": true
        },
        "opts": {}
      },
      {
        "content": "(${1}) => {\n\t${0:${VISUAL}}\n}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "=>": true
        },
        "opts": {}
      },
      {
        "content": "(${1}) => ${0:${VISUAL}}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "af \"() =>\"": true
        },
        "opts": {}
      },
      {
        "content": "(${1}) => {\n\t${0:${VISUAL}}\n}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "afb \"() => {}\"": true
        },
        "opts": {}
      },
      {
        "content": "const ${1} = Symbol('${0}');",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "sym": true
        },
        "opts": {}
      },
      {
        "content": "export default ${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ed": true
        },
        "opts": {}
      },
      {
        "content": "${${1}}${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "${": true
        },
        "opts": {}
      },
      {
        "content": "async ${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "as \"async\"": true
        },
        "opts": {}
      },
      {
        "content": "await ${0:${VISUAL}}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "aw \"await\"": true
        },
        "opts": {}
      }
    ],
    "javascript-angular": [
      {
        "content": "it('${1:description}', inject(function($2) {\n\t$0\n}));",
        "doc": null,
        "grammar": "snu",
        "label": "it (js, inject)",
        "matches": {
          "iti": true
        },
        "opts": {
          "b": true
        }
      },
      {
        "content": "beforeEach(inject(function($1) {\n\t$0\n}));",
        "doc": null,
        "grammar": "snu",
        "label": "before each (js, inject)",
        "matches": {
          "befi": true
        },
        "opts": {
          "b": true
        }
      },
      {
        "content": "config(function($1) {\n\t$0\n});",
        "doc": null,
        "grammar": "snu",
        "label": "angular config",
        "matches": {
          "aconf": true
        },
        "opts": {
          "i": true
        }
      }
    ],
    "javascript-bemjson": [
      {
        "content": "{\n\tblock : '${1:name}',\n\tcontent : [\n\t\t'${2:content}'\n\t]\n}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "b": true
        },
        "opts": {}
      },
      {
        "content": "{\n\t block : '${1:name}',\n\t content: '${2:content}'\n}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "btc": true
        },
        "opts": {}
      },
      {
        "content": "{\n\tblock : '${1:name}',\n\tmods: { ${2:modName}: '${3:modVal}' },\n\tcontent : [\n\t\t'${4:content}'\n\t]\n}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "bwm": true
        },
        "opts": {}
      },
      {
        "content": "{\n\telem : '${1:name}',\n\tcontent : [\n\t\t'${2:content}'\n\t]\n}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "e": true
        },
        "opts": {}
      },
      {
        "content": "mods : { ${1:modName} : '${2:modVal}' },",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "mo": true
        },
        "opts": {}
      },
      {
        "content": "mix : [ { ${1:block} : '${2:block}' } ],",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "mi": true
        },
        "opts": {}
      },
      {
        "content": "attrs : { ${1:attr} : '${2:val}' },",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "a": true
        },
        "opts": {}
      }
    ],
    "javascript-d3": [
      {
        "content": ".attr(\"${1}\", ${2})",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          ".attr": true
        },
        "opts": {}
      },
      {
        "content": ".style(\"${1}\", ${2})",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          ".style": true
        },
        "opts": {}
      },
      {
        "content": "d3.svg.axis()\n  .orient(${1})\n  .scale(${2})",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "axis": true
        },
        "opts": {}
      },
      {
        "content": "function(d) { ${1} }",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "fd": true
        },
        "opts": {}
      },
      {
        "content": "function(d, i) { ${1} }",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "fdi": true
        },
        "opts": {}
      },
      {
        "content": "var ${1:margin} = { top: ${2:10}, right: ${3:10}, bottom: ${4:10}, left: ${5:10} };\nvar ${6:width} = ${7:970} - $1.left - $1.right;\nvar ${8:height} = ${9:500} - $1.top - $1.bottom;\nvar ${10:svg} = d3.select(\"${11}\").append(\"svg\")\n  .attr(\"width\", $6 + $1.left + $1.right)\n  .attr(\"height\", $8 + $1.top + $1.bottom)\n    .append(\"g\")\n  .attr(\"transform\", \"translate(\" + $1.left + \",\" + $1.top + \")\")",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "marginconvention": true
        },
        "opts": {}
      },
      {
        "content": "d3.nest()\n  .key(${1})\n  .entries(${2})",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "nest": true
        },
        "opts": {}
      },
      {
        "content": "d3.scale.linear()\n  .domain(${1})\n  .range(${2})",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "scale": true
        },
        "opts": {}
      }
    ],
    "javascript-ember": [
      {
        "content": "import Application from '@ember/application';\n\nexport default Application.extend({\n\t${0://Properties here...}\n});",
        "doc": null,
        "grammar": "snu",
        "label": "App.Name = Ember.Application.create({});",
        "matches": {
          "eapp": true
        },
        "opts": {}
      },
      {
        "content": "import DS from 'ember-data';\n\nexport default DS.Model.extend({\n\t${0://Properties here...}\n});",
        "doc": null,
        "grammar": "snu",
        "label": "import DS from 'ember-data';",
        "matches": {
          "emod": true
        },
        "opts": {}
      },
      {
        "content": "import Controller from '@ember/controller';\n\nexport default Controller.extend({\n\t${0://Properties here...}\n});",
        "doc": null,
        "grammar": "snu",
        "label": "import Controller from '@ember/controller';",
        "matches": {
          "econtroller": true
        },
        "opts": {}
      },
      {
        "content": "import Route from '@ember/routing/route';\n\nexport default Route.extend({\n\t${0://Properties here...}\n});",
        "doc": null,
        "grammar": "snu",
        "label": "import Route from '@ember/routing/route';",
        "matches": {
          "eroute": true
        },
        "opts": {}
      },
      {
        "content": "import Component from '@ember/component';\n\nexport default Component.extend({\n\t${0://Properties here...}\n});",
        "doc": null,
        "grammar": "snu",
        "label": "import Component from '@ember/component';",
        "matches": {
          "ecomponent": true
        },
        "opts": {}
      },
      {
        "content": "import EmberObject from '@ember/object';\n\nexport default EmberObject.extend({\n\t${0://Properties here...}\n});",
        "doc": null,
        "grammar": "snu",
        "label": "import EmberObject from '@ember/object';",
        "matches": {
          "eobj": true
        },
        "opts": {}
      },
      {
        "content": "import Mixin from '@ember/object/mixin';\n\nexport default Mixin.create({\n\t${0://Properties here...}\n});",
        "doc": null,
        "grammar": "snu",
        "label": "App.MixinName = Ember.Model.extend({...});",
        "matches": {
          "emix": true
        },
        "opts": {}
      },
      {
        "content": "${1:this}.get('${2:property}');",
        "doc": null,
        "grammar": "snu",
        "label": "this.get('property');",
        "matches": {
          "eget": true
        },
        "opts": {}
      },
      {
        "content": "${1:this}.set('${2:property}', ${3:value});",
        "doc": null,
        "grammar": "snu",
        "label": "this.set('property', value);",
        "matches": {
          "eset": true
        },
        "opts": {}
      },
      {
        "content": "import { computed } from '@ember/object';",
        "doc": null,
        "grammar": "snu",
        "label": "import { computed } from '@ember/object';",
        "matches": {
          "cproimport": true
        },
        "opts": {}
      },
      {
        "content": "${1:property_name}: computed('${3:argument}', function() {\n\t${0://body...}\n}),",
        "doc": null,
        "grammar": "snu",
        "label": "property_name: computed('...', function() {...}),",
        "matches": {
          "cpro": true
        },
        "opts": {}
      },
      {
        "content": "import { observer } from '@ember/object';",
        "doc": null,
        "grammar": "snu",
        "label": "import { observer } from '@ember/object';",
        "matches": {
          "prooimport": true
        },
        "opts": {}
      },
      {
        "content": "${1:property_name}: observer('${3:argument}', function() {\n\t${0://body...}\n}),",
        "doc": null,
        "grammar": "snu",
        "label": "property_name: observer('...', function() {...}),",
        "matches": {
          "proo": true
        },
        "opts": {}
      }
    ],
    "javascript-jasmine": [
      {
        "content": "describe('${1:description}', function() {\n\t$0\n});",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "des \"Describe (js)\"": true
        },
        "opts": {}
      },
      {
        "content": "it('${1:description}', function() {\n\t$0\n});",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "it \"it (js)\"": true
        },
        "opts": {}
      },
      {
        "content": "beforeEach(function() {\n\t$0\n});",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "bef \"before each (js)\"": true
        },
        "opts": {}
      },
      {
        "content": "afterEach(function() {\n\t$0\n});",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "aft \"after each (js)\"": true
        },
        "opts": {}
      },
      {
        "content": "beforeAll(function() {\n\t$0\n});",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "befa \"before all (js)\"": true
        },
        "opts": {}
      },
      {
        "content": "afterAll(function() {\n\t$0\n});",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "afta \"after all (js)\"": true
        },
        "opts": {}
      },
      {
        "content": "jasmine.any($1)",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "any \"any (js)\"": true
        },
        "opts": {}
      },
      {
        "content": "jasmine.anything()",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "anyt \"anything (js)\"": true
        },
        "opts": {}
      },
      {
        "content": "jasmine.objectContaining({\n\t${VISUAL}$0\n});",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "objc \"object containing (js)\"": true
        },
        "opts": {}
      },
      {
        "content": "jasmine.arrayContaining([${1:value1}]);",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "arrc \"array containing (js)\"": true
        },
        "opts": {}
      },
      {
        "content": "jasmine.stringMatching(\"${1:matcher}\")",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "strm \"string matching (js)\"": true
        },
        "opts": {}
      },
      {
        "content": "runs(function() {\n\t$0\n});",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ru \"runs (js)\"": true
        },
        "opts": {}
      },
      {
        "content": "waits($1);",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "wa \"waits (js)\"": true
        },
        "opts": {}
      },
      {
        "content": "expect(${1:target})$0;",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ex \"expect (js)\"": true
        },
        "opts": {}
      },
      {
        "content": "expect(${1:target}).toEqual(${2:value});",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ee \"expect to equal (js)\"": true
        },
        "opts": {}
      },
      {
        "content": "expect(${1:target}).toBeLessThan(${2:value});",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "el \"expect to be less than (js)\"": true
        },
        "opts": {}
      },
      {
        "content": "expect(${1:target}).toBeGreaterThan(${2:value});",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "eg \"expect to be greater than (js)\"": true
        },
        "opts": {}
      },
      {
        "content": "expect(${1:target}).toBe(${2:value});",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "eb \"expect to be (js)\"": true
        },
        "opts": {}
      },
      {
        "content": "expect(${1:target}).toMatch(${2:pattern});",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "em \"expect to match (js)\"": true
        },
        "opts": {}
      },
      {
        "content": "expect(${1:target}).toHaveAttr('${2:attr}'${3:, '${4:value}'});",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "eha \"expect to have attribute (js)\"": true
        },
        "opts": {}
      },
      {
        "content": "expect(${1:target}).toBeTruthy();",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "et \"expect to be truthy (js)\"": true
        },
        "opts": {}
      },
      {
        "content": "expect(${1:target}).toBeFalsy();",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ef \"expect to be falsy (js)\"": true
        },
        "opts": {}
      },
      {
        "content": "expect(${1:target}).toBeDefined();",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "etbd \"expect to be defined (js)\"": true
        },
        "opts": {}
      },
      {
        "content": "expect(${1:target}).toBeUndefined();",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "eud \"expect to be defined (js)\"": true
        },
        "opts": {}
      },
      {
        "content": "expect(${1:target}).toBeNull();",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "en \"expect to be null (js)\"": true
        },
        "opts": {}
      },
      {
        "content": "expect(${1:target}).toContain(${2:value});",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ec \"expect to contain (js)\"": true
        },
        "opts": {}
      },
      {
        "content": "expect(${1:target}).toBeVisible();",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ev \"expect to be visible (js)\"": true
        },
        "opts": {}
      },
      {
        "content": "expect(${1:target}).toBeHidden();",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "eh \"expect to be hidden (js)\"": true
        },
        "opts": {}
      },
      {
        "content": "expect(${1:target}).toThrow(${2:value});",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "eth \"expect to throw (js)\"": true
        },
        "opts": {}
      },
      {
        "content": "expect(${1:target}).toThrowError(${2:value});",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ethe \"expect to throw error (js)\"": true
        },
        "opts": {}
      },
      {
        "content": "expect(${1:target}).not$0;",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "notx \"expect not (js)\"": true
        },
        "opts": {}
      },
      {
        "content": "expect(${1:target}).not.toEqual(${2:value});",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "note \"expect not to equal (js)\"": true
        },
        "opts": {}
      },
      {
        "content": "expect(${1:target}).not.toBeLessThan(${2:value});",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "notl \"expect to not be less than (js)\"": true
        },
        "opts": {}
      },
      {
        "content": "expect(${1:target}).not.toBeGreaterThan(${2:value});",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "notg \"expect to not be greater than (js)\"": true
        },
        "opts": {}
      },
      {
        "content": "expect(${1:target}).not.toMatch(${2:pattern});",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "notm \"expect not to match (js)\"": true
        },
        "opts": {}
      },
      {
        "content": "expect(${1:target}).not.toHaveAttr('${2:attr}'${3:, '${4:value}'});",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "notha \"expect to not have attribute (js)\"": true
        },
        "opts": {}
      },
      {
        "content": "expect(${1:target}).not.toBeTruthy();",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "nott \"expect not to be truthy (js)\"": true
        },
        "opts": {}
      },
      {
        "content": "expect(${1:target}).not.toBeFalsy();",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "notf \"expect not to be falsy (js)\"": true
        },
        "opts": {}
      },
      {
        "content": "expect(${1:target}).not.toBeDefined();",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "notd \"expect not to be defined (js)\"": true
        },
        "opts": {}
      },
      {
        "content": "expect(${1:target}).not.toBeNull();",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "notn \"expect not to be null (js)\"": true
        },
        "opts": {}
      },
      {
        "content": "expect(${1:target}).not.toContain(${2:value});",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "notc \"expect not to contain (js)\"": true
        },
        "opts": {}
      },
      {
        "content": "expect(${1:target}).not.toBeVisible();",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "notv \"expect not to be visible (js)\"": true
        },
        "opts": {}
      },
      {
        "content": "expect(${1:target}).not.toBeHidden();",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "noth \"expect not to be hidden (js)\"": true
        },
        "opts": {}
      },
      {
        "content": "expect(${1:target}).not.toThrow(${2:value});",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "notth \"expect not to throw (js)\"": true
        },
        "opts": {}
      },
      {
        "content": "expect(${1:target}).not.toThrowError(${2:value});",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "notthe \"expect not to throw error (js)\"": true
        },
        "opts": {}
      },
      {
        "content": "spyOn(${1:object}, '${2:method}')$0;",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "s \"spy on (js)\"": true
        },
        "opts": {}
      },
      {
        "content": "spyOn(${1:object}, '${2:method}').and.returnValue(${3:arguments});",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "sr \"spy on and return (js)\"": true
        },
        "opts": {}
      },
      {
        "content": "spyOn(${1:object}, '${2:method}').and.throwError(${3:exception});",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "st \"spy on and throw (js)\"": true
        },
        "opts": {}
      },
      {
        "content": "spyOn(${1:object}, '${2:method}').and.callThrough();",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "sct \"spy on and call through (js)\"": true
        },
        "opts": {}
      },
      {
        "content": "spyOn(${1:object}, '${2:method}').and.callFake(${3:function});",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "scf \"spy on and call fake (js)\"": true
        },
        "opts": {}
      },
      {
        "content": "expect(${1:target}).toHaveBeenCalled();",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ethbc \"expect to have been called (js)\"": true
        },
        "opts": {}
      },
      {
        "content": "expect(${1:target}).not.toHaveBeenCalled();",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "nthbc \"expect not to have been called (js)\"": true
        },
        "opts": {}
      },
      {
        "content": "expect(${1:target}).toHaveBeenCalledWith(${2:arguments});",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ethbcw \"expect to have been called with (js)\"": true
        },
        "opts": {}
      }
    ],
    "javascript-jasmine-arrow": [
      {
        "content": "describe('${1:description}', () => {\n\t$0\n});",
        "doc": null,
        "grammar": "snu",
        "label": "Describe (js)",
        "matches": {
          "des": true
        },
        "opts": {
          "b": true
        }
      },
      {
        "content": "it('${1:description}', () => {\n\t$0\n});",
        "doc": null,
        "grammar": "snu",
        "label": "it (js)",
        "matches": {
          "it": true
        },
        "opts": {
          "b": true
        }
      },
      {
        "content": "beforeEach(() => {\n\t$0\n});",
        "doc": null,
        "grammar": "snu",
        "label": "before each (js)",
        "matches": {
          "bef": true
        },
        "opts": {
          "b": true
        }
      },
      {
        "content": "afterEach(() => {\n\t$0\n});",
        "doc": null,
        "grammar": "snu",
        "label": "after each (js)",
        "matches": {
          "aft": true
        },
        "opts": {
          "b": true
        }
      },
      {
        "content": "beforeAll(() => {\n\t$0\n});",
        "doc": null,
        "grammar": "snu",
        "label": "before all (js)",
        "matches": {
          "befa": true
        },
        "opts": {
          "b": true
        }
      },
      {
        "content": "afterAll(() => {\n\t$0\n});",
        "doc": null,
        "grammar": "snu",
        "label": "after all (js)",
        "matches": {
          "afta": true
        },
        "opts": {
          "b": true
        }
      },
      {
        "content": "runs(() => {\n\t$0\n});",
        "doc": null,
        "grammar": "snu",
        "label": "runs (js)",
        "matches": {
          "ru": true
        },
        "opts": {
          "b": true
        }
      }
    ],
    "javascript-jquery": [
      {
        "content": "${1:obj}.add('${2:selector expression}')",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "add": true
        },
        "opts": {}
      },
      {
        "content": "${1:obj}.addClass('${2:class name}')",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "addClass": true
        },
        "opts": {}
      },
      {
        "content": "${1:obj}.after('${2:Some text <b>and bold!</b>}')",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "after": true
        },
        "opts": {}
      },
      {
        "content": "$.ajax({\n\turl: '${1:mydomain.com/url}',\n\ttype: '${2:POST}',\n\tdataType: '${3:xml/html/script/json}',\n\tdata: $.param( $('${4:Element or Expression}') ),\n\tcomplete: function (jqXHR, textStatus) {\n\t\t${5:// callback}\n\t},\n\tsuccess: function (data, textStatus, jqXHR) {\n\t\t${6:// success callback}\n\t},\n\terror: function (jqXHR, textStatus, errorThrown) {\n\t\t${0:// error callback}\n\t}\n});",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ajax": true
        },
        "opts": {}
      },
      {
        "content": "${1:obj}.ajaxComplete(function (${1:e}, xhr, settings) {\n\t${0:// callback}\n});",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ajaxcomplete": true
        },
        "opts": {}
      },
      {
        "content": "${1:obj}.ajaxError(function (${1:e}, xhr, settings, thrownError) {\n\t${2:// error callback}\n});\n${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ajaxerror": true
        },
        "opts": {}
      },
      {
        "content": "$.get('${1:mydomain.com/url}',\n\t${2:{ param1: value1 },}\n\tfunction (data, textStatus, jqXHR) {\n\t\t${0:// success callback}\n\t}\n);",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ajaxget": true
        },
        "opts": {}
      },
      {
        "content": "$.post('${1:mydomain.com/url}',\n\t${2:{ param1: value1 },}\n\tfunction (data, textStatus, jqXHR) {\n\t\t${0:// success callback}\n\t}\n);",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ajaxpost": true
        },
        "opts": {}
      },
      {
        "content": "$.ajaxPrefilter(function (${1:options}, ${2:originalOptions}, jqXHR) {\n\t${0: // Modify options, control originalOptions, store jqXHR, etc}\n});",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ajaxprefilter": true
        },
        "opts": {}
      },
      {
        "content": "${1:obj}.ajaxSend(function (${1:request, settings}) {\n\t${2:// error callback}\n});\n${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ajaxsend": true
        },
        "opts": {}
      },
      {
        "content": "$.ajaxSetup({\n\turl: \"${1:mydomain.com/url}\",\n\ttype: \"${2:POST}\",\n\tdataType: \"${3:xml/html/script/json}\",\n\tdata: $.param( $(\"${4:Element or Expression}\") ),\n\tcomplete: function (jqXHR, textStatus) {\n\t\t${5:// callback}\n\t},\n\tsuccess: function (data, textStatus, jqXHR) {\n\t\t${6:// success callback}\n\t},\n\terror: function (jqXHR, textStatus, errorThrown) {\n\t\t${0:// error callback}\n\t}\n});",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ajaxsetup": true
        },
        "opts": {}
      },
      {
        "content": "$.ajaxStart(function () {\n\t${1:// handler for when an AJAX call is started and no other AJAX calls are in progress};\n});\n${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ajaxstart": true
        },
        "opts": {}
      },
      {
        "content": "$.ajaxStop(function () {\n\t${1:// handler for when all AJAX calls have been completed};\n});\n${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ajaxstop": true
        },
        "opts": {}
      },
      {
        "content": "$.ajaxSuccess(function (${1:e}, xhr, settings) {\n\t${2:// handler for when any AJAX call is successfully completed};\n});\n${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ajaxsuccess": true
        },
        "opts": {}
      },
      {
        "content": "${1:obj}.andSelf()",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "andself": true
        },
        "opts": {}
      },
      {
        "content": "${1:obj}.animate({${2:param1: value1, param2: value2}}, ${3:speed})",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "animate": true
        },
        "opts": {}
      },
      {
        "content": "${1:obj}.append('${2:Some text <b>and bold!</b>}')",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "append": true
        },
        "opts": {}
      },
      {
        "content": "${1:obj}.appendTo('${2:selector expression}')",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "appendTo": true
        },
        "opts": {}
      },
      {
        "content": "${1:obj}.attr('${2:attribute}', '${3:value}')",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "attr": true
        },
        "opts": {}
      },
      {
        "content": "${1:obj}.attr({'${2:attr1}': '${3:value1}', '${4:attr2}': '${5:value2}'})",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "attrm": true
        },
        "opts": {}
      },
      {
        "content": "${1:obj}.before('${2:Some text <b>and bold!</b>}')",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "before": true
        },
        "opts": {}
      },
      {
        "content": "${1:obj}.bind('${2:event name}', function (${3:e}) {\n\t${0:// event handler}\n});",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "bind": true
        },
        "opts": {}
      },
      {
        "content": "${1:obj}.blur(function (${2:e}) {\n\t${0:// event handler}\n});",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "blur": true
        },
        "opts": {}
      },
      {
        "content": "$.Callbacks()",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "C": true
        },
        "opts": {}
      },
      {
        "content": "${1:callbacks}.add(${2:callbacks})",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "Cadd": true
        },
        "opts": {}
      },
      {
        "content": "${1:callbacks}.disable()",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "Cdis": true
        },
        "opts": {}
      },
      {
        "content": "${1:callbacks}.empty()",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "Cempty": true
        },
        "opts": {}
      },
      {
        "content": "${1:callbacks}.fire(${2:args})",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "Cfire": true
        },
        "opts": {}
      },
      {
        "content": "${1:callbacks}.fired()",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "Cfired": true
        },
        "opts": {}
      },
      {
        "content": "${1:callbacks}.fireWith(${2:this}, ${3:args})",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "Cfirew": true
        },
        "opts": {}
      },
      {
        "content": "${1:callbacks}.has(${2:callback})",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "Chas": true
        },
        "opts": {}
      },
      {
        "content": "${1:callbacks}.lock()",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "Clock": true
        },
        "opts": {}
      },
      {
        "content": "${1:callbacks}.locked()",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "Clocked": true
        },
        "opts": {}
      },
      {
        "content": "${1:callbacks}.remove(${2:callbacks})",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "Crem": true
        },
        "opts": {}
      },
      {
        "content": "${1:obj}.change(function (${2:e}) {\n\t${0:// event handler}\n});",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "change": true
        },
        "opts": {}
      },
      {
        "content": "${1:obj}.children('${2:selector expression}')",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "children": true
        },
        "opts": {}
      },
      {
        "content": "${1:obj}.clearQueue(${2:'queue name'})",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "clearq": true
        },
        "opts": {}
      },
      {
        "content": "${1:obj}.click(function (${2:e}) {\n\t${0:// event handler}\n});",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "click": true
        },
        "opts": {}
      },
      {
        "content": "${1:obj}.clone()",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "clone": true
        },
        "opts": {}
      },
      {
        "content": "$.contains(${1:container}, ${0:contents});",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "contains": true
        },
        "opts": {}
      },
      {
        "content": "${1:obj}.css('${2:attribute}', '${3:value}')",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "css": true
        },
        "opts": {}
      },
      {
        "content": "$.cssHooks['${1:CSS prop}'] = {\n\tget: function (elem, computed, extra) {\n\t\t${2: // handle getting the CSS property}\n\t},\n\tset: function (elem, value) {\n\t\t${0: // handle setting the CSS value}\n\t}\n};",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "csshooks": true
        },
        "opts": {}
      },
      {
        "content": "${1:obj}.css({${2:attribute1}: '${3:value1}', ${4:attribute2}: '${5:value2}'})",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "cssm": true
        },
        "opts": {}
      },
      {
        "content": "$.Deferred()",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "D": true
        },
        "opts": {}
      },
      {
        "content": "${1:deferred}.always(${2:callbacks})",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "Dalways": true
        },
        "opts": {}
      },
      {
        "content": "${1:deferred}.done(${2:callbacks})",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "Ddone": true
        },
        "opts": {}
      },
      {
        "content": "${1:deferred}.fail(${2:callbacks})",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "Dfail": true
        },
        "opts": {}
      },
      {
        "content": "${1:deferred}.isRejected()",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "Disrej": true
        },
        "opts": {}
      },
      {
        "content": "${1:deferred}.isResolved()",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "Disres": true
        },
        "opts": {}
      },
      {
        "content": "${1:deferred}.notify(${2:args})",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "Dnotify": true
        },
        "opts": {}
      },
      {
        "content": "${1:deferred}.notifyWith(${2:this}, ${3:args})",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "Dnotifyw": true
        },
        "opts": {}
      },
      {
        "content": "${1:deferred}.then(${2:doneFilter}, ${3:failFilter}, ${4:progressFilter})",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "Dpipe": true
        },
        "opts": {}
      },
      {
        "content": "${1:deferred}.progress(${2:callbacks})",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "Dprog": true
        },
        "opts": {}
      },
      {
        "content": "${1:deferred}.promise(${2:target})",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "Dprom": true
        },
        "opts": {}
      },
      {
        "content": "${1:deferred}.reject(${2:args})",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "Drej": true
        },
        "opts": {}
      },
      {
        "content": "${1:deferred}.rejectWith(${2:this}, ${3:args})",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "Drejw": true
        },
        "opts": {}
      },
      {
        "content": "${1:deferred}.resolve(${2:args})",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "Dres": true
        },
        "opts": {}
      },
      {
        "content": "${1:deferred}.resolveWith(${2:this}, ${3:args})",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "Dresw": true
        },
        "opts": {}
      },
      {
        "content": "${1:deferred}.state()",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "Dstate": true
        },
        "opts": {}
      },
      {
        "content": "${1:deferred}.then(${2:doneCallbacks}, ${3:failCallbacks}, ${4:progressCallbacks})",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "Dthen": true
        },
        "opts": {}
      },
      {
        "content": "$.when(${1:deferreds})",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "Dwhen": true
        },
        "opts": {}
      },
      {
        "content": "${1:obj}.data(${2:obj})",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "data": true
        },
        "opts": {}
      },
      {
        "content": "$.data('${1:selector expression}', '${2:key}'${3:, 'value'})",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "dataa": true
        },
        "opts": {}
      },
      {
        "content": "${1:obj}.dblclick(function (${2:e}) {\n\t${0:// event handler}\n});",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "dblclick": true
        },
        "opts": {}
      },
      {
        "content": "${1:obj}.delay('${2:slow/400/fast}'${3:, 'queue name'})",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "delay": true
        },
        "opts": {}
      },
      {
        "content": "${1:obj}.delegate('${2:selector expression}', '${3:event name}', function (${4:e}) {\n\t${0:// event handler}\n});",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "dele": true
        },
        "opts": {}
      },
      {
        "content": "${1:obj}.dequeue(${2:'queue name'})",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "deq": true
        },
        "opts": {}
      },
      {
        "content": "$.dequeue('${1:selector expression}'${2:, 'queue name'})",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "deqq": true
        },
        "opts": {}
      },
      {
        "content": "${1:obj}.detach('${2:selector expression}')",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "detach": true
        },
        "opts": {}
      },
      {
        "content": "${1:obj}.die(${2:event}, ${3:handler})",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "die": true
        },
        "opts": {}
      },
      {
        "content": "${1:obj}.each(function (index) {\n\t${0:this.innerHTML = this + \" is the element, \" + index + \" is the position\";}\n});",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "each": true
        },
        "opts": {}
      },
      {
        "content": "$('<${1}/>'${2:, {}})",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "el": true
        },
        "opts": {}
      },
      {
        "content": "$.trim('${1:string}')",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "eltrim": true
        },
        "opts": {}
      },
      {
        "content": "${1:obj}.empty()",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "empty": true
        },
        "opts": {}
      },
      {
        "content": "${1:obj}.end()",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "end": true
        },
        "opts": {}
      },
      {
        "content": "${1:obj}.eq(${2:element index})",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "eq": true
        },
        "opts": {}
      },
      {
        "content": "${1:obj}.error(function (${2:e}) {\n\t${0:// event handler}\n});",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "error": true
        },
        "opts": {}
      },
      {
        "content": "{\n\t:f${0}\n}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "eventsmap": true
        },
        "opts": {}
      },
      {
        "content": "$.extend(${1:true, }${2:target}, ${3:obj})",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "extend": true
        },
        "opts": {}
      },
      {
        "content": "${1:obj}.fadeIn('${2:slow/400/fast}')",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "fadein": true
        },
        "opts": {}
      },
      {
        "content": "${1:obj}.fadeIn('slow/400/fast', function () {\n\t${0:// callback};\n});",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "fadeinc": true
        },
        "opts": {}
      },
      {
        "content": "${1:obj}.fadeOut('${2:slow/400/fast}')",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "fadeout": true
        },
        "opts": {}
      },
      {
        "content": "${1:obj}.fadeOut('slow/400/fast', function () {\n\t${0:// callback};\n});",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "fadeoutc": true
        },
        "opts": {}
      },
      {
        "content": "${1:obj}.fadeTo('${2:slow/400/fast}', ${3:0.5})",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "fadeto": true
        },
        "opts": {}
      },
      {
        "content": "${1:obj}.fadeTo('slow/400/fast', ${2:0.5}, function () {\n\t${0:// callback};\n});",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "fadetoc": true
        },
        "opts": {}
      },
      {
        "content": "${1:obj}.filter('${2:selector expression}')",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "filter": true
        },
        "opts": {}
      },
      {
        "content": "${1:obj}.filter(function (${2:index}) {\n\t${3}\n})",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "filtert": true
        },
        "opts": {}
      },
      {
        "content": "${1:obj}.find('${2:selector expression}')",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "find": true
        },
        "opts": {}
      },
      {
        "content": "${1:obj}.focus(function (${2:e}) {\n\t${0:// event handler}\n});",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "focus": true
        },
        "opts": {}
      },
      {
        "content": "${1:obj}.focusIn(function (${2:e}) {\n\t${0:// event handler}\n});",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "focusin": true
        },
        "opts": {}
      },
      {
        "content": "${1:obj}.focusOut(function (${2:e}) {\n\t${0:// event handler}\n});",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "focusout": true
        },
        "opts": {}
      },
      {
        "content": "${1:obj}.get(${2:element index})",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "get": true
        },
        "opts": {}
      },
      {
        "content": "$.getJSON('${1:mydomain.com/url}',\n\t${2:{ param1: value1 },}\n\tfunction (data, textStatus, jqXHR) {\n\t\t${0:// success callback}\n\t}\n);",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "getjson": true
        },
        "opts": {}
      },
      {
        "content": "$.getScript('${1:mydomain.com/url}', function (script, textStatus, jqXHR) {\n\t${0:// callback}\n});",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "getscript": true
        },
        "opts": {}
      },
      {
        "content": "$.grep(${1:array}, function (item, index) {\n\t${2}\n}${0:, true});",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "grep": true
        },
        "opts": {}
      },
      {
        "content": "${1:obj}.hasClass('${2:className}')",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "hasc": true
        },
        "opts": {}
      },
      {
        "content": "$.hasData('${0:selector expression}');",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "hasd": true
        },
        "opts": {}
      },
      {
        "content": "${1:obj}.height(${2:integer})",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "height": true
        },
        "opts": {}
      },
      {
        "content": "${1:obj}.hide('${2:slow/400/fast}')",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "hide": true
        },
        "opts": {}
      },
      {
        "content": "${1:obj}.hide('${2:slow/400/fast}', function () {\n\t${0:// callback}\n});",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "hidec": true
        },
        "opts": {}
      },
      {
        "content": "${1:obj}.hover(function (${2:e}) {\n\t${3:// event handler}\n}, function ($2) {\n\t${4:// event handler}\n});",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "hover": true
        },
        "opts": {}
      },
      {
        "content": "${1:obj}.html('${2:Some text <b>and bold!</b>}')",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "html": true
        },
        "opts": {}
      },
      {
        "content": "$.inArray(${1:value}, ${0:array});",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "inarr": true
        },
        "opts": {}
      },
      {
        "content": "${1:obj}.insertAfter('${2:selector expression}')",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "insa": true
        },
        "opts": {}
      },
      {
        "content": "${1:obj}.insertBefore('${2:selector expression}')",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "insb": true
        },
        "opts": {}
      },
      {
        "content": "${1:obj}.is('${2:selector expression}')",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "is": true
        },
        "opts": {}
      },
      {
        "content": "$.isArray(${1:obj})",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "isarr": true
        },
        "opts": {}
      },
      {
        "content": "$.isEmptyObject(${1:obj})",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "isempty": true
        },
        "opts": {}
      },
      {
        "content": "$.isFunction(${1:obj})",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "isfunc": true
        },
        "opts": {}
      },
      {
        "content": "$.isNumeric(${1:value})",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "isnum": true
        },
        "opts": {}
      },
      {
        "content": "$.isPlainObject(${1:obj})",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "isobj": true
        },
        "opts": {}
      },
      {
        "content": "$.isWindow(${1:obj})",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "iswin": true
        },
        "opts": {}
      },
      {
        "content": "$.isXMLDoc(${1:node})",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "isxml": true
        },
        "opts": {}
      },
      {
        "content": "$('${1:selector}')",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "jj": true
        },
        "opts": {}
      },
      {
        "content": "${1:obj}.keydown(function (${2:e}) {\n\t${0:// event handler}\n});",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "kdown": true
        },
        "opts": {}
      },
      {
        "content": "${1:obj}.keypress(function (${2:e}) {\n\t${0:// event handler}\n});",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "kpress": true
        },
        "opts": {}
      },
      {
        "content": "${1:obj}.keyup(function (${2:e}) {\n\t${0:// event handler}\n});",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "kup": true
        },
        "opts": {}
      },
      {
        "content": "${1:obj}.last('${1:selector expression}')",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "last": true
        },
        "opts": {}
      },
      {
        "content": "${1:obj}.live('${2:events}', function (${3:e}) {\n\t${0:// event handler}\n});",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "live": true
        },
        "opts": {}
      },
      {
        "content": "${1:obj}.load(function (${2:e}) {\n\t${0:// event handler}\n});",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "load": true
        },
        "opts": {}
      },
      {
        "content": "${1:obj}.load('${2:mydomain.com/url}',\n\t${2:{ param1: value1 },}\n\tfunction (responseText, textStatus, xhr) {\n\t\t${0:// success callback}\n\t}\n});",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "loadf": true
        },
        "opts": {}
      },
      {
        "content": "$.makeArray(${0:obj});",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "makearray": true
        },
        "opts": {}
      },
      {
        "content": "${1:obj}.map(function (${2:index}, ${3:element}) {\n\t${0:// callback}\n});",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "map": true
        },
        "opts": {}
      },
      {
        "content": "$.map(${1:arrayOrObject}, function (${2:value}, ${3:indexOrKey}) {\n\t${0:// callback}\n});",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "mapp": true
        },
        "opts": {}
      },
      {
        "content": "$.merge(${1:target}, ${0:original});",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "merge": true
        },
        "opts": {}
      },
      {
        "content": "${1:obj}.mousedown(function (${2:e}) {\n\t${0:// event handler}\n});",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "mdown": true
        },
        "opts": {}
      },
      {
        "content": "${1:obj}.mouseenter(function (${2:e}) {\n\t${0:// event handler}\n});",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "menter": true
        },
        "opts": {}
      },
      {
        "content": "${1:obj}.mouseleave(function (${2:e}) {\n\t${0:// event handler}\n});",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "mleave": true
        },
        "opts": {}
      },
      {
        "content": "${1:obj}.mousemove(function (${2:e}) {\n\t${0:// event handler}\n});",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "mmove": true
        },
        "opts": {}
      },
      {
        "content": "${1:obj}.mouseout(function (${2:e}) {\n\t${0:// event handler}\n});",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "mout": true
        },
        "opts": {}
      },
      {
        "content": "${1:obj}.mouseover(function (${2:e}) {\n\t${0:// event handler}\n});",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "mover": true
        },
        "opts": {}
      },
      {
        "content": "${1:obj}.mouseup(function (${2:e}) {\n\t${0:// event handler}\n});",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "mup": true
        },
        "opts": {}
      },
      {
        "content": "${1:obj}.next('${2:selector expression}')",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "next": true
        },
        "opts": {}
      },
      {
        "content": "${1:obj}.nextAll('${2:selector expression}')",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "nexta": true
        },
        "opts": {}
      },
      {
        "content": "${1:obj}.nextUntil('${2:selector expression}'${3:, 'filter expression'})",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "nextu": true
        },
        "opts": {}
      },
      {
        "content": "${1:obj}.not('${2:selector expression}')",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "not": true
        },
        "opts": {}
      },
      {
        "content": "${1:obj}.off('${2:events}', '${3:selector expression}'${4:, handler})",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "off": true
        },
        "opts": {}
      },
      {
        "content": "${1:obj}.offset()",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "offset": true
        },
        "opts": {}
      },
      {
        "content": "${1:obj}.offsetParent()",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "offsetp": true
        },
        "opts": {}
      },
      {
        "content": "${1:obj}.on('${2:events}', '${3:selector expression}', function (${4:e}) {\n\t${0:// event handler}\n});",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "on": true
        },
        "opts": {}
      },
      {
        "content": "${1:obj}.one('${2:event name}', function (${3:e}) {\n\t${0:// event handler}\n});",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "one": true
        },
        "opts": {}
      },
      {
        "content": "${1:obj}.outerHeight()",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "outerh": true
        },
        "opts": {}
      },
      {
        "content": "${1:obj}.outerWidth()",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "outerw": true
        },
        "opts": {}
      },
      {
        "content": "$.param(${1:obj})",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "param": true
        },
        "opts": {}
      },
      {
        "content": "${1:obj}.parent('${2:selector expression}')",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "parent": true
        },
        "opts": {}
      },
      {
        "content": "${1:obj}.parents('${2:selector expression}')",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "parents": true
        },
        "opts": {}
      },
      {
        "content": "${1:obj}.parentsUntil('${2:selector expression}'${3:, 'filter expression'})",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "parentsu": true
        },
        "opts": {}
      },
      {
        "content": "$.parseJSON(${1:data})",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "parsejson": true
        },
        "opts": {}
      },
      {
        "content": "$.parseXML(${1:data})",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "parsexml": true
        },
        "opts": {}
      },
      {
        "content": "${1:obj}.position()",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "pos": true
        },
        "opts": {}
      },
      {
        "content": "${1:obj}.prepend('${2:Some text <b>and bold!</b>}')",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "prepend": true
        },
        "opts": {}
      },
      {
        "content": "${1:obj}.prependTo('${2:selector expression}')",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "prependto": true
        },
        "opts": {}
      },
      {
        "content": "${1:obj}.prev('${2:selector expression}')",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "prev": true
        },
        "opts": {}
      },
      {
        "content": "${1:obj}.prevAll('${2:selector expression}')",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "preva": true
        },
        "opts": {}
      },
      {
        "content": "${1:obj}.prevUntil('${2:selector expression}'${3:, 'filter expression'})",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "prevu": true
        },
        "opts": {}
      },
      {
        "content": "${1:obj}.promise(${2:'fx'}, ${3:target})",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "promise": true
        },
        "opts": {}
      },
      {
        "content": "${1:obj}.prop('${2:property name}')",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "prop": true
        },
        "opts": {}
      },
      {
        "content": "$.proxy(${1:function}, ${2:this})",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "proxy": true
        },
        "opts": {}
      },
      {
        "content": "${1:obj}.pushStack(${2:elements})",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "pushstack": true
        },
        "opts": {}
      },
      {
        "content": "${1:obj}.queue(${2:name}${3:, newQueue})",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "queue": true
        },
        "opts": {}
      },
      {
        "content": "$.queue(${1:element}${2:, name}${3:, newQueue})",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "queuee": true
        },
        "opts": {}
      },
      {
        "content": "$(function () {\n\t${0}\n});",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ready": true
        },
        "opts": {}
      },
      {
        "content": "${1:obj}.remove()",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "rem": true
        },
        "opts": {}
      },
      {
        "content": "${1:obj}.removeAttr('${2:attribute name}')",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "rema": true
        },
        "opts": {}
      },
      {
        "content": "${1:obj}.removeClass('${2:class name}')",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "remc": true
        },
        "opts": {}
      },
      {
        "content": "${1:obj}.removeData('${2:key name}')",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "remd": true
        },
        "opts": {}
      },
      {
        "content": "$.removeData(${1:element}${2:, 'key name}')",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "remdd": true
        },
        "opts": {}
      },
      {
        "content": "${1:obj}.removeProp('${2:property name}')",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "remp": true
        },
        "opts": {}
      },
      {
        "content": "${1:obj}.replaceAll(${2:target})",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "repa": true
        },
        "opts": {}
      },
      {
        "content": "${1:obj}.replaceWith(${2:content})",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "repw": true
        },
        "opts": {}
      },
      {
        "content": "${1:obj}.reset(function (${2:e}) {\n\t${0:// event handler}\n});",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "reset": true
        },
        "opts": {}
      },
      {
        "content": "${1:obj}.resize(function (${2:e}) {\n\t${0:// event handler}\n});",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "resize": true
        },
        "opts": {}
      },
      {
        "content": "${1:obj}.scroll(function (${2:e}) {\n\t${0:// event handler}\n});",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "scroll": true
        },
        "opts": {}
      },
      {
        "content": "${1:obj}.scrollLeft(${2:value})",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "scrolll": true
        },
        "opts": {}
      },
      {
        "content": "${1:obj}.scrollTop(${2:value})",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "scrollt": true
        },
        "opts": {}
      },
      {
        "content": "${1:obj}.slideDown('${2:slow/400/fast}')",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "sdown": true
        },
        "opts": {}
      },
      {
        "content": "${1:obj}.slideDown('${2:slow/400/fast}', function () {\n\t${0:// callback};\n});",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "sdownc": true
        },
        "opts": {}
      },
      {
        "content": "${1:obj}.select(function (${2:e}) {\n\t${0:// event handler}\n});",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "select": true
        },
        "opts": {}
      },
      {
        "content": "${1:obj}.serialize()",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "serialize": true
        },
        "opts": {}
      },
      {
        "content": "${1:obj}.serializeArray()",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "serializea": true
        },
        "opts": {}
      },
      {
        "content": "${1:obj}.show('${2:slow/400/fast}')",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "show": true
        },
        "opts": {}
      },
      {
        "content": "${1:obj}.show('${2:slow/400/fast}', function () {\n\t${0:// callback}\n});",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "showc": true
        },
        "opts": {}
      },
      {
        "content": "${1:obj}.siblings('${2:selector expression}')",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "sib": true
        },
        "opts": {}
      },
      {
        "content": "${1:obj}.size()",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "size": true
        },
        "opts": {}
      },
      {
        "content": "${1:obj}.slice(${2:start}${3:, end})",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "slice": true
        },
        "opts": {}
      },
      {
        "content": "${1:obj}.slideToggle('${2:slow/400/fast}')",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "stoggle": true
        },
        "opts": {}
      },
      {
        "content": "${1:obj}.stop('${2:queue}', ${3:false}, ${4:false})",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "stop": true
        },
        "opts": {}
      },
      {
        "content": "${1:obj}.submit(function (${2:e}) {\n\t${0:// event handler}\n});",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "submit": true
        },
        "opts": {}
      },
      {
        "content": "${1:obj}.slideUp('${2:slow/400/fast}')",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "sup": true
        },
        "opts": {}
      },
      {
        "content": "${1:obj}.slideUp('${2:slow/400/fast}', function () {\n\t${0:// callback};\n});",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "supc": true
        },
        "opts": {}
      },
      {
        "content": "${1:obj}.text(${2:'some text'})",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "text": true
        },
        "opts": {}
      },
      {
        "content": "$(this)",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "this": true
        },
        "opts": {}
      },
      {
        "content": "${0:obj}.toArray()",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "toarr": true
        },
        "opts": {}
      },
      {
        "content": "${1:obj}.toggle(function (${2:e}) {\n\t${3:// event handler}\n}, function ($2) {\n\t${4:// event handler}\n});\n${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "tog": true
        },
        "opts": {}
      },
      {
        "content": "${1:obj}.toggleClass('${2:class name}')",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "togclass": true
        },
        "opts": {}
      },
      {
        "content": "${1:obj}.toggle('${2:slow/400/fast}')",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "togsh": true
        },
        "opts": {}
      },
      {
        "content": "${1:obj}.trigger('${2:event name}')",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "trig": true
        },
        "opts": {}
      },
      {
        "content": "${1:obj}.triggerHandler('${2:event name}')",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "trigh": true
        },
        "opts": {}
      },
      {
        "content": "$.trim(${1:str})",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "$trim": true
        },
        "opts": {}
      },
      {
        "content": "$.type(${1:obj})",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "$type": true
        },
        "opts": {}
      },
      {
        "content": "${1:obj}.unbind('${2:event name}')",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "unbind": true
        },
        "opts": {}
      },
      {
        "content": "${1:obj}.undelegate(${2:selector expression}, ${3:event}, ${4:handler})",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "undele": true
        },
        "opts": {}
      },
      {
        "content": "$.unique(${1:array})",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "uniq": true
        },
        "opts": {}
      },
      {
        "content": "${1:obj}.unload(function (${2:e}) {\n\t${0:// event handler}\n});",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "unload": true
        },
        "opts": {}
      },
      {
        "content": "${1:obj}.unwrap()",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "unwrap": true
        },
        "opts": {}
      },
      {
        "content": "${1:obj}.val('${2:text}')",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "val": true
        },
        "opts": {}
      },
      {
        "content": "${1:obj}.width(${2:integer})",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "width": true
        },
        "opts": {}
      },
      {
        "content": "${1:obj}.wrap('${2:&lt;div class=\"extra-wrapper\"&gt;&lt;/div&gt;}')",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "wrap": true
        },
        "opts": {}
      }
    ],
    "javascript-jsdoc": [
      {
        "content": "/**\n * ${1:${VISUAL}}$0\n */",
        "doc": null,
        "grammar": "snu",
        "label": "A JSDoc comment",
        "matches": {
          "/*": true
        },
        "opts": {
          "b": true
        }
      },
      {
        "content": "@license ${1:MIT}$0",
        "doc": null,
        "grammar": "snu",
        "label": "@license Description",
        "matches": {
          "@li": true
        },
        "opts": {}
      },
      {
        "content": "@version ${1:0.1.0}$0",
        "doc": null,
        "grammar": "snu",
        "label": "@version Semantic version",
        "matches": {
          "@ver": true
        },
        "opts": {}
      },
      {
        "content": "@constructor",
        "doc": null,
        "grammar": "snu",
        "label": "@constructor",
        "matches": {
          "@constr": true
        },
        "opts": {}
      },
      {
        "content": "@param {${1:Type}} ${2:varname} ${3:Description}",
        "doc": null,
        "grammar": "snu",
        "label": "@param {Type} varname Description",
        "matches": {
          "@p": true
        },
        "opts": {}
      },
      {
        "content": "@return {${1:Type}} ${2:Description}",
        "doc": null,
        "grammar": "snu",
        "label": "@return {Type} Description",
        "matches": {
          "@ret": true
        },
        "opts": {}
      },
      {
        "content": "@private",
        "doc": null,
        "grammar": "snu",
        "label": "@private",
        "matches": {
          "@pri": true
        },
        "opts": {}
      },
      {
        "content": "@override",
        "doc": null,
        "grammar": "snu",
        "label": "@override",
        "matches": {
          "@over": true
        },
        "opts": {}
      },
      {
        "content": "@protected",
        "doc": null,
        "grammar": "snu",
        "label": "@protected",
        "matches": {
          "@pro": true
        },
        "opts": {}
      }
    ],
    "javascript-mocha": [
      {
        "content": "describe('${1:}', () => {\n\t${0:${VISUAL}}\n});",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "des \"describe('thing', () => { ... })\" b": true
        },
        "opts": {}
      },
      {
        "content": "it('${1:}', () => {\n\t${0:${VISUAL}}\n});",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "it \"it('should do', () => { ... })\" b": true
        },
        "opts": {}
      },
      {
        "content": "xit('${1:}', () => {\n\t${0:${VISUAL}}\n});",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "xit \"xit('should do', () => { ... })\" b": true
        },
        "opts": {}
      },
      {
        "content": "before(() => {\n\t${0:${VISUAL}}\n});",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "bef \"before(() => { ... })\" b": true
        },
        "opts": {}
      },
      {
        "content": "beforeEach(() => {\n\t${0:${VISUAL}}\n});",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "befe \"beforeEach(() => { ... })\" b": true
        },
        "opts": {}
      },
      {
        "content": "after(() => {\n\t${0:${VISUAL}}\n});",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "aft \"after(() => { ... })\" b": true
        },
        "opts": {}
      },
      {
        "content": "afterEach(() => {\n\t${0:${VISUAL}}\n});",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "afte \"afterEach(() => { ... })\" b": true
        },
        "opts": {}
      },
      {
        "content": "expect(${1:})${0};",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "exp \"expect(...)\" b": true
        },
        "opts": {}
      },
      {
        "content": "expect(${1:}).to.equal(${0});",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "expe \"expect(...).to.equal(...)\" b": true
        },
        "opts": {}
      },
      {
        "content": "expect(${1:}).to.deep.equal(${0});",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "expd \"expect(...).to.deep.equal(...)\" b": true
        },
        "opts": {}
      }
    ],
    "javascript-node": [
      {
        "content": "#!/usr/bin/env node",
        "doc": null,
        "grammar": "snu",
        "label": "#!/usr/bin/env node",
        "matches": {
          "#!": true
        },
        "opts": {
          "b": true
        }
      },
      {
        "content": "module.exports = $1;",
        "doc": null,
        "grammar": "snu",
        "label": "module.exports",
        "matches": {
          "ex": true
        },
        "opts": {}
      },
      {
        "content": "http.createServer($1).listen($2);",
        "doc": null,
        "grammar": "snu",
        "label": "http.createServer",
        "matches": {
          "hcs": true
        },
        "opts": {}
      },
      {
        "content": "net.createServer(function(${1:socket}){\n\t$1.on('data', function(${3:data}){\n\t\t$4\n\t});\n\t$1.on('end', function(){\n\t\t$5\n\t});\n}).listen(${6:8124});",
        "doc": null,
        "grammar": "snu",
        "label": "net.createServer",
        "matches": {
          "ncs": true
        },
        "opts": {}
      },
      {
        "content": "pipe(${1:stream})$2",
        "doc": null,
        "grammar": "snu",
        "label": "pipe",
        "matches": {
          "pipe": true
        },
        "opts": {}
      },
      {
        "content": "${1:app}.get('$2', $3);",
        "doc": null,
        "grammar": "snu",
        "label": "express GET",
        "matches": {
          "eget": true
        },
        "opts": {}
      },
      {
        "content": "${1:app}.post('$2', $3);",
        "doc": null,
        "grammar": "snu",
        "label": "express POST",
        "matches": {
          "epost": true
        },
        "opts": {}
      },
      {
        "content": "${1:app}.put('$2', $3);",
        "doc": null,
        "grammar": "snu",
        "label": "express PUT",
        "matches": {
          "eput": true
        },
        "opts": {}
      },
      {
        "content": "${1:app}.delete('$2', $3);",
        "doc": null,
        "grammar": "snu",
        "label": "express DELETE",
        "matches": {
          "edelete": true
        },
        "opts": {}
      },
      {
        "content": "process.stdout",
        "doc": null,
        "grammar": "snu",
        "label": "stdout",
        "matches": {
          "stdout": true
        },
        "opts": {}
      },
      {
        "content": "process.stdin",
        "doc": null,
        "grammar": "snu",
        "label": "stdin",
        "matches": {
          "stdin": true
        },
        "opts": {}
      },
      {
        "content": "process.stderr",
        "doc": null,
        "grammar": "snu",
        "label": "stderr",
        "matches": {
          "stderr": true
        },
        "opts": {}
      }
    ],
    "javascript-openui5": [
      {
        "content": "var $1 = new sap.m.Label({\n\t\t\tdesign : $2,\n\t\t\ttext : $3,\n\t\t\tvisible : $4,\n\t\t\ttextAlign : $5,\n\t\t\ttextDirection : $6,\n\t\t\twidth : $7,\n\t\t\trequired : $7\n\t\t});",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "sapmlabel": true
        },
        "opts": {}
      },
      {
        "content": "var $1 = new sap.m.Text({\n\t\t\ttext :$2,\n\t\t\ttextDirection :$3,\n\t\t\tvisible :$4,\n\t\t\twrapping : $5,\n\t\t\ttextAlign : $6,\n\t\t\twidth :$7,\n\t\t\tmaxLines :$8\n\t\t});",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "sapmtext": true
        },
        "opts": {}
      },
      {
        "content": "var $1 = new sap.m.Button({\n\t\t\ttext : $2,\n\t\t\ttype : $3,\n\t\t\twidth : $4,\n\t\t\tenabled :$5,\n\t\t\tvisible :$6,\n\t\t\ticon : $7,\n\t\t\ticonFirst : $8,\n\t\t\tactiveIcon :$9,\n\t\t\ticonDensityAware : $10,\n\t\t});",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "sapmbutton": true
        },
        "opts": {}
      },
      {
        "content": "var $1 = new sap.m.FlexBox({\n\t\t\tvisible : $2,\n\t\t\theight : $3,\n\t\t\twidth : $4,\n\t\t\tdisplayInline :$5,\n\t\t\tdirection :$6,\n\t\t\tfitContainer : $7,\n\t\t\trenderType : $8,\n\t\t\tjustifyContent :$9,\n\t\t\talignItems : $10,\n\t\t\titems:[]\n\t\t});",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "sapmflexbox": true
        },
        "opts": {}
      },
      {
        "content": "var $1 = new sap.m.HBox({\n\t\t\tvisible : $2,\n\t\t\theight : $3,\n\t\t\twidth : $4,\n\t\t\tdisplayInline :$5,\n\t\t\tdirection :$6,\n\t\t\tfitContainer : $7,\n\t\t\trenderType : $8,\n\t\t\tjustifyContent :$9,\n\t\t\talignItems : $10,\n\t\t\titems:[]\n\t\t});",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "sapmhbox": true
        },
        "opts": {}
      },
      {
        "content": "var $1 = new sap.m.VBox({\n\t\t\tvisible : $2,\n\t\t\theight : $3,\n\t\t\twidth : $4,\n\t\t\tdisplayInline :$5,\n\t\t\tdirection :$6,\n\t\t\tfitContainer : $7,\n\t\t\trenderType : $8,\n\t\t\tjustifyContent :$9,\n\t\t\talignItems : $10,\n\t\t\titems:[]\n\t\t});",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "sapmvbox": true
        },
        "opts": {}
      },
      {
        "content": "sap.ui.controller(\"$1\", {\n   onInit: function(){\n   },\n   onAfterRendering: function() {\n   },\n   onAfterRendering: function() {\n   },\n   onExit: function() {\n   },\n});",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "sapcomponent": true
        },
        "opts": {}
      },
      {
        "content": "var $1 = new sap.m.Input({\n\tvalue :$2,\n\twidth : $3,\n\tenabled :$4,\n\tvisible :$5,\n\tvalueState :$6,\n\tname : $7,\n\tplaceholder : $8,\n\teditable : $9,\n\ttype : $10,\n\tmaxLength :$11,\n\tvalueStateText :$12,\n\tshowValueStateMessage :$13,\n\tdateFormat :$14,\n\tshowValueHelp :$15,\n\tshowSuggestion :$16,\n\tvalueHelpOnly :$17,\n\tfilterSuggests :$18,\n\tmaxSuggestionWidth :$19,\n\tstartSuggestion : $20,\n\tshowTableSuggestionValueHelp : $21,\n\tdescription : $22,\n\tfieldWidth : $23,\n\tvalueLiveUpdate :$24,\n\tsuggestionItems  :[$25],\n\tsuggestionColumns : [$26],\n\tsuggestionRows : [$27],\n\tliveChange : $28,\n\tvalueHelpRequest :$29,\n\tsuggest : $30,\n\tsuggestionItemSelected : $31\n});",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "sapminput": true
        },
        "opts": {}
      },
      {
        "content": "var _self = this;",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "_sthis": true
        },
        "opts": {}
      },
      {
        "content": "var $1 = new sap.m.ResponsivePopover({\n\t\t\tplacement :$2 ,//sap.m.PlacementType (default: sap.m.PlacementType.Right)\n\t\t\tshowHeader :$3 ,//boolean (default: true)\n\t\t\ttitle : $4,//string\n\t\t\ticon :$5 ,//sap.ui.core.URI\n\t\t\tmodal :$6 ,// boolean\n\t\t\toffsetX :$7, //int\n\t\t\toffsetY :$8, //int\n\t\t\tcontentWidth : $9,//sap.ui.core.CSSSize\n\t\t\tcontentHeight :$10, //sap.ui.core.CSSSize\n\t\t\thorizontalScrolling :$11, //boolean\n\t\t\tverticalScrolling :$12, //boolean\n\t\t\tshowCloseButton :$13, //boolean (default: true)\n\t\t\t//Aggregations\n\t\t\tcontent :$14,  //sap.ui.core.Control[]\n\t\t\tcustomHeader :$15,  //sap.m.IBar\n\t\t\tsubHeader : $16, //sap.m.IBar\n\t\t\tbeginButton :$17,  //sap.m.Button\n\t\t\tendButton : $18, //sap.m.Button\n\t\t\t//Associations\n\t\t\tinitialFocus : $19, //string | sap.ui.core.Control\n\t\t\t//Events\n\t\t\tbeforeOpen :$20,  //fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]\n\t\t\tafterOpen : $21, //fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]\n\t\t\tbeforeClose : $22, //fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]\n\t\t\tafterClose : $23 //fnList\n\t\t});",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "sapmresponsivepopup": true
        },
        "opts": {}
      },
      {
        "content": "var $1 = new sap.ui.core.Icon({\n\t\t\t\tsrc :$2 , //sap.ui.core.URI\n\t\t\t\tsize :$3 , //sap.ui.core.CSSSize\n\t\t\t\tcolor :$4 , //sap.ui.core.CSSColor\n\t\t\t\thoverColor : $5 ,  // sap.ui.core.CSSColor\n\t\t\t\tactiveColor :$6 , //sap.ui.core.CSSColor\n\t\t\t\twidth :$7 , //sap.ui.core.CSSSize\n\t\t\t\theight : $8 ,//sap.ui.core.CSSSize\n\t\t\t\tbackgroundColor :$8 , //sap.ui.core.CSSColor\n\t\t\t\thoverBackgroundColor :$9 , //sap.ui.core.CSSColor\n\t\t\t\tactiveBackgroundColor :$10 , //sap.ui.core.CSSColor\n\t\t\t\tvisible :$11 , //boolean (default: true)\n\t\t\t\tdecorative : $12 ,//boolean (default: true)\n\t\t\t});",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "sapicon": true
        },
        "opts": {}
      },
      {
        "content": "sap.ui.layout.VerticalLayout.extend(\"$1\", {\n    metadata: {\n\tproperties: {\n\t  \t$2\n\t},\n\taggregations: {\n\t\t$3\n\t},\n\tevents: {\n\t\t$4\n\t}\n    },\n   init: function(){\n\t$5\n    },\n    renderer: \"$6\"\n});",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "extendVerticalL": true
        },
        "opts": {}
      },
      {
        "content": "sap.ui.layout.HorizontalLayout.extend(\"$1\", {\n    metadata: {\n\tproperties: {\n\t  \t$2\n\t},\n\taggregations: {\n\t\t$3\n\t},\n\tevents: {\n\t\t$4\n\t}\n    },\n   init: function(){\n\t$5\n    },\n    renderer: \"$6\"\n});",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "extendHorizontalL": true
        },
        "opts": {}
      }
    ],
    "javascript-react": [
      {
        "content": "import React from 'react';",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ir import React": true
        },
        "opts": {}
      },
      {
        "content": "import React, { Component } from 'react';",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "irc import React and Component": true
        },
        "opts": {}
      },
      {
        "content": "import { use$1 } from 'react';",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "irh import React hooks": true
        },
        "opts": {}
      },
      {
        "content": "import ReactDOM from 'react-dom';",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ird import ReactDOM": true
        },
        "opts": {}
      },
      {
        "content": "import PropTypes from 'prop-types';",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "irp import PropTypes": true
        },
        "opts": {}
      },
      {
        "content": "componentDidMount() {\n\t${1}\n};",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "cdm componentDidMount": true
        },
        "opts": {}
      },
      {
        "content": "componentDidUpdate(prevProps, prevState) {\n\t${1}\n};",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "cdup componentDidUpdate": true
        },
        "opts": {}
      },
      {
        "content": "componentWillMount() {\n\t${1}\n};",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "cwm componentWillMount": true
        },
        "opts": {}
      },
      {
        "content": "componentWillReceiveProps(nextProps) {\n\t${1}\n};",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "cwr componentWillReceiveProps": true
        },
        "opts": {}
      },
      {
        "content": "componentWillUnmount() {\n\t${1}\n};",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "cwun componentWillUnmount": true
        },
        "opts": {}
      },
      {
        "content": "componentWillUpdate(nextProps, nextState) {\n\t${1}\n};",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "cwu componentWillUpdate": true
        },
        "opts": {}
      },
      {
        "content": "shouldComponentUpdate(nextProps, nextState) {\n\t${1}\n}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "scu shouldComponentUpdate": true
        },
        "opts": {}
      },
      {
        "content": "static propTypes = {\n\t${1}: PropTypes.${2}\n};",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "spt static propTypes": true
        },
        "opts": {}
      },
      {
        "content": "${1}.propTypes = {\n\t${2}: PropTypes.${2}\n};",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "pt propTypes": true
        },
        "opts": {}
      },
      {
        "content": "static defaultProps = {\n\t${1}: ${2}\t\n};",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "sdp static defaultProps": true
        },
        "opts": {}
      },
      {
        "content": "${1}.defaultProps = {\n\t${2}: ${3}\n};",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "dp defaultProps": true
        },
        "opts": {}
      },
      {
        "content": "props.${1};",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "pp props": true
        },
        "opts": {}
      },
      {
        "content": "this.props.${1};",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "tp this props": true
        },
        "opts": {}
      },
      {
        "content": "state = {\n\t${1}: ${2},\n};",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "st": true
        },
        "opts": {}
      },
      {
        "content": "this.setState({\n\t${1}: ${2}\n});",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "sst": true
        },
        "opts": {}
      },
      {
        "content": "this.state.${1};",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "tst": true
        },
        "opts": {}
      },
      {
        "content": "const ${1:ComponentName} = (${2:props}) => {\n\t${3:state}\n\treturn (\n\t\t<>\n\t\t\t${4}\n\t\t</>\n\t);\n};",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "raf": true
        },
        "opts": {}
      },
      {
        "content": "class ${1:ClassName} extends Component {\n\trender() {\n\t\treturn (\n\t\t\t<>\n\t\t\t\t${2}\n\t\t\t</>\n\t\t);\n\t}\n}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "rcla": true
        },
        "opts": {}
      },
      {
        "content": "export default class ${1:ClassName} extends Component {\n\trender() {\n\t\treturn (\n\t\t\t<>\n\t\t\t\t${2}\n\t\t\t</>\n\t\t);\n\t};\n};",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ercla": true
        },
        "opts": {}
      },
      {
        "content": "constructor() {\n\tsuper();\n\t${1:state}\n}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ctor": true
        },
        "opts": {}
      },
      {
        "content": "render() {\n\treturn (\n\t\t<>\n\t\t\t${2}\n\t\t</>\n\t);\n}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ren": true
        },
        "opts": {}
      },
      {
        "content": "forceUpdate(${1:callback});",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "fup": true
        },
        "opts": {}
      },
      {
        "content": "const [${1:state}, set${2}] = useState(${3:initialState});",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "uses useState": true
        },
        "opts": {}
      },
      {
        "content": "useEffect(() => {\n\t${1}\n});",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "usee useEffect": true
        },
        "opts": {}
      },
      {
        "content": "const [${1:state}, ${2:dispatch}] = useReducer(${3:reducer});",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "userd useReducer": true
        },
        "opts": {}
      },
      {
        "content": "const ${1:refContainer} = useRef(${2:initialValue});",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "userf useRef": true
        },
        "opts": {}
      },
      {
        "content": "const ${1:value} = useContext(${2:MyContext});",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "usect useContext": true
        },
        "opts": {}
      },
      {
        "content": "const ${1:memoizedCallback} = useCallback(\n() => {\n\t${2}(${3})\n},\n[$3]\n);",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "usecb useCallback": true
        },
        "opts": {}
      },
      {
        "content": "const ${1:memoizedCallback} = useMemo(() => ${2}(${3}), [$3]);",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "usem useMemo": true
        },
        "opts": {}
      },
      {
        "content": "useImperativeHandle(${1:ref}, ${2:createHandle});",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "usei useImperativeHandle": true
        },
        "opts": {}
      },
      {
        "content": "useDebugValue(${1:value});",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "used useDebugValue": true
        },
        "opts": {}
      },
      {
        "content": "ReactDOM.render(${1}, ${2});",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "rdr ReactDOM.render": true
        },
        "opts": {}
      },
      {
        "content": "ReactDOM.hydrate(${1:element}, ${2:container}[, ${3:callback}]);",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "rdh ReactDOM.hydrate": true
        },
        "opts": {}
      },
      {
        "content": "ReactDOM.createPortal(${1:child}, ${2:container});",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "rdcp ReactDOM.createPortal": true
        },
        "opts": {}
      }
    ],
    "javascript-redux": [
      {
        "content": "import { createStore } from 'redux';",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ist": true
        },
        "opts": {}
      },
      {
        "content": "connect(${1:mapStateToProps}, ${2:mapDispatchToProps})(<${3:VISUAL}/>);",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "con": true
        },
        "opts": {}
      },
      {
        "content": "const ${1:actionName} = (${2:arg}) => {\n\treturn {\n\t\ttype: ${3:VISUAL},\n\t\t$2\n\t};\n};",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "act": true
        },
        "opts": {}
      },
      {
        "content": "const ${1:reducerName} = (state={}, action) => {\n\tswitch(action.type) {\n\t\tcase ${1:action}:\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\t$2\n\t\t\t};\n\t\tdefault:\n\t\t\treturn state;\n\t};\n};",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "rdc": true
        },
        "opts": {}
      },
      {
        "content": "const mapStateToProps = (state) => {\n\treturn {\n\t\t${1:propName}: state.$1,\n\t};\n};",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "mstp": true
        },
        "opts": {}
      },
      {
        "content": "const mapDispatchToProps = (dispatch) => {\n\treturn {\n\t\t${1:propName}: () => {\n\t\t\tdispatch(${2:actionName}());\n\t\t},\n\t};\n};",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "mdtp": true
        },
        "opts": {}
      }
    ],
    "javascript-requirejs": [
      {
        "content": "define([\"${1:#dependencies1}\"], function (${2:#dependencies2}) {\n\treturn ${0:TARGET};\n});",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "def": true
        },
        "opts": {}
      },
      {
        "content": "define(\"${1:#name}\", [\"${2:#dependencies1}\"], function (${3:#dependencies2}) {\n\treturn ${0:TARGET};\n});",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "defn": true
        },
        "opts": {}
      },
      {
        "content": "require([\"${1:#dependencies1}\"], function (${2:#dependencies2}) {\n\treturn ${0:TARGET};\n});",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "reqjs": true
        },
        "opts": {}
      }
    ],
    "javascript.node": [
      {
        "content": "#!/usr/bin/env node",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "#!": true
        },
        "opts": {}
      },
      {
        "content": "module.exports = ${1};",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ex": true
        },
        "opts": {}
      },
      {
        "content": "${1:const} ${2} = require('${3:module_name}');",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "re": true
        },
        "opts": {}
      },
      {
        "content": "on('${1:event_name}', function(${2:stream}) {\n  ${3}\n});",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "on": true
        },
        "opts": {}
      },
      {
        "content": "emit('${1:event_name}', ${2:args});",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "emit": true
        },
        "opts": {}
      },
      {
        "content": "once('${1:event_name}', function(${2:stream}) {\n  ${3}\n});",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "once": true
        },
        "opts": {}
      },
      {
        "content": "http.createServer(${1:handler}).listen(${2:port_number});",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "http": true
        },
        "opts": {}
      },
      {
        "content": "net.createServer(function(${1:socket}){\n\t${1}.on('data', function('data'){\n\t  ${2}\n\t]});\n\t${1}.on('end', function(){\n\t  ${3}\n\t});\n}).listen(${4:8124});",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "net": true
        },
        "opts": {}
      },
      {
        "content": "pipe(${1:stream})${2}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "pipe": true
        },
        "opts": {}
      },
      {
        "content": "${1:app}.get('${2:route}', ${3:handler});",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "eget": true
        },
        "opts": {}
      },
      {
        "content": "${1:app}.post('${2:route}', ${3:handler});",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "epost": true
        },
        "opts": {}
      },
      {
        "content": "${1:app}.put('${2:route}', ${3:handler});",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "eput": true
        },
        "opts": {}
      },
      {
        "content": "${1:app}.delete('${2:route}', ${3:handler});",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "edel": true
        },
        "opts": {}
      },
      {
        "content": "process.stdin",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "stdin": true
        },
        "opts": {}
      },
      {
        "content": "process.stdout",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "stdout": true
        },
        "opts": {}
      },
      {
        "content": "process.stderr",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "stderr": true
        },
        "opts": {}
      }
    ],
    "javascript_react": [],
    "jenkins": [
      {
        "content": "steps {\n\tsh '${1:make check}'\n\tjunit '${2:reports/**/*.xml}' \n}\n${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "steps": true
        },
        "opts": {}
      },
      {
        "content": "stage('${1:Test}'){\n\tsteps {\n\t\tsh '${2:make check}'\n\t\tjunit '${3:reports/**/*.xml}' \n\t}\n}\n${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "stage": true
        },
        "opts": {}
      },
      {
        "content": "pipeline {\n\tagent any \n\tstages {\n\t\tstage('${1:Build}') { \n\t\t\tsteps { \n\t\t\t\tsh '${2:make}' \n\t\t\t}\n\t\t}\n\t}\n}\n${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "pipeline": true
        },
        "opts": {}
      },
      {
        "content": "pipeline {\n\tagent any \n\tstages {\n\t\tstage('${1:Build}') { \n\t\t\tsteps { \n\t\t\t\tsh '${2:make}' \n\t\t\t}\n\t\t}\n\t\tstage('${3:Test}'){\n\t\t\tsteps {\n\t\t\t\tsh '${4:make check}'\n\t\t\t\tjunit '${5:reports/**/*.xml}' \n\t\t\t}\n\t\t}\n\t\tstage('${6:Deploy}') {\n\t\t\tsteps {\n\t\t\t\tsh '${7:make publish}'\n\t\t\t}\n\t\t}\n\t}\n}\n${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "pipeline_sample": true
        },
        "opts": {}
      },
      {
        "content": "docker {\n\timage '${1:myregistry.com/node'}'\n\tlabel '${2:my-defined-label'}'\n\tregistryUrl '${3:https://myregistry.com/'}'\n\tregistryCredentialsId '${4:myPredefinedCredentialsInJenkins'}'\n}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "d": true
        },
        "opts": {}
      },
      {
        "content": "dockerfile {\n\tfilename '${1:Dockerfile.build}'\n\tdir '${2:build}'\n\tlabel '${3:my-defined-label}'\n\tregistryUrl '${4:https://myregistry.com/}'\n\tregistryCredentialsId '${5:myPredefinedCredentialsInJenkins}'\n}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "df": true
        },
        "opts": {}
      },
      {
        "content": "post { \n\talways { \n\t\t${1}\n\t}\n}\n${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "pa": true
        },
        "opts": {}
      },
      {
        "content": "post { \n\tchanged { \n\t\t${1}\n\t}\n}\n${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "pc": true
        },
        "opts": {}
      },
      {
        "content": "post { \n\tfixed { \n\t\t${1}\n\t}\n}\n${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "pf": true
        },
        "opts": {}
      },
      {
        "content": "post { \n\tregression { \n\t\t${1}\n\t}\n}\n${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "pr": true
        },
        "opts": {}
      },
      {
        "content": "post { \n\taborted { \n\t\t${1}\n\t}\n}\n${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "pab": true
        },
        "opts": {}
      },
      {
        "content": "post { \n\tfailure { \n\t\t${1}\n\t}\n}\n${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "pfa": true
        },
        "opts": {}
      },
      {
        "content": "post { \n\tsuccess { \n\t\t${1}\n\t}\n}\n${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ps": true
        },
        "opts": {}
      },
      {
        "content": "post { \n\tunstable { \n\t\t${1}\n\t}\n}\n${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "pu": true
        },
        "opts": {}
      },
      {
        "content": "post { \n\tcleanup { \n\t\t${1}\n\t}\n}\n${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "pc": true
        },
        "opts": {}
      },
      {
        "content": "pipeline {\n\tagent any \n\tstages {\n\t\tstage('${1:Build}') { \n\t\t\tsteps { \n\t\t\t\tsh '${2:make}' \n\t\t\t}\n\t\t}\n}\n${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "psss": true
        },
        "opts": {}
      },
      {
        "content": "stages {\n\tstage('${1:Build}') { \n\t\tsteps { \n\t\t\tsh '${2:make}' \n\t\t}\n\t}\n}\n${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "sss": true
        },
        "opts": {}
      },
      {
        "content": "parameters{ \n\t${1}\n}\n${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "parameters": true
        },
        "opts": {}
      },
      {
        "content": "text(name: \"${1:BIOGRAPHY}\" , defaultValue: \"${2:default}\" , description: \"${3:Enter some information about the person}\")\n${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "paramtext": true
        },
        "opts": {}
      },
      {
        "content": "booleanParam(name: \"${1:TOGGLE}\" , defaultValue: ${2:default}, description: \"${3:Toggle this value}\")\n${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "parambool": true
        },
        "opts": {}
      },
      {
        "content": "choice(name: \"${1:CHOICE}\" , choices: [\"${2:Choices}\",] , description: \"${3:Pick something}\") \n${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "paramchoice": true
        },
        "opts": {}
      },
      {
        "content": "password(name: \"${1:PASSWORD}\" , defaultValue: \"${2:SECRET}\" , description: \"${3:Enter a password}\")\n${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "parampassword": true
        },
        "opts": {}
      },
      {
        "content": "file(name: \"${1:FILE}\" , description: \"${2:Choose a file to upload}\")${0}\n${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "paramfile": true
        },
        "opts": {}
      },
      {
        "content": "triggers {\n\tcron('${1:H */4 * * 1-5}')\n}\n${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "triggers": true
        },
        "opts": {}
      },
      {
        "content": "input {\n\tmessage '${1:Should we continue?}'\n\tok '${2:Yes, we should.}'\n\tsubmitter '${3:alice,bob}'\n\tparameters { \n\t\tstring(name: '${4:PERSON}' , defaultValue: '${5:Mr Jenkins}' , description: '${6:Who should I say hello to?}')\n\t}\n}\n${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "input": true
        },
        "opts": {}
      },
      {
        "content": "when {\n\tbranch '${1:branch}'\n}\n${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "whenbranch": true
        },
        "opts": {}
      },
      {
        "content": "when {\n\tbuildingTag '${1:tag}'\n}\n${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "whenbuildingTag": true
        },
        "opts": {}
      },
      {
        "content": "when {\n\tchangelog '${1:changelog}'\n}\n${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "whenchangelog": true
        },
        "opts": {}
      },
      {
        "content": "when {\n\tchangeset '${1:changeSet}'\n}\n${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "whenchangeset": true
        },
        "opts": {}
      },
      {
        "content": "when {\n\tchangeRequest '${1:changeRequest}'\n}\n${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "whenchangeRequest": true
        },
        "opts": {}
      },
      {
        "content": "when {\n\tenvironment '${1:environment}'\n}\n${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "whenenvironment": true
        },
        "opts": {}
      },
      {
        "content": "when {\n\tequals '${1:equals}'\n}\n${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "whenequals": true
        },
        "opts": {}
      },
      {
        "content": "when {\n\texpression '${1:expression}'\n}\n${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "whenexpression": true
        },
        "opts": {}
      },
      {
        "content": "when {\n\ttag '${1:tag}'\n}\n${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "whentag": true
        },
        "opts": {}
      },
      {
        "content": "when {\n\tnot '${1:not}'\n}\n${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "whennot": true
        },
        "opts": {}
      },
      {
        "content": "when {\n\tallOf '${1:allOf}'\n}\n${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "whenallOf": true
        },
        "opts": {}
      },
      {
        "content": "when {\n\tanyOf '${1:anyOf}'\n}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "whenanyOf": true
        },
        "opts": {}
      }
    ],
    "jest": [
      {
        "content": "afterAll(() => {\n\t$0\n});",
        "doc": "afterAll function is called once after all specs",
        "grammar": "lsp",
        "label": "jest-afterall",
        "matches": {
          "aa": true,
          "jest afterall": true
        },
        "opts": {}
      },
      {
        "content": "afterEach(() => {\n\t$0\n});",
        "doc": "afterEach function is called once after each spec",
        "grammar": "lsp",
        "label": "jest-aftereach",
        "matches": {
          "ae": true,
          "jest aftereach": true
        },
        "opts": {}
      },
      {
        "content": "beforeAll(() => {\n\t$0\n});",
        "doc": "beforeAll function is called once before all specs",
        "grammar": "lsp",
        "label": "jest-beforeall",
        "matches": {
          "ba": true,
          "jest beforeall": true
        },
        "opts": {}
      },
      {
        "content": "beforeEach(() => {\n\t$0\n});",
        "doc": "beforeEach function is called once before each spec",
        "grammar": "lsp",
        "label": "jest-beforeeach",
        "matches": {
          "be": true,
          "jest beforeeach": true
        },
        "opts": {}
      },
      {
        "content": "describe('${1:Name of the group}', () => {\n\t$0\n});",
        "doc": "creates a describe block",
        "grammar": "lsp",
        "label": "jest-describe",
        "matches": {
          "desc": true,
          "jest describe": true
        },
        "opts": {}
      },
      {
        "content": "describe.each([${1:[1, 2], [2, 4]}])(\n\t'${2:double(%d)}',\n\t(${3:input, expected}) => {\n\t\ttest(`returns \\${expected}`, () => {\n\t\t\t${4:expect(double(input)).toBe(expected);}\n\t\t});\n\t}\n);",
        "doc": "creates a describe block with different test data sets",
        "grammar": "lsp",
        "label": "jest-describe-each",
        "matches": {
          "desce": true,
          "jest describe each": true
        },
        "opts": {}
      },
      {
        "content": "describe.only('${1:Name of the group}', () => {\n\t$0\n});",
        "doc": "creates a describe block that runs only",
        "grammar": "lsp",
        "label": "jest-describe-only",
        "matches": {
          "desco": true,
          "jest describe only": true
        },
        "opts": {}
      },
      {
        "content": "describe.skip('${1:Name of the group}', () => {\n\t$0\n});",
        "doc": "creates a describe block that will be skipped",
        "grammar": "lsp",
        "label": "jest-describe-skip",
        "matches": {
          "descs": true,
          "jest describe skip": true
        },
        "opts": {}
      },
      {
        "content": "expect($0)",
        "doc": "expect actual value",
        "grammar": "lsp",
        "label": "jest-expect",
        "matches": {
          "exp": true,
          "jest expect": true
        },
        "opts": {}
      },
      {
        "content": "expect.assertions($0);",
        "doc": "expects the test to make the indicated number of assertions (useful for async)",
        "grammar": "lsp",
        "label": "jest-expect-assertions",
        "matches": {
          "expas": true,
          "jest expect assertions": true
        },
        "opts": {}
      },
      {
        "content": "expect.hasAssertions();$0",
        "doc": "expects the test to make at least one assertion (useful for async)",
        "grammar": "lsp",
        "label": "jest-expect-hasassertions",
        "matches": {
          "expha": true,
          "jest expect hasassertions": true
        },
        "opts": {}
      },
      {
        "content": "expect($1).rejects$0",
        "doc": "expect promise rejects to",
        "grammar": "lsp",
        "label": "jest-expect-rejects",
        "matches": {
          "exprj": true,
          "jest expect rejects": true
        },
        "opts": {}
      },
      {
        "content": "expect($1).resolves$0",
        "doc": "expect promise resolves to",
        "grammar": "lsp",
        "label": "jest-expect-resolves",
        "matches": {
          "expr": true,
          "jest expect resolves": true
        },
        "opts": {}
      },
      {
        "content": "it('${1:should }', () => {\n\t$0\n});",
        "doc": "creates an it block",
        "grammar": "lsp",
        "label": "jest-it",
        "matches": {
          "it": true,
          "jest it": true
        },
        "opts": {}
      },
      {
        "content": "it.each([${1:[1, 2], [2, 4]}])(\n\t'${2:double(%d)}',\n\t(${3:input, expected}) => {\n\t\t${0:expect(double(input)).toBe(expected);}\n\t}\n);",
        "doc": "creates an it block with different test data sets",
        "grammar": "lsp",
        "label": "jest-it-each",
        "matches": {
          "ite": true,
          "jest it each": true
        },
        "opts": {}
      },
      {
        "content": "it.only('${1:should }', () => {\n\t$0\n});",
        "doc": "creates an it block that runs only",
        "grammar": "lsp",
        "label": "jest-it-only",
        "matches": {
          "ito": true,
          "jest it only": true
        },
        "opts": {}
      },
      {
        "content": "it.skip('${1:should }', () => {\n\t$0\n});",
        "doc": "creates an it block that will be skipped",
        "grammar": "lsp",
        "label": "jest-it-skip",
        "matches": {
          "its": true,
          "jest it skip": true
        },
        "opts": {}
      },
      {
        "content": "it.todo('${1:should }');",
        "doc": "creates a test placeholder",
        "grammar": "lsp",
        "label": "jest-it-todo",
        "matches": {
          "itt": true,
          "jest it todo": true
        },
        "opts": {}
      },
      {
        "content": "it('${1:should }', async () => {\n\t$0\n});",
        "doc": "creates an it block with async callback function",
        "grammar": "lsp",
        "label": "jest-it-async",
        "matches": {
          "ita": true,
          "jest it async": true
        },
        "opts": {}
      },
      {
        "content": "jest.fn($0)",
        "doc": "creates jest.fn()",
        "grammar": "lsp",
        "label": "jest-jest-fn",
        "matches": {
          "jest fn": true,
          "jfn": true
        },
        "opts": {}
      },
      {
        "content": "describe('${1:Name of the group}', () => {\n\n\tlet ${2:cut};\n\n\tbeforeEach(() => {\n\t\t$2 = $3;\n\t});\n\n\ttest('${1:should }', () => {\n\t\texpect($2).toBe($0);\n\t});\n\n});",
        "doc": "creates a template to test a class under test",
        "grammar": "lsp",
        "label": "jest-template-cut",
        "matches": {
          "cut": true,
          "jest template cut": true
        },
        "opts": {}
      },
      {
        "content": "test('${1:should }', () => {\n\t$0\n});",
        "doc": "creates a test block",
        "grammar": "lsp",
        "label": "jest-test",
        "matches": {
          "jest test": true,
          "test": true
        },
        "opts": {}
      },
      {
        "content": "test.each([${1:[1, 2], [2, 4]}])(\n\t'${2:double(%d)}',\n\t(${3:input, expected}) => {\n\t\t${0:expect(double(input)).toBe(expected);}\n\t}\n);",
        "doc": "creates an test block with different test data sets",
        "grammar": "lsp",
        "label": "jest-test-each",
        "matches": {
          "jest test each": true,
          "teste": true
        },
        "opts": {}
      },
      {
        "content": "test.only('${1:should }', () => {\n\t$0\n});",
        "doc": "creates a test block  that runs only",
        "grammar": "lsp",
        "label": "jest-test-only",
        "matches": {
          "jest test only": true,
          "testo": true
        },
        "opts": {}
      },
      {
        "content": "test.skip('${1:should }', () => {\n\t$0\n});",
        "doc": "creates a test block that will be skipped",
        "grammar": "lsp",
        "label": "jest-test-skip",
        "matches": {
          "jest test skip": true,
          "tests": true
        },
        "opts": {}
      },
      {
        "content": "test.todo('${1:should }');",
        "doc": "creates a test placeholder",
        "grammar": "lsp",
        "label": "jest-test-todo",
        "matches": {
          "jest test todo": true,
          "testt": true
        },
        "opts": {}
      },
      {
        "content": "test('${1:should }', async () => {\n\t$0\n});",
        "doc": "creates an test block with async callback function",
        "grammar": "lsp",
        "label": "jest-test-async",
        "matches": {
          "jest test async": true,
          "testa": true
        },
        "opts": {}
      },
      {
        "content": "expect($1).toBe($0);",
        "doc": "expects the first argument to be equal with the second one",
        "grammar": "lsp",
        "label": "jest-tobe",
        "matches": {
          "jest expect tobe": true,
          "tb": true
        },
        "opts": {}
      },
      {
        "content": "expect($1).toBeCloseTo(${2:number}, ${3:delta});$0",
        "doc": "expects the first argument to be close to the second one base on the delta",
        "grammar": "lsp",
        "label": "jest-tobecloseto",
        "matches": {
          "jest expect tobecloseto": true,
          "tbct": true
        },
        "opts": {}
      },
      {
        "content": "expect($1).toBeDefined();$0",
        "doc": "expects the argument is defined",
        "grammar": "lsp",
        "label": "jest-tobedefined",
        "matches": {
          "jest expect tobedefined": true,
          "tbd": true
        },
        "opts": {}
      },
      {
        "content": "expect($1).toBeFalsy();$0",
        "doc": "expects the argument is falsy",
        "grammar": "lsp",
        "label": "jest-tobefalsy",
        "matches": {
          "jest expect tobefalsy": true,
          "tbf": true
        },
        "opts": {}
      },
      {
        "content": "expect($1).toBeGreaterThan($0);",
        "doc": "expects the argument is greater than or equal",
        "grammar": "lsp",
        "label": "jest-tobegreaterthan",
        "matches": {
          "jest expect tobegreaterthan": true,
          "tbgt": true
        },
        "opts": {}
      },
      {
        "content": "expect($1).toBeGreaterThanOrEqual($0);",
        "doc": "expects the argument is greater than",
        "grammar": "lsp",
        "label": "jest-tobegreaterthanorequal",
        "matches": {
          "jest expect tobegreaterthanorequal": true,
          "tbgte": true
        },
        "opts": {}
      },
      {
        "content": "expect($1).toBeInstanceOf($0);",
        "doc": "expects the argument is less than",
        "grammar": "lsp",
        "label": "jest-tobeinstanceof",
        "matches": {
          "jest expect tobeinstanceof": true,
          "tbi": true
        },
        "opts": {}
      },
      {
        "content": "expect($1).toBeLessThan($0);",
        "doc": "expects the argument is less than",
        "grammar": "lsp",
        "label": "jest-tobelessthan",
        "matches": {
          "jest expect tobelessthan": true,
          "tblt": true
        },
        "opts": {}
      },
      {
        "content": "expect($1).toBeLessThanOrEqual($0);",
        "doc": "expects the argument is less than or equal",
        "grammar": "lsp",
        "label": "jest-tobelessthanorequal",
        "matches": {
          "jest expect tobelessthanorequal": true,
          "tblte": true
        },
        "opts": {}
      },
      {
        "content": "expect($1).toBeNull();$0",
        "doc": "expects the argument is null",
        "grammar": "lsp",
        "label": "jest-tobenull",
        "matches": {
          "jest expect tobenull": true,
          "tbn": true
        },
        "opts": {}
      },
      {
        "content": "expect($1).toBeTruthy();$0",
        "doc": "expects the argument is truthy",
        "grammar": "lsp",
        "label": "jest-tobetruthy",
        "matches": {
          "jest expect tobetruthy": true,
          "tbt": true
        },
        "opts": {}
      },
      {
        "content": "expect($1).toBeUndefined();$0",
        "doc": "expects the argument is undefined",
        "grammar": "lsp",
        "label": "jest-tobeundefined",
        "matches": {
          "jest expect tobeundefined": true,
          "tbu": true
        },
        "opts": {}
      },
      {
        "content": "expect(${1:list}).toContain($0);",
        "doc": "expects the list contains the item (===)",
        "grammar": "lsp",
        "label": "jest-tocontain",
        "matches": {
          "jest expect tocontain": true,
          "tc": true
        },
        "opts": {}
      },
      {
        "content": "expect(${1:list}).toContainEqual($0);",
        "doc": "expects the list contains the item (equals)",
        "grammar": "lsp",
        "label": "jest-tocontainequal",
        "matches": {
          "jest expect tocontainequal": true,
          "tce": true
        },
        "opts": {}
      },
      {
        "content": "expect($1).toEqual($0);",
        "doc": "expects the first argument to be equal with the second one",
        "grammar": "lsp",
        "label": "jest-toequal",
        "matches": {
          "jest expect toequal": true,
          "te": true
        },
        "opts": {}
      },
      {
        "content": "expect($1).toHaveBeenCalled();$0",
        "doc": "returns true if the spy was called",
        "grammar": "lsp",
        "label": "jest-tohavebeencalled",
        "matches": {
          "jest expect tohavebeencalled": true,
          "thbc": true
        },
        "opts": {}
      },
      {
        "content": "expect($1).toHaveBeenCalledTimes($0);",
        "doc": "returns true if the spy has been called given times",
        "grammar": "lsp",
        "label": "jest-tohavebeencalledtimes",
        "matches": {
          "jest expect tohavebeencalledtimes": true,
          "thbct": true
        },
        "opts": {}
      },
      {
        "content": "expect($1).toHaveBeenCalledWith($0);",
        "doc": "returns true if the spy has been called with",
        "grammar": "lsp",
        "label": "jest-tohavebeencalledwith",
        "matches": {
          "jest expect tohavebeencalledwith": true,
          "thbcw": true
        },
        "opts": {}
      },
      {
        "content": "expect($1).toHaveBeenLastCalledWith($0);",
        "doc": "returns true if the spy has been last called with",
        "grammar": "lsp",
        "label": "jest-tohavebeenlastcalledwith",
        "matches": {
          "jest expect tohavebeenlastcalledwith": true,
          "thblcw": true
        },
        "opts": {}
      },
      {
        "content": "expect($1).toHaveLength($0);",
        "doc": "expects the object to have length",
        "grammar": "lsp",
        "label": "jest-tohavelength",
        "matches": {
          "jest expect tohavelength": true,
          "thl": true
        },
        "opts": {}
      },
      {
        "content": "expect($1).toHaveProperty(${2:keyPath}, ${3:value});$0",
        "doc": "returns true if the argument matches the second object",
        "grammar": "lsp",
        "label": "jest-tohaveproperty",
        "matches": {
          "jest expect tohaveproperty": true,
          "thp": true
        },
        "opts": {}
      },
      {
        "content": "expect($1).toMatch($0);",
        "doc": "returns true if the argument matches the second value",
        "grammar": "lsp",
        "label": "jest-tomatch",
        "matches": {
          "jest expect tomatch": true,
          "tm": true
        },
        "opts": {}
      },
      {
        "content": "expect($1).toMatchInlineSnapshot($0);",
        "doc": "returns true if the argument matches the most recent inline snapshot",
        "grammar": "lsp",
        "label": "jest-tomatchinlinesnapshot",
        "matches": {
          "jest expect tomatchinlinesnapshot": true,
          "tmis": true
        },
        "opts": {}
      },
      {
        "content": "expect($1).toMatchObject($0);",
        "doc": "returns true if the argument matches the second object",
        "grammar": "lsp",
        "label": "jest-tomatchobject",
        "matches": {
          "jest expect tomatchobject": true,
          "tmo": true
        },
        "opts": {}
      },
      {
        "content": "expect($1).toMatchSnapshot($0);",
        "doc": "returns true if the argument matches the most recent snapshot",
        "grammar": "lsp",
        "label": "jest-tomatchsnapshot",
        "matches": {
          "jest expect tomatchsnapshot": true,
          "tms": true
        },
        "opts": {}
      },
      {
        "content": "expect($1).toStrictEqual($0);",
        "doc": "expects the first argument to be strictly equal with the second one",
        "grammar": "lsp",
        "label": "jest-tostrictequal",
        "matches": {
          "jest expect tostrictequal": true,
          "tse": true
        },
        "opts": {}
      },
      {
        "content": "expect(() => {\n\t$0\n}).toThrow($1);",
        "doc": "expects that the method will throw an error",
        "grammar": "lsp",
        "label": "jest-tothrow",
        "matches": {
          "jest expect tothrow": true,
          "tt": true
        },
        "opts": {}
      },
      {
        "content": "expect(() => {\n\t$0\n}).toThrowError($1);",
        "doc": "expects that the method will throw an error",
        "grammar": "lsp",
        "label": "jest-tothrowerror",
        "matches": {
          "jest expect tothrowerror": true,
          "tte": true
        },
        "opts": {}
      },
      {
        "content": "expect(() => {\n\t$0\n}).toThrowErrorMatchingInlineSnapshot();",
        "doc": "expects that the method will throw an error matching the inline snapshot",
        "grammar": "lsp",
        "label": "jest-tothrowerrormatchinginlinesnapshot",
        "matches": {
          "jest expect tothrowerrormatchinginlinesnapshot": true,
          "ttemis": true
        },
        "opts": {}
      },
      {
        "content": "expect(() => {\n\t$0\n}).toThrowErrorMatchingSnapshot();",
        "doc": "expects that the method will throw an error mathing the snapshpot",
        "grammar": "lsp",
        "label": "jest-tothrowerrormatchingsnapshot",
        "matches": {
          "jest expect tothrowerrormatchingsnapshot": true,
          "ttems": true
        },
        "opts": {}
      }
    ],
    "jinja": [
      {
        "content": "{% ${1} %}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "%": true
        },
        "opts": {}
      },
      {
        "content": "{% ${1:tag_name} %}\n${0}\n{% end$1 %}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "%%": true
        },
        "opts": {}
      },
      {
        "content": "{{ ${1} }}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "{": true
        },
        "opts": {}
      },
      {
        "content": "{% autoescape ${1:off} %}\n\t${0}\n{% endautoescape %}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "autoescape": true
        },
        "opts": {}
      },
      {
        "content": "{% block ${1} %}\n\t${0}\n{% endblock %}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "block": true
        },
        "opts": {}
      },
      {
        "content": "{# ${0:comment} #}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "#": true
        },
        "opts": {}
      },
      {
        "content": "{% comment %}\n\t${0}\n{% endcomment %}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "comment": true
        },
        "opts": {}
      },
      {
        "content": "{% cycle ${1:val1} ${2:val2} ${3:as ${4}} %}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "cycle": true
        },
        "opts": {}
      },
      {
        "content": "{% debug %}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "debug": true
        },
        "opts": {}
      },
      {
        "content": "{% extends \"${0:base.html}\" %}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "extends": true
        },
        "opts": {}
      },
      {
        "content": "{% filter ${1} %}\n\t${0}\n{% endfilter %}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "filter": true
        },
        "opts": {}
      },
      {
        "content": "{% firstof ${1} %}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "firstof": true
        },
        "opts": {}
      },
      {
        "content": "{% for ${1} in ${2} %}\n\t${0}\n{% endfor %}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "for": true
        },
        "opts": {}
      },
      {
        "content": "{% empty %}\n${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "empty": true
        },
        "opts": {}
      },
      {
        "content": "{% if ${1} %}\n\t${0}\n{% endif %}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "if": true
        },
        "opts": {}
      },
      {
        "content": "{% else %}\n\t${1}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "el": true
        },
        "opts": {}
      },
      {
        "content": "{% elif ${1} %}\n\t${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "eif": true
        },
        "opts": {}
      },
      {
        "content": "{% ifchanged %}${1}{% endifchanged %}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ifchanged": true
        },
        "opts": {}
      },
      {
        "content": "{% ifequal ${1} ${2} %}\n\t${0}\n{% endifequal %}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ifequal": true
        },
        "opts": {}
      },
      {
        "content": "{% ifnotequal ${1} ${2} %}\n\t${0}\n{% endifnotequal %}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ifnotequal": true
        },
        "opts": {}
      },
      {
        "content": "{% include \"${0}\" %}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "include": true
        },
        "opts": {}
      },
      {
        "content": "{% load ${0} %}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "load": true
        },
        "opts": {}
      },
      {
        "content": "{% now \"${0:jS F Y H:i}\" %}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "now": true
        },
        "opts": {}
      },
      {
        "content": "{% regroup ${1} by ${2} as ${0} %}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "regroup": true
        },
        "opts": {}
      },
      {
        "content": "{% spaceless %}${0}{% endspaceless %}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "spaceless": true
        },
        "opts": {}
      },
      {
        "content": "{% ssi ${0} %}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ssi": true
        },
        "opts": {}
      },
      {
        "content": "{% trans %}${0}{% endtrans %}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "trans": true
        },
        "opts": {}
      },
      {
        "content": "{% url ${1} as ${0} %}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "url": true
        },
        "opts": {}
      },
      {
        "content": "{% widthratio ${1:this_value} ${2:max_value} ${0:100} %}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "widthratio": true
        },
        "opts": {}
      },
      {
        "content": "{% with ${1} as ${2} %}\n\t${0}\n{% endwith %}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "with": true
        },
        "opts": {}
      },
      {
        "content": "add:\"${0}\"",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "add": true
        },
        "opts": {}
      },
      {
        "content": "center:\"${0}\"",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "center": true
        },
        "opts": {}
      },
      {
        "content": "cut:\"${0}\"",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "cut": true
        },
        "opts": {}
      },
      {
        "content": "date:\"${0}\"",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "date": true
        },
        "opts": {}
      },
      {
        "content": "default:\"${0}\"",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "default": true
        },
        "opts": {}
      },
      {
        "content": "default_if_none:\"${0}\"",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "defaultifnone": true
        },
        "opts": {}
      },
      {
        "content": "dictsort:\"${0}\"",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "dictsort": true
        },
        "opts": {}
      },
      {
        "content": "dictsortreversed:\"${0}\"",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "dictsortrev": true
        },
        "opts": {}
      },
      {
        "content": "divisibleby:\"${0}\"",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "divisibleby": true
        },
        "opts": {}
      },
      {
        "content": "floatformat:\"${0}\"",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "floatformat": true
        },
        "opts": {}
      },
      {
        "content": "get_digit:\"${0}\"",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "getdigit": true
        },
        "opts": {}
      },
      {
        "content": "join:\"${0}\"",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "join": true
        },
        "opts": {}
      },
      {
        "content": "length_is:\"${0}\"",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "lengthis": true
        },
        "opts": {}
      },
      {
        "content": "pluralize:\"${0}\"",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "pluralize": true
        },
        "opts": {}
      },
      {
        "content": "removetags:\"${0}\"",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "removetags": true
        },
        "opts": {}
      },
      {
        "content": "slice:\"${0}\"",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "slice": true
        },
        "opts": {}
      },
      {
        "content": "stringformat:\"${0}\"",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "stringformat": true
        },
        "opts": {}
      },
      {
        "content": "time:\"${0}\"",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "time": true
        },
        "opts": {}
      },
      {
        "content": "truncatewords:${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "truncatewords": true
        },
        "opts": {}
      },
      {
        "content": "truncatewords_html:${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "truncatewordshtml": true
        },
        "opts": {}
      },
      {
        "content": "urlizetrunc:${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "urlizetrunc": true
        },
        "opts": {}
      },
      {
        "content": "wordwrap:${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "wordwrap": true
        },
        "opts": {}
      }
    ],
    "jinja2": [
      {
        "content": "{% block ${1:name} %}\n\t\t$2\n{% endblock $1 %}",
        "doc": null,
        "grammar": "snu",
        "label": "block",
        "matches": {
          "block": true
        },
        "opts": {
          "b": true
        }
      },
      {
        "content": "{{ $1 }}",
        "doc": null,
        "grammar": "snu",
        "label": "variable",
        "matches": {
          "{{": true
        },
        "opts": {
          "b": true
        }
      },
      {
        "content": "{# $1 #}",
        "doc": null,
        "grammar": "snu",
        "label": "comment",
        "matches": {
          "{#": true
        },
        "opts": {
          "b": true
        }
      },
      {
        "content": "{# $1 #}",
        "doc": null,
        "grammar": "snu",
        "label": "comment",
        "matches": {
          "#": true
        },
        "opts": {
          "b": true
        }
      },
      {
        "content": "{% raw %}\n\t\t$1\n{% endraw %}",
        "doc": null,
        "grammar": "snu",
        "label": "escaped block",
        "matches": {
          "raw": true
        },
        "opts": {
          "b": true
        }
      },
      {
        "content": "{% extends \"${1:template}\" %}",
        "doc": null,
        "grammar": "snu",
        "label": "extends",
        "matches": {
          "extends": true
        },
        "opts": {
          "b": true
        }
      },
      {
        "content": "{% include \"${1:template}\" %}",
        "doc": null,
        "grammar": "snu",
        "label": "include",
        "matches": {
          "include": true
        },
        "opts": {
          "b": true
        }
      },
      {
        "content": "{% import \"${1:template}\" %}",
        "doc": null,
        "grammar": "snu",
        "label": "import",
        "matches": {
          "import": true
        },
        "opts": {
          "b": true
        }
      },
      {
        "content": "{% from \"${1:template}\" import ${2:name}${3: as ${4:$2}} %}",
        "doc": null,
        "grammar": "snu",
        "label": "from/import/as",
        "matches": {
          "from": true
        },
        "opts": {
          "b": true
        }
      },
      {
        "content": "{% filter ${1:filter} %}\n\t$2\n{% endfilter %}",
        "doc": null,
        "grammar": "snu",
        "label": "filter",
        "matches": {
          "filter": true
        },
        "opts": {
          "b": true
        }
      },
      {
        "content": "{% for ${1:item} in ${2:sequence} %}\n\t$3\n{% endfor %}",
        "doc": null,
        "grammar": "snu",
        "label": "for",
        "matches": {
          "for": true
        },
        "opts": {
          "b": true
        }
      },
      {
        "content": "{% for ${1:item} in ${2:sequence} %}\n\t$3\n{% else %}\n\t$4\n{% endfor %}",
        "doc": null,
        "grammar": "snu",
        "label": "for/else",
        "matches": {
          "for": true
        },
        "opts": {
          "b": true
        }
      },
      {
        "content": "{% if ${1:expr} %}\n\t$2\n{% endif %}",
        "doc": null,
        "grammar": "snu",
        "label": "if",
        "matches": {
          "if": true
        },
        "opts": {
          "b": true
        }
      },
      {
        "content": "{% if ${1:expr} %}\n\t$2\n{% else %}\n\t$3\n{% endif %}",
        "doc": null,
        "grammar": "snu",
        "label": "if/else",
        "matches": {
          "if": true
        },
        "opts": {
          "b": true
        }
      },
      {
        "content": "{% if ${1:expr} %}\n\t$2\n{% elif %}\n\t$3\n{% else %}\n\t$4\n{% endif %}",
        "doc": null,
        "grammar": "snu",
        "label": "if/elif/else",
        "matches": {
          "if": true
        },
        "opts": {
          "b": true
        }
      },
      {
        "content": "{% macro ${1:name}(${2:args}) %}\n\t$3\n{% endmacro %}",
        "doc": null,
        "grammar": "snu",
        "label": "macro",
        "matches": {
          "macro": true
        },
        "opts": {
          "b": true
        }
      },
      {
        "content": "{% call ${1:name}(${2:args}) %}\n\t$3\n{% endcall %}",
        "doc": null,
        "grammar": "snu",
        "label": "call",
        "matches": {
          "call": true
        },
        "opts": {
          "b": true
        }
      },
      {
        "content": "{% set ${1:name} = ${2:'value'} %}",
        "doc": null,
        "grammar": "snu",
        "label": "set",
        "matches": {
          "set": true
        },
        "opts": {
          "b": true
        }
      },
      {
        "content": "{% trans %}\n\t$1\n{% endtrans %}",
        "doc": null,
        "grammar": "snu",
        "label": "translation",
        "matches": {
          "trans": true
        },
        "opts": {
          "b": true
        }
      },
      {
        "content": "{% with %}\n\t$1\n{% endwith %}",
        "doc": null,
        "grammar": "snu",
        "label": "with",
        "matches": {
          "with": true
        },
        "opts": {
          "b": true
        }
      },
      {
        "content": "{% autoescape ${1:true} %}\n\t$2\n{% endautoescape %}",
        "doc": null,
        "grammar": "snu",
        "label": "autoescape",
        "matches": {
          "autoescape": true
        },
        "opts": {
          "b": true
        }
      },
      {
        "content": "batch(linecount=$1, fill_with=${2:None})",
        "doc": null,
        "grammar": "snu",
        "label": "batch items",
        "matches": {
          "batch": true
        },
        "opts": {
          "w": true
        }
      },
      {
        "content": "dictsort(case_sensitive=${1:False}, by=${2:'key'})",
        "doc": null,
        "grammar": "snu",
        "label": "sort and yield (key, value) pairs",
        "matches": {
          "dictsort": true
        },
        "opts": {
          "w": true
        }
      },
      {
        "content": "round(precision=${1:0}, method=${2:'common|ceil|floor'})",
        "doc": null,
        "grammar": "snu",
        "label": "round number",
        "matches": {
          "round": true
        },
        "opts": {
          "w": true
        }
      },
      {
        "content": "urlize(trim_url_limit=${1:None}, nofollow=${2:False})",
        "doc": null,
        "grammar": "snu",
        "label": "convert plain-text url to <a/>",
        "matches": {
          "urlize": true
        },
        "opts": {
          "w": true
        }
      },
      {
        "content": "wordwrap(width=${1:79}, break_long_words=${2:True})",
        "doc": null,
        "grammar": "snu",
        "label": "wordwrap",
        "matches": {
          "wordwrap": true
        },
        "opts": {
          "w": true
        }
      },
      {
        "content": "truncate(lenght=${1:79}, killwords=${2:False}, end=${3:'...''})",
        "doc": null,
        "grammar": "snu",
        "label": "truncate",
        "matches": {
          "truncate": true
        },
        "opts": {
          "w": true
        }
      },
      {
        "content": "sum(attribute=${1:None}, start=${2:0})",
        "doc": null,
        "grammar": "snu",
        "label": "sum of sequence of numbers + start",
        "matches": {
          "sum": true
        },
        "opts": {
          "w": true
        }
      },
      {
        "content": "sort(reverse=${1:False}, case_sensitive=${2:False}, attribute=${3:None})",
        "doc": null,
        "grammar": "snu",
        "label": "sort an iterable",
        "matches": {
          "sort": true
        },
        "opts": {
          "w": true
        }
      },
      {
        "content": "indent(width=${1:4}, indentfirst=${2:False})",
        "doc": null,
        "grammar": "snu",
        "label": "indent",
        "matches": {
          "indent": true
        },
        "opts": {
          "w": true
        }
      }
    ],
    "jquery_coffee": [
      {
        "content": "${1:obj}.add('${2:selector expression}')",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "add": true
        },
        "opts": {}
      },
      {
        "content": "${1:obj}.addClass('${2:class name}')",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "addClass": true
        },
        "opts": {}
      },
      {
        "content": "${1:obj}.after('${2:Some text <b>and bold!</b>}')",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "after": true
        },
        "opts": {}
      },
      {
        "content": "$.ajax\n  url: \"${1:mydomain.com/url}\"\n  type: \"${2:POST}\"\n  dataType: \"${3:xml/html/script/json}\"\n  data: ${4:data}\n  complete: (jqXHR, textStatus) ->\n\t${5:// callback}\n  success: (data, textStatus, jqXHR) ->\n\t${6:// success callback}\n  error: (jqXHR, textStatus, errorThrown) ->\n\t${0:// error callback}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ajax": true
        },
        "opts": {}
      },
      {
        "content": "${1:obj}.ajaxComplete (${1:e}, xhr, settings) ->\n\t${0:// callback}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ajaxcomplete": true
        },
        "opts": {}
      },
      {
        "content": "${1:obj}.ajaxError (${1:e}, xhr, settings, thrownError) ->\n\t${2:// error callback}\n${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ajaxerror": true
        },
        "opts": {}
      },
      {
        "content": "$.get '${1:mydomain.com/url}',\n\t${2:{ param1: value1 },}\n\t(data, textStatus, jqXHR) ->\n\t\t${0:// success callback}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ajaxget": true
        },
        "opts": {}
      },
      {
        "content": "$.post '${1:mydomain.com/url}',\n\t${2:{ param1: value1 },}\n\t(data, textStatus, jqXHR) ->\n\t\t${0:// success callback}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ajaxpost": true
        },
        "opts": {}
      },
      {
        "content": "$.ajaxPrefilter (${1:options}, ${2:originalOptions}, jqXHR) ->\n\t${0: // Modify options, control originalOptions, store jqXHR, etc}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ajaxprefilter": true
        },
        "opts": {}
      },
      {
        "content": "${1:obj}.ajaxSend (${1:request, settings}) ->\n\t${2:// error callback}\n${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ajaxsend": true
        },
        "opts": {}
      },
      {
        "content": "$.ajaxSetup({\n\turl: \"${1:mydomain.com/url}\",\n\ttype: \"${2:POST}\",\n\tdataType: \"${3:xml/html/script/json}\",\n\tdata: $.param( $(\"${4:Element or Expression}\") ),\n\tcomplete: (jqXHR, textStatus) ->\n\t\t${5:// callback}\n\t,\n\tsuccess: (data, textStatus, jqXHR) ->\n\t\t${6:// success callback}\n\t,\n\terror: (jqXHR, textStatus, errorThrown) ->\n\t\t${0:// error callback}\n})",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ajaxsetup": true
        },
        "opts": {}
      },
      {
        "content": "$.ajaxStart ->\n\t${1:// handler for when an AJAX call is started and no other AJAX calls are in progress}\n${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ajaxstart": true
        },
        "opts": {}
      },
      {
        "content": "$.ajaxStop ->\n\t${1:// handler for when all AJAX calls have been completed}\n${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ajaxstop": true
        },
        "opts": {}
      },
      {
        "content": "$.ajaxSuccess (${1:e}, xhr, settings) ->\n\t${2:// handler for when any AJAX call is successfully completed}\n${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ajaxsuccess": true
        },
        "opts": {}
      },
      {
        "content": "${1:obj}.andSelf()",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "andself": true
        },
        "opts": {}
      },
      {
        "content": "${1:obj}.animate({${2:param1: value1, param2: value2}}, ${3:speed})",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "animate": true
        },
        "opts": {}
      },
      {
        "content": "${1:obj}.append('${2:Some text <b>and bold!</b>}')",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "append": true
        },
        "opts": {}
      },
      {
        "content": "${1:obj}.appendTo('${2:selector expression}')",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "appendTo": true
        },
        "opts": {}
      },
      {
        "content": "${1:obj}.attr('${2:attribute}', '${3:value}')",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "attr": true
        },
        "opts": {}
      },
      {
        "content": "${1:obj}.attr({'${2:attr1}': '${3:value1}', '${4:attr2}': '${5:value2}'})",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "attrm": true
        },
        "opts": {}
      },
      {
        "content": "${1:obj}.before('${2:Some text <b>and bold!</b>}')",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "before": true
        },
        "opts": {}
      },
      {
        "content": "${1:obj}.bind('${2:event name}', (${3:e}) ->\n\t${0:// event handler}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "bind": true
        },
        "opts": {}
      },
      {
        "content": "${1:obj}.blur (${2:e}) ->\n\t${0:// event handler}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "blur": true
        },
        "opts": {}
      },
      {
        "content": "$.Callbacks()",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "C": true
        },
        "opts": {}
      },
      {
        "content": "${1:callbacks}.add(${2:callbacks})",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "Cadd": true
        },
        "opts": {}
      },
      {
        "content": "${1:callbacks}.disable()",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "Cdis": true
        },
        "opts": {}
      },
      {
        "content": "${1:callbacks}.empty()",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "Cempty": true
        },
        "opts": {}
      },
      {
        "content": "${1:callbacks}.fire(${2:args})",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "Cfire": true
        },
        "opts": {}
      },
      {
        "content": "${1:callbacks}.fired()",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "Cfired": true
        },
        "opts": {}
      },
      {
        "content": "${1:callbacks}.fireWith(${2:this}, ${3:args})",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "Cfirew": true
        },
        "opts": {}
      },
      {
        "content": "${1:callbacks}.has(${2:callback})",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "Chas": true
        },
        "opts": {}
      },
      {
        "content": "${1:callbacks}.lock()",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "Clock": true
        },
        "opts": {}
      },
      {
        "content": "${1:callbacks}.locked()",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "Clocked": true
        },
        "opts": {}
      },
      {
        "content": "${1:callbacks}.remove(${2:callbacks})",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "Crem": true
        },
        "opts": {}
      },
      {
        "content": "${1:obj}.change (${2:e}) ->\n\t${0:// event handler}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "change": true
        },
        "opts": {}
      },
      {
        "content": "${1:obj}.children('${2:selector expression}')",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "children": true
        },
        "opts": {}
      },
      {
        "content": "${1:obj}.clearQueue(${2:'queue name'})",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "clearq": true
        },
        "opts": {}
      },
      {
        "content": "${1:obj}.click (${2:e}) ->\n\t${0:// event handler}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "click": true
        },
        "opts": {}
      },
      {
        "content": "${1:obj}.clone()",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "clone": true
        },
        "opts": {}
      },
      {
        "content": "$.contains(${1:container}, ${0:contents})",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "contains": true
        },
        "opts": {}
      },
      {
        "content": "${1:obj}.css('${2:attribute}', '${3:value}')",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "css": true
        },
        "opts": {}
      },
      {
        "content": "$.cssHooks['${1:CSS prop}'] = {\n\tget: (elem, computed, extra) ->\n\t\t${2: // handle getting the CSS property}\n\tset: (elem, value) ->\n\t\t${0: // handle setting the CSS value}\n}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "csshooks": true
        },
        "opts": {}
      },
      {
        "content": "${1:obj}.css({${2:attribute1}: '${3:value1}', ${4:attribute2}: '${5:value2}'})",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "cssm": true
        },
        "opts": {}
      },
      {
        "content": "$.Deferred()",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "D": true
        },
        "opts": {}
      },
      {
        "content": "${1:deferred}.always(${2:callbacks})",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "Dalways": true
        },
        "opts": {}
      },
      {
        "content": "${1:deferred}.done(${2:callbacks})",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "Ddone": true
        },
        "opts": {}
      },
      {
        "content": "${1:deferred}.fail(${2:callbacks})",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "Dfail": true
        },
        "opts": {}
      },
      {
        "content": "${1:deferred}.isRejected()",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "Disrej": true
        },
        "opts": {}
      },
      {
        "content": "${1:deferred}.isResolved()",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "Disres": true
        },
        "opts": {}
      },
      {
        "content": "${1:deferred}.notify(${2:args})",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "Dnotify": true
        },
        "opts": {}
      },
      {
        "content": "${1:deferred}.notifyWith(${2:this}, ${3:args})",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "Dnotifyw": true
        },
        "opts": {}
      },
      {
        "content": "${1:deferred}.then(${2:doneFilter}, ${3:failFilter}, ${4:progressFilter})",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "Dpipe": true
        },
        "opts": {}
      },
      {
        "content": "${1:deferred}.progress(${2:callbacks})",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "Dprog": true
        },
        "opts": {}
      },
      {
        "content": "${1:deferred}.promise(${2:target})",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "Dprom": true
        },
        "opts": {}
      },
      {
        "content": "${1:deferred}.reject(${2:args})",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "Drej": true
        },
        "opts": {}
      },
      {
        "content": "${1:deferred}.rejectWith(${2:this}, ${3:args})",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "Drejw": true
        },
        "opts": {}
      },
      {
        "content": "${1:deferred}.resolve(${2:args})",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "Dres": true
        },
        "opts": {}
      },
      {
        "content": "${1:deferred}.resolveWith(${2:this}, ${3:args})",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "Dresw": true
        },
        "opts": {}
      },
      {
        "content": "${1:deferred}.state()",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "Dstate": true
        },
        "opts": {}
      },
      {
        "content": "${1:deferred}.then(${2:doneCallbacks}, ${3:failCallbacks}, ${4:progressCallbacks})",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "Dthen": true
        },
        "opts": {}
      },
      {
        "content": "$.when(${1:deferreds})",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "Dwhen": true
        },
        "opts": {}
      },
      {
        "content": "${1:obj}.data(${2:obj})",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "data": true
        },
        "opts": {}
      },
      {
        "content": "$.data('${1:selector expression}', '${2:key}'${3:, 'value'})",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "dataa": true
        },
        "opts": {}
      },
      {
        "content": "${1:obj}.dblclick (${2:e}) ->\n\t${0:// event handler}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "dblclick": true
        },
        "opts": {}
      },
      {
        "content": "${1:obj}.delay('${2:slow/400/fast}'${3:, 'queue name'})",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "delay": true
        },
        "opts": {}
      },
      {
        "content": "${1:obj}.delegate '${2:selector expression}', '${3:event name}', (${4:e}) ->\n\t${0:// event handler}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "dele": true
        },
        "opts": {}
      },
      {
        "content": "${1:obj}.dequeue(${2:'queue name'})",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "deq": true
        },
        "opts": {}
      },
      {
        "content": "$.dequeue('${1:selector expression}'${2:, 'queue name'})",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "deqq": true
        },
        "opts": {}
      },
      {
        "content": "${1:obj}.detach('${2:selector expression}')",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "detach": true
        },
        "opts": {}
      },
      {
        "content": "${1:obj}.die(${2:event}, ${3:handler})",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "die": true
        },
        "opts": {}
      },
      {
        "content": "${1:obj}.each (index) ->\n\t${0:this.innerHTML = this + \" is the element, \" + index + \" is the position\"}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "each": true
        },
        "opts": {}
      },
      {
        "content": "$('<${1}/>'${2:, {}})",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "el": true
        },
        "opts": {}
      },
      {
        "content": "$.trim('${1:string}')",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "eltrim": true
        },
        "opts": {}
      },
      {
        "content": "${1:obj}.empty()",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "empty": true
        },
        "opts": {}
      },
      {
        "content": "${1:obj}.end()",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "end": true
        },
        "opts": {}
      },
      {
        "content": "${1:obj}.eq(${2:element index})",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "eq": true
        },
        "opts": {}
      },
      {
        "content": "${1:obj}.error (${2:e}) ->\n\t${0:// event handler}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "error": true
        },
        "opts": {}
      },
      {
        "content": "{\n\t:f${0}\n}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "eventsmap": true
        },
        "opts": {}
      },
      {
        "content": "$.extend(${1:true, }${2:target}, ${3:obj})",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "extend": true
        },
        "opts": {}
      },
      {
        "content": "${1:obj}.fadeIn('${2:slow/400/fast}')",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "fadein": true
        },
        "opts": {}
      },
      {
        "content": "${1:obj}.fadeIn 'slow/400/fast', ->\n\t${0:// callback}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "fadeinc": true
        },
        "opts": {}
      },
      {
        "content": "${1:obj}.fadeOut('${2:slow/400/fast}')",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "fadeout": true
        },
        "opts": {}
      },
      {
        "content": "${1:obj}.fadeOut 'slow/400/fast', ->\n\t${0:// callback}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "fadeoutc": true
        },
        "opts": {}
      },
      {
        "content": "${1:obj}.fadeTo('${2:slow/400/fast}', ${3:0.5})",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "fadeto": true
        },
        "opts": {}
      },
      {
        "content": "${1:obj}.fadeTo 'slow/400/fast', ${2:0.5}, ->\n\t${0:// callback}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "fadetoc": true
        },
        "opts": {}
      },
      {
        "content": "${1:obj}.filter('${2:selector expression}')",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "filter": true
        },
        "opts": {}
      },
      {
        "content": "${1:obj}.filter (${2:index}) ->\n\t${3}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "filtert": true
        },
        "opts": {}
      },
      {
        "content": "${1:obj}.find('${2:selector expression}')",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "find": true
        },
        "opts": {}
      },
      {
        "content": "${1:obj}.focus (${2:e}) ->\n\t${0:// event handler}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "focus": true
        },
        "opts": {}
      },
      {
        "content": "${1:obj}.focusIn (${2:e}) ->\n\t${0:// event handler}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "focusin": true
        },
        "opts": {}
      },
      {
        "content": "${1:obj}.focusOut (${2:e}) ->\n\t${0:// event handler}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "focusout": true
        },
        "opts": {}
      },
      {
        "content": "${1:obj}.get(${2:element index})",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "get": true
        },
        "opts": {}
      },
      {
        "content": "$.getJSON '${1:mydomain.com/url}',\n\t${2:{ param1: value1 },}\n\t(data, textStatus, jqXHR) ->\n\t\t${0:// success callback}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "getjson": true
        },
        "opts": {}
      },
      {
        "content": "$.getScript '${1:mydomain.com/url}', (script, textStatus, jqXHR) ->\n\t${0:// callback}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "getscript": true
        },
        "opts": {}
      },
      {
        "content": "$.grep(${1:array}, (item, index) >\n\t${2}\n${0:, true})",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "grep": true
        },
        "opts": {}
      },
      {
        "content": "${1:obj}.hasClass('${2:className}')",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "hasc": true
        },
        "opts": {}
      },
      {
        "content": "$.hasData('${0:selector expression}')",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "hasd": true
        },
        "opts": {}
      },
      {
        "content": "${1:obj}.height(${2:integer})",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "height": true
        },
        "opts": {}
      },
      {
        "content": "${1:obj}.hide('${2:slow/400/fast}')",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "hide": true
        },
        "opts": {}
      },
      {
        "content": "${1:obj}.hide '${2:slow/400/fast}', ->\n\t${0:// callback}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "hidec": true
        },
        "opts": {}
      },
      {
        "content": "${1:obj}.hover (${2:e}) ->\n\t${3:// event handler}\n, ($2) ->\n\t${4:// event handler}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "hover": true
        },
        "opts": {}
      },
      {
        "content": "${1:obj}.html('${2:Some text <b>and bold!</b>}')",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "html": true
        },
        "opts": {}
      },
      {
        "content": "$.inArray(${1:value}, ${0:array})",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "inarr": true
        },
        "opts": {}
      },
      {
        "content": "${1:obj}.insertAfter('${2:selector expression}')",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "insa": true
        },
        "opts": {}
      },
      {
        "content": "${1:obj}.insertBefore('${2:selector expression}')",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "insb": true
        },
        "opts": {}
      },
      {
        "content": "${1:obj}.is('${2:selector expression}')",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "is": true
        },
        "opts": {}
      },
      {
        "content": "$.isArray(${1:obj})",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "isarr": true
        },
        "opts": {}
      },
      {
        "content": "$.isEmptyObject(${1:obj})",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "isempty": true
        },
        "opts": {}
      },
      {
        "content": "$.isFunction(${1:obj})",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "isfunc": true
        },
        "opts": {}
      },
      {
        "content": "$.isNumeric(${1:value})",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "isnum": true
        },
        "opts": {}
      },
      {
        "content": "$.isPlainObject(${1:obj})",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "isobj": true
        },
        "opts": {}
      },
      {
        "content": "$.isWindow(${1:obj})",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "iswin": true
        },
        "opts": {}
      },
      {
        "content": "$.isXMLDoc(${1:node})",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "isxml": true
        },
        "opts": {}
      },
      {
        "content": "$('${1:selector}')",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "jj": true
        },
        "opts": {}
      },
      {
        "content": "${1:obj}.keydown (${2:e}) ->\n\t${0:// event handler}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "kdown": true
        },
        "opts": {}
      },
      {
        "content": "${1:obj}.keypress (${2:e}) ->\n\t${0:// event handler}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "kpress": true
        },
        "opts": {}
      },
      {
        "content": "${1:obj}.keyup (${2:e}) ->\n\t${0:// event handler}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "kup": true
        },
        "opts": {}
      },
      {
        "content": "${1:obj}.last('${1:selector expression}')",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "last": true
        },
        "opts": {}
      },
      {
        "content": "${1:obj}.live '${2:events}', (${3:e}) ->\n\t${0:// event handler}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "live": true
        },
        "opts": {}
      },
      {
        "content": "${1:obj}.load (${2:e}) ->\n\t${0:// event handler}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "load": true
        },
        "opts": {}
      },
      {
        "content": "${1:obj}.load('${2:mydomain.com/url}',\n\t${2:{ param1: value1 },}\n\t(responseText, textStatus, xhr) ->\n\t\t${0:// success callback}\n})",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "loadf": true
        },
        "opts": {}
      },
      {
        "content": "$.makeArray(${0:obj})",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "makearray": true
        },
        "opts": {}
      },
      {
        "content": "${1:obj}.map (${2:index}, ${3:element}) ->\n\t${0:// callback}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "map": true
        },
        "opts": {}
      },
      {
        "content": "$.map ${1:arrayOrObject}, (${2:value}, ${3:indexOrKey}) ->\n\t${0:// callback}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "mapp": true
        },
        "opts": {}
      },
      {
        "content": "$.merge(${1:target}, ${0:original})",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "merge": true
        },
        "opts": {}
      },
      {
        "content": "${1:obj}.mousedown (${2:e}) ->\n\t${0:// event handler}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "mdown": true
        },
        "opts": {}
      },
      {
        "content": "${1:obj}.mouseenter (${2:e}) ->\n\t${0:// event handler}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "menter": true
        },
        "opts": {}
      },
      {
        "content": "${1:obj}.mouseleave (${2:e}) ->\n\t${0:// event handler}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "mleave": true
        },
        "opts": {}
      },
      {
        "content": "${1:obj}.mousemove (${2:e}) ->\n\t${0:// event handler}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "mmove": true
        },
        "opts": {}
      },
      {
        "content": "${1:obj}.mouseout (${2:e}) ->\n\t${0:// event handler}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "mout": true
        },
        "opts": {}
      },
      {
        "content": "${1:obj}.mouseover (${2:e}) ->\n\t${0:// event handler}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "mover": true
        },
        "opts": {}
      },
      {
        "content": "${1:obj}.mouseup (${2:e}) ->\n\t${0:// event handler}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "mup": true
        },
        "opts": {}
      },
      {
        "content": "${1:obj}.next('${2:selector expression}')",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "next": true
        },
        "opts": {}
      },
      {
        "content": "${1:obj}.nextAll('${2:selector expression}')",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "nexta": true
        },
        "opts": {}
      },
      {
        "content": "${1:obj}.nextUntil('${2:selector expression}'${3:, 'filter expression'})",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "nextu": true
        },
        "opts": {}
      },
      {
        "content": "${1:obj}.not('${2:selector expression}')",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "not": true
        },
        "opts": {}
      },
      {
        "content": "${1:obj}.off('${2:events}', '${3:selector expression}'${4:, handler})",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "off": true
        },
        "opts": {}
      },
      {
        "content": "${1:obj}.offset()",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "offset": true
        },
        "opts": {}
      },
      {
        "content": "${1:obj}.offsetParent()",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "offsetp": true
        },
        "opts": {}
      },
      {
        "content": "${1:obj}.on '${2:events}', '${3:selector expression}', (${4:e}) ->\n\t${0:// event handler}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "on": true
        },
        "opts": {}
      },
      {
        "content": "${1:obj}.one '${2:event name}', (${3:e}) ->\n\t${0:// event handler}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "one": true
        },
        "opts": {}
      },
      {
        "content": "${1:obj}.outerHeight()",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "outerh": true
        },
        "opts": {}
      },
      {
        "content": "${1:obj}.outerWidth()",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "outerw": true
        },
        "opts": {}
      },
      {
        "content": "$.param(${1:obj})",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "param": true
        },
        "opts": {}
      },
      {
        "content": "${1:obj}.parent('${2:selector expression}')",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "parent": true
        },
        "opts": {}
      },
      {
        "content": "${1:obj}.parents('${2:selector expression}')",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "parents": true
        },
        "opts": {}
      },
      {
        "content": "${1:obj}.parentsUntil('${2:selector expression}'${3:, 'filter expression'})",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "parentsu": true
        },
        "opts": {}
      },
      {
        "content": "$.parseJSON(${1:data})",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "parsejson": true
        },
        "opts": {}
      },
      {
        "content": "$.parseXML(${1:data})",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "parsexml": true
        },
        "opts": {}
      },
      {
        "content": "${1:obj}.position()",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "pos": true
        },
        "opts": {}
      },
      {
        "content": "${1:obj}.prepend('${2:Some text <b>and bold!</b>}')",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "prepend": true
        },
        "opts": {}
      },
      {
        "content": "${1:obj}.prependTo('${2:selector expression}')",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "prependto": true
        },
        "opts": {}
      },
      {
        "content": "${1:obj}.prev('${2:selector expression}')",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "prev": true
        },
        "opts": {}
      },
      {
        "content": "${1:obj}.prevAll('${2:selector expression}')",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "preva": true
        },
        "opts": {}
      },
      {
        "content": "${1:obj}.prevUntil('${2:selector expression}'${3:, 'filter expression'})",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "prevu": true
        },
        "opts": {}
      },
      {
        "content": "${1:obj}.promise(${2:'fx'}, ${3:target})",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "promise": true
        },
        "opts": {}
      },
      {
        "content": "${1:obj}.prop('${2:property name}')",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "prop": true
        },
        "opts": {}
      },
      {
        "content": "$.proxy(${1:function}, ${2:this})",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "proxy": true
        },
        "opts": {}
      },
      {
        "content": "${1:obj}.pushStack(${2:elements})",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "pushstack": true
        },
        "opts": {}
      },
      {
        "content": "${1:obj}.queue(${2:name}${3:, newQueue})",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "queue": true
        },
        "opts": {}
      },
      {
        "content": "$.queue(${1:element}${2:, name}${3:, newQueue})",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "queuee": true
        },
        "opts": {}
      },
      {
        "content": "$(() ->\n\t${0}\n)",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ready": true
        },
        "opts": {}
      },
      {
        "content": "${1:obj}.remove()",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "rem": true
        },
        "opts": {}
      },
      {
        "content": "${1:obj}.removeAttr('${2:attribute name}')",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "rema": true
        },
        "opts": {}
      },
      {
        "content": "${1:obj}.removeClass('${2:class name}')",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "remc": true
        },
        "opts": {}
      },
      {
        "content": "${1:obj}.removeData('${2:key name}')",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "remd": true
        },
        "opts": {}
      },
      {
        "content": "$.removeData(${1:element}${2:, 'key name}')",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "remdd": true
        },
        "opts": {}
      },
      {
        "content": "${1:obj}.removeProp('${2:property name}')",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "remp": true
        },
        "opts": {}
      },
      {
        "content": "${1:obj}.replaceAll(${2:target})",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "repa": true
        },
        "opts": {}
      },
      {
        "content": "${1:obj}.replaceWith(${2:content})",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "repw": true
        },
        "opts": {}
      },
      {
        "content": "${1:obj}.reset (${2:e}) ->\n\t${0:// event handler}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "reset": true
        },
        "opts": {}
      },
      {
        "content": "${1:obj}.resize (${2:e}) ->\n\t${0:// event handler}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "resize": true
        },
        "opts": {}
      },
      {
        "content": "${1:obj}.scroll (${2:e}) ->\n\t${0:// event handler}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "scroll": true
        },
        "opts": {}
      },
      {
        "content": "${1:obj}.scrollLeft(${2:value})",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "scrolll": true
        },
        "opts": {}
      },
      {
        "content": "${1:obj}.scrollTop(${2:value})",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "scrollt": true
        },
        "opts": {}
      },
      {
        "content": "${1:obj}.slideDown('${2:slow/400/fast}')",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "sdown": true
        },
        "opts": {}
      },
      {
        "content": "${1:obj}.slideDown('${2:slow/400/fast}', ->\n\t${0:// callback}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "sdownc": true
        },
        "opts": {}
      },
      {
        "content": "${1:obj}.select (${2:e}) ->\n\t${0:// event handler}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "select": true
        },
        "opts": {}
      },
      {
        "content": "${1:obj}.serialize()",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "serialize": true
        },
        "opts": {}
      },
      {
        "content": "${1:obj}.serializeArray()",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "serializea": true
        },
        "opts": {}
      },
      {
        "content": "${1:obj}.show('${2:slow/400/fast}')",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "show": true
        },
        "opts": {}
      },
      {
        "content": "${1:obj}.show '${2:slow/400/fast}', ->\n\t${0:// callback}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "showc": true
        },
        "opts": {}
      },
      {
        "content": "${1:obj}.siblings('${2:selector expression}')",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "sib": true
        },
        "opts": {}
      },
      {
        "content": "${1:obj}.size()",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "size": true
        },
        "opts": {}
      },
      {
        "content": "${1:obj}.slice(${2:start}${3:, end})",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "slice": true
        },
        "opts": {}
      },
      {
        "content": "${1:obj}.slideToggle('${2:slow/400/fast}')",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "stoggle": true
        },
        "opts": {}
      },
      {
        "content": "${1:obj}.stop('${2:queue}', ${3:false}, ${4:false})",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "stop": true
        },
        "opts": {}
      },
      {
        "content": "${1:obj}.submit (${2:e}) ->\n\t${0:// event handler}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "submit": true
        },
        "opts": {}
      },
      {
        "content": "${1:obj}.slideUp('${2:slow/400/fast}')",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "sup": true
        },
        "opts": {}
      },
      {
        "content": "${1:obj}.slideUp '${2:slow/400/fast}', ->\n\t${0:// callback}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "supc": true
        },
        "opts": {}
      },
      {
        "content": "${1:obj}.text(${2:'some text'})",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "text": true
        },
        "opts": {}
      },
      {
        "content": "$(this)",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "this": true
        },
        "opts": {}
      },
      {
        "content": "${0:obj}.toArray()",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "toarr": true
        },
        "opts": {}
      },
      {
        "content": "${1:obj}.toggle  (${2:e}) ->\n\t${3:// event handler}\n, ($2) ->\n\t${4:// event handler}\n${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "tog": true
        },
        "opts": {}
      },
      {
        "content": "${1:obj}.toggleClass('${2:class name}')",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "togclass": true
        },
        "opts": {}
      },
      {
        "content": "${1:obj}.toggle('${2:slow/400/fast}')",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "togsh": true
        },
        "opts": {}
      },
      {
        "content": "${1:obj}.trigger('${2:event name}')",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "trig": true
        },
        "opts": {}
      },
      {
        "content": "${1:obj}.triggerHandler('${2:event name}')",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "trigh": true
        },
        "opts": {}
      },
      {
        "content": "$.trim(${1:str})",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "$trim": true
        },
        "opts": {}
      },
      {
        "content": "$.type(${1:obj})",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "$type": true
        },
        "opts": {}
      },
      {
        "content": "${1:obj}.unbind('${2:event name}')",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "unbind": true
        },
        "opts": {}
      },
      {
        "content": "${1:obj}.undelegate(${2:selector expression}, ${3:event}, ${4:handler})",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "undele": true
        },
        "opts": {}
      },
      {
        "content": "$.unique(${1:array})",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "uniq": true
        },
        "opts": {}
      },
      {
        "content": "${1:obj}.unload (${2:e}) ->\n\t${0:// event handler}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "unload": true
        },
        "opts": {}
      },
      {
        "content": "${1:obj}.unwrap()",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "unwrap": true
        },
        "opts": {}
      },
      {
        "content": "${1:obj}.val('${2:text}')",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "val": true
        },
        "opts": {}
      },
      {
        "content": "${1:obj}.width(${2:integer})",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "width": true
        },
        "opts": {}
      },
      {
        "content": "${1:obj}.wrap('${2:&ltdiv class=\"extra-wrapper\"&gt&lt/div&gt}')",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "wrap": true
        },
        "opts": {}
      }
    ],
    "json": [
      {
        "content": "\"${1:key}\": \"${0:value}\",",
        "doc": null,
        "grammar": "snu",
        "label": "String",
        "matches": {
          "s": true
        },
        "opts": {
          "b": true
        }
      },
      {
        "content": "\"${1:key}\": ${0:value},",
        "doc": null,
        "grammar": "snu",
        "label": "Number",
        "matches": {
          "n": true
        },
        "opts": {
          "b": true
        }
      },
      {
        "content": "[\n\t${VISUAL}$0\n],",
        "doc": null,
        "grammar": "snu",
        "label": "Array",
        "matches": {
          "a": true
        },
        "opts": {
          "b": true
        }
      },
      {
        "content": "\"${1:key}\": [\n\t${VISUAL}$0\n],",
        "doc": null,
        "grammar": "snu",
        "label": "Named array",
        "matches": {
          "na": true
        },
        "opts": {
          "b": true
        }
      },
      {
        "content": "{\n\t${VISUAL}$0\n},",
        "doc": null,
        "grammar": "snu",
        "label": "Object",
        "matches": {
          "o": true
        },
        "opts": {
          "b": true
        }
      },
      {
        "content": "\"${1:key}\": {\n\t${VISUAL}$0\n},",
        "doc": null,
        "grammar": "snu",
        "label": "Named object",
        "matches": {
          "no": true
        },
        "opts": {
          "b": true
        }
      },
      {
        "content": "\"${0:key}\": null,",
        "doc": null,
        "grammar": "snu",
        "label": "Null",
        "matches": {
          "null": true
        },
        "opts": {
          "b": true
        }
      }
    ],
    "jsonc": [
      {
        "content": "{\n\t\"name\": \"Launch Angular\",\n\t\"type\": \"${1:chrome}\",\n\t\"request\": \"launch\",\n\t\"preLaunchTask\": \"${2:npm: start}\",\n\t\"url\": \"http://localhost:${3:4200}/\",\n\t\"webRoot\": \"${4:\\${workspaceFolder\\}}\"\n}",
        "doc": null,
        "grammar": "lsp",
        "label": "Create launch config for Chrome",
        "matches": {
          "a-launch-chrome": true
        },
        "opts": {}
      },
      {
        "content": "{\n\t\"name\": \"Launch Angular\",\n\t\"type\": \"${1:edge}\",\n\t\"version\": \"${2:dev}\",\n\t\"request\": \"launch\",\n\t\"preLaunchTask\": \"${3:npm: start}\",\n\t\"url\": \"http://localhost:${4:4200}/\",\n\t\"webRoot\": \"${5:\\${workspaceFolder\\}}\"\n}",
        "doc": null,
        "grammar": "lsp",
        "label": "Create launch config for Edge",
        "matches": {
          "a-launch-edge": true
        },
        "opts": {}
      },
      {
        "content": "{\n\t\"type\": \"npm\",\n\t\"script\": \"${1:start}\",\n\t\"isBackground\": true,\n\t\"presentation\": {\n\t\t\"focus\": true,\n\t\t\"panel\": \"dedicated\"\n\t},\n\t\"group\": {\n\t\t\"kind\": \"build\",\n\t\t\"isDefault\": true\n\t},\n\t\"problemMatcher\": {\n\t\t\"owner\": \"typescript\",\n\t\t\"source\": \"ts\",\n\t\t\"applyTo\": \"closedDocuments\",\n\t\t\"fileLocation\": [\"relative\", \"\\${cwd\\}\"],\n\t\t\"pattern\": \"\\$tsc\",\n\t\t\"background\": {\n\t\t\t\"activeOnStart\": true,\n\t\t\t\"beginsPattern\": {\n\t\t\t\t\"regexp\": \"(.*?)\"\n\t\t\t},\n\t\t\t\"endsPattern\": {\n\t\t\t\t\"regexp\": \"Compiled |Failed to compile.\"\n\t\t\t}\n\t\t}\n\t}\n}",
        "doc": null,
        "grammar": "lsp",
        "label": "Create task to start Angular",
        "matches": {
          "a-task-start": true
        },
        "opts": {}
      }
    ],
    "jsp": [
      {
        "content": "<%@page contentType=\"text/html\" pageEncoding=\"UTF-8\"%>",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "@page": true
        },
        "opts": {}
      },
      {
        "content": "<%@ taglib uri=\"http://java.sun.com/jsp/jstl/core\" prefix=\"c\" %>\n<%@ taglib uri=\"http://java.sun.com/jsp/jstl/functions\" prefix=\"fn\" %>",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "jstl": true
        },
        "opts": {}
      },
      {
        "content": "<%@ taglib uri=\"http://java.sun.com/jsp/jstl/core\" prefix=\"c\" %>",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "jstl:c": true
        },
        "opts": {}
      },
      {
        "content": "<%@ taglib uri=\"http://java.sun.com/jsp/jstl/functions\" prefix=\"fn\" %>",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "jstl:fn": true
        },
        "opts": {}
      },
      {
        "content": "${pageContext.request.contextPath}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "cpath": true
        },
        "opts": {}
      },
      {
        "content": "<c:out value=\"${1}\" default=\"${0}\" />",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "cout": true
        },
        "opts": {}
      },
      {
        "content": "<c:set var=\"${1}\" value=\"${0}\" />",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "cset": true
        },
        "opts": {}
      },
      {
        "content": "<c:remove var=\"${1}\" scope=\"${0:page}\" />",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "cremove": true
        },
        "opts": {}
      },
      {
        "content": "<c:catch var=\"${0}\" />",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ccatch": true
        },
        "opts": {}
      },
      {
        "content": "<c:if test=\"${${1}}\">\n\t${0}\n</c:if>",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "cif": true
        },
        "opts": {}
      },
      {
        "content": "<c:choose>\n\t${0}\n</c:choose>",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "cchoose": true
        },
        "opts": {}
      },
      {
        "content": "<c:when test=\"${${1}}\">\n\t${0}\n</c:when>",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "cwhen": true
        },
        "opts": {}
      },
      {
        "content": "<c:otherwise>\n\t${0}\n</c:otherwise>",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "cother": true
        },
        "opts": {}
      },
      {
        "content": "<c:forEach items=\"${${1}}\" var=\"${2}\" varStatus=\"${3}\">\n\t${0:<c:out value=\"$2\" />}\n</c:forEach>",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "cfore": true
        },
        "opts": {}
      },
      {
        "content": "<c:set var=\"${1}\">${2:item1,item2,item3}</c:set>\n<c:forTokens var=\"${3}\" items=\"${$1}\" delims=\"${4:,}\">\n\t${0:<c:out value=\"$3\" />}\n</c:forTokens>",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "cfort": true
        },
        "opts": {}
      },
      {
        "content": "<c:param name=\"${1}\" value=\"${0}\" />",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "cparam": true
        },
        "opts": {}
      },
      {
        "content": "<c:param name=\"${1}\" value=\"${2}\" />\ncparam+${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "cparam+": true
        },
        "opts": {}
      },
      {
        "content": "<c:import url=\"${1}\" />",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "cimport": true
        },
        "opts": {}
      },
      {
        "content": "<c:import url=\"${1}\">\n\t<c:param name=\"${2}\" value=\"${3}\" />\n\tcparam+${0}\n</c:import>",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "cimport+": true
        },
        "opts": {}
      },
      {
        "content": "<c:url value=\"${1}\" var=\"${2}\" />\n<a href=\"${$2}\">${0}</a>",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "curl": true
        },
        "opts": {}
      },
      {
        "content": "<c:url value=\"${1}\" var=\"${2}\">\n\t<c:param name=\"${4}\" value=\"${5}\" />\n\tcparam+${0}\n</c:url>\n<a href=\"${$2}\">${3}</a>",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "curl+": true
        },
        "opts": {}
      },
      {
        "content": "<c:redirect url=\"${0}\" />",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "credirect": true
        },
        "opts": {}
      },
      {
        "content": "${fn:contains(${1:string}, ${0:substr})}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "contains": true
        },
        "opts": {}
      },
      {
        "content": "${fn:containsIgnoreCase(${1:string}, ${0:substr})}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "contains:i": true
        },
        "opts": {}
      },
      {
        "content": "${fn:endsWith(${1:string}, ${0:suffix})}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "endswith": true
        },
        "opts": {}
      },
      {
        "content": "${fn:escapeXml(${0:string})}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "escape": true
        },
        "opts": {}
      },
      {
        "content": "${fn:indexOf(${1:string}, ${0:substr})}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "indexof": true
        },
        "opts": {}
      },
      {
        "content": "${fn:join(${1:collection}, ${0:delims})}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "join": true
        },
        "opts": {}
      },
      {
        "content": "${fn:length(${0:collection_or_string})}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "length": true
        },
        "opts": {}
      },
      {
        "content": "${fn:replace(${1:string}, ${2:substr}, ${0:replace})}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "replace": true
        },
        "opts": {}
      },
      {
        "content": "${fn:split(${1:string}, ${0:delims})}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "split": true
        },
        "opts": {}
      },
      {
        "content": "${fn:startsWith(${1:string}, ${0:prefix})}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "startswith": true
        },
        "opts": {}
      },
      {
        "content": "${fn:substring(${1:string}, ${2:begin}, ${0:end})}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "substr": true
        },
        "opts": {}
      },
      {
        "content": "${fn:substringAfter(${1:string}, ${0:substr})}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "substr:a": true
        },
        "opts": {}
      },
      {
        "content": "${fn:substringBefore(${1:string}, ${0:substr})}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "substr:b": true
        },
        "opts": {}
      },
      {
        "content": "${fn:toLowerCase(${0:string})}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "lc": true
        },
        "opts": {}
      },
      {
        "content": "${fn:toUpperCase(${0:string})}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "uc": true
        },
        "opts": {}
      },
      {
        "content": "${fn:trim(${0:string})}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "trim": true
        },
        "opts": {}
      }
    ],
    "julia": [
      {
        "content": "function ${1}(${2})\n    ${0}\nend",
        "doc": "",
        "grammar": "snu",
        "label": "function ... end",
        "matches": {
          "function": true
        },
        "opts": {
          "head": true
        }
      },
      {
        "content": "macro ${1}(${2})\n    ${0}\nend",
        "doc": "",
        "grammar": "snu",
        "label": "macro ... end",
        "matches": {
          "macro": true
        },
        "opts": {
          "head": true
        }
      },
      {
        "content": "struct ${1}\n    ${0}\nend",
        "doc": "",
        "grammar": "snu",
        "label": "struct ... end",
        "matches": {
          "struct": true
        },
        "opts": {
          "head": true
        }
      },
      {
        "content": "module ${1}\n${0}\nend#module",
        "doc": "",
        "grammar": "snu",
        "label": "module ... end",
        "matches": {
          "module": true
        },
        "opts": {
          "head": true
        }
      },
      {
        "content": "let ${1}\n    ${0}\nend",
        "doc": "",
        "grammar": "snu",
        "label": "let ... end",
        "matches": {
          "let": true
        },
        "opts": {
          "head": true
        }
      },
      {
        "content": "quote\n    ${0}\nend",
        "doc": "",
        "grammar": "snu",
        "label": "quote ... end",
        "matches": {
          "quote": true
        },
        "opts": {
          "head": true
        }
      },
      {
        "content": "begin\n    ${0}\nend",
        "doc": "",
        "grammar": "snu",
        "label": "begin ... end",
        "matches": {
          "begin": true
        },
        "opts": {
          "head": true
        }
      },
      {
        "content": "for ${1}\n    ${0}\nend",
        "doc": "",
        "grammar": "snu",
        "label": "for ... end",
        "matches": {
          "for": true
        },
        "opts": {
          "head": true
        }
      },
      {
        "content": "if ${1}\n    ${0}\nend",
        "doc": "",
        "grammar": "snu",
        "label": "if ... end",
        "matches": {
          "if": true
        },
        "opts": {
          "head": true
        }
      },
      {
        "content": "try\n    ${1}\n${2:catch}\n    ${0}\nend",
        "doc": "",
        "grammar": "snu",
        "label": "try ... end",
        "matches": {
          "try": true
        },
        "opts": {
          "head": true
        }
      },
      {
        "content": "while ${1:true}\n    ${0}\nend",
        "doc": "",
        "grammar": "snu",
        "label": "while ... end",
        "matches": {
          "while": true
        },
        "opts": {
          "head": true
        }
      },
      {
        "content": "#!/usr/bin/env julia",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "#!": true
        },
        "opts": {}
      },
      {
        "content": "function ${1}(${2})\n\t${0}\nend",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "fun function definition": true
        },
        "opts": {}
      },
      {
        "content": "return(${0})",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ret return": true
        },
        "opts": {}
      },
      {
        "content": "print(\"${1}\")\n${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "pr print": true
        },
        "opts": {}
      },
      {
        "content": "println(\"${1}\")\n${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "prl print line": true
        },
        "opts": {}
      },
      {
        "content": "using ${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "use load a package": true
        },
        "opts": {}
      },
      {
        "content": "include(\"${1}\")\n${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "incl include source code": true
        },
        "opts": {}
      },
      {
        "content": "for ${1} in ${2}\n\t${0}\nend",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "forc for loop iterating over iterable container": true
        },
        "opts": {}
      },
      {
        "content": "for ${1} = ${2}\n\t${0}\nend",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "for standard for loop": true
        },
        "opts": {}
      },
      {
        "content": "for ${1} = ${2}, ${3} = ${4}\n\t${0}\nend",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "fornest nested for loop": true
        },
        "opts": {}
      },
      {
        "content": "while ${1} ${2:<=} ${3}\n\t${0}\nend",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "wh while loop": true
        },
        "opts": {}
      },
      {
        "content": "if ${1}\n\t${0}\nend",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "if if statement": true
        },
        "opts": {}
      },
      {
        "content": "else\n\t${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "el else part of statement": true
        },
        "opts": {}
      },
      {
        "content": "else if ${1}\n\t${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "eif else if part of if statement": true
        },
        "opts": {}
      },
      {
        "content": "if ${1}\n\t${2}\nelse\n\t${0}\nend",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ife full if-else statement": true
        },
        "opts": {}
      },
      {
        "content": "${1} ? ${2} : ${3:nothing}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "tern ternary operator": true
        },
        "opts": {}
      },
      {
        "content": "try\n\t${1:${VISUAL}}\ncatch ${2}\n\t${0}\nend",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "try try catch": true
        },
        "opts": {}
      },
      {
        "content": "finally\n\t${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "fin finally statement": true
        },
        "opts": {}
      },
      {
        "content": "throw(${1})\n${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "thr throw": true
        },
        "opts": {}
      },
      {
        "content": "@info \"${1}\" ${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "@i": true
        },
        "opts": {}
      },
      {
        "content": "@warn \"${1}\" ${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "@w": true
        },
        "opts": {}
      },
      {
        "content": "@error \"${1}\" ${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "@e": true
        },
        "opts": {}
      },
      {
        "content": "@debug \"${1}\" ${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "@d": true
        },
        "opts": {}
      },
      {
        "content": "@testset \"${1}\" begin\n\t${2}\n\t@test ${0}\nend",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "@t @testset with @test": true
        },
        "opts": {}
      },
      {
        "content": "@testset \"${1}\" begin\n\t${2}\n\t@test_throws ${0}\nend",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "@tt @testset with @test_throws": true
        },
        "opts": {}
      },
      {
        "content": "#' @description\n#'\n#' ${1:function description}\n#'\n#' ${2:@param ${3:name}::${4:Type} ${5:Description}}\n#'\n#' ${6:@returns ${7:name}::${8:Type} ${9:Description}}\n#'\n#' @examples\n#'\n#' ${10: function call examples}",
        "doc": null,
        "grammar": "snu",
        "label": "function documentation",
        "matches": {
          "docf": true
        },
        "opts": {
          "b": true
        }
      },
      {
        "content": "#' @description\n#'\n#' ${1:type description}\n#'\n#' ${2:@field ${3:name}::${4:Type} ${5:Description}}\n#'\n#' @examples\n#'\n#' ${10: constructor examples}",
        "doc": null,
        "grammar": "snu",
        "label": "type definition",
        "matches": {
          "doct": true
        },
        "opts": {
          "b": true
        }
      },
      {
        "content": "#' @param ${1:name}::${2:Type} ${0:Description}",
        "doc": null,
        "grammar": "snu",
        "label": "function parameter documentation",
        "matches": {
          "par": true
        },
        "opts": {
          "b": true
        }
      },
      {
        "content": "#' @field ${1:name}::${2:Type} ${0:Description}",
        "doc": null,
        "grammar": "snu",
        "label": "type field documentation",
        "matches": {
          "fld": true
        },
        "opts": {
          "b": true
        }
      }
    ],
    "kotlin": [
      {
        "content": "fun ${1:name}(${2}): ${3:String} {\n\t${4}\n}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "fun": true
        },
        "opts": {}
      },
      {
        "content": "private fun ${1:name}(${2}): ${3:String} {\n\t${4}\n}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "pfun": true
        },
        "opts": {}
      },
      {
        "content": "return ${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ret": true
        },
        "opts": {}
      },
      {
        "content": "when (${1:${VISUAL}}) {\n\t${2} -> ${3}\n}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "whe": true
        },
        "opts": {}
      },
      {
        "content": "class ${1} {\n\t${0:${VISUAL}}\n}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "cla": true
        },
        "opts": {}
      },
      {
        "content": "companion object {\n\t${0:${VISUAL}}\n}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "cobj": true
        },
        "opts": {}
      },
      {
        "content": "object ${1} {\n\t${0:${VISUAL}}\n}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "obj": true
        },
        "opts": {}
      },
      {
        "content": "if (${1}) {\n\t${0:${VISUAL}}\n}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "if": true
        },
        "opts": {}
      },
      {
        "content": "if (${1}) {\n\t${2:${VISUAL}}\n} else {\n\t${0}\n}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ife": true
        },
        "opts": {}
      }
    ],
    "kp19pp": [
      {
        "content": "<token_desc> token{\n\t${0:TARGET}\n}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "token_desc": true
        },
        "opts": {
          "head": true
        }
      },
      {
        "content": "<left>{\n\t${0:TARGET}\n}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "left": true
        },
        "opts": {
          "head": true
        }
      },
      {
        "content": "<grammar> grammar{\n\tE<${1}>\n\t\t: [${2}] ${3}\n\t\t;\n}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "grammar": true
        },
        "opts": {
          "head": true
        }
      }
    ],
    "laravel": [],
    "ledger": [],
    "lfe": [
      {
        "content": "(defun $1 ($2)\n\t$0)",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "def": true
        },
        "opts": {}
      },
      {
        "content": "(deftest $1\n\t$0)",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "test": true
        },
        "opts": {}
      }
    ],
    "lhaskell": [],
    "liquid": [
      {
        "content": "{% comment %}${1:#:comment}{% endcomment %}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "comment": true
        },
        "opts": {
          "word": true
        }
      },
      {
        "content": "{% raw %}${1:#:TARGET}{% endraw %}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "raw": true
        },
        "opts": {
          "word": true
        }
      },
      {
        "content": "{% if ${1:#:condition} %}\n  ${0:TARGET}\n{% endif %}",
        "doc": "",
        "grammar": "snu",
        "label": "if endif",
        "matches": {
          "if": true
        },
        "opts": {
          "word": true
        }
      },
      {
        "content": "{% elseif ${1:#:condition} %}\n  ${0:TARGET}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "elseif": true
        },
        "opts": {}
      },
      {
        "content": "{% if ${1:#:condition} %}\n  ${2:TARGET}\n{% else %}\n  ${3}\n{% endif %}",
        "doc": "",
        "grammar": "snu",
        "label": "if else endif",
        "matches": {
          "ifelse": true
        },
        "opts": {}
      },
      {
        "content": "{% unless ${1:#:TARGET} %}\n  ${0:TARGET}\n{% endunless %}",
        "doc": "",
        "grammar": "snu",
        "label": "unless endunless",
        "matches": {
          "unless": true
        },
        "opts": {
          "word": true
        }
      },
      {
        "content": "{% case ${1:#:condition} %}\n{% when ${2:#:TARGET} %}\n  ${3}\n{% endcase%}",
        "doc": "",
        "grammar": "snu",
        "label": "case when endcase",
        "matches": {
          "case": true
        },
        "opts": {}
      },
      {
        "content": "{% else %}\n  ${1:TARGET}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "else": true
        },
        "opts": {}
      },
      {
        "content": "{% when ${1:#:TARGET} %}\n  ${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "when": true
        },
        "opts": {}
      },
      {
        "content": "{% cycle ${1:#:TARGET} %}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "cycle": true
        },
        "opts": {
          "word": true
        }
      },
      {
        "content": "{% for ${1:#:var} in ${2:#:list} %}\n  ${0:TARGET}\n{% endfor%}",
        "doc": "",
        "grammar": "snu",
        "label": "for in endfor",
        "matches": {
          "for": true
        },
        "opts": {
          "word": true
        }
      },
      {
        "content": "{% tablerow ${1:#:var} in ${2:#:list} %}\n  ${0:TARGET}\n{% endtablerow %}",
        "doc": "",
        "grammar": "snu",
        "label": "tablerow in endtablerow",
        "matches": {
          "tablerow": true
        },
        "opts": {
          "word": true
        }
      },
      {
        "content": "{% assign ${1:#:var} = ${2:#:value} %}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "assign": true
        },
        "opts": {
          "word": true
        }
      },
      {
        "content": "{% capture ${1:#:var} %}${2:#:TARGET}{% endcapture %}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "capture": true
        },
        "opts": {
          "word": true
        }
      },
      {
        "content": "{% include ${1:#:TARGET} %}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "include": true
        },
        "opts": {
          "word": true
        }
      },
      {
        "content": "{{ ${1:#:TARGET} }}",
        "doc": "",
        "grammar": "snu",
        "label": "{{ }}",
        "matches": {
          "output": true,
          "{{": true
        },
        "opts": {
          "word": true
        }
      },
      {
        "content": "{{ ${1:#:TARGET} | ${2:#:filter} }}",
        "doc": "",
        "grammar": "snu",
        "label": "{{ | }}",
        "matches": {
          "filter": true,
          "{{": true
        },
        "opts": {
          "word": true
        }
      },
      {
        "content": "{% highlight ${1:#:TARGET} %}\n  ${2:code}\n{% endhighlight %}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "highlight": true,
          "hl": true
        },
        "opts": {
          "word": true
        }
      },
      {
        "content": "{% highlight ${1:#:TARGET} linenos %}\n  ${2:code}\n{% endhighlight %}",
        "doc": "",
        "grammar": "snu",
        "label": "Line number",
        "matches": {
          "highlight_line": true,
          "hl_l": true
        },
        "opts": {
          "word": true
        }
      },
      {
        "content": "{% post_url ${1:#:TARGET} %}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "post_url": true
        },
        "opts": {
          "word": true
        }
      },
      {
        "content": "---\nlayout: ${1}\ntitle: ${2}\ncategory: ${3}\n---\n${0}",
        "doc": "",
        "grammar": "snu",
        "label": "layout title category",
        "matches": {
          "---": true,
          "front-matter": true
        },
        "opts": {
          "head": true
        }
      },
      {
        "content": "{% if ${1:condition} %}\n\t${0:${VISUAL}}\n{% endif %}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "if": true
        },
        "opts": {}
      },
      {
        "content": "{% else %}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "else": true
        },
        "opts": {}
      },
      {
        "content": "{% elsif ${1:condition} %}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "elsif": true
        },
        "opts": {}
      },
      {
        "content": "{% if ${1:condition} %}\n\t${2}\n{% else %}\n\t${0}\n{% endif %}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ifelse": true
        },
        "opts": {}
      },
      {
        "content": "{% unless ${1:condition} %}\n\t${0:${VISUAL}}\n{% endunless %}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "unless": true
        },
        "opts": {}
      },
      {
        "content": "{% case ${1:variable} %}\n\t{% when ${2:condition} %}\n\t\t${3}\n\t{% else %}\n\t\t${0}\n{% endcase %}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "case": true
        },
        "opts": {}
      },
      {
        "content": "{% when ${1:condition} %}\n\t${0:${VISUAL}}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "when": true
        },
        "opts": {}
      },
      {
        "content": "{% cycle '${1:odd}', '${2:even}' %}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "cycle": true
        },
        "opts": {}
      },
      {
        "content": "{% cycle '${1:group name}': '${2:odd}', '${3:even}' %}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "cyclegroup": true
        },
        "opts": {}
      },
      {
        "content": "{% for ${1:item} in ${2:collection} %}\n\t${0}\n{% endfor %}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "for": true
        },
        "opts": {}
      },
      {
        "content": "limit: ${1:5}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "limit": true
        },
        "opts": {}
      },
      {
        "content": "offset: ${1:0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "offset": true
        },
        "opts": {}
      },
      {
        "content": "reversed",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "reversed": true
        },
        "opts": {}
      },
      {
        "content": "{% break %}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "break": true
        },
        "opts": {}
      },
      {
        "content": "{% continue %}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "continue": true
        },
        "opts": {}
      },
      {
        "content": "{% tablerow ${1:item} in ${2:collection} cols: ${3:2} %}\n\t${0}\n{% endtablerow %}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "tablerow": true
        },
        "opts": {}
      },
      {
        "content": "{% assign ${1:variable} = ${0:value} %}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "assign": true
        },
        "opts": {}
      },
      {
        "content": "{% increment ${0:variable} %}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "increment": true
        },
        "opts": {}
      },
      {
        "content": "{% decrement ${0:variable} %}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "decrement": true
        },
        "opts": {}
      },
      {
        "content": "{% capture ${1:variable} %}${0}{% endcapture %}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "capture": true
        },
        "opts": {}
      },
      {
        "content": "{% include '${0:snippet}' %}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "include": true
        },
        "opts": {}
      },
      {
        "content": "{% include '${1:snippet}', ${2:variable}: ${0:value} %}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "includewith": true
        },
        "opts": {}
      },
      {
        "content": "{% render '${0:snippet}' %}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "render": true
        },
        "opts": {}
      },
      {
        "content": "{% render '${1:snippet}', ${2:variable}: ${0:value} %}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "renderwith": true
        },
        "opts": {}
      },
      {
        "content": "{% section '${1:snippet}' %}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "section": true
        },
        "opts": {}
      },
      {
        "content": "{% raw %}${0}{% endraw %}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "raw": true
        },
        "opts": {}
      },
      {
        "content": "{% layout '${1:layout}' %}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "layout": true
        },
        "opts": {}
      },
      {
        "content": "{% layout none %}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "layoutnone": true
        },
        "opts": {}
      },
      {
        "content": "{% paginate ${1:collection.products} by ${2:12} %}\n\t{% for ${3:product} in $1 %}\n\t\t${0}\n\t{% endfor %}\n{% endpaginate %}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "paginate": true
        },
        "opts": {}
      },
      {
        "content": "{% schema %}\n\t{\n\t\t${0}\n\t}\n{% endschema %}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "schema": true
        },
        "opts": {}
      },
      {
        "content": "{% stylesheet %}\n\t${0}\n{% endstylesheet %}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "stylesheet": true
        },
        "opts": {}
      },
      {
        "content": "{% stylesheet '${1:scss}' %}\n\t${0}\n{% endstylesheet %}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "stylesheet_scss": true
        },
        "opts": {}
      },
      {
        "content": "{% javascript %}\n\t${0}\n{% endjavascript %}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "javascript": true
        },
        "opts": {}
      },
      {
        "content": "{%- comment -%}${0:${VISUAL}}{%- endcomment -%}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "comment-": true
        },
        "opts": {}
      },
      {
        "content": "{%- if ${1:condition} -%}\n\t${0:${VISUAL}}\n{%- endif -%}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "if-": true
        },
        "opts": {}
      },
      {
        "content": "{%- else -%}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "else-": true
        },
        "opts": {}
      },
      {
        "content": "{%- elsif ${1:condition} -%}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "elsif-": true
        },
        "opts": {}
      },
      {
        "content": "{%- if ${1:condition} -%}\n\t${2}\n{%- else -%}\n\t${0}\n{%- endif -%}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ifelse-": true
        },
        "opts": {}
      },
      {
        "content": "{%- unless ${1:condition} -%}\n\t${0:${VISUAL}}\n{%- endunless -%}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "unless-": true
        },
        "opts": {}
      },
      {
        "content": "{%- case ${1:variable} -%}\n\t{%- when ${2:condition} -%}\n\t\t${3}\n\t{%- else -%}\n\t\t${0}\n{%- endcase -%}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "case-": true
        },
        "opts": {}
      },
      {
        "content": "{%- when ${1:condition} -%}\n\t${0:${VISUAL}}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "when-": true
        },
        "opts": {}
      },
      {
        "content": "{%- cycle '${1:odd}', '${2:even}' -%}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "cycle-": true
        },
        "opts": {}
      },
      {
        "content": "{%- cycle '${1:group name}': '${2:odd}', '${3:even}' -%}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "cyclegroup-": true
        },
        "opts": {}
      },
      {
        "content": "{%- for ${1:item} in ${2:collection} -%}\n\t${0}\n{%- endfor -%}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "for-": true
        },
        "opts": {}
      },
      {
        "content": "{%- continue -%}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "continue-": true
        },
        "opts": {}
      },
      {
        "content": "{%- tablerow ${1:item} in ${2:collection} cols: ${3:2} -%}\n\t${0}\n{%- endtablerow -%}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "tablerow-": true
        },
        "opts": {}
      },
      {
        "content": "{%- assign ${1:variable} = ${0:value} -%}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "assign-": true
        },
        "opts": {}
      },
      {
        "content": "{%- capture ${1:variable} -%}${0}{%- endcapture -%}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "capture-": true
        },
        "opts": {}
      },
      {
        "content": "{%- include '${0:snippet}' -%}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "include-": true
        },
        "opts": {}
      },
      {
        "content": "{%- include '${1:snippet}', ${2:variable}: ${0:value} -%}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "includewith-": true
        },
        "opts": {}
      },
      {
        "content": "{%- render '${0:snippet}' -%}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "render-": true
        },
        "opts": {}
      },
      {
        "content": "{%- render '${1:snippet}', ${2:variable}: ${0:value} -%}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "renderwith-": true
        },
        "opts": {}
      },
      {
        "content": "{%- section '${1:snippet}' -%}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "section-": true
        },
        "opts": {}
      },
      {
        "content": "{%- layout '${1:layout}' -%}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "layout-": true
        },
        "opts": {}
      },
      {
        "content": "{%- layout none -%}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "layoutnone-": true
        },
        "opts": {}
      },
      {
        "content": "{%- paginate ${1:collection.products} by ${2:12} -%}\n\t{%- for ${3:product} in $1 -%}\n\t\t${0}\n\t{%- endfor -%}\n{%- endpaginate -%}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "paginate-": true
        },
        "opts": {}
      },
      {
        "content": "| join: '${1:, }'",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "join": true
        },
        "opts": {}
      },
      {
        "content": "| first",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "first": true
        },
        "opts": {}
      },
      {
        "content": "| last",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "last": true
        },
        "opts": {}
      },
      {
        "content": "| concat: ${1:array}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "concat": true
        },
        "opts": {}
      },
      {
        "content": "| map: '${1:key}'",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "map": true
        },
        "opts": {}
      },
      {
        "content": "| reverse",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "reverse": true
        },
        "opts": {}
      },
      {
        "content": "| size",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "size": true
        },
        "opts": {}
      },
      {
        "content": "| sort: '${1:key}'",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "sort": true
        },
        "opts": {}
      },
      {
        "content": "| uniq",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "uniq": true
        },
        "opts": {}
      },
      {
        "content": "| img_tag",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "img_tag": true
        },
        "opts": {}
      },
      {
        "content": "| img_tag: '${1:alt}', '${2:class}'",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "img_tag_param": true
        },
        "opts": {}
      },
      {
        "content": "| script_tag",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "script_tag": true
        },
        "opts": {}
      },
      {
        "content": "| stylesheet_tag",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "stylesheet_tag": true
        },
        "opts": {}
      },
      {
        "content": "| abs",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "abs": true
        },
        "opts": {}
      },
      {
        "content": "| ceil",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ceil": true
        },
        "opts": {}
      },
      {
        "content": "| divided_by: ${1:2}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "divided_by": true
        },
        "opts": {}
      },
      {
        "content": "| floor",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "floor": true
        },
        "opts": {}
      },
      {
        "content": "| minus: ${1:1}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "minus": true
        },
        "opts": {}
      },
      {
        "content": "| plus: ${1:1}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "plus": true
        },
        "opts": {}
      },
      {
        "content": "| round: ${1:0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "round": true
        },
        "opts": {}
      },
      {
        "content": "| times: ${1:1}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "times": true
        },
        "opts": {}
      },
      {
        "content": "| modulo: ${1:2}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "modulo": true
        },
        "opts": {}
      },
      {
        "content": "| money",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "money": true
        },
        "opts": {}
      },
      {
        "content": "| money_with_currency",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "money_with_currency": true
        },
        "opts": {}
      },
      {
        "content": "| money_without_trailing_zeros",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "money_without_trailing_zeros": true
        },
        "opts": {}
      },
      {
        "content": "| money_without_currency",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "money_without_currency": true
        },
        "opts": {}
      },
      {
        "content": "| append: '${1:string}'",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "append": true
        },
        "opts": {}
      },
      {
        "content": "| camelcase",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "camelcase": true
        },
        "opts": {}
      },
      {
        "content": "| capitalize",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "capitalize": true
        },
        "opts": {}
      },
      {
        "content": "| downcase",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "downcase": true
        },
        "opts": {}
      },
      {
        "content": "| escape",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "escape": true
        },
        "opts": {}
      },
      {
        "content": "| handleize",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "handleize": true
        },
        "opts": {}
      },
      {
        "content": "| md5",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "md5": true
        },
        "opts": {}
      },
      {
        "content": "| newline_to_br",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "newline_to_br": true
        },
        "opts": {}
      },
      {
        "content": "| pluralize: '${1:item}', '${2:items}'",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "pluralize": true
        },
        "opts": {}
      },
      {
        "content": "| prepend: '${1:string}'",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "prepend": true
        },
        "opts": {}
      },
      {
        "content": "| remove: '${1:string}'",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "remove": true
        },
        "opts": {}
      },
      {
        "content": "| remove_first: '${1:string}'",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "remove_first": true
        },
        "opts": {}
      },
      {
        "content": "| replace: '${1:target}', '${2:replace}'",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "replace": true
        },
        "opts": {}
      },
      {
        "content": "| replace_first: '${1:target}', '${2:replace}'",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "replace_first": true
        },
        "opts": {}
      },
      {
        "content": "| slice: ${1:0}, ${2:5}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "slice": true
        },
        "opts": {}
      },
      {
        "content": "| slice: ${1:at}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "slice_single": true
        },
        "opts": {}
      },
      {
        "content": "| split: '${1:,}'",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "split": true
        },
        "opts": {}
      },
      {
        "content": "| strip",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "strip": true
        },
        "opts": {}
      },
      {
        "content": "| lstrip",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "lstrip": true
        },
        "opts": {}
      },
      {
        "content": "| rstrip",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "rstrip": true
        },
        "opts": {}
      },
      {
        "content": "| strip_html",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "strip_html": true
        },
        "opts": {}
      },
      {
        "content": "| strip_newlines",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "strip_newlines": true
        },
        "opts": {}
      },
      {
        "content": "| truncate: ${1:20}, '${2:...}'",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "truncate": true
        },
        "opts": {}
      },
      {
        "content": "| truncatewords: ${1:5}, '${2:...}'",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "truncatewords": true
        },
        "opts": {}
      },
      {
        "content": "| upcase",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "upcase": true
        },
        "opts": {}
      },
      {
        "content": "| url_encode",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "url_encode": true
        },
        "opts": {}
      },
      {
        "content": "| url_escape",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "url_escape": true
        },
        "opts": {}
      },
      {
        "content": "| url_param_escape",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "url_param_escape": true
        },
        "opts": {}
      },
      {
        "content": "| asset_url",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "asset_url": true
        },
        "opts": {}
      },
      {
        "content": "| asset_img_url: '${1:medium}'",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "asset_img_url": true
        },
        "opts": {}
      },
      {
        "content": "| img_url: '${1:medium}'",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "img_url": true
        },
        "opts": {}
      },
      {
        "content": "{% schema %}\n\t{\n\t\t\"name\": \"${1}\",\n\t\t\"class\": \"${2}\",\n\t\t\"settings\": [\n\t\t\t${0}\n\t\t]\n\t}\n{% endschema %}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "_schema": true
        },
        "opts": {}
      },
      {
        "content": "\"blocks\": [\n\t{\n\t\t\"type\": \"${1}\",\n\t\t\"name\": \"${2}\",\n\t\t\"settings\": [\n\t\t\t${0}\n\t\t]\n\t}\n]",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "_blocks": true
        },
        "opts": {}
      },
      {
        "content": "{\n\t\"type\": \"text\",\n\t\"id\": \"${1}\",\n\t\"label\": \"${2}\",\n\t\"default\": \"${3}\",\n\t\"info\": \"${4}\",\n\t\"placeholder\": \"${0}\"\n}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "_text": true
        },
        "opts": {}
      },
      {
        "content": "{\n\t\"type\": \"textarea\",\n\t\"id\": \"${1}\",\n\t\"label\": \"${2}\",\n\t\"default\": \"${3}\",\n\t\"info\": \"${4}\",\n\t\"placeholder\": \"${0}\"\n}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "_textarea": true
        },
        "opts": {}
      },
      {
        "content": "{\n\t\"type\": \"image_picker\",\n\t\"id\": \"${1}\",\n\t\"label\": \"${0}\"\n}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "_image_picker": true
        },
        "opts": {}
      },
      {
        "content": "{\n\t\"type\": \"radio\",\n\t\"id\": \"${1}\",\n\t\"label\": \"${2}\",\n\t\"options\": [\n\t\t{ \"value\": \"${5}\", \"label\": \"${0}\" }\n\t],\n\t\"default\": \"${3}\",\n\t\"info\": \"${4}\"\n}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "_radio": true
        },
        "opts": {}
      },
      {
        "content": "{\n\t\"type\": \"select\",\n\t\"id\": \"${1}\",\n\t\"label\": \"${2}\",\n\t\"options\": [\n\t\t{\n\t\t\t\"group\": \"${5}\",\n\t\t\t\"value\": \"${6}\",\n\t\t\t\"label\": \"${0}\"\n\t\t}\n\t],\n\t\"default\": \"${3}\",\n\t\"info\": \"${4}\"\n}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "_select": true
        },
        "opts": {}
      },
      {
        "content": "{\n\t\"type\": \"checkbox\",\n\t\"id\": \"${1}\",\n\t\"label\": \"${2}\",\n\t\"default\": ${3:true},\n\t\"info\": \"${0}\"\n}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "_checkbox": true
        },
        "opts": {}
      },
      {
        "content": "{\n\t\"type\": \"range\",\n\t\"id\": \"${1}\",\n\t\"min\": ${2},\n\t\"max\": ${3},\n\t\"step\": ${4},\n\t\"unit\": \"${5}\",\n\t\"label\": \"${6}\",\n\t\"default\": ${0}\n}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "_range": true
        },
        "opts": {}
      },
      {
        "content": "{\n\t\"type\": \"color\",\n\t\"id\": \"${1}\",\n\t\"label\": \"${2}\",\n\t\"default\": \"${3}\",\n\t\"info\": \"${0}\"\n}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "_color": true
        },
        "opts": {}
      },
      {
        "content": "{\n\t\"type\": \"font_picker\",\n\t\"id\": \"${1}\",\n\t\"label\": \"${2}\",\n\t\"info\": \"${3}\",\n\t\"default\": \"${0:helvetica_n4}\"\n}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "_font": true
        },
        "opts": {}
      },
      {
        "content": "{\n\t\"type\": \"collection\",\n\t\"id\": \"${1}\",\n\t\"label\": \"${2}\",\n\t\"info\": \"${0}\"\n}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "_collection": true
        },
        "opts": {}
      },
      {
        "content": "{\n\t\"type\": \"product\",\n\t\"id\": \"${1}\",\n\t\"label\": \"${2}\",\n\t\"info\": \"${0}\"\n}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "_product": true
        },
        "opts": {}
      },
      {
        "content": "{\n\t\"type\": \"blog\",\n\t\"id\": \"${1}\",\n\t\"label\": \"${2}\",\n\t\"info\": \"${0}\"\n}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "_blog": true
        },
        "opts": {}
      },
      {
        "content": "{\n\t\"type\": \"page\",\n\t\"id\": \"${1}\",\n\t\"label\": \"${2}\",\n\t\"info\": \"${0}\"\n}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "_page": true
        },
        "opts": {}
      },
      {
        "content": "{\n\t\"type\": \"link_list\",\n\t\"id\": \"${1}\",\n\t\"label\": \"${2}\",\n\t\"info\": \"${0}\"\n}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "_link_list": true
        },
        "opts": {}
      },
      {
        "content": "{\n\t\"type\": \"url\",\n\t\"id\": \"${1}\",\n\t\"label\": \"${2}\",\n\t\"info\": \"${0}\"\n}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "_url": true
        },
        "opts": {}
      },
      {
        "content": "{\n\t\"type\": \"video_url\",\n\t\"id\": \"${1}\",\n\t\"label\": \"${2}\",\n\t\"accept\": [\"youtube\", \"vimeo\"${0}],\n\t\"default\": \"${3}\",\n\t\"info\": \"${4}\",\n\t\"placeholder\": \"${5}\"\n}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "_video": true
        },
        "opts": {}
      },
      {
        "content": "{\n\t\"type\": \"richtext\",\n\t\"id\": \"${1}\",\n\t\"label\": \"${2}\",\n\t\"default\": \"<p>${0}</p>\"\n}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "_richtext": true
        },
        "opts": {}
      },
      {
        "content": "{\n\t\"type\": \"html\",\n\t\"id\": \"${1}\",\n\t\"label\": \"${2}\",\n\t\"default\": \"<div>${0}</div>\"\n}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "_html": true
        },
        "opts": {}
      },
      {
        "content": "{\n\t\"type\": \"article\",\n\t\"id\": \"${1}\",\n\t\"label\": \"${2}\",\n\t\"info\": \"${0}\"\n}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "_article": true
        },
        "opts": {}
      },
      {
        "content": "{\n\t\"type\": \"header\",\n\t\"content\": \"${1}\",\n\t\"info\": \"${0}\"\n}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "_header": true
        },
        "opts": {}
      },
      {
        "content": "{\n\t\"type\": \"paragraph\",\n\t\"content\": \"${0}\"\n}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "_paragraph": true
        },
        "opts": {}
      }
    ],
    "lodash": [
      {
        "content": "_.runInContext(${context})",
        "doc": "_.mixin({ 'foo': _.constant('foo') });\n\nvar lodash = _.runInContext();\nlodash.mixin({ 'bar': lodash.constant('bar') });\n\n_.isFunction(_.foo);\n// => true\n_.isFunction(_.bar);\n// => false\n\nlodash.isFunction(lodash.foo);\n// => false\nlodash.isFunction(lodash.bar);\n// => true\n\n// Create a suped-up `defer` in Node.js.\nvar defer = _.runInContext({ 'setTimeout': setImmediate }).defer;\n\nCreate a new pristine `lodash` function using the `context` object.",
        "grammar": "lsp",
        "label": "lodash-runincontext",
        "matches": {
          "lodash runincontext": true
        },
        "opts": {}
      },
      {
        "content": "_.chunk(${array}, ${size})",
        "doc": "_.chunk(['a', 'b', 'c', 'd'], 2);\n// => [['a', 'b'], ['c', 'd']]\n\n_.chunk(['a', 'b', 'c', 'd'], 3);\n// => [['a', 'b', 'c'], ['d']]\n\nCreates an array of elements split into groups the length of `size`.\nIf `array` can't be split evenly, the final chunk will be the remaining\nelements.",
        "grammar": "lsp",
        "label": "lodash-chunk",
        "matches": {
          "lodash chunk": true
        },
        "opts": {}
      },
      {
        "content": "_.compact(${array})",
        "doc": "_.compact([0, 1, false, 2, '', 3]);\n// => [1, 2, 3]\n\nCreates an array with all falsey values removed. The values `false`, `null`,\n`0`, `\"\"`, `undefined`, and `NaN` are falsey.",
        "grammar": "lsp",
        "label": "lodash-compact",
        "matches": {
          "lodash compact": true
        },
        "opts": {}
      },
      {
        "content": "_.concat(${array}, ${values})",
        "doc": "var array = [1];\nvar other = _.concat(array, 2, [3], [[4]]);\n\nconsole.log(other);\n// => [1, 2, 3, [4]]\n\nconsole.log(array);\n// => [1]\n\nCreates a new array concatenating `array` with any additional arrays\nand/or values.",
        "grammar": "lsp",
        "label": "lodash-concat",
        "matches": {
          "lodash concat": true
        },
        "opts": {}
      },
      {
        "content": "_.difference(${array}, ${values})",
        "doc": "_.difference([2, 1], [2, 3]);\n// => [1]\n\nCreates an array of `array` values not included in the other given arrays\nusing [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\nfor equality comparisons. The order and references of result values are\ndetermined by the first array.\n\n**Note:** Unlike `_.pullAll`, this method returns a new array.",
        "grammar": "lsp",
        "label": "lodash-difference",
        "matches": {
          "lodash difference": true
        },
        "opts": {}
      },
      {
        "content": "_.differenceBy(${array}, ${values}, ${iteratee})",
        "doc": "_.differenceBy([2.1, 1.2], [2.3, 3.4], Math.floor);\n// => [1.2]\n\n// The `_.property` iteratee shorthand.\n_.differenceBy([{ 'x': 2 }, { 'x': 1 }], [{ 'x': 1 }], 'x');\n// => [{ 'x': 2 }]\n\nThis method is like `_.difference` except that it accepts `iteratee` which\nis invoked for each element of `array` and `values` to generate the criterion\nby which they're compared. The order and references of result values are\ndetermined by the first array. The iteratee is invoked with one argument:\n(value).\n\n**Note:** Unlike `_.pullAllBy`, this method returns a new array.",
        "grammar": "lsp",
        "label": "lodash-differenceby",
        "matches": {
          "lodash differenceby": true
        },
        "opts": {}
      },
      {
        "content": "_.differenceWith(${array}, ${values}, ${comparator})",
        "doc": "var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];\n\n_.differenceWith(objects, [{ 'x': 1, 'y': 2 }], _.isEqual);\n// => [{ 'x': 2, 'y': 1 }]\n\nThis method is like `_.difference` except that it accepts `comparator`\nwhich is invoked to compare elements of `array` to `values`. The order and\nreferences of result values are determined by the first array. The comparator\nis invoked with two arguments: (arrVal, othVal).\n\n**Note:** Unlike `_.pullAllWith`, this method returns a new array.",
        "grammar": "lsp",
        "label": "lodash-differencewith",
        "matches": {
          "lodash differencewith": true
        },
        "opts": {}
      },
      {
        "content": "_.drop(${array}, ${n})",
        "doc": "_.drop([1, 2, 3]);\n// => [2, 3]\n\n_.drop([1, 2, 3], 2);\n// => [3]\n\n_.drop([1, 2, 3], 5);\n// => []\n\n_.drop([1, 2, 3], 0);\n// => [1, 2, 3]\n\nCreates a slice of `array` with `n` elements dropped from the beginning.",
        "grammar": "lsp",
        "label": "lodash-drop",
        "matches": {
          "lodash drop": true
        },
        "opts": {}
      },
      {
        "content": "_.dropRight(${array}, ${n})",
        "doc": "_.dropRight([1, 2, 3]);\n// => [1, 2]\n\n_.dropRight([1, 2, 3], 2);\n// => [1]\n\n_.dropRight([1, 2, 3], 5);\n// => []\n\n_.dropRight([1, 2, 3], 0);\n// => [1, 2, 3]\n\nCreates a slice of `array` with `n` elements dropped from the end.",
        "grammar": "lsp",
        "label": "lodash-dropright",
        "matches": {
          "lodash dropright": true
        },
        "opts": {}
      },
      {
        "content": "_.dropRightWhile(${array}, ${predicate})",
        "doc": "var users = [\n  { 'user': 'barney',  'active': true },\n  { 'user': 'fred',    'active': false },\n  { 'user': 'pebbles', 'active': false }\n];\n\n_.dropRightWhile(users, function(o) { return !o.active; });\n// => objects for ['barney']\n\n// The `_.matches` iteratee shorthand.\n_.dropRightWhile(users, { 'user': 'pebbles', 'active': false });\n// => objects for ['barney', 'fred']\n\n// The `_.matchesProperty` iteratee shorthand.\n_.dropRightWhile(users, ['active', false]);\n// => objects for ['barney']\n\n// The `_.property` iteratee shorthand.\n_.dropRightWhile(users, 'active');\n// => objects for ['barney', 'fred', 'pebbles']\n\nCreates a slice of `array` excluding elements dropped from the end.\nElements are dropped until `predicate` returns falsey. The predicate is\ninvoked with three arguments: (value, index, array).",
        "grammar": "lsp",
        "label": "lodash-droprightwhile",
        "matches": {
          "lodash droprightwhile": true
        },
        "opts": {}
      },
      {
        "content": "_.dropWhile(${array}, ${predicate})",
        "doc": "var users = [\n  { 'user': 'barney',  'active': false },\n  { 'user': 'fred',    'active': false },\n  { 'user': 'pebbles', 'active': true }\n];\n\n_.dropWhile(users, function(o) { return !o.active; });\n// => objects for ['pebbles']\n\n// The `_.matches` iteratee shorthand.\n_.dropWhile(users, { 'user': 'barney', 'active': false });\n// => objects for ['fred', 'pebbles']\n\n// The `_.matchesProperty` iteratee shorthand.\n_.dropWhile(users, ['active', false]);\n// => objects for ['pebbles']\n\n// The `_.property` iteratee shorthand.\n_.dropWhile(users, 'active');\n// => objects for ['barney', 'fred', 'pebbles']\n\nCreates a slice of `array` excluding elements dropped from the beginning.\nElements are dropped until `predicate` returns falsey. The predicate is\ninvoked with three arguments: (value, index, array).",
        "grammar": "lsp",
        "label": "lodash-dropwhile",
        "matches": {
          "lodash dropwhile": true
        },
        "opts": {}
      },
      {
        "content": "_.fill(${array}, ${value}, ${start}, ${end})",
        "doc": "var array = [1, 2, 3];\n\n_.fill(array, 'a');\nconsole.log(array);\n// => ['a', 'a', 'a']\n\n_.fill(Array(3), 2);\n// => [2, 2, 2]\n\n_.fill([4, 6, 8, 10], '*', 1, 3);\n// => [4, '*', '*', 10]\n\nFills elements of `array` with `value` from `start` up to, but not\nincluding, `end`.\n\n**Note:** This method mutates `array`.",
        "grammar": "lsp",
        "label": "lodash-fill",
        "matches": {
          "lodash fill": true
        },
        "opts": {}
      },
      {
        "content": "_.findIndex(${array}, ${predicate}, ${fromIndex})",
        "doc": "var users = [\n  { 'user': 'barney',  'active': false },\n  { 'user': 'fred',    'active': false },\n  { 'user': 'pebbles', 'active': true }\n];\n\n_.findIndex(users, function(o) { return o.user == 'barney'; });\n// => 0\n\n// The `_.matches` iteratee shorthand.\n_.findIndex(users, { 'user': 'fred', 'active': false });\n// => 1\n\n// The `_.matchesProperty` iteratee shorthand.\n_.findIndex(users, ['active', false]);\n// => 0\n\n// The `_.property` iteratee shorthand.\n_.findIndex(users, 'active');\n// => 2\n\nThis method is like `_.find` except that it returns the index of the first\nelement `predicate` returns truthy for instead of the element itself.",
        "grammar": "lsp",
        "label": "lodash-findindex",
        "matches": {
          "lodash findindex": true
        },
        "opts": {}
      },
      {
        "content": "_.findLastIndex(${array}, ${predicate}, ${fromIndex})",
        "doc": "var users = [\n  { 'user': 'barney',  'active': true },\n  { 'user': 'fred',    'active': false },\n  { 'user': 'pebbles', 'active': false }\n];\n\n_.findLastIndex(users, function(o) { return o.user == 'pebbles'; });\n// => 2\n\n// The `_.matches` iteratee shorthand.\n_.findLastIndex(users, { 'user': 'barney', 'active': true });\n// => 0\n\n// The `_.matchesProperty` iteratee shorthand.\n_.findLastIndex(users, ['active', false]);\n// => 2\n\n// The `_.property` iteratee shorthand.\n_.findLastIndex(users, 'active');\n// => 0\n\nThis method is like `_.findIndex` except that it iterates over elements\nof `collection` from right to left.",
        "grammar": "lsp",
        "label": "lodash-findlastindex",
        "matches": {
          "lodash findlastindex": true
        },
        "opts": {}
      },
      {
        "content": "_.flatten(${array})",
        "doc": "_.flatten([1, [2, [3, [4]], 5]]);\n// => [1, 2, [3, [4]], 5]\n\nFlattens `array` a single level deep.",
        "grammar": "lsp",
        "label": "lodash-flatten",
        "matches": {
          "lodash flatten": true
        },
        "opts": {}
      },
      {
        "content": "_.flattenDeep(${array})",
        "doc": "_.flattenDeep([1, [2, [3, [4]], 5]]);\n// => [1, 2, 3, 4, 5]\n\nRecursively flattens `array`.",
        "grammar": "lsp",
        "label": "lodash-flattendeep",
        "matches": {
          "lodash flattendeep": true
        },
        "opts": {}
      },
      {
        "content": "_.flattenDepth(${array}, ${depth})",
        "doc": "var array = [1, [2, [3, [4]], 5]];\n\n_.flattenDepth(array, 1);\n// => [1, 2, [3, [4]], 5]\n\n_.flattenDepth(array, 2);\n// => [1, 2, 3, [4], 5]\n\nRecursively flatten `array` up to `depth` times.",
        "grammar": "lsp",
        "label": "lodash-flattendepth",
        "matches": {
          "lodash flattendepth": true
        },
        "opts": {}
      },
      {
        "content": "_.fromPairs(${pairs})",
        "doc": "_.fromPairs([['a', 1], ['b', 2]]);\n// => { 'a': 1, 'b': 2 }\n\nThe inverse of `_.toPairs`; this method returns an object composed\nfrom key-value `pairs`.",
        "grammar": "lsp",
        "label": "lodash-frompairs",
        "matches": {
          "lodash frompairs": true
        },
        "opts": {}
      },
      {
        "content": "_.first(${array})",
        "doc": "_.head([1, 2, 3]);\n// => 1\n\n_.head([]);\n// => undefined\n\nGets the first element of `array`.",
        "grammar": "lsp",
        "label": "lodash-first",
        "matches": {
          "lodash first": true
        },
        "opts": {}
      },
      {
        "content": "_.indexOf(${array}, ${value}, ${fromIndex})",
        "doc": "_.indexOf([1, 2, 1, 2], 2);\n// => 1\n\n// Search from the `fromIndex`.\n_.indexOf([1, 2, 1, 2], 2, 2);\n// => 3\n\nGets the index at which the first occurrence of `value` is found in `array`\nusing [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\nfor equality comparisons. If `fromIndex` is negative, it's used as the\noffset from the end of `array`.",
        "grammar": "lsp",
        "label": "lodash-indexof",
        "matches": {
          "lodash indexof": true
        },
        "opts": {}
      },
      {
        "content": "_.initial(${array})",
        "doc": "_.initial([1, 2, 3]);\n// => [1, 2]\n\nGets all but the last element of `array`.",
        "grammar": "lsp",
        "label": "lodash-initial",
        "matches": {
          "lodash initial": true
        },
        "opts": {}
      },
      {
        "content": "_.intersection(${arrays})",
        "doc": "_.intersection([2, 1], [2, 3]);\n// => [2]\n\nCreates an array of unique values that are included in all given arrays\nusing [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\nfor equality comparisons. The order and references of result values are\ndetermined by the first array.",
        "grammar": "lsp",
        "label": "lodash-intersection",
        "matches": {
          "lodash intersection": true
        },
        "opts": {}
      },
      {
        "content": "_.intersectionBy(${arrays}, ${iteratee})",
        "doc": "_.intersectionBy([2.1, 1.2], [2.3, 3.4], Math.floor);\n// => [2.1]\n\n// The `_.property` iteratee shorthand.\n_.intersectionBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');\n// => [{ 'x': 1 }]\n\nThis method is like `_.intersection` except that it accepts `iteratee`\nwhich is invoked for each element of each `arrays` to generate the criterion\nby which they're compared. The order and references of result values are\ndetermined by the first array. The iteratee is invoked with one argument:\n(value).",
        "grammar": "lsp",
        "label": "lodash-intersectionby",
        "matches": {
          "lodash intersectionby": true
        },
        "opts": {}
      },
      {
        "content": "_.intersectionWith(${arrays}, ${comparator})",
        "doc": "var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];\nvar others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];\n\n_.intersectionWith(objects, others, _.isEqual);\n// => [{ 'x': 1, 'y': 2 }]\n\nThis method is like `_.intersection` except that it accepts `comparator`\nwhich is invoked to compare elements of `arrays`. The order and references\nof result values are determined by the first array. The comparator is\ninvoked with two arguments: (arrVal, othVal).",
        "grammar": "lsp",
        "label": "lodash-intersectionwith",
        "matches": {
          "lodash intersectionwith": true
        },
        "opts": {}
      },
      {
        "content": "_.join(${array}, ${separator})",
        "doc": "_.join(['a', 'b', 'c'], '~');\n// => 'a~b~c'\n\nConverts all elements in `array` into a string separated by `separator`.",
        "grammar": "lsp",
        "label": "lodash-join",
        "matches": {
          "lodash join": true
        },
        "opts": {}
      },
      {
        "content": "_.last(${array})",
        "doc": "_.last([1, 2, 3]);\n// => 3\n\nGets the last element of `array`.",
        "grammar": "lsp",
        "label": "lodash-last",
        "matches": {
          "lodash last": true
        },
        "opts": {}
      },
      {
        "content": "_.lastIndexOf(${array}, ${value}, ${fromIndex})",
        "doc": "_.lastIndexOf([1, 2, 1, 2], 2);\n// => 3\n\n// Search from the `fromIndex`.\n_.lastIndexOf([1, 2, 1, 2], 2, 2);\n// => 1\n\nThis method is like `_.indexOf` except that it iterates over elements of\n`array` from right to left.",
        "grammar": "lsp",
        "label": "lodash-lastindexof",
        "matches": {
          "lodash lastindexof": true
        },
        "opts": {}
      },
      {
        "content": "_.nth(${array}, ${n})",
        "doc": "var array = ['a', 'b', 'c', 'd'];\n\n_.nth(array, 1);\n// => 'b'\n\n_.nth(array, -2);\n// => 'c';\n\nGets the element at index `n` of `array`. If `n` is negative, the nth\nelement from the end is returned.",
        "grammar": "lsp",
        "label": "lodash-nth",
        "matches": {
          "lodash nth": true
        },
        "opts": {}
      },
      {
        "content": "_.pull(${array}, ${values})",
        "doc": "var array = ['a', 'b', 'c', 'a', 'b', 'c'];\n\n_.pull(array, 'a', 'c');\nconsole.log(array);\n// => ['b', 'b']\n\nRemoves all given values from `array` using\n[`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\nfor equality comparisons.\n\n**Note:** Unlike `_.without`, this method mutates `array`. Use `_.remove`\nto remove elements from an array by predicate.",
        "grammar": "lsp",
        "label": "lodash-pull",
        "matches": {
          "lodash pull": true
        },
        "opts": {}
      },
      {
        "content": "_.pullAll(${array}, ${values})",
        "doc": "var array = ['a', 'b', 'c', 'a', 'b', 'c'];\n\n_.pullAll(array, ['a', 'c']);\nconsole.log(array);\n// => ['b', 'b']\n\nThis method is like `_.pull` except that it accepts an array of values to remove.\n\n**Note:** Unlike `_.difference`, this method mutates `array`.",
        "grammar": "lsp",
        "label": "lodash-pullall",
        "matches": {
          "lodash pullall": true
        },
        "opts": {}
      },
      {
        "content": "_.pullAllBy(${array}, ${values}, ${iteratee})",
        "doc": "var array = [{ 'x': 1 }, { 'x': 2 }, { 'x': 3 }, { 'x': 1 }];\n\n_.pullAllBy(array, [{ 'x': 1 }, { 'x': 3 }], 'x');\nconsole.log(array);\n// => [{ 'x': 2 }]\n\nThis method is like `_.pullAll` except that it accepts `iteratee` which is\ninvoked for each element of `array` and `values` to generate the criterion\nby which they're compared. The iteratee is invoked with one argument: (value).\n\n**Note:** Unlike `_.differenceBy`, this method mutates `array`.",
        "grammar": "lsp",
        "label": "lodash-pullallby",
        "matches": {
          "lodash pullallby": true
        },
        "opts": {}
      },
      {
        "content": "_.pullAllWith(${array}, ${values}, ${comparator})",
        "doc": "var array = [{ 'x': 1, 'y': 2 }, { 'x': 3, 'y': 4 }, { 'x': 5, 'y': 6 }];\n\n_.pullAllWith(array, [{ 'x': 3, 'y': 4 }], _.isEqual);\nconsole.log(array);\n// => [{ 'x': 1, 'y': 2 }, { 'x': 5, 'y': 6 }]\n\nThis method is like `_.pullAll` except that it accepts `comparator` which\nis invoked to compare elements of `array` to `values`. The comparator is\ninvoked with two arguments: (arrVal, othVal).\n\n**Note:** Unlike `_.differenceWith`, this method mutates `array`.",
        "grammar": "lsp",
        "label": "lodash-pullallwith",
        "matches": {
          "lodash pullallwith": true
        },
        "opts": {}
      },
      {
        "content": "_.pullAt(${array}, ${indexes})",
        "doc": "var array = ['a', 'b', 'c', 'd'];\nvar pulled = _.pullAt(array, [1, 3]);\n\nconsole.log(array);\n// => ['a', 'c']\n\nconsole.log(pulled);\n// => ['b', 'd']\n\nRemoves elements from `array` corresponding to `indexes` and returns an\narray of removed elements.\n\n**Note:** Unlike `_.at`, this method mutates `array`.",
        "grammar": "lsp",
        "label": "lodash-pullat",
        "matches": {
          "lodash pullat": true
        },
        "opts": {}
      },
      {
        "content": "_.remove(${array}, ${predicate})",
        "doc": "var array = [1, 2, 3, 4];\nvar evens = _.remove(array, function(n) {\n  return n % 2 == 0;\n});\n\nconsole.log(array);\n// => [1, 3]\n\nconsole.log(evens);\n// => [2, 4]\n\nRemoves all elements from `array` that `predicate` returns truthy for\nand returns an array of the removed elements. The predicate is invoked\nwith three arguments: (value, index, array).\n\n**Note:** Unlike `_.filter`, this method mutates `array`. Use `_.pull`\nto pull elements from an array by value.",
        "grammar": "lsp",
        "label": "lodash-remove",
        "matches": {
          "lodash remove": true
        },
        "opts": {}
      },
      {
        "content": "_.reverse()",
        "doc": "var array = [1, 2, 3];\n\n_(array).reverse().value()\n// => [3, 2, 1]\n\nconsole.log(array);\n// => [3, 2, 1]\n\nThis method is the wrapper version of `_.reverse`.\n\n**Note:** This method mutates the wrapped array.",
        "grammar": "lsp",
        "label": "lodash-reverse",
        "matches": {
          "lodash reverse": true
        },
        "opts": {}
      },
      {
        "content": "_.slice(${array}, ${start}, ${end})",
        "doc": "undefined\n\nCreates a slice of `array` from `start` up to, but not including, `end`.\n\n**Note:** This method is used instead of\n[`Array#slice`](https://mdn.io/Array/slice) to ensure dense arrays are\nreturned.",
        "grammar": "lsp",
        "label": "lodash-slice",
        "matches": {
          "lodash slice": true
        },
        "opts": {}
      },
      {
        "content": "_.sortedIndex(${array}, ${value})",
        "doc": "_.sortedIndex([30, 50], 40);\n// => 1\n\nUses a binary search to determine the lowest index at which `value`\nshould be inserted into `array` in order to maintain its sort order.",
        "grammar": "lsp",
        "label": "lodash-sortedindex",
        "matches": {
          "lodash sortedindex": true
        },
        "opts": {}
      },
      {
        "content": "_.sortedIndexBy(${array}, ${value}, ${iteratee})",
        "doc": "var objects = [{ 'x': 4 }, { 'x': 5 }];\n\n_.sortedIndexBy(objects, { 'x': 4 }, function(o) { return o.x; });\n// => 0\n\n// The `_.property` iteratee shorthand.\n_.sortedIndexBy(objects, { 'x': 4 }, 'x');\n// => 0\n\nThis method is like `_.sortedIndex` except that it accepts `iteratee`\nwhich is invoked for `value` and each element of `array` to compute their\nsort ranking. The iteratee is invoked with one argument: (value).",
        "grammar": "lsp",
        "label": "lodash-sortedindexby",
        "matches": {
          "lodash sortedindexby": true
        },
        "opts": {}
      },
      {
        "content": "_.sortedIndexOf(${array}, ${value})",
        "doc": "_.sortedIndexOf([4, 5, 5, 5, 6], 5);\n// => 1\n\nThis method is like `_.indexOf` except that it performs a binary\nsearch on a sorted `array`.",
        "grammar": "lsp",
        "label": "lodash-sortedindexof",
        "matches": {
          "lodash sortedindexof": true
        },
        "opts": {}
      },
      {
        "content": "_.sortedLastIndex(${array}, ${value})",
        "doc": "_.sortedLastIndex([4, 5, 5, 5, 6], 5);\n// => 4\n\nThis method is like `_.sortedIndex` except that it returns the highest\nindex at which `value` should be inserted into `array` in order to\nmaintain its sort order.",
        "grammar": "lsp",
        "label": "lodash-sortedlastindex",
        "matches": {
          "lodash sortedlastindex": true
        },
        "opts": {}
      },
      {
        "content": "_.sortedLastIndexBy(${array}, ${value}, ${iteratee})",
        "doc": "var objects = [{ 'x': 4 }, { 'x': 5 }];\n\n_.sortedLastIndexBy(objects, { 'x': 4 }, function(o) { return o.x; });\n// => 1\n\n// The `_.property` iteratee shorthand.\n_.sortedLastIndexBy(objects, { 'x': 4 }, 'x');\n// => 1\n\nThis method is like `_.sortedLastIndex` except that it accepts `iteratee`\nwhich is invoked for `value` and each element of `array` to compute their\nsort ranking. The iteratee is invoked with one argument: (value).",
        "grammar": "lsp",
        "label": "lodash-sortedlastindexby",
        "matches": {
          "lodash sortedlastindexby": true
        },
        "opts": {}
      },
      {
        "content": "_.sortedLastIndexOf(${array}, ${value})",
        "doc": "_.sortedLastIndexOf([4, 5, 5, 5, 6], 5);\n// => 3\n\nThis method is like `_.lastIndexOf` except that it performs a binary\nsearch on a sorted `array`.",
        "grammar": "lsp",
        "label": "lodash-sortedlastindexof",
        "matches": {
          "lodash sortedlastindexof": true
        },
        "opts": {}
      },
      {
        "content": "_.sortedUniq(${array})",
        "doc": "_.sortedUniq([1, 1, 2]);\n// => [1, 2]\n\nThis method is like `_.uniq` except that it's designed and optimized\nfor sorted arrays.",
        "grammar": "lsp",
        "label": "lodash-sorteduniq",
        "matches": {
          "lodash sorteduniq": true
        },
        "opts": {}
      },
      {
        "content": "_.sortedUniqBy(${array}, ${iteratee})",
        "doc": "_.sortedUniqBy([1.1, 1.2, 2.3, 2.4], Math.floor);\n// => [1.1, 2.3]\n\nThis method is like `_.uniqBy` except that it's designed and optimized\nfor sorted arrays.",
        "grammar": "lsp",
        "label": "lodash-sorteduniqby",
        "matches": {
          "lodash sorteduniqby": true
        },
        "opts": {}
      },
      {
        "content": "_.tail(${array})",
        "doc": "_.tail([1, 2, 3]);\n// => [2, 3]\n\nGets all but the first element of `array`.",
        "grammar": "lsp",
        "label": "lodash-tail",
        "matches": {
          "lodash tail": true
        },
        "opts": {}
      },
      {
        "content": "_.take(${array}, ${n})",
        "doc": "_.take([1, 2, 3]);\n// => [1]\n\n_.take([1, 2, 3], 2);\n// => [1, 2]\n\n_.take([1, 2, 3], 5);\n// => [1, 2, 3]\n\n_.take([1, 2, 3], 0);\n// => []\n\nCreates a slice of `array` with `n` elements taken from the beginning.",
        "grammar": "lsp",
        "label": "lodash-take",
        "matches": {
          "lodash take": true
        },
        "opts": {}
      },
      {
        "content": "_.takeRight(${array}, ${n})",
        "doc": "_.takeRight([1, 2, 3]);\n// => [3]\n\n_.takeRight([1, 2, 3], 2);\n// => [2, 3]\n\n_.takeRight([1, 2, 3], 5);\n// => [1, 2, 3]\n\n_.takeRight([1, 2, 3], 0);\n// => []\n\nCreates a slice of `array` with `n` elements taken from the end.",
        "grammar": "lsp",
        "label": "lodash-takeright",
        "matches": {
          "lodash takeright": true
        },
        "opts": {}
      },
      {
        "content": "_.takeRightWhile(${array}, ${predicate})",
        "doc": "var users = [\n  { 'user': 'barney',  'active': true },\n  { 'user': 'fred',    'active': false },\n  { 'user': 'pebbles', 'active': false }\n];\n\n_.takeRightWhile(users, function(o) { return !o.active; });\n// => objects for ['fred', 'pebbles']\n\n// The `_.matches` iteratee shorthand.\n_.takeRightWhile(users, { 'user': 'pebbles', 'active': false });\n// => objects for ['pebbles']\n\n// The `_.matchesProperty` iteratee shorthand.\n_.takeRightWhile(users, ['active', false]);\n// => objects for ['fred', 'pebbles']\n\n// The `_.property` iteratee shorthand.\n_.takeRightWhile(users, 'active');\n// => []\n\nCreates a slice of `array` with elements taken from the end. Elements are\ntaken until `predicate` returns falsey. The predicate is invoked with\nthree arguments: (value, index, array).",
        "grammar": "lsp",
        "label": "lodash-takerightwhile",
        "matches": {
          "lodash takerightwhile": true
        },
        "opts": {}
      },
      {
        "content": "_.takeWhile(${array}, ${predicate})",
        "doc": "var users = [\n  { 'user': 'barney',  'active': false },\n  { 'user': 'fred',    'active': false },\n  { 'user': 'pebbles', 'active': true }\n];\n\n_.takeWhile(users, function(o) { return !o.active; });\n// => objects for ['barney', 'fred']\n\n// The `_.matches` iteratee shorthand.\n_.takeWhile(users, { 'user': 'barney', 'active': false });\n// => objects for ['barney']\n\n// The `_.matchesProperty` iteratee shorthand.\n_.takeWhile(users, ['active', false]);\n// => objects for ['barney', 'fred']\n\n// The `_.property` iteratee shorthand.\n_.takeWhile(users, 'active');\n// => []\n\nCreates a slice of `array` with elements taken from the beginning. Elements\nare taken until `predicate` returns falsey. The predicate is invoked with\nthree arguments: (value, index, array).",
        "grammar": "lsp",
        "label": "lodash-takewhile",
        "matches": {
          "lodash takewhile": true
        },
        "opts": {}
      },
      {
        "content": "_.union(${arrays})",
        "doc": "_.union([2], [1, 2]);\n// => [2, 1]\n\nCreates an array of unique values, in order, from all given arrays using\n[`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\nfor equality comparisons.",
        "grammar": "lsp",
        "label": "lodash-union",
        "matches": {
          "lodash union": true
        },
        "opts": {}
      },
      {
        "content": "_.unionBy(${arrays}, ${iteratee})",
        "doc": "_.unionBy([2.1], [1.2, 2.3], Math.floor);\n// => [2.1, 1.2]\n\n// The `_.property` iteratee shorthand.\n_.unionBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');\n// => [{ 'x': 1 }, { 'x': 2 }]\n\nThis method is like `_.union` except that it accepts `iteratee` which is\ninvoked for each element of each `arrays` to generate the criterion by\nwhich uniqueness is computed. Result values are chosen from the first\narray in which the value occurs. The iteratee is invoked with one argument:\n(value).",
        "grammar": "lsp",
        "label": "lodash-unionby",
        "matches": {
          "lodash unionby": true
        },
        "opts": {}
      },
      {
        "content": "_.unionWith(${arrays}, ${comparator})",
        "doc": "var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];\nvar others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];\n\n_.unionWith(objects, others, _.isEqual);\n// => [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }, { 'x': 1, 'y': 1 }]\n\nThis method is like `_.union` except that it accepts `comparator` which\nis invoked to compare elements of `arrays`. Result values are chosen from\nthe first array in which the value occurs. The comparator is invoked\nwith two arguments: (arrVal, othVal).",
        "grammar": "lsp",
        "label": "lodash-unionwith",
        "matches": {
          "lodash unionwith": true
        },
        "opts": {}
      },
      {
        "content": "_.uniq(${array})",
        "doc": "_.uniq([2, 1, 2]);\n// => [2, 1]\n\nCreates a duplicate-free version of an array, using\n[`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\nfor equality comparisons, in which only the first occurrence of each element\nis kept. The order of result values is determined by the order they occur\nin the array.",
        "grammar": "lsp",
        "label": "lodash-uniq",
        "matches": {
          "lodash uniq": true
        },
        "opts": {}
      },
      {
        "content": "_.uniqBy(${array}, ${iteratee})",
        "doc": "_.uniqBy([2.1, 1.2, 2.3], Math.floor);\n// => [2.1, 1.2]\n\n// The `_.property` iteratee shorthand.\n_.uniqBy([{ 'x': 1 }, { 'x': 2 }, { 'x': 1 }], 'x');\n// => [{ 'x': 1 }, { 'x': 2 }]\n\nThis method is like `_.uniq` except that it accepts `iteratee` which is\ninvoked for each element in `array` to generate the criterion by which\nuniqueness is computed. The order of result values is determined by the\norder they occur in the array. The iteratee is invoked with one argument:\n(value).",
        "grammar": "lsp",
        "label": "lodash-uniqby",
        "matches": {
          "lodash uniqby": true
        },
        "opts": {}
      },
      {
        "content": "_.uniqWith(${array}, ${comparator})",
        "doc": "var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }, { 'x': 1, 'y': 2 }];\n\n_.uniqWith(objects, _.isEqual);\n// => [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }]\n\nThis method is like `_.uniq` except that it accepts `comparator` which\nis invoked to compare elements of `array`. The order of result values is\ndetermined by the order they occur in the array.The comparator is invoked\nwith two arguments: (arrVal, othVal).",
        "grammar": "lsp",
        "label": "lodash-uniqwith",
        "matches": {
          "lodash uniqwith": true
        },
        "opts": {}
      },
      {
        "content": "_.unzip(${array})",
        "doc": "var zipped = _.zip(['a', 'b'], [1, 2], [true, false]);\n// => [['a', 1, true], ['b', 2, false]]\n\n_.unzip(zipped);\n// => [['a', 'b'], [1, 2], [true, false]]\n\nThis method is like `_.zip` except that it accepts an array of grouped\nelements and creates an array regrouping the elements to their pre-zip\nconfiguration.",
        "grammar": "lsp",
        "label": "lodash-unzip",
        "matches": {
          "lodash unzip": true
        },
        "opts": {}
      },
      {
        "content": "_.unzipWith(${array}, ${iteratee})",
        "doc": "var zipped = _.zip([1, 2], [10, 20], [100, 200]);\n// => [[1, 10, 100], [2, 20, 200]]\n\n_.unzipWith(zipped, _.add);\n// => [3, 30, 300]\n\nThis method is like `_.unzip` except that it accepts `iteratee` to specify\nhow regrouped values should be combined. The iteratee is invoked with the\nelements of each group: (...group).",
        "grammar": "lsp",
        "label": "lodash-unzipwith",
        "matches": {
          "lodash unzipwith": true
        },
        "opts": {}
      },
      {
        "content": "_.without(${array}, ${values})",
        "doc": "_.without([2, 1, 2, 3], 1, 2);\n// => [3]\n\nCreates an array excluding all given values using\n[`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\nfor equality comparisons.\n\n**Note:** Unlike `_.pull`, this method returns a new array.",
        "grammar": "lsp",
        "label": "lodash-without",
        "matches": {
          "lodash without": true
        },
        "opts": {}
      },
      {
        "content": "_.xor(${arrays})",
        "doc": "_.xor([2, 1], [2, 3]);\n// => [1, 3]\n\nCreates an array of unique values that is the\n[symmetric difference](https://en.wikipedia.org/wiki/Symmetric_difference)\nof the given arrays. The order of result values is determined by the order\nthey occur in the arrays.",
        "grammar": "lsp",
        "label": "lodash-xor",
        "matches": {
          "lodash xor": true
        },
        "opts": {}
      },
      {
        "content": "_.xorBy(${arrays}, ${iteratee})",
        "doc": "_.xorBy([2.1, 1.2], [2.3, 3.4], Math.floor);\n// => [1.2, 3.4]\n\n// The `_.property` iteratee shorthand.\n_.xorBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');\n// => [{ 'x': 2 }]\n\nThis method is like `_.xor` except that it accepts `iteratee` which is\ninvoked for each element of each `arrays` to generate the criterion by\nwhich by which they're compared. The order of result values is determined\nby the order they occur in the arrays. The iteratee is invoked with one\nargument: (value).",
        "grammar": "lsp",
        "label": "lodash-xorby",
        "matches": {
          "lodash xorby": true
        },
        "opts": {}
      },
      {
        "content": "_.xorWith(${arrays}, ${comparator})",
        "doc": "var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];\nvar others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];\n\n_.xorWith(objects, others, _.isEqual);\n// => [{ 'x': 2, 'y': 1 }, { 'x': 1, 'y': 1 }]\n\nThis method is like `_.xor` except that it accepts `comparator` which is\ninvoked to compare elements of `arrays`. The order of result values is\ndetermined by the order they occur in the arrays. The comparator is invoked\nwith two arguments: (arrVal, othVal).",
        "grammar": "lsp",
        "label": "lodash-xorwith",
        "matches": {
          "lodash xorwith": true
        },
        "opts": {}
      },
      {
        "content": "_.zip(${arrays})",
        "doc": "_.zip(['a', 'b'], [1, 2], [true, false]);\n// => [['a', 1, true], ['b', 2, false]]\n\nCreates an array of grouped elements, the first of which contains the\nfirst elements of the given arrays, the second of which contains the\nsecond elements of the given arrays, and so on.",
        "grammar": "lsp",
        "label": "lodash-zip",
        "matches": {
          "lodash zip": true
        },
        "opts": {}
      },
      {
        "content": "_.zipObject(${props}, ${values})",
        "doc": "_.zipObject(['a', 'b'], [1, 2]);\n// => { 'a': 1, 'b': 2 }\n\nThis method is like `_.fromPairs` except that it accepts two arrays,\none of property identifiers and one of corresponding values.",
        "grammar": "lsp",
        "label": "lodash-zipobject",
        "matches": {
          "lodash zipobject": true
        },
        "opts": {}
      },
      {
        "content": "_.zipObjectDeep(${props}, ${values})",
        "doc": "_.zipObjectDeep(['a.b[0].c', 'a.b[1].d'], [1, 2]);\n// => { 'a': { 'b': [{ 'c': 1 }, { 'd': 2 }] } }\n\nThis method is like `_.zipObject` except that it supports property paths.",
        "grammar": "lsp",
        "label": "lodash-zipobjectdeep",
        "matches": {
          "lodash zipobjectdeep": true
        },
        "opts": {}
      },
      {
        "content": "_.zipWith(${arrays}, ${iteratee})",
        "doc": "_.zipWith([1, 2], [10, 20], [100, 200], function(a, b, c) {\n  return a + b + c;\n});\n// => [1, 222]\n\nThis method is like `_.zip` except that it accepts `iteratee` to specify\nhow grouped values should be combined. The iteratee is invoked with the\nelements of each group: (...group).",
        "grammar": "lsp",
        "label": "lodash-zipwith",
        "matches": {
          "lodash zipwith": true
        },
        "opts": {}
      },
      {
        "content": "_.chain()",
        "doc": "var users = [\n  { 'user': 'barney', 'age': 36 },\n  { 'user': 'fred',   'age': 40 }\n];\n\n// A sequence without explicit chaining.\n_(users).head();\n// => { 'user': 'barney', 'age': 36 }\n\n// A sequence with explicit chaining.\n_(users)\n  .chain()\n  .head()\n  .pick('user')\n  .value();\n// => { 'user': 'barney' }\n\nCreates a `lodash` wrapper instance with explicit method chain sequences enabled.",
        "grammar": "lsp",
        "label": "lodash-chain",
        "matches": {
          "lodash chain": true
        },
        "opts": {}
      },
      {
        "content": "_.tap(${value}, ${interceptor})",
        "doc": "_([1, 2, 3])\n .tap(function(array) {\n   // Mutate input array.\n   array.pop();\n })\n .reverse()\n .value();\n// => [2, 1]\n\nThis method invokes `interceptor` and returns `value`. The interceptor\nis invoked with one argument; (value). The purpose of this method is to\n\"tap into\" a method chain sequence in order to modify intermediate results.",
        "grammar": "lsp",
        "label": "lodash-tap",
        "matches": {
          "lodash tap": true
        },
        "opts": {}
      },
      {
        "content": "_.thru(${value}, ${interceptor})",
        "doc": "_('  abc  ')\n .chain()\n .trim()\n .thru(function(value) {\n   return [value];\n })\n .value();\n// => ['abc']\n\nThis method is like `_.tap` except that it returns the result of `interceptor`.\nThe purpose of this method is to \"pass thru\" values replacing intermediate\nresults in a method chain sequence.",
        "grammar": "lsp",
        "label": "lodash-thru",
        "matches": {
          "lodash thru": true
        },
        "opts": {}
      },
      {
        "content": "_.at(${object}, ${paths})",
        "doc": "var object = { 'a': [{ 'b': { 'c': 3 } }, 4] };\n\n_.at(object, ['a[0].b.c', 'a[1]']);\n// => [3, 4]\n\nCreates an array of values corresponding to `paths` of `object`.",
        "grammar": "lsp",
        "label": "lodash-at",
        "matches": {
          "lodash at": true
        },
        "opts": {}
      },
      {
        "content": "_.commit()",
        "doc": "var array = [1, 2];\nvar wrapped = _(array).push(3);\n\nconsole.log(array);\n// => [1, 2]\n\nwrapped = wrapped.commit();\nconsole.log(array);\n// => [1, 2, 3]\n\nwrapped.last();\n// => 3\n\nconsole.log(array);\n// => [1, 2, 3]\n\nExecutes the chain sequence and returns the wrapped result.",
        "grammar": "lsp",
        "label": "lodash-commit",
        "matches": {
          "lodash commit": true
        },
        "opts": {}
      },
      {
        "content": "_.next()",
        "doc": "var wrapped = _([1, 2]);\n\nwrapped.next();\n// => { 'done': false, 'value': 1 }\n\nwrapped.next();\n// => { 'done': false, 'value': 2 }\n\nwrapped.next();\n// => { 'done': true, 'value': undefined }\n\nGets the next value on a wrapped object following the\n[iterator protocol](https://mdn.io/iteration_protocols#iterator).",
        "grammar": "lsp",
        "label": "lodash-next",
        "matches": {
          "lodash next": true
        },
        "opts": {}
      },
      {
        "content": "_.plant(${value})",
        "doc": "function square(n) {\n  return n * n;\n}\n\nvar wrapped = _([1, 2]).map(square);\nvar other = wrapped.plant([3, 4]);\n\nother.value();\n// => [9, 16]\n\nwrapped.value();\n// => [1, 4]\n\nCreates a clone of the chain sequence planting `value` as the wrapped value.",
        "grammar": "lsp",
        "label": "lodash-plant",
        "matches": {
          "lodash plant": true
        },
        "opts": {}
      },
      {
        "content": "_.value()",
        "doc": "_([1, 2, 3]).value();\n// => [1, 2, 3]\n\nExecutes the chain sequence to resolve the unwrapped value.",
        "grammar": "lsp",
        "label": "lodash-value",
        "matches": {
          "lodash value": true
        },
        "opts": {}
      },
      {
        "content": "_.countBy(${collection}, ${iteratee})",
        "doc": "_.countBy([6.1, 4.2, 6.3], Math.floor);\n// => { '4': 1, '6': 2 }\n\n// The `_.property` iteratee shorthand.\n_.countBy(['one', 'two', 'three'], 'length');\n// => { '3': 2, '5': 1 }\n\nCreates an object composed of keys generated from the results of running\neach element of `collection` thru `iteratee`. The corresponding value of\neach key is the number of times the key was returned by `iteratee`. The\niteratee is invoked with one argument: (value).",
        "grammar": "lsp",
        "label": "lodash-countby",
        "matches": {
          "lodash countby": true
        },
        "opts": {}
      },
      {
        "content": "_.every(${collection}, ${predicate})",
        "doc": "_.every([true, 1, null, 'yes'], Boolean);\n// => false\n\nvar users = [\n  { 'user': 'barney', 'age': 36, 'active': false },\n  { 'user': 'fred',   'age': 40, 'active': false }\n];\n\n// The `_.matches` iteratee shorthand.\n_.every(users, { 'user': 'barney', 'active': false });\n// => false\n\n// The `_.matchesProperty` iteratee shorthand.\n_.every(users, ['active', false]);\n// => true\n\n// The `_.property` iteratee shorthand.\n_.every(users, 'active');\n// => false\n\nChecks if `predicate` returns truthy for **all** elements of `collection`.\nIteration is stopped once `predicate` returns falsey. The predicate is\ninvoked with three arguments: (value, index|key, collection).\n\n**Note:** This method returns `true` for\n[empty collections](https://en.wikipedia.org/wiki/Empty_set) because\n[everything is true](https://en.wikipedia.org/wiki/Vacuous_truth) of\nelements of empty collections.",
        "grammar": "lsp",
        "label": "lodash-every",
        "matches": {
          "lodash every": true
        },
        "opts": {}
      },
      {
        "content": "_.filter(${collection}, ${predicate})",
        "doc": "var users = [\n  { 'user': 'barney', 'age': 36, 'active': true },\n  { 'user': 'fred',   'age': 40, 'active': false }\n];\n\n_.filter(users, function(o) { return !o.active; });\n// => objects for ['fred']\n\n// The `_.matches` iteratee shorthand.\n_.filter(users, { 'age': 36, 'active': true });\n// => objects for ['barney']\n\n// The `_.matchesProperty` iteratee shorthand.\n_.filter(users, ['active', false]);\n// => objects for ['fred']\n\n// The `_.property` iteratee shorthand.\n_.filter(users, 'active');\n// => objects for ['barney']\n\nIterates over elements of `collection`, returning an array of all elements\n`predicate` returns truthy for. The predicate is invoked with three\narguments: (value, index|key, collection).\n\n**Note:** Unlike `_.remove`, this method returns a new array.",
        "grammar": "lsp",
        "label": "lodash-filter",
        "matches": {
          "lodash filter": true
        },
        "opts": {}
      },
      {
        "content": "_.find(${collection}, ${predicate}, ${fromIndex})",
        "doc": "var users = [\n  { 'user': 'barney',  'age': 36, 'active': true },\n  { 'user': 'fred',    'age': 40, 'active': false },\n  { 'user': 'pebbles', 'age': 1,  'active': true }\n];\n\n_.find(users, function(o) { return o.age < 40; });\n// => object for 'barney'\n\n// The `_.matches` iteratee shorthand.\n_.find(users, { 'age': 1, 'active': true });\n// => object for 'pebbles'\n\n// The `_.matchesProperty` iteratee shorthand.\n_.find(users, ['active', false]);\n// => object for 'fred'\n\n// The `_.property` iteratee shorthand.\n_.find(users, 'active');\n// => object for 'barney'\n\nIterates over elements of `collection`, returning the first element\n`predicate` returns truthy for. The predicate is invoked with three\narguments: (value, index|key, collection).",
        "grammar": "lsp",
        "label": "lodash-find",
        "matches": {
          "lodash find": true
        },
        "opts": {}
      },
      {
        "content": "_.findLast(${collection}, ${predicate}, ${fromIndex})",
        "doc": "_.findLast([1, 2, 3, 4], function(n) {\n  return n % 2 == 1;\n});\n// => 3\n\nThis method is like `_.find` except that it iterates over elements of\n`collection` from right to left.",
        "grammar": "lsp",
        "label": "lodash-findlast",
        "matches": {
          "lodash findlast": true
        },
        "opts": {}
      },
      {
        "content": "_.flatMap(${collection}, ${iteratee})",
        "doc": "function duplicate(n) {\n  return [n, n];\n}\n\n_.flatMap([1, 2], duplicate);\n// => [1, 1, 2, 2]\n\nCreates a flattened array of values by running each element in `collection`\nthru `iteratee` and flattening the mapped results. The iteratee is invoked\nwith three arguments: (value, index|key, collection).",
        "grammar": "lsp",
        "label": "lodash-flatmap",
        "matches": {
          "lodash flatmap": true
        },
        "opts": {}
      },
      {
        "content": "_.flatMapDeep(${collection}, ${iteratee})",
        "doc": "function duplicate(n) {\n  return [[[n, n]]];\n}\n\n_.flatMapDeep([1, 2], duplicate);\n// => [1, 1, 2, 2]\n\nThis method is like `_.flatMap` except that it recursively flattens the\nmapped results.",
        "grammar": "lsp",
        "label": "lodash-flatmapdeep",
        "matches": {
          "lodash flatmapdeep": true
        },
        "opts": {}
      },
      {
        "content": "_.flatMapDepth(${collection}, ${iteratee}, ${depth})",
        "doc": "function duplicate(n) {\n  return [[[n, n]]];\n}\n\n_.flatMapDepth([1, 2], duplicate, 2);\n// => [[1, 1], [2, 2]]\n\nThis method is like `_.flatMap` except that it recursively flattens the\nmapped results up to `depth` times.",
        "grammar": "lsp",
        "label": "lodash-flatmapdepth",
        "matches": {
          "lodash flatmapdepth": true
        },
        "opts": {}
      },
      {
        "content": "_.each(${collection}, ${iteratee})",
        "doc": "_.forEach([1, 2], function(value) {\n  console.log(value);\n});\n// => Logs `1` then `2`.\n\n_.forEach({ 'a': 1, 'b': 2 }, function(value, key) {\n  console.log(key);\n});\n// => Logs 'a' then 'b' (iteration order is not guaranteed).\n\nIterates over elements of `collection` and invokes `iteratee` for each element.\nThe iteratee is invoked with three arguments: (value, index|key, collection).\nIteratee functions may exit iteration early by explicitly returning `false`.\n\n**Note:** As with other \"Collections\" methods, objects with a \"length\"\nproperty are iterated like arrays. To avoid this behavior use `_.forIn`\nor `_.forOwn` for object iteration.",
        "grammar": "lsp",
        "label": "lodash-each",
        "matches": {
          "lodash each": true
        },
        "opts": {}
      },
      {
        "content": "_.eachRight(${collection}, ${iteratee})",
        "doc": "_.forEachRight([1, 2], function(value) {\n  console.log(value);\n});\n// => Logs `2` then `1`.\n\nThis method is like `_.forEach` except that it iterates over elements of\n`collection` from right to left.",
        "grammar": "lsp",
        "label": "lodash-eachright",
        "matches": {
          "lodash eachright": true
        },
        "opts": {}
      },
      {
        "content": "_.groupBy(${collection}, ${iteratee})",
        "doc": "_.groupBy([6.1, 4.2, 6.3], Math.floor);\n// => { '4': [4.2], '6': [6.1, 6.3] }\n\n// The `_.property` iteratee shorthand.\n_.groupBy(['one', 'two', 'three'], 'length');\n// => { '3': ['one', 'two'], '5': ['three'] }\n\nCreates an object composed of keys generated from the results of running\neach element of `collection` thru `iteratee`. The order of grouped values\nis determined by the order they occur in `collection`. The corresponding\nvalue of each key is an array of elements responsible for generating the\nkey. The iteratee is invoked with one argument: (value).",
        "grammar": "lsp",
        "label": "lodash-groupby",
        "matches": {
          "lodash groupby": true
        },
        "opts": {}
      },
      {
        "content": "_.includes(${collection}, ${value}, ${fromIndex})",
        "doc": "_.includes([1, 2, 3], 1);\n// => true\n\n_.includes([1, 2, 3], 1, 2);\n// => false\n\n_.includes({ 'a': 1, 'b': 2 }, 1);\n// => true\n\n_.includes('abcd', 'bc');\n// => true\n\nChecks if `value` is in `collection`. If `collection` is a string, it's\nchecked for a substring of `value`, otherwise\n[`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\nis used for equality comparisons. If `fromIndex` is negative, it's used as\nthe offset from the end of `collection`.",
        "grammar": "lsp",
        "label": "lodash-includes",
        "matches": {
          "lodash includes": true
        },
        "opts": {}
      },
      {
        "content": "_.invokeMap(${collection}, ${path}, ${args})",
        "doc": "_.invokeMap([[5, 1, 7], [3, 2, 1]], 'sort');\n// => [[1, 5, 7], [1, 2, 3]]\n\n_.invokeMap([123, 456], String.prototype.split, '');\n// => [['1', '2', '3'], ['4', '5', '6']]\n\nInvokes the method at `path` of each element in `collection`, returning\nan array of the results of each invoked method. Any additional arguments\nare provided to each invoked method. If `path` is a function, it's invoked\nfor, and `this` bound to, each element in `collection`.",
        "grammar": "lsp",
        "label": "lodash-invokemap",
        "matches": {
          "lodash invokemap": true
        },
        "opts": {}
      },
      {
        "content": "_.keyBy(${collection}, ${iteratee})",
        "doc": "var array = [\n  { 'dir': 'left', 'code': 97 },\n  { 'dir': 'right', 'code': 100 }\n];\n\n_.keyBy(array, function(o) {\n  return String.fromCharCode(o.code);\n});\n// => { 'a': { 'dir': 'left', 'code': 97 }, 'd': { 'dir': 'right', 'code': 100 } }\n\n_.keyBy(array, 'dir');\n// => { 'left': { 'dir': 'left', 'code': 97 }, 'right': { 'dir': 'right', 'code': 100 } }\n\nCreates an object composed of keys generated from the results of running\neach element of `collection` thru `iteratee`. The corresponding value of\neach key is the last element responsible for generating the key. The\niteratee is invoked with one argument: (value).",
        "grammar": "lsp",
        "label": "lodash-keyby",
        "matches": {
          "lodash keyby": true
        },
        "opts": {}
      },
      {
        "content": "_.map(${collection}, ${iteratee})",
        "doc": "function square(n) {\n  return n * n;\n}\n\n_.map([4, 8], square);\n// => [16, 64]\n\n_.map({ 'a': 4, 'b': 8 }, square);\n// => [16, 64] (iteration order is not guaranteed)\n\nvar users = [\n  { 'user': 'barney' },\n  { 'user': 'fred' }\n];\n\n// The `_.property` iteratee shorthand.\n_.map(users, 'user');\n// => ['barney', 'fred']\n\nCreates an array of values by running each element in `collection` thru\n`iteratee`. The iteratee is invoked with three arguments:\n(value, index|key, collection).\n\nMany lodash methods are guarded to work as iteratees for methods like\n`_.every`, `_.filter`, `_.map`, `_.mapValues`, `_.reject`, and `_.some`.\n\nThe guarded methods are:\n`ary`, `chunk`, `curry`, `curryRight`, `drop`, `dropRight`, `every`,\n`fill`, `invert`, `parseInt`, `random`, `range`, `rangeRight`, `repeat`,\n`sampleSize`, `slice`, `some`, `sortBy`, `split`, `take`, `takeRight`,\n`template`, `trim`, `trimEnd`, `trimStart`, and `words`",
        "grammar": "lsp",
        "label": "lodash-map",
        "matches": {
          "lodash map": true
        },
        "opts": {}
      },
      {
        "content": "_.orderBy(${collection}, ${iteratees}, ${orders})",
        "doc": "var users = [\n  { 'user': 'fred',   'age': 48 },\n  { 'user': 'barney', 'age': 34 },\n  { 'user': 'fred',   'age': 40 },\n  { 'user': 'barney', 'age': 36 }\n];\n\n// Sort by `user` in ascending order and by `age` in descending order.\n_.orderBy(users, ['user', 'age'], ['asc', 'desc']);\n// => objects for [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 40]]\n\nThis method is like `_.sortBy` except that it allows specifying the sort\norders of the iteratees to sort by. If `orders` is unspecified, all values\nare sorted in ascending order. Otherwise, specify an order of \"desc\" for\ndescending or \"asc\" for ascending sort order of corresponding values.",
        "grammar": "lsp",
        "label": "lodash-orderby",
        "matches": {
          "lodash orderby": true
        },
        "opts": {}
      },
      {
        "content": "_.partition(${collection}, ${predicate})",
        "doc": "var users = [\n  { 'user': 'barney',  'age': 36, 'active': false },\n  { 'user': 'fred',    'age': 40, 'active': true },\n  { 'user': 'pebbles', 'age': 1,  'active': false }\n];\n\n_.partition(users, function(o) { return o.active; });\n// => objects for [['fred'], ['barney', 'pebbles']]\n\n// The `_.matches` iteratee shorthand.\n_.partition(users, { 'age': 1, 'active': false });\n// => objects for [['pebbles'], ['barney', 'fred']]\n\n// The `_.matchesProperty` iteratee shorthand.\n_.partition(users, ['active', false]);\n// => objects for [['barney', 'pebbles'], ['fred']]\n\n// The `_.property` iteratee shorthand.\n_.partition(users, 'active');\n// => objects for [['fred'], ['barney', 'pebbles']]\n\nCreates an array of elements split into two groups, the first of which\ncontains elements `predicate` returns truthy for, the second of which\ncontains elements `predicate` returns falsey for. The predicate is\ninvoked with one argument: (value).",
        "grammar": "lsp",
        "label": "lodash-partition",
        "matches": {
          "lodash partition": true
        },
        "opts": {}
      },
      {
        "content": "_.reduce(${collection}, ${iteratee}, ${accumulator})",
        "doc": "_.reduce([1, 2], function(sum, n) {\n  return sum + n;\n}, 0);\n// => 3\n\n_.reduce({ 'a': 1, 'b': 2, 'c': 1 }, function(result, value, key) {\n  (result[value] || (result[value] = [])).push(key);\n  return result;\n}, {});\n// => { '1': ['a', 'c'], '2': ['b'] } (iteration order is not guaranteed)\n\nReduces `collection` to a value which is the accumulated result of running\neach element in `collection` thru `iteratee`, where each successive\ninvocation is supplied the return value of the previous. If `accumulator`\nis not given, the first element of `collection` is used as the initial\nvalue. The iteratee is invoked with four arguments:\n(accumulator, value, index|key, collection).\n\nMany lodash methods are guarded to work as iteratees for methods like\n`_.reduce`, `_.reduceRight`, and `_.transform`.\n\nThe guarded methods are:\n`assign`, `defaults`, `defaultsDeep`, `includes`, `merge`, `orderBy`,\nand `sortBy`",
        "grammar": "lsp",
        "label": "lodash-reduce",
        "matches": {
          "lodash reduce": true
        },
        "opts": {}
      },
      {
        "content": "_.reduceRight(${collection}, ${iteratee}, ${accumulator})",
        "doc": "var array = [[0, 1], [2, 3], [4, 5]];\n\n_.reduceRight(array, function(flattened, other) {\n  return flattened.concat(other);\n}, []);\n// => [4, 5, 2, 3, 0, 1]\n\nThis method is like `_.reduce` except that it iterates over elements of\n`collection` from right to left.",
        "grammar": "lsp",
        "label": "lodash-reduceright",
        "matches": {
          "lodash reduceright": true
        },
        "opts": {}
      },
      {
        "content": "_.reject(${collection}, ${predicate})",
        "doc": "var users = [\n  { 'user': 'barney', 'age': 36, 'active': false },\n  { 'user': 'fred',   'age': 40, 'active': true }\n];\n\n_.reject(users, function(o) { return !o.active; });\n// => objects for ['fred']\n\n// The `_.matches` iteratee shorthand.\n_.reject(users, { 'age': 40, 'active': true });\n// => objects for ['barney']\n\n// The `_.matchesProperty` iteratee shorthand.\n_.reject(users, ['active', false]);\n// => objects for ['fred']\n\n// The `_.property` iteratee shorthand.\n_.reject(users, 'active');\n// => objects for ['barney']\n\nThe opposite of `_.filter`; this method returns the elements of `collection`\nthat `predicate` does **not** return truthy for.",
        "grammar": "lsp",
        "label": "lodash-reject",
        "matches": {
          "lodash reject": true
        },
        "opts": {}
      },
      {
        "content": "_.sample(${collection})",
        "doc": "_.sample([1, 2, 3, 4]);\n// => 2\n\nGets a random element from `collection`.",
        "grammar": "lsp",
        "label": "lodash-sample",
        "matches": {
          "lodash sample": true
        },
        "opts": {}
      },
      {
        "content": "_.sampleSize(${collection}, ${n})",
        "doc": "_.sampleSize([1, 2, 3], 2);\n// => [3, 1]\n\n_.sampleSize([1, 2, 3], 4);\n// => [2, 3, 1]\n\nGets `n` random elements at unique keys from `collection` up to the\nsize of `collection`.",
        "grammar": "lsp",
        "label": "lodash-samplesize",
        "matches": {
          "lodash samplesize": true
        },
        "opts": {}
      },
      {
        "content": "_.shuffle(${collection})",
        "doc": "_.shuffle([1, 2, 3, 4]);\n// => [4, 1, 3, 2]\n\nCreates an array of shuffled values, using a version of the\n[Fisher-Yates shuffle](https://en.wikipedia.org/wiki/Fisher-Yates_shuffle).",
        "grammar": "lsp",
        "label": "lodash-shuffle",
        "matches": {
          "lodash shuffle": true
        },
        "opts": {}
      },
      {
        "content": "_.size(${collection})",
        "doc": "_.size([1, 2, 3]);\n// => 3\n\n_.size({ 'a': 1, 'b': 2 });\n// => 2\n\n_.size('pebbles');\n// => 7\n\nGets the size of `collection` by returning its length for array-like\nvalues or the number of own enumerable string keyed properties for objects.",
        "grammar": "lsp",
        "label": "lodash-size",
        "matches": {
          "lodash size": true
        },
        "opts": {}
      },
      {
        "content": "_.some(${collection}, ${predicate})",
        "doc": "_.some([null, 0, 'yes', false], Boolean);\n// => true\n\nvar users = [\n  { 'user': 'barney', 'active': true },\n  { 'user': 'fred',   'active': false }\n];\n\n// The `_.matches` iteratee shorthand.\n_.some(users, { 'user': 'barney', 'active': false });\n// => false\n\n// The `_.matchesProperty` iteratee shorthand.\n_.some(users, ['active', false]);\n// => true\n\n// The `_.property` iteratee shorthand.\n_.some(users, 'active');\n// => true\n\nChecks if `predicate` returns truthy for **any** element of `collection`.\nIteration is stopped once `predicate` returns truthy. The predicate is\ninvoked with three arguments: (value, index|key, collection).",
        "grammar": "lsp",
        "label": "lodash-some",
        "matches": {
          "lodash some": true
        },
        "opts": {}
      },
      {
        "content": "_.sortBy(${collection}, ${iteratees})",
        "doc": "var users = [\n  { 'user': 'fred',   'age': 48 },\n  { 'user': 'barney', 'age': 36 },\n  { 'user': 'fred',   'age': 40 },\n  { 'user': 'barney', 'age': 34 }\n];\n\n_.sortBy(users, [function(o) { return o.user; }]);\n// => objects for [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 40]]\n\n_.sortBy(users, ['user', 'age']);\n// => objects for [['barney', 34], ['barney', 36], ['fred', 40], ['fred', 48]]\n\nCreates an array of elements, sorted in ascending order by the results of\nrunning each element in a collection thru each iteratee. This method\nperforms a stable sort, that is, it preserves the original sort order of\nequal elements. The iteratees are invoked with one argument: (value).",
        "grammar": "lsp",
        "label": "lodash-sortby",
        "matches": {
          "lodash sortby": true
        },
        "opts": {}
      },
      {
        "content": "_.now()",
        "doc": "_.defer(function(stamp) {\n  console.log(_.now() - stamp);\n}, _.now());\n// => Logs the number of milliseconds it took for the deferred invocation.\n\nGets the timestamp of the number of milliseconds that have elapsed since\nthe Unix epoch (1 January 1970 00:00:00 UTC).",
        "grammar": "lsp",
        "label": "lodash-now",
        "matches": {
          "lodash now": true
        },
        "opts": {}
      },
      {
        "content": "_.after(${n}, ${func})",
        "doc": "var saves = ['profile', 'settings'];\n\nvar done = _.after(saves.length, function() {\n  console.log('done saving!');\n});\n\n_.forEach(saves, function(type) {\n  asyncSave({ 'type': type, 'complete': done });\n});\n// => Logs 'done saving!' after the two async saves have completed.\n\nThe opposite of `_.before`; this method creates a function that invokes\n`func` once it's called `n` or more times.",
        "grammar": "lsp",
        "label": "lodash-after",
        "matches": {
          "lodash after": true
        },
        "opts": {}
      },
      {
        "content": "_.ary(${func}, ${n})",
        "doc": "_.map(['6', '8', '10'], _.ary(parseInt, 1));\n// => [6, 8, 10]\n\nCreates a function that invokes `func`, with up to `n` arguments,\nignoring any additional arguments.",
        "grammar": "lsp",
        "label": "lodash-ary",
        "matches": {
          "lodash ary": true
        },
        "opts": {}
      },
      {
        "content": "_.before(${n}, ${func})",
        "doc": "jQuery(element).on('click', _.before(5, addContactToList));\n// => Allows adding up to 4 contacts to the list.\n\nCreates a function that invokes `func`, with the `this` binding and arguments\nof the created function, while it's called less than `n` times. Subsequent\ncalls to the created function return the result of the last `func` invocation.",
        "grammar": "lsp",
        "label": "lodash-before",
        "matches": {
          "lodash before": true
        },
        "opts": {}
      },
      {
        "content": "_.bind(${func}, ${thisArg}, ${partials})",
        "doc": "function greet(greeting, punctuation) {\n  return greeting + ' ' + this.user + punctuation;\n}\n\nvar object = { 'user': 'fred' };\n\nvar bound = _.bind(greet, object, 'hi');\nbound('!');\n// => 'hi fred!'\n\n// Bound with placeholders.\nvar bound = _.bind(greet, object, _, '!');\nbound('hi');\n// => 'hi fred!'\n\nCreates a function that invokes `func` with the `this` binding of `thisArg`\nand `partials` prepended to the arguments it receives.\n\nThe `_.bind.placeholder` value, which defaults to `_` in monolithic builds,\nmay be used as a placeholder for partially applied arguments.\n\n**Note:** Unlike native `Function#bind`, this method doesn't set the \"length\"\nproperty of bound functions.",
        "grammar": "lsp",
        "label": "lodash-bind",
        "matches": {
          "lodash bind": true
        },
        "opts": {}
      },
      {
        "content": "_.bindKey(${object}, ${key}, ${partials})",
        "doc": "var object = {\n  'user': 'fred',\n  'greet': function(greeting, punctuation) {\n    return greeting + ' ' + this.user + punctuation;\n  }\n};\n\nvar bound = _.bindKey(object, 'greet', 'hi');\nbound('!');\n// => 'hi fred!'\n\nobject.greet = function(greeting, punctuation) {\n  return greeting + 'ya ' + this.user + punctuation;\n};\n\nbound('!');\n// => 'hiya fred!'\n\n// Bound with placeholders.\nvar bound = _.bindKey(object, 'greet', _, '!');\nbound('hi');\n// => 'hiya fred!'\n\nCreates a function that invokes the method at `object[key]` with `partials`\nprepended to the arguments it receives.\n\nThis method differs from `_.bind` by allowing bound functions to reference\nmethods that may be redefined or don't yet exist. See\n[Peter Michaux's article](http://peter.michaux.ca/articles/lazy-function-definition-pattern)\nfor more details.\n\nThe `_.bindKey.placeholder` value, which defaults to `_` in monolithic\nbuilds, may be used as a placeholder for partially applied arguments.",
        "grammar": "lsp",
        "label": "lodash-bindkey",
        "matches": {
          "lodash bindkey": true
        },
        "opts": {}
      },
      {
        "content": "_.curry(${func}, ${arity})",
        "doc": "var abc = function(a, b, c) {\n  return [a, b, c];\n};\n\nvar curried = _.curry(abc);\n\ncurried(1)(2)(3);\n// => [1, 2, 3]\n\ncurried(1, 2)(3);\n// => [1, 2, 3]\n\ncurried(1, 2, 3);\n// => [1, 2, 3]\n\n// Curried with placeholders.\ncurried(1)(_, 3)(2);\n// => [1, 2, 3]\n\nCreates a function that accepts arguments of `func` and either invokes\n`func` returning its result, if at least `arity` number of arguments have\nbeen provided, or returns a function that accepts the remaining `func`\narguments, and so on. The arity of `func` may be specified if `func.length`\nis not sufficient.\n\nThe `_.curry.placeholder` value, which defaults to `_` in monolithic builds,\nmay be used as a placeholder for provided arguments.\n\n**Note:** This method doesn't set the \"length\" property of curried functions.",
        "grammar": "lsp",
        "label": "lodash-curry",
        "matches": {
          "lodash curry": true
        },
        "opts": {}
      },
      {
        "content": "_.curryRight(${func}, ${arity})",
        "doc": "var abc = function(a, b, c) {\n  return [a, b, c];\n};\n\nvar curried = _.curryRight(abc);\n\ncurried(3)(2)(1);\n// => [1, 2, 3]\n\ncurried(2, 3)(1);\n// => [1, 2, 3]\n\ncurried(1, 2, 3);\n// => [1, 2, 3]\n\n// Curried with placeholders.\ncurried(3)(1, _)(2);\n// => [1, 2, 3]\n\nThis method is like `_.curry` except that arguments are applied to `func`\nin the manner of `_.partialRight` instead of `_.partial`.\n\nThe `_.curryRight.placeholder` value, which defaults to `_` in monolithic\nbuilds, may be used as a placeholder for provided arguments.\n\n**Note:** This method doesn't set the \"length\" property of curried functions.",
        "grammar": "lsp",
        "label": "lodash-curryright",
        "matches": {
          "lodash curryright": true
        },
        "opts": {}
      },
      {
        "content": "_.defer(${func}, ${args})",
        "doc": "_.defer(function(text) {\n  console.log(text);\n}, 'deferred');\n// => Logs 'deferred' after one millisecond.\n\nDefers invoking the `func` until the current call stack has cleared. Any\nadditional arguments are provided to `func` when it's invoked.",
        "grammar": "lsp",
        "label": "lodash-defer",
        "matches": {
          "lodash defer": true
        },
        "opts": {}
      },
      {
        "content": "_.delay(${func}, ${wait}, ${args})",
        "doc": "_.delay(function(text) {\n  console.log(text);\n}, 1000, 'later');\n// => Logs 'later' after one second.\n\nInvokes `func` after `wait` milliseconds. Any additional arguments are\nprovided to `func` when it's invoked.",
        "grammar": "lsp",
        "label": "lodash-delay",
        "matches": {
          "lodash delay": true
        },
        "opts": {}
      },
      {
        "content": "_.flip(${func})",
        "doc": "var flipped = _.flip(function() {\n  return _.toArray(arguments);\n});\n\nflipped('a', 'b', 'c', 'd');\n// => ['d', 'c', 'b', 'a']\n\nCreates a function that invokes `func` with arguments reversed.",
        "grammar": "lsp",
        "label": "lodash-flip",
        "matches": {
          "lodash flip": true
        },
        "opts": {}
      },
      {
        "content": "_.memoize(${func}, ${resolver})",
        "doc": "var object = { 'a': 1, 'b': 2 };\nvar other = { 'c': 3, 'd': 4 };\n\nvar values = _.memoize(_.values);\nvalues(object);\n// => [1, 2]\n\nvalues(other);\n// => [3, 4]\n\nobject.a = 2;\nvalues(object);\n// => [1, 2]\n\n// Modify the result cache.\nvalues.cache.set(object, ['a', 'b']);\nvalues(object);\n// => ['a', 'b']\n\n// Replace `_.memoize.Cache`.\n_.memoize.Cache = WeakMap;\n\nCreates a function that memoizes the result of `func`. If `resolver` is\nprovided, it determines the cache key for storing the result based on the\narguments provided to the memoized function. By default, the first argument\nprovided to the memoized function is used as the map cache key. The `func`\nis invoked with the `this` binding of the memoized function.\n\n**Note:** The cache is exposed as the `cache` property on the memoized\nfunction. Its creation may be customized by replacing the `_.memoize.Cache`\nconstructor with one whose instances implement the\n[`Map`](http://ecma-international.org/ecma-262/7.0/#sec-properties-of-the-map-prototype-object)\nmethod interface of `clear`, `delete`, `get`, `has`, and `set`.",
        "grammar": "lsp",
        "label": "lodash-memoize",
        "matches": {
          "lodash memoize": true
        },
        "opts": {}
      },
      {
        "content": "_.negate(${predicate})",
        "doc": "function isEven(n) {\n  return n % 2 == 0;\n}\n\n_.filter([1, 2, 3, 4, 5, 6], _.negate(isEven));\n// => [1, 3, 5]\n\nCreates a function that negates the result of the predicate `func`. The\n`func` predicate is invoked with the `this` binding and arguments of the\ncreated function.",
        "grammar": "lsp",
        "label": "lodash-negate",
        "matches": {
          "lodash negate": true
        },
        "opts": {}
      },
      {
        "content": "_.once(${func})",
        "doc": "var initialize = _.once(createApplication);\ninitialize();\ninitialize();\n// => `createApplication` is invoked once\n\nCreates a function that is restricted to invoking `func` once. Repeat calls\nto the function return the value of the first invocation. The `func` is\ninvoked with the `this` binding and arguments of the created function.",
        "grammar": "lsp",
        "label": "lodash-once",
        "matches": {
          "lodash once": true
        },
        "opts": {}
      },
      {
        "content": "_.overArgs(${func}, ${transforms})",
        "doc": "function doubled(n) {\n  return n * 2;\n}\n\nfunction square(n) {\n  return n * n;\n}\n\nvar func = _.overArgs(function(x, y) {\n  return [x, y];\n}, [square, doubled]);\n\nfunc(9, 3);\n// => [81, 6]\n\nfunc(10, 5);\n// => [100, 10]\n\nCreates a function that invokes `func` with its arguments transformed.",
        "grammar": "lsp",
        "label": "lodash-overargs",
        "matches": {
          "lodash overargs": true
        },
        "opts": {}
      },
      {
        "content": "_.partial(${func}, ${partials})",
        "doc": "function greet(greeting, name) {\n  return greeting + ' ' + name;\n}\n\nvar sayHelloTo = _.partial(greet, 'hello');\nsayHelloTo('fred');\n// => 'hello fred'\n\n// Partially applied with placeholders.\nvar greetFred = _.partial(greet, _, 'fred');\ngreetFred('hi');\n// => 'hi fred'\n\nCreates a function that invokes `func` with `partials` prepended to the\narguments it receives. This method is like `_.bind` except it does **not**\nalter the `this` binding.\n\nThe `_.partial.placeholder` value, which defaults to `_` in monolithic\nbuilds, may be used as a placeholder for partially applied arguments.\n\n**Note:** This method doesn't set the \"length\" property of partially\napplied functions.",
        "grammar": "lsp",
        "label": "lodash-partial",
        "matches": {
          "lodash partial": true
        },
        "opts": {}
      },
      {
        "content": "_.partialRight(${func}, ${partials})",
        "doc": "function greet(greeting, name) {\n  return greeting + ' ' + name;\n}\n\nvar greetFred = _.partialRight(greet, 'fred');\ngreetFred('hi');\n// => 'hi fred'\n\n// Partially applied with placeholders.\nvar sayHelloTo = _.partialRight(greet, 'hello', _);\nsayHelloTo('fred');\n// => 'hello fred'\n\nThis method is like `_.partial` except that partially applied arguments\nare appended to the arguments it receives.\n\nThe `_.partialRight.placeholder` value, which defaults to `_` in monolithic\nbuilds, may be used as a placeholder for partially applied arguments.\n\n**Note:** This method doesn't set the \"length\" property of partially\napplied functions.",
        "grammar": "lsp",
        "label": "lodash-partialright",
        "matches": {
          "lodash partialright": true
        },
        "opts": {}
      },
      {
        "content": "_.rearg(${func}, ${indexes})",
        "doc": "var rearged = _.rearg(function(a, b, c) {\n  return [a, b, c];\n}, [2, 0, 1]);\n\nrearged('b', 'c', 'a')\n// => ['a', 'b', 'c']\n\nCreates a function that invokes `func` with arguments arranged according\nto the specified `indexes` where the argument value at the first index is\nprovided as the first argument, the argument value at the second index is\nprovided as the second argument, and so on.",
        "grammar": "lsp",
        "label": "lodash-rearg",
        "matches": {
          "lodash rearg": true
        },
        "opts": {}
      },
      {
        "content": "_.rest(${func}, ${start})",
        "doc": "var say = _.rest(function(what, names) {\n  return what + ' ' + _.initial(names).join(', ') +\n    (_.size(names) > 1 ? ', & ' : '') + _.last(names);\n});\n\nsay('hello', 'fred', 'barney', 'pebbles');\n// => 'hello fred, barney, & pebbles'\n\nCreates a function that invokes `func` with the `this` binding of the\ncreated function and arguments from `start` and beyond provided as\nan array.\n\n**Note:** This method is based on the\n[rest parameter](https://mdn.io/rest_parameters).",
        "grammar": "lsp",
        "label": "lodash-rest",
        "matches": {
          "lodash rest": true
        },
        "opts": {}
      },
      {
        "content": "_.spread(${func}, ${start})",
        "doc": "var say = _.spread(function(who, what) {\n  return who + ' says ' + what;\n});\n\nsay(['fred', 'hello']);\n// => 'fred says hello'\n\nvar numbers = Promise.all([\n  Promise.resolve(40),\n  Promise.resolve(36)\n]);\n\nnumbers.then(_.spread(function(x, y) {\n  return x + y;\n}));\n// => a Promise of 76\n\nCreates a function that invokes `func` with the `this` binding of the\ncreate function and an array of arguments much like\n[`Function#apply`](http://www.ecma-international.org/ecma-262/7.0/#sec-function.prototype.apply).\n\n**Note:** This method is based on the\n[spread operator](https://mdn.io/spread_operator).",
        "grammar": "lsp",
        "label": "lodash-spread",
        "matches": {
          "lodash spread": true
        },
        "opts": {}
      },
      {
        "content": "_.unary(${func})",
        "doc": "_.map(['6', '8', '10'], _.unary(parseInt));\n// => [6, 8, 10]\n\nCreates a function that accepts up to one argument, ignoring any\nadditional arguments.",
        "grammar": "lsp",
        "label": "lodash-unary",
        "matches": {
          "lodash unary": true
        },
        "opts": {}
      },
      {
        "content": "_.wrap(${value}, ${wrapper})",
        "doc": "var p = _.wrap(_.escape, function(func, text) {\n  return '<p>' + func(text) + '</p>';\n});\n\np('fred, barney, & pebbles');\n// => '<p>fred, barney, &amp; pebbles</p>'\n\nCreates a function that provides `value` to `wrapper` as its first\nargument. Any additional arguments provided to the function are appended\nto those provided to the `wrapper`. The wrapper is invoked with the `this`\nbinding of the created function.",
        "grammar": "lsp",
        "label": "lodash-wrap",
        "matches": {
          "lodash wrap": true
        },
        "opts": {}
      },
      {
        "content": "_.castArray(${value})",
        "doc": "_.castArray(1);\n// => [1]\n\n_.castArray({ 'a': 1 });\n// => [{ 'a': 1 }]\n\n_.castArray('abc');\n// => ['abc']\n\n_.castArray(null);\n// => [null]\n\n_.castArray(undefined);\n// => [undefined]\n\n_.castArray();\n// => []\n\nvar array = [1, 2, 3];\nconsole.log(_.castArray(array) === array);\n// => true\n\nCasts `value` as an array if it's not one.",
        "grammar": "lsp",
        "label": "lodash-castarray",
        "matches": {
          "lodash castarray": true
        },
        "opts": {}
      },
      {
        "content": "_.clone(${value})",
        "doc": "var objects = [{ 'a': 1 }, { 'b': 2 }];\n\nvar shallow = _.clone(objects);\nconsole.log(shallow[0] === objects[0]);\n// => true\n\nCreates a shallow clone of `value`.\n\n**Note:** This method is loosely based on the\n[structured clone algorithm](https://mdn.io/Structured_clone_algorithm)\nand supports cloning arrays, array buffers, booleans, date objects, maps,\nnumbers, `Object` objects, regexes, sets, strings, symbols, and typed\narrays. The own enumerable properties of `arguments` objects are cloned\nas plain objects. An empty object is returned for uncloneable values such\nas error objects, functions, DOM nodes, and WeakMaps.",
        "grammar": "lsp",
        "label": "lodash-clone",
        "matches": {
          "lodash clone": true
        },
        "opts": {}
      },
      {
        "content": "_.cloneWith(${value}, ${customizer})",
        "doc": "function customizer(value) {\n  if (_.isElement(value)) {\n    return value.cloneNode(false);\n  }\n}\n\nvar el = _.cloneWith(document.body, customizer);\n\nconsole.log(el === document.body);\n// => false\nconsole.log(el.nodeName);\n// => 'BODY'\nconsole.log(el.childNodes.length);\n// => 0\n\nThis method is like `_.clone` except that it accepts `customizer` which\nis invoked to produce the cloned value. If `customizer` returns `undefined`,\ncloning is handled by the method instead. The `customizer` is invoked with\nup to four arguments; (value [, index|key, object, stack]).",
        "grammar": "lsp",
        "label": "lodash-clonewith",
        "matches": {
          "lodash clonewith": true
        },
        "opts": {}
      },
      {
        "content": "_.cloneDeep(${value})",
        "doc": "var objects = [{ 'a': 1 }, { 'b': 2 }];\n\nvar deep = _.cloneDeep(objects);\nconsole.log(deep[0] === objects[0]);\n// => false\n\nThis method is like `_.clone` except that it recursively clones `value`.",
        "grammar": "lsp",
        "label": "lodash-clonedeep",
        "matches": {
          "lodash clonedeep": true
        },
        "opts": {}
      },
      {
        "content": "_.cloneDeepWith(${value}, ${customizer})",
        "doc": "function customizer(value) {\n  if (_.isElement(value)) {\n    return value.cloneNode(true);\n  }\n}\n\nvar el = _.cloneDeepWith(document.body, customizer);\n\nconsole.log(el === document.body);\n// => false\nconsole.log(el.nodeName);\n// => 'BODY'\nconsole.log(el.childNodes.length);\n// => 20\n\nThis method is like `_.cloneWith` except that it recursively clones `value`.",
        "grammar": "lsp",
        "label": "lodash-clonedeepwith",
        "matches": {
          "lodash clonedeepwith": true
        },
        "opts": {}
      },
      {
        "content": "_.conformsTo(${object}, ${source})",
        "doc": "var object = { 'a': 1, 'b': 2 };\n\n_.conformsTo(object, { 'b': function(n) { return n > 1; } });\n// => true\n\n_.conformsTo(object, { 'b': function(n) { return n > 2; } });\n// => false\n\nChecks if `object` conforms to `source` by invoking the predicate\nproperties of `source` with the corresponding property values of `object`.\n\n**Note:** This method is equivalent to `_.conforms` when `source` is\npartially applied.",
        "grammar": "lsp",
        "label": "lodash-conformsto",
        "matches": {
          "lodash conformsto": true
        },
        "opts": {}
      },
      {
        "content": "_.eq(${value}, ${other})",
        "doc": "var object = { 'a': 1 };\nvar other = { 'a': 1 };\n\n_.eq(object, object);\n// => true\n\n_.eq(object, other);\n// => false\n\n_.eq('a', 'a');\n// => true\n\n_.eq('a', Object('a'));\n// => false\n\n_.eq(NaN, NaN);\n// => true\n\nPerforms a\n[`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\ncomparison between two values to determine if they are equivalent.",
        "grammar": "lsp",
        "label": "lodash-eq",
        "matches": {
          "lodash eq": true
        },
        "opts": {}
      },
      {
        "content": "_.gt(${value}, ${other})",
        "doc": "_.gt(3, 1);\n// => true\n\n_.gt(3, 3);\n// => false\n\n_.gt(1, 3);\n// => false\n\nChecks if `value` is greater than `other`.",
        "grammar": "lsp",
        "label": "lodash-gt",
        "matches": {
          "lodash gt": true
        },
        "opts": {}
      },
      {
        "content": "_.gte(${value}, ${other})",
        "doc": "_.gte(3, 1);\n// => true\n\n_.gte(3, 3);\n// => true\n\n_.gte(1, 3);\n// => false\n\nChecks if `value` is greater than or equal to `other`.",
        "grammar": "lsp",
        "label": "lodash-gte",
        "matches": {
          "lodash gte": true
        },
        "opts": {}
      },
      {
        "content": "_.isArguments(${value})",
        "doc": "_.isArguments(function() { return arguments; }());\n// => true\n\n_.isArguments([1, 2, 3]);\n// => false\n\nChecks if `value` is likely an `arguments` object.",
        "grammar": "lsp",
        "label": "lodash-isarguments",
        "matches": {
          "lodash isarguments": true
        },
        "opts": {}
      },
      {
        "content": "_.isArray(${value})",
        "doc": "_.isArray([1, 2, 3]);\n// => true\n\n_.isArray(document.body.children);\n// => false\n\n_.isArray('abc');\n// => false\n\n_.isArray(_.noop);\n// => false\n\nChecks if `value` is classified as an `Array` object.",
        "grammar": "lsp",
        "label": "lodash-isarray",
        "matches": {
          "lodash isarray": true
        },
        "opts": {}
      },
      {
        "content": "_.isArrayBuffer(${value})",
        "doc": "_.isArrayBuffer(new ArrayBuffer(2));\n// => true\n\n_.isArrayBuffer(new Array(2));\n// => false\n\nChecks if `value` is classified as an `ArrayBuffer` object.",
        "grammar": "lsp",
        "label": "lodash-isarraybuffer",
        "matches": {
          "lodash isarraybuffer": true
        },
        "opts": {}
      },
      {
        "content": "_.isArrayLike(${value})",
        "doc": "_.isArrayLike([1, 2, 3]);\n// => true\n\n_.isArrayLike(document.body.children);\n// => true\n\n_.isArrayLike('abc');\n// => true\n\n_.isArrayLike(_.noop);\n// => false\n\nChecks if `value` is array-like. A value is considered array-like if it's\nnot a function and has a `value.length` that's an integer greater than or\nequal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.",
        "grammar": "lsp",
        "label": "lodash-isarraylike",
        "matches": {
          "lodash isarraylike": true
        },
        "opts": {}
      },
      {
        "content": "_.isArrayLikeObject(${value})",
        "doc": "_.isArrayLikeObject([1, 2, 3]);\n// => true\n\n_.isArrayLikeObject(document.body.children);\n// => true\n\n_.isArrayLikeObject('abc');\n// => false\n\n_.isArrayLikeObject(_.noop);\n// => false\n\nThis method is like `_.isArrayLike` except that it also checks if `value`\nis an object.",
        "grammar": "lsp",
        "label": "lodash-isarraylikeobject",
        "matches": {
          "lodash isarraylikeobject": true
        },
        "opts": {}
      },
      {
        "content": "_.isBoolean(${value})",
        "doc": "_.isBoolean(false);\n// => true\n\n_.isBoolean(null);\n// => false\n\nChecks if `value` is classified as a boolean primitive or object.",
        "grammar": "lsp",
        "label": "lodash-isboolean",
        "matches": {
          "lodash isboolean": true
        },
        "opts": {}
      },
      {
        "content": "_.isBuffer(${value})",
        "doc": "_.isBuffer(new Buffer(2));\n// => true\n\n_.isBuffer(new Uint8Array(2));\n// => false\n\nChecks if `value` is a buffer.",
        "grammar": "lsp",
        "label": "lodash-isbuffer",
        "matches": {
          "lodash isbuffer": true
        },
        "opts": {}
      },
      {
        "content": "_.isDate(${value})",
        "doc": "_.isDate(new Date);\n// => true\n\n_.isDate('Mon April 23 2012');\n// => false\n\nChecks if `value` is classified as a `Date` object.",
        "grammar": "lsp",
        "label": "lodash-isdate",
        "matches": {
          "lodash isdate": true
        },
        "opts": {}
      },
      {
        "content": "_.isElement(${value})",
        "doc": "_.isElement(document.body);\n// => true\n\n_.isElement('<body>');\n// => false\n\nChecks if `value` is likely a DOM element.",
        "grammar": "lsp",
        "label": "lodash-iselement",
        "matches": {
          "lodash iselement": true
        },
        "opts": {}
      },
      {
        "content": "_.isEmpty(${value})",
        "doc": "_.isEmpty(null);\n// => true\n\n_.isEmpty(true);\n// => true\n\n_.isEmpty(1);\n// => true\n\n_.isEmpty([1, 2, 3]);\n// => false\n\n_.isEmpty({ 'a': 1 });\n// => false\n\nChecks if `value` is an empty object, collection, map, or set.\n\nObjects are considered empty if they have no own enumerable string keyed\nproperties.\n\nArray-like values such as `arguments` objects, arrays, buffers, strings, or\njQuery-like collections are considered empty if they have a `length` of `0`.\nSimilarly, maps and sets are considered empty if they have a `size` of `0`.",
        "grammar": "lsp",
        "label": "lodash-isempty",
        "matches": {
          "lodash isempty": true
        },
        "opts": {}
      },
      {
        "content": "_.isEqual(${value}, ${other})",
        "doc": "var object = { 'a': 1 };\nvar other = { 'a': 1 };\n\n_.isEqual(object, other);\n// => true\n\nobject === other;\n// => false\n\nPerforms a deep comparison between two values to determine if they are\nequivalent.\n\n**Note:** This method supports comparing arrays, array buffers, booleans,\ndate objects, error objects, maps, numbers, `Object` objects, regexes,\nsets, strings, symbols, and typed arrays. `Object` objects are compared\nby their own, not inherited, enumerable properties. Functions and DOM\nnodes are compared by strict equality, i.e. `===`.",
        "grammar": "lsp",
        "label": "lodash-isequal",
        "matches": {
          "lodash isequal": true
        },
        "opts": {}
      },
      {
        "content": "_.isEqualWith(${value}, ${other}, ${customizer})",
        "doc": "function isGreeting(value) {\n  return /^h(?:i|ello)$/.test(value);\n}\n\nfunction customizer(objValue, othValue) {\n  if (isGreeting(objValue) && isGreeting(othValue)) {\n    return true;\n  }\n}\n\nvar array = ['hello', 'goodbye'];\nvar other = ['hi', 'goodbye'];\n\n_.isEqualWith(array, other, customizer);\n// => true\n\nThis method is like `_.isEqual` except that it accepts `customizer` which\nis invoked to compare values. If `customizer` returns `undefined`, comparisons\nare handled by the method instead. The `customizer` is invoked with up to\nsix arguments: (objValue, othValue [, index|key, object, other, stack]).",
        "grammar": "lsp",
        "label": "lodash-isequalwith",
        "matches": {
          "lodash isequalwith": true
        },
        "opts": {}
      },
      {
        "content": "_.isError(${value})",
        "doc": "_.isError(new Error);\n// => true\n\n_.isError(Error);\n// => false\n\nChecks if `value` is an `Error`, `EvalError`, `RangeError`, `ReferenceError`,\n`SyntaxError`, `TypeError`, or `URIError` object.",
        "grammar": "lsp",
        "label": "lodash-iserror",
        "matches": {
          "lodash iserror": true
        },
        "opts": {}
      },
      {
        "content": "_.isFinite(${value})",
        "doc": "_.isFinite(3);\n// => true\n\n_.isFinite(Number.MIN_VALUE);\n// => true\n\n_.isFinite(Infinity);\n// => false\n\n_.isFinite('3');\n// => false\n\nChecks if `value` is a finite primitive number.\n\n**Note:** This method is based on\n[`Number.isFinite`](https://mdn.io/Number/isFinite).",
        "grammar": "lsp",
        "label": "lodash-isfinite",
        "matches": {
          "lodash isfinite": true
        },
        "opts": {}
      },
      {
        "content": "_.isFunction(${value})",
        "doc": "_.isFunction(_);\n// => true\n\n_.isFunction(/abc/);\n// => false\n\nChecks if `value` is classified as a `Function` object.",
        "grammar": "lsp",
        "label": "lodash-isfunction",
        "matches": {
          "lodash isfunction": true
        },
        "opts": {}
      },
      {
        "content": "_.isInteger(${value})",
        "doc": "_.isInteger(3);\n// => true\n\n_.isInteger(Number.MIN_VALUE);\n// => false\n\n_.isInteger(Infinity);\n// => false\n\n_.isInteger('3');\n// => false\n\nChecks if `value` is an integer.\n\n**Note:** This method is based on\n[`Number.isInteger`](https://mdn.io/Number/isInteger).",
        "grammar": "lsp",
        "label": "lodash-isinteger",
        "matches": {
          "lodash isinteger": true
        },
        "opts": {}
      },
      {
        "content": "_.isLength(${value})",
        "doc": "_.isLength(3);\n// => true\n\n_.isLength(Number.MIN_VALUE);\n// => false\n\n_.isLength(Infinity);\n// => false\n\n_.isLength('3');\n// => false\n\nChecks if `value` is a valid array-like length.\n\n**Note:** This method is loosely based on\n[`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).",
        "grammar": "lsp",
        "label": "lodash-islength",
        "matches": {
          "lodash islength": true
        },
        "opts": {}
      },
      {
        "content": "_.isObject(${value})",
        "doc": "_.isObject({});\n// => true\n\n_.isObject([1, 2, 3]);\n// => true\n\n_.isObject(_.noop);\n// => true\n\n_.isObject(null);\n// => false\n\nChecks if `value` is the\n[language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)\nof `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)",
        "grammar": "lsp",
        "label": "lodash-isobject",
        "matches": {
          "lodash isobject": true
        },
        "opts": {}
      },
      {
        "content": "_.isObjectLike(${value})",
        "doc": "_.isObjectLike({});\n// => true\n\n_.isObjectLike([1, 2, 3]);\n// => true\n\n_.isObjectLike(_.noop);\n// => false\n\n_.isObjectLike(null);\n// => false\n\nChecks if `value` is object-like. A value is object-like if it's not `null`\nand has a `typeof` result of \"object\".",
        "grammar": "lsp",
        "label": "lodash-isobjectlike",
        "matches": {
          "lodash isobjectlike": true
        },
        "opts": {}
      },
      {
        "content": "_.isMap(${value})",
        "doc": "_.isMap(new Map);\n// => true\n\n_.isMap(new WeakMap);\n// => false\n\nChecks if `value` is classified as a `Map` object.",
        "grammar": "lsp",
        "label": "lodash-ismap",
        "matches": {
          "lodash ismap": true
        },
        "opts": {}
      },
      {
        "content": "_.isMatch(${object}, ${source})",
        "doc": "var object = { 'a': 1, 'b': 2 };\n\n_.isMatch(object, { 'b': 2 });\n// => true\n\n_.isMatch(object, { 'b': 1 });\n// => false\n\nPerforms a partial deep comparison between `object` and `source` to\ndetermine if `object` contains equivalent property values.\n\n**Note:** This method is equivalent to `_.matches` when `source` is\npartially applied.\n\nPartial comparisons will match empty array and empty object `source`\nvalues against any array or object value, respectively. See `_.isEqual`\nfor a list of supported value comparisons.",
        "grammar": "lsp",
        "label": "lodash-ismatch",
        "matches": {
          "lodash ismatch": true
        },
        "opts": {}
      },
      {
        "content": "_.isMatchWith(${object}, ${source}, ${customizer})",
        "doc": "function isGreeting(value) {\n  return /^h(?:i|ello)$/.test(value);\n}\n\nfunction customizer(objValue, srcValue) {\n  if (isGreeting(objValue) && isGreeting(srcValue)) {\n    return true;\n  }\n}\n\nvar object = { 'greeting': 'hello' };\nvar source = { 'greeting': 'hi' };\n\n_.isMatchWith(object, source, customizer);\n// => true\n\nThis method is like `_.isMatch` except that it accepts `customizer` which\nis invoked to compare values. If `customizer` returns `undefined`, comparisons\nare handled by the method instead. The `customizer` is invoked with five\narguments: (objValue, srcValue, index|key, object, source).",
        "grammar": "lsp",
        "label": "lodash-ismatchwith",
        "matches": {
          "lodash ismatchwith": true
        },
        "opts": {}
      },
      {
        "content": "_.isNaN(${value})",
        "doc": "_.isNaN(NaN);\n// => true\n\n_.isNaN(new Number(NaN));\n// => true\n\nisNaN(undefined);\n// => true\n\n_.isNaN(undefined);\n// => false\n\nChecks if `value` is `NaN`.\n\n**Note:** This method is based on\n[`Number.isNaN`](https://mdn.io/Number/isNaN) and is not the same as\nglobal [`isNaN`](https://mdn.io/isNaN) which returns `true` for\n`undefined` and other non-number values.",
        "grammar": "lsp",
        "label": "lodash-isnan",
        "matches": {
          "lodash isnan": true
        },
        "opts": {}
      },
      {
        "content": "_.isNative(${value})",
        "doc": "_.isNative(Array.prototype.push);\n// => true\n\n_.isNative(_);\n// => false\n\nChecks if `value` is a pristine native function.\n\n**Note:** This method can't reliably detect native functions in the presence\nof the core-js package because core-js circumvents this kind of detection.\nDespite multiple requests, the core-js maintainer has made it clear: any\nattempt to fix the detection will be obstructed. As a result, we're left\nwith little choice but to throw an error. Unfortunately, this also affects\npackages, like [babel-polyfill](https://www.npmjs.com/package/babel-polyfill),\nwhich rely on core-js.",
        "grammar": "lsp",
        "label": "lodash-isnative",
        "matches": {
          "lodash isnative": true
        },
        "opts": {}
      },
      {
        "content": "_.isNull(${value})",
        "doc": "_.isNull(null);\n// => true\n\n_.isNull(void 0);\n// => false\n\nChecks if `value` is `null`.",
        "grammar": "lsp",
        "label": "lodash-isnull",
        "matches": {
          "lodash isnull": true
        },
        "opts": {}
      },
      {
        "content": "_.isNil(${value})",
        "doc": "_.isNil(null);\n// => true\n\n_.isNil(void 0);\n// => true\n\n_.isNil(NaN);\n// => false\n\nChecks if `value` is `null` or `undefined`.",
        "grammar": "lsp",
        "label": "lodash-isnil",
        "matches": {
          "lodash isnil": true
        },
        "opts": {}
      },
      {
        "content": "_.isNumber(${value})",
        "doc": "_.isNumber(3);\n// => true\n\n_.isNumber(Number.MIN_VALUE);\n// => true\n\n_.isNumber(Infinity);\n// => true\n\n_.isNumber('3');\n// => false\n\nChecks if `value` is classified as a `Number` primitive or object.\n\n**Note:** To exclude `Infinity`, `-Infinity`, and `NaN`, which are\nclassified as numbers, use the `_.isFinite` method.",
        "grammar": "lsp",
        "label": "lodash-isnumber",
        "matches": {
          "lodash isnumber": true
        },
        "opts": {}
      },
      {
        "content": "_.isPlainObject(${value})",
        "doc": "function Foo() {\n  this.a = 1;\n}\n\n_.isPlainObject(new Foo);\n// => false\n\n_.isPlainObject([1, 2, 3]);\n// => false\n\n_.isPlainObject({ 'x': 0, 'y': 0 });\n// => true\n\n_.isPlainObject(Object.create(null));\n// => true\n\nChecks if `value` is a plain object, that is, an object created by the\n`Object` constructor or one with a `[[Prototype]]` of `null`.",
        "grammar": "lsp",
        "label": "lodash-isplainobject",
        "matches": {
          "lodash isplainobject": true
        },
        "opts": {}
      },
      {
        "content": "_.isRegExp(${value})",
        "doc": "_.isRegExp(/abc/);\n// => true\n\n_.isRegExp('/abc/');\n// => false\n\nChecks if `value` is classified as a `RegExp` object.",
        "grammar": "lsp",
        "label": "lodash-isregexp",
        "matches": {
          "lodash isregexp": true
        },
        "opts": {}
      },
      {
        "content": "_.isSafeInteger(${value})",
        "doc": "_.isSafeInteger(3);\n// => true\n\n_.isSafeInteger(Number.MIN_VALUE);\n// => false\n\n_.isSafeInteger(Infinity);\n// => false\n\n_.isSafeInteger('3');\n// => false\n\nChecks if `value` is a safe integer. An integer is safe if it's an IEEE-754\ndouble precision number which isn't the result of a rounded unsafe integer.\n\n**Note:** This method is based on\n[`Number.isSafeInteger`](https://mdn.io/Number/isSafeInteger).",
        "grammar": "lsp",
        "label": "lodash-issafeinteger",
        "matches": {
          "lodash issafeinteger": true
        },
        "opts": {}
      },
      {
        "content": "_.isSet(${value})",
        "doc": "_.isSet(new Set);\n// => true\n\n_.isSet(new WeakSet);\n// => false\n\nChecks if `value` is classified as a `Set` object.",
        "grammar": "lsp",
        "label": "lodash-isset",
        "matches": {
          "lodash isset": true
        },
        "opts": {}
      },
      {
        "content": "_.isString(${value})",
        "doc": "_.isString('abc');\n// => true\n\n_.isString(1);\n// => false\n\nChecks if `value` is classified as a `String` primitive or object.",
        "grammar": "lsp",
        "label": "lodash-isstring",
        "matches": {
          "lodash isstring": true
        },
        "opts": {}
      },
      {
        "content": "_.isSymbol(${value})",
        "doc": "_.isSymbol(Symbol.iterator);\n// => true\n\n_.isSymbol('abc');\n// => false\n\nChecks if `value` is classified as a `Symbol` primitive or object.",
        "grammar": "lsp",
        "label": "lodash-issymbol",
        "matches": {
          "lodash issymbol": true
        },
        "opts": {}
      },
      {
        "content": "_.isTypedArray(${value})",
        "doc": "_.isTypedArray(new Uint8Array);\n// => true\n\n_.isTypedArray([]);\n// => false\n\nChecks if `value` is classified as a typed array.",
        "grammar": "lsp",
        "label": "lodash-istypedarray",
        "matches": {
          "lodash istypedarray": true
        },
        "opts": {}
      },
      {
        "content": "_.isUndefined(${value})",
        "doc": "_.isUndefined(void 0);\n// => true\n\n_.isUndefined(null);\n// => false\n\nChecks if `value` is `undefined`.",
        "grammar": "lsp",
        "label": "lodash-isundefined",
        "matches": {
          "lodash isundefined": true
        },
        "opts": {}
      },
      {
        "content": "_.isWeakMap(${value})",
        "doc": "_.isWeakMap(new WeakMap);\n// => true\n\n_.isWeakMap(new Map);\n// => false\n\nChecks if `value` is classified as a `WeakMap` object.",
        "grammar": "lsp",
        "label": "lodash-isweakmap",
        "matches": {
          "lodash isweakmap": true
        },
        "opts": {}
      },
      {
        "content": "_.isWeakSet(${value})",
        "doc": "_.isWeakSet(new WeakSet);\n// => true\n\n_.isWeakSet(new Set);\n// => false\n\nChecks if `value` is classified as a `WeakSet` object.",
        "grammar": "lsp",
        "label": "lodash-isweakset",
        "matches": {
          "lodash isweakset": true
        },
        "opts": {}
      },
      {
        "content": "_.lt(${value}, ${other})",
        "doc": "_.lt(1, 3);\n// => true\n\n_.lt(3, 3);\n// => false\n\n_.lt(3, 1);\n// => false\n\nChecks if `value` is less than `other`.",
        "grammar": "lsp",
        "label": "lodash-lt",
        "matches": {
          "lodash lt": true
        },
        "opts": {}
      },
      {
        "content": "_.lte(${value}, ${other})",
        "doc": "_.lte(1, 3);\n// => true\n\n_.lte(3, 3);\n// => true\n\n_.lte(3, 1);\n// => false\n\nChecks if `value` is less than or equal to `other`.",
        "grammar": "lsp",
        "label": "lodash-lte",
        "matches": {
          "lodash lte": true
        },
        "opts": {}
      },
      {
        "content": "_.toArray(${value})",
        "doc": "_.toArray({ 'a': 1, 'b': 2 });\n// => [1, 2]\n\n_.toArray('abc');\n// => ['a', 'b', 'c']\n\n_.toArray(1);\n// => []\n\n_.toArray(null);\n// => []\n\nConverts `value` to an array.",
        "grammar": "lsp",
        "label": "lodash-toarray",
        "matches": {
          "lodash toarray": true
        },
        "opts": {}
      },
      {
        "content": "_.toFinite(${value})",
        "doc": "_.toFinite(3.2);\n// => 3.2\n\n_.toFinite(Number.MIN_VALUE);\n// => 5e-324\n\n_.toFinite(Infinity);\n// => 1.7976931348623157e+308\n\n_.toFinite('3.2');\n// => 3.2\n\nConverts `value` to a finite number.",
        "grammar": "lsp",
        "label": "lodash-tofinite",
        "matches": {
          "lodash tofinite": true
        },
        "opts": {}
      },
      {
        "content": "_.toInteger(${value})",
        "doc": "_.toInteger(3.2);\n// => 3\n\n_.toInteger(Number.MIN_VALUE);\n// => 0\n\n_.toInteger(Infinity);\n// => 1.7976931348623157e+308\n\n_.toInteger('3.2');\n// => 3\n\nConverts `value` to an integer.\n\n**Note:** This method is loosely based on\n[`ToInteger`](http://www.ecma-international.org/ecma-262/7.0/#sec-tointeger).",
        "grammar": "lsp",
        "label": "lodash-tointeger",
        "matches": {
          "lodash tointeger": true
        },
        "opts": {}
      },
      {
        "content": "_.toLength(${value})",
        "doc": "_.toLength(3.2);\n// => 3\n\n_.toLength(Number.MIN_VALUE);\n// => 0\n\n_.toLength(Infinity);\n// => 4294967295\n\n_.toLength('3.2');\n// => 3\n\nConverts `value` to an integer suitable for use as the length of an\narray-like object.\n\n**Note:** This method is based on\n[`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).",
        "grammar": "lsp",
        "label": "lodash-tolength",
        "matches": {
          "lodash tolength": true
        },
        "opts": {}
      },
      {
        "content": "_.toNumber(${value})",
        "doc": "_.toNumber(3.2);\n// => 3.2\n\n_.toNumber(Number.MIN_VALUE);\n// => 5e-324\n\n_.toNumber(Infinity);\n// => Infinity\n\n_.toNumber('3.2');\n// => 3.2\n\nConverts `value` to a number.",
        "grammar": "lsp",
        "label": "lodash-tonumber",
        "matches": {
          "lodash tonumber": true
        },
        "opts": {}
      },
      {
        "content": "_.toPlainObject(${value})",
        "doc": "function Foo() {\n  this.b = 2;\n}\n\nFoo.prototype.c = 3;\n\n_.assign({ 'a': 1 }, new Foo);\n// => { 'a': 1, 'b': 2 }\n\n_.assign({ 'a': 1 }, _.toPlainObject(new Foo));\n// => { 'a': 1, 'b': 2, 'c': 3 }\n\nConverts `value` to a plain object flattening inherited enumerable string\nkeyed properties of `value` to own properties of the plain object.",
        "grammar": "lsp",
        "label": "lodash-toplainobject",
        "matches": {
          "lodash toplainobject": true
        },
        "opts": {}
      },
      {
        "content": "_.toSafeInteger(${value})",
        "doc": "_.toSafeInteger(3.2);\n// => 3\n\n_.toSafeInteger(Number.MIN_VALUE);\n// => 0\n\n_.toSafeInteger(Infinity);\n// => 9007199254740991\n\n_.toSafeInteger('3.2');\n// => 3\n\nConverts `value` to a safe integer. A safe integer can be compared and\nrepresented correctly.",
        "grammar": "lsp",
        "label": "lodash-tosafeinteger",
        "matches": {
          "lodash tosafeinteger": true
        },
        "opts": {}
      },
      {
        "content": "_.toString(${value})",
        "doc": "_.toString(null);\n// => ''\n\n_.toString(-0);\n// => '-0'\n\n_.toString([1, 2, 3]);\n// => '1,2,3'\n\nConverts `value` to a string. An empty string is returned for `null`\nand `undefined` values. The sign of `-0` is preserved.",
        "grammar": "lsp",
        "label": "lodash-tostring",
        "matches": {
          "lodash tostring": true
        },
        "opts": {}
      },
      {
        "content": "_.assign(${object}, ${sources})",
        "doc": "function Foo() {\n  this.a = 1;\n}\n\nfunction Bar() {\n  this.c = 3;\n}\n\nFoo.prototype.b = 2;\nBar.prototype.d = 4;\n\n_.assign({ 'a': 0 }, new Foo, new Bar);\n// => { 'a': 1, 'c': 3 }\n\nAssigns own enumerable string keyed properties of source objects to the\ndestination object. Source objects are applied from left to right.\nSubsequent sources overwrite property assignments of previous sources.\n\n**Note:** This method mutates `object` and is loosely based on\n[`Object.assign`](https://mdn.io/Object/assign).",
        "grammar": "lsp",
        "label": "lodash-assign",
        "matches": {
          "lodash assign": true
        },
        "opts": {}
      },
      {
        "content": "_.extend(${object}, ${sources})",
        "doc": "function Foo() {\n  this.a = 1;\n}\n\nfunction Bar() {\n  this.c = 3;\n}\n\nFoo.prototype.b = 2;\nBar.prototype.d = 4;\n\n_.assignIn({ 'a': 0 }, new Foo, new Bar);\n// => { 'a': 1, 'b': 2, 'c': 3, 'd': 4 }\n\nThis method is like `_.assign` except that it iterates over own and\ninherited source properties.\n\n**Note:** This method mutates `object`.",
        "grammar": "lsp",
        "label": "lodash-extend",
        "matches": {
          "lodash extend": true
        },
        "opts": {}
      },
      {
        "content": "_.extendWith(${object}, ${sources}, ${customizer})",
        "doc": "function customizer(objValue, srcValue) {\n  return _.isUndefined(objValue) ? srcValue : objValue;\n}\n\nvar defaults = _.partialRight(_.assignInWith, customizer);\n\ndefaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });\n// => { 'a': 1, 'b': 2 }\n\nThis method is like `_.assignIn` except that it accepts `customizer`\nwhich is invoked to produce the assigned values. If `customizer` returns\n`undefined`, assignment is handled by the method instead. The `customizer`\nis invoked with five arguments: (objValue, srcValue, key, object, source).\n\n**Note:** This method mutates `object`.",
        "grammar": "lsp",
        "label": "lodash-extendwith",
        "matches": {
          "lodash extendwith": true
        },
        "opts": {}
      },
      {
        "content": "_.assignWith(${object}, ${sources}, ${customizer})",
        "doc": "function customizer(objValue, srcValue) {\n  return _.isUndefined(objValue) ? srcValue : objValue;\n}\n\nvar defaults = _.partialRight(_.assignWith, customizer);\n\ndefaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });\n// => { 'a': 1, 'b': 2 }\n\nThis method is like `_.assign` except that it accepts `customizer`\nwhich is invoked to produce the assigned values. If `customizer` returns\n`undefined`, assignment is handled by the method instead. The `customizer`\nis invoked with five arguments: (objValue, srcValue, key, object, source).\n\n**Note:** This method mutates `object`.",
        "grammar": "lsp",
        "label": "lodash-assignwith",
        "matches": {
          "lodash assignwith": true
        },
        "opts": {}
      },
      {
        "content": "_.create(${prototype}, ${properties})",
        "doc": "function Shape() {\n  this.x = 0;\n  this.y = 0;\n}\n\nfunction Circle() {\n  Shape.call(this);\n}\n\nCircle.prototype = _.create(Shape.prototype, {\n  'constructor': Circle\n});\n\nvar circle = new Circle;\ncircle instanceof Circle;\n// => true\n\ncircle instanceof Shape;\n// => true\n\nCreates an object that inherits from the `prototype` object. If a\n`properties` object is given, its own enumerable string keyed properties\nare assigned to the created object.",
        "grammar": "lsp",
        "label": "lodash-create",
        "matches": {
          "lodash create": true
        },
        "opts": {}
      },
      {
        "content": "_.defaults(${object}, ${sources})",
        "doc": "_.defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });\n// => { 'a': 1, 'b': 2 }\n\nAssigns own and inherited enumerable string keyed properties of source\nobjects to the destination object for all destination properties that\nresolve to `undefined`. Source objects are applied from left to right.\nOnce a property is set, additional values of the same property are ignored.\n\n**Note:** This method mutates `object`.",
        "grammar": "lsp",
        "label": "lodash-defaults",
        "matches": {
          "lodash defaults": true
        },
        "opts": {}
      },
      {
        "content": "_.defaultsDeep(${object}, ${sources})",
        "doc": "_.defaultsDeep({ 'a': { 'b': 2 } }, { 'a': { 'b': 1, 'c': 3 } });\n// => { 'a': { 'b': 2, 'c': 3 } }\n\nThis method is like `_.defaults` except that it recursively assigns\ndefault properties.\n\n**Note:** This method mutates `object`.",
        "grammar": "lsp",
        "label": "lodash-defaultsdeep",
        "matches": {
          "lodash defaultsdeep": true
        },
        "opts": {}
      },
      {
        "content": "_.findKey(${object}, ${predicate})",
        "doc": "var users = {\n  'barney':  { 'age': 36, 'active': true },\n  'fred':    { 'age': 40, 'active': false },\n  'pebbles': { 'age': 1,  'active': true }\n};\n\n_.findKey(users, function(o) { return o.age < 40; });\n// => 'barney' (iteration order is not guaranteed)\n\n// The `_.matches` iteratee shorthand.\n_.findKey(users, { 'age': 1, 'active': true });\n// => 'pebbles'\n\n// The `_.matchesProperty` iteratee shorthand.\n_.findKey(users, ['active', false]);\n// => 'fred'\n\n// The `_.property` iteratee shorthand.\n_.findKey(users, 'active');\n// => 'barney'\n\nThis method is like `_.find` except that it returns the key of the first\nelement `predicate` returns truthy for instead of the element itself.",
        "grammar": "lsp",
        "label": "lodash-findkey",
        "matches": {
          "lodash findkey": true
        },
        "opts": {}
      },
      {
        "content": "_.findLastKey(${object}, ${predicate})",
        "doc": "var users = {\n  'barney':  { 'age': 36, 'active': true },\n  'fred':    { 'age': 40, 'active': false },\n  'pebbles': { 'age': 1,  'active': true }\n};\n\n_.findLastKey(users, function(o) { return o.age < 40; });\n// => returns 'pebbles' assuming `_.findKey` returns 'barney'\n\n// The `_.matches` iteratee shorthand.\n_.findLastKey(users, { 'age': 36, 'active': true });\n// => 'barney'\n\n// The `_.matchesProperty` iteratee shorthand.\n_.findLastKey(users, ['active', false]);\n// => 'fred'\n\n// The `_.property` iteratee shorthand.\n_.findLastKey(users, 'active');\n// => 'pebbles'\n\nThis method is like `_.findKey` except that it iterates over elements of\na collection in the opposite order.",
        "grammar": "lsp",
        "label": "lodash-findlastkey",
        "matches": {
          "lodash findlastkey": true
        },
        "opts": {}
      },
      {
        "content": "_.forIn(${object}, ${iteratee})",
        "doc": "function Foo() {\n  this.a = 1;\n  this.b = 2;\n}\n\nFoo.prototype.c = 3;\n\n_.forIn(new Foo, function(value, key) {\n  console.log(key);\n});\n// => Logs 'a', 'b', then 'c' (iteration order is not guaranteed).\n\nIterates over own and inherited enumerable string keyed properties of an\nobject and invokes `iteratee` for each property. The iteratee is invoked\nwith three arguments: (value, key, object). Iteratee functions may exit\niteration early by explicitly returning `false`.",
        "grammar": "lsp",
        "label": "lodash-forin",
        "matches": {
          "lodash forin": true
        },
        "opts": {}
      },
      {
        "content": "_.forInRight(${object}, ${iteratee})",
        "doc": "function Foo() {\n  this.a = 1;\n  this.b = 2;\n}\n\nFoo.prototype.c = 3;\n\n_.forInRight(new Foo, function(value, key) {\n  console.log(key);\n});\n// => Logs 'c', 'b', then 'a' assuming `_.forIn` logs 'a', 'b', then 'c'.\n\nThis method is like `_.forIn` except that it iterates over properties of\n`object` in the opposite order.",
        "grammar": "lsp",
        "label": "lodash-forinright",
        "matches": {
          "lodash forinright": true
        },
        "opts": {}
      },
      {
        "content": "_.forOwn(${object}, ${iteratee})",
        "doc": "function Foo() {\n  this.a = 1;\n  this.b = 2;\n}\n\nFoo.prototype.c = 3;\n\n_.forOwn(new Foo, function(value, key) {\n  console.log(key);\n});\n// => Logs 'a' then 'b' (iteration order is not guaranteed).\n\nIterates over own enumerable string keyed properties of an object and\ninvokes `iteratee` for each property. The iteratee is invoked with three\narguments: (value, key, object). Iteratee functions may exit iteration\nearly by explicitly returning `false`.",
        "grammar": "lsp",
        "label": "lodash-forown",
        "matches": {
          "lodash forown": true
        },
        "opts": {}
      },
      {
        "content": "_.forOwnRight(${object}, ${iteratee})",
        "doc": "function Foo() {\n  this.a = 1;\n  this.b = 2;\n}\n\nFoo.prototype.c = 3;\n\n_.forOwnRight(new Foo, function(value, key) {\n  console.log(key);\n});\n// => Logs 'b' then 'a' assuming `_.forOwn` logs 'a' then 'b'.\n\nThis method is like `_.forOwn` except that it iterates over properties of\n`object` in the opposite order.",
        "grammar": "lsp",
        "label": "lodash-forownright",
        "matches": {
          "lodash forownright": true
        },
        "opts": {}
      },
      {
        "content": "_.functions(${object})",
        "doc": "function Foo() {\n  this.a = _.constant('a');\n  this.b = _.constant('b');\n}\n\nFoo.prototype.c = _.constant('c');\n\n_.functions(new Foo);\n// => ['a', 'b']\n\nCreates an array of function property names from own enumerable properties\nof `object`.",
        "grammar": "lsp",
        "label": "lodash-functions",
        "matches": {
          "lodash functions": true
        },
        "opts": {}
      },
      {
        "content": "_.functionsIn(${object})",
        "doc": "function Foo() {\n  this.a = _.constant('a');\n  this.b = _.constant('b');\n}\n\nFoo.prototype.c = _.constant('c');\n\n_.functionsIn(new Foo);\n// => ['a', 'b', 'c']\n\nCreates an array of function property names from own and inherited\nenumerable properties of `object`.",
        "grammar": "lsp",
        "label": "lodash-functionsin",
        "matches": {
          "lodash functionsin": true
        },
        "opts": {}
      },
      {
        "content": "_.get(${object}, ${path}, ${defaultValue})",
        "doc": "var object = { 'a': [{ 'b': { 'c': 3 } }] };\n\n_.get(object, 'a[0].b.c');\n// => 3\n\n_.get(object, ['a', '0', 'b', 'c']);\n// => 3\n\n_.get(object, 'a.b.c', 'default');\n// => 'default'\n\nGets the value at `path` of `object`. If the resolved value is\n`undefined`, the `defaultValue` is returned in its place.",
        "grammar": "lsp",
        "label": "lodash-get",
        "matches": {
          "lodash get": true
        },
        "opts": {}
      },
      {
        "content": "_.has(${object}, ${path})",
        "doc": "var object = { 'a': { 'b': 2 } };\nvar other = _.create({ 'a': _.create({ 'b': 2 }) });\n\n_.has(object, 'a');\n// => true\n\n_.has(object, 'a.b');\n// => true\n\n_.has(object, ['a', 'b']);\n// => true\n\n_.has(other, 'a');\n// => false\n\nChecks if `path` is a direct property of `object`.",
        "grammar": "lsp",
        "label": "lodash-has",
        "matches": {
          "lodash has": true
        },
        "opts": {}
      },
      {
        "content": "_.hasIn(${object}, ${path})",
        "doc": "var object = _.create({ 'a': _.create({ 'b': 2 }) });\n\n_.hasIn(object, 'a');\n// => true\n\n_.hasIn(object, 'a.b');\n// => true\n\n_.hasIn(object, ['a', 'b']);\n// => true\n\n_.hasIn(object, 'b');\n// => false\n\nChecks if `path` is a direct or inherited property of `object`.",
        "grammar": "lsp",
        "label": "lodash-hasin",
        "matches": {
          "lodash hasin": true
        },
        "opts": {}
      },
      {
        "content": "_.invert(${object})",
        "doc": "var object = { 'a': 1, 'b': 2, 'c': 1 };\n\n_.invert(object);\n// => { '1': 'c', '2': 'b' }\n\nCreates an object composed of the inverted keys and values of `object`.\nIf `object` contains duplicate values, subsequent values overwrite\nproperty assignments of previous values.",
        "grammar": "lsp",
        "label": "lodash-invert",
        "matches": {
          "lodash invert": true
        },
        "opts": {}
      },
      {
        "content": "_.invertBy(${object}, ${iteratee})",
        "doc": "var object = { 'a': 1, 'b': 2, 'c': 1 };\n\n_.invertBy(object);\n// => { '1': ['a', 'c'], '2': ['b'] }\n\n_.invertBy(object, function(value) {\n  return 'group' + value;\n});\n// => { 'group1': ['a', 'c'], 'group2': ['b'] }\n\nThis method is like `_.invert` except that the inverted object is generated\nfrom the results of running each element of `object` thru `iteratee`. The\ncorresponding inverted value of each inverted key is an array of keys\nresponsible for generating the inverted value. The iteratee is invoked\nwith one argument: (value).",
        "grammar": "lsp",
        "label": "lodash-invertby",
        "matches": {
          "lodash invertby": true
        },
        "opts": {}
      },
      {
        "content": "_.invoke(${object}, ${path}, ${args})",
        "doc": "var object = { 'a': [{ 'b': { 'c': [1, 2, 3, 4] } }] };\n\n_.invoke(object, 'a[0].b.c.slice', 1, 3);\n// => [2, 3]\n\nInvokes the method at `path` of `object`.",
        "grammar": "lsp",
        "label": "lodash-invoke",
        "matches": {
          "lodash invoke": true
        },
        "opts": {}
      },
      {
        "content": "_.keys(${object})",
        "doc": "function Foo() {\n  this.a = 1;\n  this.b = 2;\n}\n\nFoo.prototype.c = 3;\n\n_.keys(new Foo);\n// => ['a', 'b'] (iteration order is not guaranteed)\n\n_.keys('hi');\n// => ['0', '1']\n\nCreates an array of the own enumerable property names of `object`.\n\n**Note:** Non-object values are coerced to objects. See the\n[ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)\nfor more details.",
        "grammar": "lsp",
        "label": "lodash-keys",
        "matches": {
          "lodash keys": true
        },
        "opts": {}
      },
      {
        "content": "_.keysIn(${object})",
        "doc": "function Foo() {\n  this.a = 1;\n  this.b = 2;\n}\n\nFoo.prototype.c = 3;\n\n_.keysIn(new Foo);\n// => ['a', 'b', 'c'] (iteration order is not guaranteed)\n\nCreates an array of the own and inherited enumerable property names of `object`.\n\n**Note:** Non-object values are coerced to objects.",
        "grammar": "lsp",
        "label": "lodash-keysin",
        "matches": {
          "lodash keysin": true
        },
        "opts": {}
      },
      {
        "content": "_.mapKeys(${object}, ${iteratee})",
        "doc": "_.mapKeys({ 'a': 1, 'b': 2 }, function(value, key) {\n  return key + value;\n});\n// => { 'a1': 1, 'b2': 2 }\n\nThe opposite of `_.mapValues`; this method creates an object with the\nsame values as `object` and keys generated by running each own enumerable\nstring keyed property of `object` thru `iteratee`. The iteratee is invoked\nwith three arguments: (value, key, object).",
        "grammar": "lsp",
        "label": "lodash-mapkeys",
        "matches": {
          "lodash mapkeys": true
        },
        "opts": {}
      },
      {
        "content": "_.mapValues(${object}, ${iteratee})",
        "doc": "var users = {\n  'fred':    { 'user': 'fred',    'age': 40 },\n  'pebbles': { 'user': 'pebbles', 'age': 1 }\n};\n\n_.mapValues(users, function(o) { return o.age; });\n// => { 'fred': 40, 'pebbles': 1 } (iteration order is not guaranteed)\n\n// The `_.property` iteratee shorthand.\n_.mapValues(users, 'age');\n// => { 'fred': 40, 'pebbles': 1 } (iteration order is not guaranteed)\n\nCreates an object with the same keys as `object` and values generated\nby running each own enumerable string keyed property of `object` thru\n`iteratee`. The iteratee is invoked with three arguments:\n(value, key, object).",
        "grammar": "lsp",
        "label": "lodash-mapvalues",
        "matches": {
          "lodash mapvalues": true
        },
        "opts": {}
      },
      {
        "content": "_.merge(${object}, ${sources})",
        "doc": "var object = {\n  'a': [{ 'b': 2 }, { 'd': 4 }]\n};\n\nvar other = {\n  'a': [{ 'c': 3 }, { 'e': 5 }]\n};\n\n_.merge(object, other);\n// => { 'a': [{ 'b': 2, 'c': 3 }, { 'd': 4, 'e': 5 }] }\n\nThis method is like `_.assign` except that it recursively merges own and\ninherited enumerable string keyed properties of source objects into the\ndestination object. Source properties that resolve to `undefined` are\nskipped if a destination value exists. Array and plain object properties\nare merged recursively. Other objects and value types are overridden by\nassignment. Source objects are applied from left to right. Subsequent\nsources overwrite property assignments of previous sources.\n\n**Note:** This method mutates `object`.",
        "grammar": "lsp",
        "label": "lodash-merge",
        "matches": {
          "lodash merge": true
        },
        "opts": {}
      },
      {
        "content": "_.mergeWith(${object}, ${sources}, ${customizer})",
        "doc": "function customizer(objValue, srcValue) {\n  if (_.isArray(objValue)) {\n    return objValue.concat(srcValue);\n  }\n}\n\nvar object = { 'a': [1], 'b': [2] };\nvar other = { 'a': [3], 'b': [4] };\n\n_.mergeWith(object, other, customizer);\n// => { 'a': [1, 3], 'b': [2, 4] }\n\nThis method is like `_.merge` except that it accepts `customizer` which\nis invoked to produce the merged values of the destination and source\nproperties. If `customizer` returns `undefined`, merging is handled by the\nmethod instead. The `customizer` is invoked with six arguments:\n(objValue, srcValue, key, object, source, stack).\n\n**Note:** This method mutates `object`.",
        "grammar": "lsp",
        "label": "lodash-mergewith",
        "matches": {
          "lodash mergewith": true
        },
        "opts": {}
      },
      {
        "content": "_.omit(${object}, ${paths})",
        "doc": "var object = { 'a': 1, 'b': '2', 'c': 3 };\n\n_.omit(object, ['a', 'c']);\n// => { 'b': '2' }\n\nThe opposite of `_.pick`; this method creates an object composed of the\nown and inherited enumerable property paths of `object` that are not omitted.\n\n**Note:** This method is considerably slower than `_.pick`.",
        "grammar": "lsp",
        "label": "lodash-omit",
        "matches": {
          "lodash omit": true
        },
        "opts": {}
      },
      {
        "content": "_.omitBy(${object}, ${predicate})",
        "doc": "var object = { 'a': 1, 'b': '2', 'c': 3 };\n\n_.omitBy(object, _.isNumber);\n// => { 'b': '2' }\n\nThe opposite of `_.pickBy`; this method creates an object composed of\nthe own and inherited enumerable string keyed properties of `object` that\n`predicate` doesn't return truthy for. The predicate is invoked with two\narguments: (value, key).",
        "grammar": "lsp",
        "label": "lodash-omitby",
        "matches": {
          "lodash omitby": true
        },
        "opts": {}
      },
      {
        "content": "_.pick(${object}, ${paths})",
        "doc": "var object = { 'a': 1, 'b': '2', 'c': 3 };\n\n_.pick(object, ['a', 'c']);\n// => { 'a': 1, 'c': 3 }\n\nCreates an object composed of the picked `object` properties.",
        "grammar": "lsp",
        "label": "lodash-pick",
        "matches": {
          "lodash pick": true
        },
        "opts": {}
      },
      {
        "content": "_.pickBy(${object}, ${predicate})",
        "doc": "var object = { 'a': 1, 'b': '2', 'c': 3 };\n\n_.pickBy(object, _.isNumber);\n// => { 'a': 1, 'c': 3 }\n\nCreates an object composed of the `object` properties `predicate` returns\ntruthy for. The predicate is invoked with two arguments: (value, key).",
        "grammar": "lsp",
        "label": "lodash-pickby",
        "matches": {
          "lodash pickby": true
        },
        "opts": {}
      },
      {
        "content": "_.result(${object}, ${path}, ${defaultValue})",
        "doc": "var object = { 'a': [{ 'b': { 'c1': 3, 'c2': _.constant(4) } }] };\n\n_.result(object, 'a[0].b.c1');\n// => 3\n\n_.result(object, 'a[0].b.c2');\n// => 4\n\n_.result(object, 'a[0].b.c3', 'default');\n// => 'default'\n\n_.result(object, 'a[0].b.c3', _.constant('default'));\n// => 'default'\n\nThis method is like `_.get` except that if the resolved value is a\nfunction it's invoked with the `this` binding of its parent object and\nits result is returned.",
        "grammar": "lsp",
        "label": "lodash-result",
        "matches": {
          "lodash result": true
        },
        "opts": {}
      },
      {
        "content": "_.set(${object}, ${path}, ${value})",
        "doc": "var object = { 'a': [{ 'b': { 'c': 3 } }] };\n\n_.set(object, 'a[0].b.c', 4);\nconsole.log(object.a[0].b.c);\n// => 4\n\n_.set(object, ['x', '0', 'y', 'z'], 5);\nconsole.log(object.x[0].y.z);\n// => 5\n\nSets the value at `path` of `object`. If a portion of `path` doesn't exist,\nit's created. Arrays are created for missing index properties while objects\nare created for all other missing properties. Use `_.setWith` to customize\n`path` creation.\n\n**Note:** This method mutates `object`.",
        "grammar": "lsp",
        "label": "lodash-set",
        "matches": {
          "lodash set": true
        },
        "opts": {}
      },
      {
        "content": "_.setWith(${object}, ${path}, ${value}, ${customizer})",
        "doc": "var object = {};\n\n_.setWith(object, '[0][1]', 'a', Object);\n// => { '0': { '1': 'a' } }\n\nThis method is like `_.set` except that it accepts `customizer` which is\ninvoked to produce the objects of `path`.  If `customizer` returns `undefined`\npath creation is handled by the method instead. The `customizer` is invoked\nwith three arguments: (nsValue, key, nsObject).\n\n**Note:** This method mutates `object`.",
        "grammar": "lsp",
        "label": "lodash-setwith",
        "matches": {
          "lodash setwith": true
        },
        "opts": {}
      },
      {
        "content": "_.entries(${object})",
        "doc": "function Foo() {\n  this.a = 1;\n  this.b = 2;\n}\n\nFoo.prototype.c = 3;\n\n_.toPairs(new Foo);\n// => [['a', 1], ['b', 2]] (iteration order is not guaranteed)\n\nCreates an array of own enumerable string keyed-value pairs for `object`\nwhich can be consumed by `_.fromPairs`. If `object` is a map or set, its\nentries are returned.",
        "grammar": "lsp",
        "label": "lodash-entries",
        "matches": {
          "lodash entries": true
        },
        "opts": {}
      },
      {
        "content": "_.entriesIn(${object})",
        "doc": "function Foo() {\n  this.a = 1;\n  this.b = 2;\n}\n\nFoo.prototype.c = 3;\n\n_.toPairsIn(new Foo);\n// => [['a', 1], ['b', 2], ['c', 3]] (iteration order is not guaranteed)\n\nCreates an array of own and inherited enumerable string keyed-value pairs\nfor `object` which can be consumed by `_.fromPairs`. If `object` is a map\nor set, its entries are returned.",
        "grammar": "lsp",
        "label": "lodash-entriesin",
        "matches": {
          "lodash entriesin": true
        },
        "opts": {}
      },
      {
        "content": "_.transform(${object}, ${iteratee}, ${accumulator})",
        "doc": "_.transform([2, 3, 4], function(result, n) {\n  result.push(n *= n);\n  return n % 2 == 0;\n}, []);\n// => [4, 9]\n\n_.transform({ 'a': 1, 'b': 2, 'c': 1 }, function(result, value, key) {\n  (result[value] || (result[value] = [])).push(key);\n}, {});\n// => { '1': ['a', 'c'], '2': ['b'] }\n\nAn alternative to `_.reduce`; this method transforms `object` to a new\n`accumulator` object which is the result of running each of its own\nenumerable string keyed properties thru `iteratee`, with each invocation\npotentially mutating the `accumulator` object. If `accumulator` is not\nprovided, a new object with the same `[[Prototype]]` will be used. The\niteratee is invoked with four arguments: (accumulator, value, key, object).\nIteratee functions may exit iteration early by explicitly returning `false`.",
        "grammar": "lsp",
        "label": "lodash-transform",
        "matches": {
          "lodash transform": true
        },
        "opts": {}
      },
      {
        "content": "_.unset(${object}, ${path})",
        "doc": "var object = { 'a': [{ 'b': { 'c': 7 } }] };\n_.unset(object, 'a[0].b.c');\n// => true\n\nconsole.log(object);\n// => { 'a': [{ 'b': {} }] };\n\n_.unset(object, ['a', '0', 'b', 'c']);\n// => true\n\nconsole.log(object);\n// => { 'a': [{ 'b': {} }] };\n\nRemoves the property at `path` of `object`.\n\n**Note:** This method mutates `object`.",
        "grammar": "lsp",
        "label": "lodash-unset",
        "matches": {
          "lodash unset": true
        },
        "opts": {}
      },
      {
        "content": "_.update(${object}, ${path}, ${updater})",
        "doc": "var object = { 'a': [{ 'b': { 'c': 3 } }] };\n\n_.update(object, 'a[0].b.c', function(n) { return n * n; });\nconsole.log(object.a[0].b.c);\n// => 9\n\n_.update(object, 'x[0].y.z', function(n) { return n ? n + 1 : 0; });\nconsole.log(object.x[0].y.z);\n// => 0\n\nThis method is like `_.set` except that accepts `updater` to produce the\nvalue to set. Use `_.updateWith` to customize `path` creation. The `updater`\nis invoked with one argument: (value).\n\n**Note:** This method mutates `object`.",
        "grammar": "lsp",
        "label": "lodash-update",
        "matches": {
          "lodash update": true
        },
        "opts": {}
      },
      {
        "content": "_.updateWith(${object}, ${path}, ${updater}, ${customizer})",
        "doc": "var object = {};\n\n_.updateWith(object, '[0][1]', _.constant('a'), Object);\n// => { '0': { '1': 'a' } }\n\nThis method is like `_.update` except that it accepts `customizer` which is\ninvoked to produce the objects of `path`.  If `customizer` returns `undefined`\npath creation is handled by the method instead. The `customizer` is invoked\nwith three arguments: (nsValue, key, nsObject).\n\n**Note:** This method mutates `object`.",
        "grammar": "lsp",
        "label": "lodash-updatewith",
        "matches": {
          "lodash updatewith": true
        },
        "opts": {}
      },
      {
        "content": "_.values(${object})",
        "doc": "function Foo() {\n  this.a = 1;\n  this.b = 2;\n}\n\nFoo.prototype.c = 3;\n\n_.values(new Foo);\n// => [1, 2] (iteration order is not guaranteed)\n\n_.values('hi');\n// => ['h', 'i']\n\nCreates an array of the own enumerable string keyed property values of `object`.\n\n**Note:** Non-object values are coerced to objects.",
        "grammar": "lsp",
        "label": "lodash-values",
        "matches": {
          "lodash values": true
        },
        "opts": {}
      },
      {
        "content": "_.valuesIn(${object})",
        "doc": "function Foo() {\n  this.a = 1;\n  this.b = 2;\n}\n\nFoo.prototype.c = 3;\n\n_.valuesIn(new Foo);\n// => [1, 2, 3] (iteration order is not guaranteed)\n\nCreates an array of the own and inherited enumerable string keyed property\nvalues of `object`.\n\n**Note:** Non-object values are coerced to objects.",
        "grammar": "lsp",
        "label": "lodash-valuesin",
        "matches": {
          "lodash valuesin": true
        },
        "opts": {}
      },
      {
        "content": "_.clamp(${number}, ${lower}, ${upper})",
        "doc": "_.clamp(-10, -5, 5);\n// => -5\n\n_.clamp(10, -5, 5);\n// => 5\n\nClamps `number` within the inclusive `lower` and `upper` bounds.",
        "grammar": "lsp",
        "label": "lodash-clamp",
        "matches": {
          "lodash clamp": true
        },
        "opts": {}
      },
      {
        "content": "_.inRange(${number}, ${start}, ${end})",
        "doc": "_.inRange(3, 2, 4);\n// => true\n\n_.inRange(4, 8);\n// => true\n\n_.inRange(4, 2);\n// => false\n\n_.inRange(2, 2);\n// => false\n\n_.inRange(1.2, 2);\n// => true\n\n_.inRange(5.2, 4);\n// => false\n\n_.inRange(-3, -2, -6);\n// => true\n\nChecks if `n` is between `start` and up to, but not including, `end`. If\n`end` is not specified, it's set to `start` with `start` then set to `0`.\nIf `start` is greater than `end` the params are swapped to support\nnegative ranges.",
        "grammar": "lsp",
        "label": "lodash-inrange",
        "matches": {
          "lodash inrange": true
        },
        "opts": {}
      },
      {
        "content": "_.random(${lower}, ${upper}, ${floating})",
        "doc": "_.random(0, 5);\n// => an integer between 0 and 5\n\n_.random(5);\n// => also an integer between 0 and 5\n\n_.random(5, true);\n// => a floating-point number between 0 and 5\n\n_.random(1.2, 5.2);\n// => a floating-point number between 1.2 and 5.2\n\nProduces a random number between the inclusive `lower` and `upper` bounds.\nIf only one argument is provided a number between `0` and the given number\nis returned. If `floating` is `true`, or either `lower` or `upper` are\nfloats, a floating-point number is returned instead of an integer.\n\n**Note:** JavaScript follows the IEEE-754 standard for resolving\nfloating-point values which can produce unexpected results.",
        "grammar": "lsp",
        "label": "lodash-random",
        "matches": {
          "lodash random": true
        },
        "opts": {}
      },
      {
        "content": "_.camelCase(${string})",
        "doc": "_.camelCase('Foo Bar');\n// => 'fooBar'\n\n_.camelCase('--foo-bar--');\n// => 'fooBar'\n\n_.camelCase('__FOO_BAR__');\n// => 'fooBar'\n\nConverts `string` to [camel case](https://en.wikipedia.org/wiki/CamelCase).",
        "grammar": "lsp",
        "label": "lodash-camelcase",
        "matches": {
          "lodash camelcase": true
        },
        "opts": {}
      },
      {
        "content": "_.capitalize(${string})",
        "doc": "_.capitalize('FRED');\n// => 'Fred'\n\nConverts the first character of `string` to upper case and the remaining\nto lower case.",
        "grammar": "lsp",
        "label": "lodash-capitalize",
        "matches": {
          "lodash capitalize": true
        },
        "opts": {}
      },
      {
        "content": "_.deburr(${string})",
        "doc": "_.deburr('déjà vu');\n// => 'deja vu'\n\nDeburrs `string` by converting\n[Latin-1 Supplement](https://en.wikipedia.org/wiki/Latin-1_Supplement_(Unicode_block)#Character_table)\nand [Latin Extended-A](https://en.wikipedia.org/wiki/Latin_Extended-A)\nletters to basic Latin letters and removing\n[combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks).",
        "grammar": "lsp",
        "label": "lodash-deburr",
        "matches": {
          "lodash deburr": true
        },
        "opts": {}
      },
      {
        "content": "_.endsWith(${string}, ${target}, ${position})",
        "doc": "_.endsWith('abc', 'c');\n// => true\n\n_.endsWith('abc', 'b');\n// => false\n\n_.endsWith('abc', 'b', 2);\n// => true\n\nChecks if `string` ends with the given target string.",
        "grammar": "lsp",
        "label": "lodash-endswith",
        "matches": {
          "lodash endswith": true
        },
        "opts": {}
      },
      {
        "content": "_.escape(${string})",
        "doc": "_.escape('fred, barney, & pebbles');\n// => 'fred, barney, &amp; pebbles'\n\nConverts the characters \"&\", \"<\", \">\", '\"', and \"'\" in `string` to their\ncorresponding HTML entities.\n\n**Note:** No other characters are escaped. To escape additional\ncharacters use a third-party library like [_he_](https://mths.be/he).\n\nThough the \">\" character is escaped for symmetry, characters like\n\">\" and \"/\" don't need escaping in HTML and have no special meaning\nunless they're part of a tag or unquoted attribute value. See\n[Mathias Bynens's article](https://mathiasbynens.be/notes/ambiguous-ampersands)\n(under \"semi-related fun fact\") for more details.\n\nWhen working with HTML you should always\n[quote attribute values](http://wonko.com/post/html-escaping) to reduce\nXSS vectors.",
        "grammar": "lsp",
        "label": "lodash-escape",
        "matches": {
          "lodash escape": true
        },
        "opts": {}
      },
      {
        "content": "_.escapeRegExp(${string})",
        "doc": "_.escapeRegExp('[lodash](https://lodash.com/)');\n// => '\\[lodash\\]\\(https://lodash\\.com/\\)'\n\nEscapes the `RegExp` special characters \"^\", \"$\", \"\\\", \".\", \"*\", \"+\",\n\"?\", \"(\", \")\", \"[\", \"]\", \"{\", \"}\", and \"|\" in `string`.",
        "grammar": "lsp",
        "label": "lodash-escaperegexp",
        "matches": {
          "lodash escaperegexp": true
        },
        "opts": {}
      },
      {
        "content": "_.kebabCase(${string})",
        "doc": "_.kebabCase('Foo Bar');\n// => 'foo-bar'\n\n_.kebabCase('fooBar');\n// => 'foo-bar'\n\n_.kebabCase('__FOO_BAR__');\n// => 'foo-bar'\n\nConverts `string` to\n[kebab case](https://en.wikipedia.org/wiki/Letter_case#Special_case_styles).",
        "grammar": "lsp",
        "label": "lodash-kebabcase",
        "matches": {
          "lodash kebabcase": true
        },
        "opts": {}
      },
      {
        "content": "_.lowerCase(${string})",
        "doc": "_.lowerCase('--Foo-Bar--');\n// => 'foo bar'\n\n_.lowerCase('fooBar');\n// => 'foo bar'\n\n_.lowerCase('__FOO_BAR__');\n// => 'foo bar'\n\nConverts `string`, as space separated words, to lower case.",
        "grammar": "lsp",
        "label": "lodash-lowercase",
        "matches": {
          "lodash lowercase": true
        },
        "opts": {}
      },
      {
        "content": "_.lowerFirst(${string})",
        "doc": "_.lowerFirst('Fred');\n// => 'fred'\n\n_.lowerFirst('FRED');\n// => 'fRED'\n\nConverts the first character of `string` to lower case.",
        "grammar": "lsp",
        "label": "lodash-lowerfirst",
        "matches": {
          "lodash lowerfirst": true
        },
        "opts": {}
      },
      {
        "content": "_.pad(${string}, ${length}, ${chars})",
        "doc": "_.pad('abc', 8);\n// => '  abc   '\n\n_.pad('abc', 8, '_-');\n// => '_-abc_-_'\n\n_.pad('abc', 3);\n// => 'abc'\n\nPads `string` on the left and right sides if it's shorter than `length`.\nPadding characters are truncated if they can't be evenly divided by `length`.",
        "grammar": "lsp",
        "label": "lodash-pad",
        "matches": {
          "lodash pad": true
        },
        "opts": {}
      },
      {
        "content": "_.padEnd(${string}, ${length}, ${chars})",
        "doc": "_.padEnd('abc', 6);\n// => 'abc   '\n\n_.padEnd('abc', 6, '_-');\n// => 'abc_-_'\n\n_.padEnd('abc', 3);\n// => 'abc'\n\nPads `string` on the right side if it's shorter than `length`. Padding\ncharacters are truncated if they exceed `length`.",
        "grammar": "lsp",
        "label": "lodash-padend",
        "matches": {
          "lodash padend": true
        },
        "opts": {}
      },
      {
        "content": "_.padStart(${string}, ${length}, ${chars})",
        "doc": "_.padStart('abc', 6);\n// => '   abc'\n\n_.padStart('abc', 6, '_-');\n// => '_-_abc'\n\n_.padStart('abc', 3);\n// => 'abc'\n\nPads `string` on the left side if it's shorter than `length`. Padding\ncharacters are truncated if they exceed `length`.",
        "grammar": "lsp",
        "label": "lodash-padstart",
        "matches": {
          "lodash padstart": true
        },
        "opts": {}
      },
      {
        "content": "_.parseInt(${string}, ${radix})",
        "doc": "_.parseInt('08');\n// => 8\n\n_.map(['6', '08', '10'], _.parseInt);\n// => [6, 8, 10]\n\nConverts `string` to an integer of the specified radix. If `radix` is\n`undefined` or `0`, a `radix` of `10` is used unless `value` is a\nhexadecimal, in which case a `radix` of `16` is used.\n\n**Note:** This method aligns with the\n[ES5 implementation](https://es5.github.io/#x15.1.2.2) of `parseInt`.",
        "grammar": "lsp",
        "label": "lodash-parseint",
        "matches": {
          "lodash parseint": true
        },
        "opts": {}
      },
      {
        "content": "_.repeat(${string}, ${n})",
        "doc": "_.repeat('*', 3);\n// => '***'\n\n_.repeat('abc', 2);\n// => 'abcabc'\n\n_.repeat('abc', 0);\n// => ''\n\nRepeats the given string `n` times.",
        "grammar": "lsp",
        "label": "lodash-repeat",
        "matches": {
          "lodash repeat": true
        },
        "opts": {}
      },
      {
        "content": "_.replace(${string}, ${pattern}, ${replacement})",
        "doc": "_.replace('Hi Fred', 'Fred', 'Barney');\n// => 'Hi Barney'\n\nReplaces matches for `pattern` in `string` with `replacement`.\n\n**Note:** This method is based on\n[`String#replace`](https://mdn.io/String/replace).",
        "grammar": "lsp",
        "label": "lodash-replace",
        "matches": {
          "lodash replace": true
        },
        "opts": {}
      },
      {
        "content": "_.snakeCase(${string})",
        "doc": "_.snakeCase('Foo Bar');\n// => 'foo_bar'\n\n_.snakeCase('fooBar');\n// => 'foo_bar'\n\n_.snakeCase('--FOO-BAR--');\n// => 'foo_bar'\n\nConverts `string` to\n[snake case](https://en.wikipedia.org/wiki/Snake_case).",
        "grammar": "lsp",
        "label": "lodash-snakecase",
        "matches": {
          "lodash snakecase": true
        },
        "opts": {}
      },
      {
        "content": "_.split(${string}, ${separator}, ${limit})",
        "doc": "_.split('a-b-c', '-', 2);\n// => ['a', 'b']\n\nSplits `string` by `separator`.\n\n**Note:** This method is based on\n[`String#split`](https://mdn.io/String/split).",
        "grammar": "lsp",
        "label": "lodash-split",
        "matches": {
          "lodash split": true
        },
        "opts": {}
      },
      {
        "content": "_.startCase(${string})",
        "doc": "_.startCase('--foo-bar--');\n// => 'Foo Bar'\n\n_.startCase('fooBar');\n// => 'Foo Bar'\n\n_.startCase('__FOO_BAR__');\n// => 'FOO BAR'\n\nConverts `string` to\n[start case](https://en.wikipedia.org/wiki/Letter_case#Stylistic_or_specialised_usage).",
        "grammar": "lsp",
        "label": "lodash-startcase",
        "matches": {
          "lodash startcase": true
        },
        "opts": {}
      },
      {
        "content": "_.startsWith(${string}, ${target}, ${position})",
        "doc": "_.startsWith('abc', 'a');\n// => true\n\n_.startsWith('abc', 'b');\n// => false\n\n_.startsWith('abc', 'b', 1);\n// => true\n\nChecks if `string` starts with the given target string.",
        "grammar": "lsp",
        "label": "lodash-startswith",
        "matches": {
          "lodash startswith": true
        },
        "opts": {}
      },
      {
        "content": "_.toLower(${string})",
        "doc": "_.toLower('--Foo-Bar--');\n// => '--foo-bar--'\n\n_.toLower('fooBar');\n// => 'foobar'\n\n_.toLower('__FOO_BAR__');\n// => '__foo_bar__'\n\nConverts `string`, as a whole, to lower case just like\n[String#toLowerCase](https://mdn.io/toLowerCase).",
        "grammar": "lsp",
        "label": "lodash-tolower",
        "matches": {
          "lodash tolower": true
        },
        "opts": {}
      },
      {
        "content": "_.toUpper(${string})",
        "doc": "_.toUpper('--foo-bar--');\n// => '--FOO-BAR--'\n\n_.toUpper('fooBar');\n// => 'FOOBAR'\n\n_.toUpper('__foo_bar__');\n// => '__FOO_BAR__'\n\nConverts `string`, as a whole, to upper case just like\n[String#toUpperCase](https://mdn.io/toUpperCase).",
        "grammar": "lsp",
        "label": "lodash-toupper",
        "matches": {
          "lodash toupper": true
        },
        "opts": {}
      },
      {
        "content": "_.trim(${string}, ${chars})",
        "doc": "_.trim('  abc  ');\n// => 'abc'\n\n_.trim('-_-abc-_-', '_-');\n// => 'abc'\n\n_.map(['  foo  ', '  bar  '], _.trim);\n// => ['foo', 'bar']\n\nRemoves leading and trailing whitespace or specified characters from `string`.",
        "grammar": "lsp",
        "label": "lodash-trim",
        "matches": {
          "lodash trim": true
        },
        "opts": {}
      },
      {
        "content": "_.trimEnd(${string}, ${chars})",
        "doc": "_.trimEnd('  abc  ');\n// => '  abc'\n\n_.trimEnd('-_-abc-_-', '_-');\n// => '-_-abc'\n\nRemoves trailing whitespace or specified characters from `string`.",
        "grammar": "lsp",
        "label": "lodash-trimend",
        "matches": {
          "lodash trimend": true
        },
        "opts": {}
      },
      {
        "content": "_.trimStart(${string}, ${chars})",
        "doc": "_.trimStart('  abc  ');\n// => 'abc  '\n\n_.trimStart('-_-abc-_-', '_-');\n// => 'abc-_-'\n\nRemoves leading whitespace or specified characters from `string`.",
        "grammar": "lsp",
        "label": "lodash-trimstart",
        "matches": {
          "lodash trimstart": true
        },
        "opts": {}
      },
      {
        "content": "_.unescape(${string})",
        "doc": "_.unescape('fred, barney, &amp; pebbles');\n// => 'fred, barney, & pebbles'\n\nThe inverse of `_.escape`; this method converts the HTML entities\n`&amp;`, `&lt;`, `&gt;`, `&quot;`, and `&#39;` in `string` to\ntheir corresponding characters.\n\n**Note:** No other HTML entities are unescaped. To unescape additional\nHTML entities use a third-party library like [_he_](https://mths.be/he).",
        "grammar": "lsp",
        "label": "lodash-unescape",
        "matches": {
          "lodash unescape": true
        },
        "opts": {}
      },
      {
        "content": "_.upperCase(${string})",
        "doc": "_.upperCase('--foo-bar');\n// => 'FOO BAR'\n\n_.upperCase('fooBar');\n// => 'FOO BAR'\n\n_.upperCase('__foo_bar__');\n// => 'FOO BAR'\n\nConverts `string`, as space separated words, to upper case.",
        "grammar": "lsp",
        "label": "lodash-uppercase",
        "matches": {
          "lodash uppercase": true
        },
        "opts": {}
      },
      {
        "content": "_.upperFirst(${string})",
        "doc": "_.upperFirst('fred');\n// => 'Fred'\n\n_.upperFirst('FRED');\n// => 'FRED'\n\nConverts the first character of `string` to upper case.",
        "grammar": "lsp",
        "label": "lodash-upperfirst",
        "matches": {
          "lodash upperfirst": true
        },
        "opts": {}
      },
      {
        "content": "_.words(${string}, ${pattern})",
        "doc": "_.words('fred, barney, & pebbles');\n// => ['fred', 'barney', 'pebbles']\n\n_.words('fred, barney, & pebbles', /[^, ]+/g);\n// => ['fred', 'barney', '&', 'pebbles']\n\nSplits `string` into an array of its words.",
        "grammar": "lsp",
        "label": "lodash-words",
        "matches": {
          "lodash words": true
        },
        "opts": {}
      },
      {
        "content": "_.attempt(${func}, ${args})",
        "doc": "// Avoid throwing errors for invalid selectors.\nvar elements = _.attempt(function(selector) {\n  return document.querySelectorAll(selector);\n}, '>_>');\n\nif (_.isError(elements)) {\n  elements = [];\n}\n\nAttempts to invoke `func`, returning either the result or the caught error\nobject. Any additional arguments are provided to `func` when it's invoked.",
        "grammar": "lsp",
        "label": "lodash-attempt",
        "matches": {
          "lodash attempt": true
        },
        "opts": {}
      },
      {
        "content": "_.bindAll(${object}, ${methodNames})",
        "doc": "var view = {\n  'label': 'docs',\n  'click': function() {\n    console.log('clicked ' + this.label);\n  }\n};\n\n_.bindAll(view, ['click']);\njQuery(element).on('click', view.click);\n// => Logs 'clicked docs' when clicked.\n\nBinds methods of an object to the object itself, overwriting the existing\nmethod.\n\n**Note:** This method doesn't set the \"length\" property of bound functions.",
        "grammar": "lsp",
        "label": "lodash-bindall",
        "matches": {
          "lodash bindall": true
        },
        "opts": {}
      },
      {
        "content": "_.cond(${pairs})",
        "doc": "var func = _.cond([\n  [_.matches({ 'a': 1 }),           _.constant('matches A')],\n  [_.conforms({ 'b': _.isNumber }), _.constant('matches B')],\n  [_.stubTrue,                      _.constant('no match')]\n]);\n\nfunc({ 'a': 1, 'b': 2 });\n// => 'matches A'\n\nfunc({ 'a': 0, 'b': 1 });\n// => 'matches B'\n\nfunc({ 'a': '1', 'b': '2' });\n// => 'no match'\n\nCreates a function that iterates over `pairs` and invokes the corresponding\nfunction of the first predicate to return truthy. The predicate-function\npairs are invoked with the `this` binding and arguments of the created\nfunction.",
        "grammar": "lsp",
        "label": "lodash-cond",
        "matches": {
          "lodash cond": true
        },
        "opts": {}
      },
      {
        "content": "_.conforms(${source})",
        "doc": "var objects = [\n  { 'a': 2, 'b': 1 },\n  { 'a': 1, 'b': 2 }\n];\n\n_.filter(objects, _.conforms({ 'b': function(n) { return n > 1; } }));\n// => [{ 'a': 1, 'b': 2 }]\n\nCreates a function that invokes the predicate properties of `source` with\nthe corresponding property values of a given object, returning `true` if\nall predicates return truthy, else `false`.\n\n**Note:** The created function is equivalent to `_.conformsTo` with\n`source` partially applied.",
        "grammar": "lsp",
        "label": "lodash-conforms",
        "matches": {
          "lodash conforms": true
        },
        "opts": {}
      },
      {
        "content": "_.constant(${value})",
        "doc": "var objects = _.times(2, _.constant({ 'a': 1 }));\n\nconsole.log(objects);\n// => [{ 'a': 1 }, { 'a': 1 }]\n\nconsole.log(objects[0] === objects[1]);\n// => true\n\nCreates a function that returns `value`.",
        "grammar": "lsp",
        "label": "lodash-constant",
        "matches": {
          "lodash constant": true
        },
        "opts": {}
      },
      {
        "content": "_.defaultTo(${value}, ${defaultValue})",
        "doc": "_.defaultTo(1, 10);\n// => 1\n\n_.defaultTo(undefined, 10);\n// => 10\n\nChecks `value` to determine whether a default value should be returned in\nits place. The `defaultValue` is returned if `value` is `NaN`, `null`,\nor `undefined`.",
        "grammar": "lsp",
        "label": "lodash-defaultto",
        "matches": {
          "lodash defaultto": true
        },
        "opts": {}
      },
      {
        "content": "_.flow(${funcs})",
        "doc": "function square(n) {\n  return n * n;\n}\n\nvar addSquare = _.flow([_.add, square]);\naddSquare(1, 2);\n// => 9\n\nCreates a function that returns the result of invoking the given functions\nwith the `this` binding of the created function, where each successive\ninvocation is supplied the return value of the previous.",
        "grammar": "lsp",
        "label": "lodash-flow",
        "matches": {
          "lodash flow": true
        },
        "opts": {}
      },
      {
        "content": "_.flowRight(${funcs})",
        "doc": "function square(n) {\n  return n * n;\n}\n\nvar addSquare = _.flowRight([square, _.add]);\naddSquare(1, 2);\n// => 9\n\nThis method is like `_.flow` except that it creates a function that\ninvokes the given functions from right to left.",
        "grammar": "lsp",
        "label": "lodash-flowright",
        "matches": {
          "lodash flowright": true
        },
        "opts": {}
      },
      {
        "content": "_.identity(${value})",
        "doc": "var object = { 'a': 1 };\n\nconsole.log(_.identity(object) === object);\n// => true\n\nThis method returns the first argument it receives.",
        "grammar": "lsp",
        "label": "lodash-identity",
        "matches": {
          "lodash identity": true
        },
        "opts": {}
      },
      {
        "content": "_.iteratee(${func})",
        "doc": "var users = [\n  { 'user': 'barney', 'age': 36, 'active': true },\n  { 'user': 'fred',   'age': 40, 'active': false }\n];\n\n// The `_.matches` iteratee shorthand.\n_.filter(users, _.iteratee({ 'user': 'barney', 'active': true }));\n// => [{ 'user': 'barney', 'age': 36, 'active': true }]\n\n// The `_.matchesProperty` iteratee shorthand.\n_.filter(users, _.iteratee(['user', 'fred']));\n// => [{ 'user': 'fred', 'age': 40 }]\n\n// The `_.property` iteratee shorthand.\n_.map(users, _.iteratee('user'));\n// => ['barney', 'fred']\n\n// Create custom iteratee shorthands.\n_.iteratee = _.wrap(_.iteratee, function(iteratee, func) {\n  return !_.isRegExp(func) ? iteratee(func) : function(string) {\n    return func.test(string);\n  };\n});\n\n_.filter(['abc', 'def'], /ef/);\n// => ['def']\n\nCreates a function that invokes `func` with the arguments of the created\nfunction. If `func` is a property name, the created function returns the\nproperty value for a given element. If `func` is an array or object, the\ncreated function returns `true` for elements that contain the equivalent\nsource properties, otherwise it returns `false`.",
        "grammar": "lsp",
        "label": "lodash-iteratee",
        "matches": {
          "lodash iteratee": true
        },
        "opts": {}
      },
      {
        "content": "_.matches(${source})",
        "doc": "var objects = [\n  { 'a': 1, 'b': 2, 'c': 3 },\n  { 'a': 4, 'b': 5, 'c': 6 }\n];\n\n_.filter(objects, _.matches({ 'a': 4, 'c': 6 }));\n// => [{ 'a': 4, 'b': 5, 'c': 6 }]\n\nCreates a function that performs a partial deep comparison between a given\nobject and `source`, returning `true` if the given object has equivalent\nproperty values, else `false`.\n\n**Note:** The created function is equivalent to `_.isMatch` with `source`\npartially applied.\n\nPartial comparisons will match empty array and empty object `source`\nvalues against any array or object value, respectively. See `_.isEqual`\nfor a list of supported value comparisons.",
        "grammar": "lsp",
        "label": "lodash-matches",
        "matches": {
          "lodash matches": true
        },
        "opts": {}
      },
      {
        "content": "_.matchesProperty(${path}, ${srcValue})",
        "doc": "var objects = [\n  { 'a': 1, 'b': 2, 'c': 3 },\n  { 'a': 4, 'b': 5, 'c': 6 }\n];\n\n_.find(objects, _.matchesProperty('a', 4));\n// => { 'a': 4, 'b': 5, 'c': 6 }\n\nCreates a function that performs a partial deep comparison between the\nvalue at `path` of a given object to `srcValue`, returning `true` if the\nobject value is equivalent, else `false`.\n\n**Note:** Partial comparisons will match empty array and empty object\n`srcValue` values against any array or object value, respectively. See\n`_.isEqual` for a list of supported value comparisons.",
        "grammar": "lsp",
        "label": "lodash-matchesproperty",
        "matches": {
          "lodash matchesproperty": true
        },
        "opts": {}
      },
      {
        "content": "_.method(${path}, ${args})",
        "doc": "var objects = [\n  { 'a': { 'b': _.constant(2) } },\n  { 'a': { 'b': _.constant(1) } }\n];\n\n_.map(objects, _.method('a.b'));\n// => [2, 1]\n\n_.map(objects, _.method(['a', 'b']));\n// => [2, 1]\n\nCreates a function that invokes the method at `path` of a given object.\nAny additional arguments are provided to the invoked method.",
        "grammar": "lsp",
        "label": "lodash-method",
        "matches": {
          "lodash method": true
        },
        "opts": {}
      },
      {
        "content": "_.methodOf(${object}, ${args})",
        "doc": "var array = _.times(3, _.constant),\n    object = { 'a': array, 'b': array, 'c': array };\n\n_.map(['a[2]', 'c[0]'], _.methodOf(object));\n// => [2, 0]\n\n_.map([['a', '2'], ['c', '0']], _.methodOf(object));\n// => [2, 0]\n\nThe opposite of `_.method`; this method creates a function that invokes\nthe method at a given path of `object`. Any additional arguments are\nprovided to the invoked method.",
        "grammar": "lsp",
        "label": "lodash-methodof",
        "matches": {
          "lodash methodof": true
        },
        "opts": {}
      },
      {
        "content": "_.noConflict()",
        "doc": "var lodash = _.noConflict();\n\nReverts the `_` variable to its previous value and returns a reference to\nthe `lodash` function.",
        "grammar": "lsp",
        "label": "lodash-noconflict",
        "matches": {
          "lodash noconflict": true
        },
        "opts": {}
      },
      {
        "content": "_.noop()",
        "doc": "_.times(2, _.noop);\n// => [undefined, undefined]\n\nThis method returns `undefined`.",
        "grammar": "lsp",
        "label": "lodash-noop",
        "matches": {
          "lodash noop": true
        },
        "opts": {}
      },
      {
        "content": "_.nthArg(${n})",
        "doc": "var func = _.nthArg(1);\nfunc('a', 'b', 'c', 'd');\n// => 'b'\n\nvar func = _.nthArg(-2);\nfunc('a', 'b', 'c', 'd');\n// => 'c'\n\nCreates a function that gets the argument at index `n`. If `n` is negative,\nthe nth argument from the end is returned.",
        "grammar": "lsp",
        "label": "lodash-ntharg",
        "matches": {
          "lodash ntharg": true
        },
        "opts": {}
      },
      {
        "content": "_.over(${iteratees})",
        "doc": "var func = _.over([Math.max, Math.min]);\n\nfunc(1, 2, 3, 4);\n// => [4, 1]\n\nCreates a function that invokes `iteratees` with the arguments it receives\nand returns their results.",
        "grammar": "lsp",
        "label": "lodash-over",
        "matches": {
          "lodash over": true
        },
        "opts": {}
      },
      {
        "content": "_.overEvery(${predicates})",
        "doc": "var func = _.overEvery([Boolean, isFinite]);\n\nfunc('1');\n// => true\n\nfunc(null);\n// => false\n\nfunc(NaN);\n// => false\n\nCreates a function that checks if **all** of the `predicates` return\ntruthy when invoked with the arguments it receives.",
        "grammar": "lsp",
        "label": "lodash-overevery",
        "matches": {
          "lodash overevery": true
        },
        "opts": {}
      },
      {
        "content": "_.overSome(${predicates})",
        "doc": "var func = _.overSome([Boolean, isFinite]);\n\nfunc('1');\n// => true\n\nfunc(null);\n// => true\n\nfunc(NaN);\n// => false\n\nCreates a function that checks if **any** of the `predicates` return\ntruthy when invoked with the arguments it receives.",
        "grammar": "lsp",
        "label": "lodash-oversome",
        "matches": {
          "lodash oversome": true
        },
        "opts": {}
      },
      {
        "content": "_.property(${path})",
        "doc": "var objects = [\n  { 'a': { 'b': 2 } },\n  { 'a': { 'b': 1 } }\n];\n\n_.map(objects, _.property('a.b'));\n// => [2, 1]\n\n_.map(_.sortBy(objects, _.property(['a', 'b'])), 'a.b');\n// => [1, 2]\n\nCreates a function that returns the value at `path` of a given object.",
        "grammar": "lsp",
        "label": "lodash-property",
        "matches": {
          "lodash property": true
        },
        "opts": {}
      },
      {
        "content": "_.propertyOf(${object})",
        "doc": "var array = [0, 1, 2],\n    object = { 'a': array, 'b': array, 'c': array };\n\n_.map(['a[2]', 'c[0]'], _.propertyOf(object));\n// => [2, 0]\n\n_.map([['a', '2'], ['c', '0']], _.propertyOf(object));\n// => [2, 0]\n\nThe opposite of `_.property`; this method creates a function that returns\nthe value at a given path of `object`.",
        "grammar": "lsp",
        "label": "lodash-propertyof",
        "matches": {
          "lodash propertyof": true
        },
        "opts": {}
      },
      {
        "content": "_.range(${start}, ${end}, ${step})",
        "doc": "_.range(4);\n// => [0, 1, 2, 3]\n\n_.range(-4);\n// => [0, -1, -2, -3]\n\n_.range(1, 5);\n// => [1, 2, 3, 4]\n\n_.range(0, 20, 5);\n// => [0, 5, 10, 15]\n\n_.range(0, -4, -1);\n// => [0, -1, -2, -3]\n\n_.range(1, 4, 0);\n// => [1, 1, 1]\n\n_.range(0);\n// => []\n\nCreates an array of numbers (positive and/or negative) progressing from\n`start` up to, but not including, `end`. A step of `-1` is used if a negative\n`start` is specified without an `end` or `step`. If `end` is not specified,\nit's set to `start` with `start` then set to `0`.\n\n**Note:** JavaScript follows the IEEE-754 standard for resolving\nfloating-point values which can produce unexpected results.",
        "grammar": "lsp",
        "label": "lodash-range",
        "matches": {
          "lodash range": true
        },
        "opts": {}
      },
      {
        "content": "_.rangeRight(${start}, ${end}, ${step})",
        "doc": "_.rangeRight(4);\n// => [3, 2, 1, 0]\n\n_.rangeRight(-4);\n// => [-3, -2, -1, 0]\n\n_.rangeRight(1, 5);\n// => [4, 3, 2, 1]\n\n_.rangeRight(0, 20, 5);\n// => [15, 10, 5, 0]\n\n_.rangeRight(0, -4, -1);\n// => [-3, -2, -1, 0]\n\n_.rangeRight(1, 4, 0);\n// => [1, 1, 1]\n\n_.rangeRight(0);\n// => []\n\nThis method is like `_.range` except that it populates values in\ndescending order.",
        "grammar": "lsp",
        "label": "lodash-rangeright",
        "matches": {
          "lodash rangeright": true
        },
        "opts": {}
      },
      {
        "content": "_.stubArray()",
        "doc": "var arrays = _.times(2, _.stubArray);\n\nconsole.log(arrays);\n// => [[], []]\n\nconsole.log(arrays[0] === arrays[1]);\n// => false\n\nThis method returns a new empty array.",
        "grammar": "lsp",
        "label": "lodash-stubarray",
        "matches": {
          "lodash stubarray": true
        },
        "opts": {}
      },
      {
        "content": "_.stubFalse()",
        "doc": "_.times(2, _.stubFalse);\n// => [false, false]\n\nThis method returns `false`.",
        "grammar": "lsp",
        "label": "lodash-stubfalse",
        "matches": {
          "lodash stubfalse": true
        },
        "opts": {}
      },
      {
        "content": "_.stubObject()",
        "doc": "var objects = _.times(2, _.stubObject);\n\nconsole.log(objects);\n// => [{}, {}]\n\nconsole.log(objects[0] === objects[1]);\n// => false\n\nThis method returns a new empty object.",
        "grammar": "lsp",
        "label": "lodash-stubobject",
        "matches": {
          "lodash stubobject": true
        },
        "opts": {}
      },
      {
        "content": "_.stubString()",
        "doc": "_.times(2, _.stubString);\n// => ['', '']\n\nThis method returns an empty string.",
        "grammar": "lsp",
        "label": "lodash-stubstring",
        "matches": {
          "lodash stubstring": true
        },
        "opts": {}
      },
      {
        "content": "_.stubTrue()",
        "doc": "_.times(2, _.stubTrue);\n// => [true, true]\n\nThis method returns `true`.",
        "grammar": "lsp",
        "label": "lodash-stubtrue",
        "matches": {
          "lodash stubtrue": true
        },
        "opts": {}
      },
      {
        "content": "_.times(${n}, ${iteratee})",
        "doc": "_.times(3, String);\n// => ['0', '1', '2']\n\n _.times(4, _.constant(0));\n// => [0, 0, 0, 0]\n\nInvokes the iteratee `n` times, returning an array of the results of\neach invocation. The iteratee is invoked with one argument; (index).",
        "grammar": "lsp",
        "label": "lodash-times",
        "matches": {
          "lodash times": true
        },
        "opts": {}
      },
      {
        "content": "_.toPath(${value})",
        "doc": "_.toPath('a.b.c');\n// => ['a', 'b', 'c']\n\n_.toPath('a[0].b.c');\n// => ['a', '0', 'b', 'c']\n\nConverts `value` to a property path array.",
        "grammar": "lsp",
        "label": "lodash-topath",
        "matches": {
          "lodash topath": true
        },
        "opts": {}
      },
      {
        "content": "_.uniqueId(${prefix})",
        "doc": "_.uniqueId('contact_');\n// => 'contact_104'\n\n_.uniqueId();\n// => '105'\n\nGenerates a unique ID. If `prefix` is given, the ID is appended to it.",
        "grammar": "lsp",
        "label": "lodash-uniqueid",
        "matches": {
          "lodash uniqueid": true
        },
        "opts": {}
      },
      {
        "content": "_.add(${augend}, ${addend})",
        "doc": "_.add(6, 4);\n// => 10\n\nAdds two numbers.",
        "grammar": "lsp",
        "label": "lodash-add",
        "matches": {
          "lodash add": true
        },
        "opts": {}
      },
      {
        "content": "_.ceil(${number}, ${precision})",
        "doc": "_.ceil(4.006);\n// => 5\n\n_.ceil(6.004, 2);\n// => 6.01\n\n_.ceil(6040, -2);\n// => 6100\n\nComputes `number` rounded up to `precision`.",
        "grammar": "lsp",
        "label": "lodash-ceil",
        "matches": {
          "lodash ceil": true
        },
        "opts": {}
      },
      {
        "content": "_.divide(${dividend}, ${divisor})",
        "doc": "_.divide(6, 4);\n// => 1.5\n\nDivide two numbers.",
        "grammar": "lsp",
        "label": "lodash-divide",
        "matches": {
          "lodash divide": true
        },
        "opts": {}
      },
      {
        "content": "_.floor(${number}, ${precision})",
        "doc": "_.floor(4.006);\n// => 4\n\n_.floor(0.046, 2);\n// => 0.04\n\n_.floor(4060, -2);\n// => 4000\n\nComputes `number` rounded down to `precision`.",
        "grammar": "lsp",
        "label": "lodash-floor",
        "matches": {
          "lodash floor": true
        },
        "opts": {}
      },
      {
        "content": "_.max(${array})",
        "doc": "_.max([4, 2, 8, 6]);\n// => 8\n\n_.max([]);\n// => undefined\n\nComputes the maximum value of `array`. If `array` is empty or falsey,\n`undefined` is returned.",
        "grammar": "lsp",
        "label": "lodash-max",
        "matches": {
          "lodash max": true
        },
        "opts": {}
      },
      {
        "content": "_.maxBy(${array}, ${iteratee})",
        "doc": "var objects = [{ 'n': 1 }, { 'n': 2 }];\n\n_.maxBy(objects, function(o) { return o.n; });\n// => { 'n': 2 }\n\n// The `_.property` iteratee shorthand.\n_.maxBy(objects, 'n');\n// => { 'n': 2 }\n\nThis method is like `_.max` except that it accepts `iteratee` which is\ninvoked for each element in `array` to generate the criterion by which\nthe value is ranked. The iteratee is invoked with one argument: (value).",
        "grammar": "lsp",
        "label": "lodash-maxby",
        "matches": {
          "lodash maxby": true
        },
        "opts": {}
      },
      {
        "content": "_.mean(${array})",
        "doc": "_.mean([4, 2, 8, 6]);\n// => 5\n\nComputes the mean of the values in `array`.",
        "grammar": "lsp",
        "label": "lodash-mean",
        "matches": {
          "lodash mean": true
        },
        "opts": {}
      },
      {
        "content": "_.meanBy(${array}, ${iteratee})",
        "doc": "var objects = [{ 'n': 4 }, { 'n': 2 }, { 'n': 8 }, { 'n': 6 }];\n\n_.meanBy(objects, function(o) { return o.n; });\n// => 5\n\n// The `_.property` iteratee shorthand.\n_.meanBy(objects, 'n');\n// => 5\n\nThis method is like `_.mean` except that it accepts `iteratee` which is\ninvoked for each element in `array` to generate the value to be averaged.\nThe iteratee is invoked with one argument: (value).",
        "grammar": "lsp",
        "label": "lodash-meanby",
        "matches": {
          "lodash meanby": true
        },
        "opts": {}
      },
      {
        "content": "_.min(${array})",
        "doc": "_.min([4, 2, 8, 6]);\n// => 2\n\n_.min([]);\n// => undefined\n\nComputes the minimum value of `array`. If `array` is empty or falsey,\n`undefined` is returned.",
        "grammar": "lsp",
        "label": "lodash-min",
        "matches": {
          "lodash min": true
        },
        "opts": {}
      },
      {
        "content": "_.minBy(${array}, ${iteratee})",
        "doc": "var objects = [{ 'n': 1 }, { 'n': 2 }];\n\n_.minBy(objects, function(o) { return o.n; });\n// => { 'n': 1 }\n\n// The `_.property` iteratee shorthand.\n_.minBy(objects, 'n');\n// => { 'n': 1 }\n\nThis method is like `_.min` except that it accepts `iteratee` which is\ninvoked for each element in `array` to generate the criterion by which\nthe value is ranked. The iteratee is invoked with one argument: (value).",
        "grammar": "lsp",
        "label": "lodash-minby",
        "matches": {
          "lodash minby": true
        },
        "opts": {}
      },
      {
        "content": "_.multiply(${multiplier}, ${multiplicand})",
        "doc": "_.multiply(6, 4);\n// => 24\n\nMultiply two numbers.",
        "grammar": "lsp",
        "label": "lodash-multiply",
        "matches": {
          "lodash multiply": true
        },
        "opts": {}
      },
      {
        "content": "_.round(${number}, ${precision})",
        "doc": "_.round(4.006);\n// => 4\n\n_.round(4.006, 2);\n// => 4.01\n\n_.round(4060, -2);\n// => 4100\n\nComputes `number` rounded to `precision`.",
        "grammar": "lsp",
        "label": "lodash-round",
        "matches": {
          "lodash round": true
        },
        "opts": {}
      },
      {
        "content": "_.subtract(${minuend}, ${subtrahend})",
        "doc": "_.subtract(6, 4);\n// => 2\n\nSubtract two numbers.",
        "grammar": "lsp",
        "label": "lodash-subtract",
        "matches": {
          "lodash subtract": true
        },
        "opts": {}
      },
      {
        "content": "_.sum(${array})",
        "doc": "_.sum([4, 2, 8, 6]);\n// => 20\n\nComputes the sum of the values in `array`.",
        "grammar": "lsp",
        "label": "lodash-sum",
        "matches": {
          "lodash sum": true
        },
        "opts": {}
      },
      {
        "content": "_.sumBy(${array}, ${iteratee})",
        "doc": "var objects = [{ 'n': 4 }, { 'n': 2 }, { 'n': 8 }, { 'n': 6 }];\n\n_.sumBy(objects, function(o) { return o.n; });\n// => 20\n\n// The `_.property` iteratee shorthand.\n_.sumBy(objects, 'n');\n// => 20\n\nThis method is like `_.sum` except that it accepts `iteratee` which is\ninvoked for each element in `array` to generate the value to be summed.\nThe iteratee is invoked with one argument: (value).",
        "grammar": "lsp",
        "label": "lodash-sumby",
        "matches": {
          "lodash sumby": true
        },
        "opts": {}
      }
    ],
    "lpc": [
      {
        "content": "#include <${1:stdio}.h>",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "inc": true
        },
        "opts": {}
      },
      {
        "content": "#ifndef $1\n#define ${1:SYMBOL} ${2:value}\n#endif /* ifndef $1 */",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ndef": true
        },
        "opts": {}
      },
      {
        "content": "#define",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "def": true
        },
        "opts": {}
      },
      {
        "content": "#ifdef ${1:FOO}\n\t${2:#define }\n#endif",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ifdef": true
        },
        "opts": {}
      },
      {
        "content": "#if ${1:FOO}\n\t${0:${VISUAL}}\n#endif",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "#if": true
        },
        "opts": {}
      },
      {
        "content": "if(${1:true})\n{\n\t${0:${VISUAL}}\n}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "if": true
        },
        "opts": {}
      },
      {
        "content": "if(${1:true})\n{\n\t${2:${VISUAL}}\n}\nelse\n{\n\t${0}\n}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ife": true
        },
        "opts": {}
      },
      {
        "content": "else\n{\n\t${0:${VISUAL}}\n}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "el": true
        },
        "opts": {}
      },
      {
        "content": "else if(${1:true})\n{\n\t${0:${VISUAL}}\n}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "elif": true
        },
        "opts": {}
      },
      {
        "content": "if(${1:true}) ${0};",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ifi": true
        },
        "opts": {}
      },
      {
        "content": "${1:/* condition */} ? ${2:a} : ${3:b}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "t": true
        },
        "opts": {}
      },
      {
        "content": "switch(${1:/* variable */})\n{\n\tcase ${2:/* variable case */}:\n\t\t${3}\n\t\t${4:break;}${5}\n\tdefault:\n\t\t${6}\n}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "switch": true
        },
        "opts": {}
      },
      {
        "content": "switch(${1:/* variable */})\n{\n\tcase ${2:/* variable case */}:\n\t\t${3}\n\t\t${4:break;}${5}\n}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "switchndef": true
        },
        "opts": {}
      },
      {
        "content": "case ${1:/* variable case */}:\n\t${2}\n\t${3:break;}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "case": true
        },
        "opts": {}
      },
      {
        "content": "return ${0};",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ret": true
        },
        "opts": {}
      },
      {
        "content": "foreach(${1:mixed} ${2:ele} in ${3:arr})\n{\n\t${4}\n}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "fore": true
        },
        "opts": {}
      },
      {
        "content": "for(int ${2:i} = 0; $2 < ${1:count}; $2${3:++})\n{\n\t${4}\n}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "for": true
        },
        "opts": {}
      },
      {
        "content": "for(int ${1:i} = ${2:0}; ${3:$1 < 10}; $1${4:++})\n{\n\t${5}\n}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "forr": true
        },
        "opts": {}
      },
      {
        "content": "while(${1:/* condition */})\n{\n\t${0:${VISUAL}}\n}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "wh": true
        },
        "opts": {}
      },
      {
        "content": "do{\n\t${0:${VISUAL}}\n}while (${1:/* condition */});",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "do": true
        },
        "opts": {}
      },
      {
        "content": "${1:void} ${2:function_name}(${3})\n{\n\t${4}\n}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "fnc": true
        },
        "opts": {}
      },
      {
        "content": "${1:void} ${2:function_name}()\n{\n\t${3}\n}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "defun0": true
        },
        "opts": {}
      },
      {
        "content": "${1:void} ${2:function_name}(${3:Type} ${4:Parameter})\n{\n\t${5}\n}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "defun1": true
        },
        "opts": {}
      },
      {
        "content": "${1:void} ${2:function_name}(${3:Type} ${4:Parameter}, ${5:Type} ${6:Parameter})\n{\n\t${7}\n}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "defun2": true
        },
        "opts": {}
      },
      {
        "content": "${1:void} ${2:function_name}(${3:Type} ${4:Parameter}, ${5:Type} ${6:Parameter}, ${7:Type} ${8:Parameter})\n{\n\t${9}\n}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "defun3": true
        },
        "opts": {}
      },
      {
        "content": "${1:void} ${2:function_name}(${3});",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "fund": true
        },
        "opts": {}
      },
      {
        "content": "printf(\"${1:%s}\\n\"${2});",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "pr": true
        },
        "opts": {}
      },
      {
        "content": "fprintf(${1:stderr}, \"${2:%s}\\n\"${3});",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "fpr": true
        },
        "opts": {}
      },
      {
        "content": "printf(\"${1:} = %d\\n\", $1);",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "prd": true
        },
        "opts": {}
      },
      {
        "content": "printf(\"${1:} = %f\\n\", $1);",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "prf": true
        },
        "opts": {}
      },
      {
        "content": "printf(\"${1:} = %${2}\\n\", $1);",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "prx": true
        },
        "opts": {}
      },
      {
        "content": "/*! TODO: ${1:Todo description here} */",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "todo": true
        },
        "opts": {}
      },
      {
        "content": "[${1}]",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          ".": true
        },
        "opts": {}
      }
    ],
    "ls": [
      {
        "content": "for ${1:name} in ${2:array}\n\tlet $1\n\t\t${3}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "forinlet": true
        },
        "opts": {}
      },
      {
        "content": "for ${1:name} in ${2:array}\n\t${3}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "fora": true
        },
        "opts": {}
      },
      {
        "content": "for ${1:key}, ${2:value} of ${3:object}\n\t${4}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "foro": true
        },
        "opts": {}
      },
      {
        "content": "for ${1:name} from ${2:start} to ${3:finish}\n\t${4}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "forr": true
        },
        "opts": {}
      },
      {
        "content": "for ${1:name} from ${2:start} to ${3:finish} by ${4:step}\n\t${5}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "forrb": true
        },
        "opts": {}
      },
      {
        "content": "for ${1:name} from ${2:start} til ${3:finish}\n\t${4}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "forrex": true
        },
        "opts": {}
      },
      {
        "content": "for ${1:name} from ${2:start} til ${3:finish} by ${4:step}\n\t${5}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "forrexb": true
        },
        "opts": {}
      },
      {
        "content": "(${1:args}) ->\n\t${2}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "fun": true
        },
        "opts": {}
      },
      {
        "content": "(${1:args}) ~>\n\t${2}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "bfun": true
        },
        "opts": {}
      },
      {
        "content": "if ${1:condition}\n\t${2}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "if": true
        },
        "opts": {}
      },
      {
        "content": "if ${1:condition}\n\t${2}\nelse\n\t${3}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ife": true
        },
        "opts": {}
      },
      {
        "content": "else if ${1:condition}\n\t${2}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "elif": true
        },
        "opts": {}
      },
      {
        "content": "if ${1:condition} then ${2:value} else ${3:other}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ifte": true
        },
        "opts": {}
      },
      {
        "content": "${1:action} unless ${2:condition}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "unl": true
        },
        "opts": {}
      },
      {
        "content": "switch ${1:object}\ncase ${2:value}\n\t${3}\ndefault void",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "swi": true
        },
        "opts": {}
      },
      {
        "content": "match ${1:object}\n| ${2:value} => ${3}\n| otherwise => void",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "mat": true
        },
        "opts": {}
      },
      {
        "content": "console.log ${1}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "log": true
        },
        "opts": {}
      },
      {
        "content": "JSON.stringify ${1}, void, 2",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "str": true
        },
        "opts": {}
      },
      {
        "content": "try\n\t${1:${VISUAL}}\ncatch ${2:error}\n\t${3}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "try": true
        },
        "opts": {}
      },
      {
        "content": "${2:$1} = require '${1}'${3}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "req": true
        },
        "opts": {}
      },
      {
        "content": "require! ${1}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "req!": true
        },
        "opts": {}
      },
      {
        "content": "${1:root} = exports ? this",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "exp": true
        },
        "opts": {}
      }
    ],
    "lua": [
      {
        "content": "function ${1:#:function_name}(${2:#:argument})\n\t${0:TARGET}\nend",
        "doc": "",
        "grammar": "snu",
        "label": "function name(args)...end",
        "matches": {
          "func": true
        },
        "opts": {
          "word": true
        }
      },
      {
        "content": "if ${1:#:condition} then\n  ${0:TARGET}\nend",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "if": true
        },
        "opts": {
          "head": true
        }
      },
      {
        "content": "for ${2:i} = 0, ${1:#:Things} do\n  ${0:TARGET}\nend",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "for": true
        },
        "opts": {
          "head": true
        }
      },
      {
        "content": "for ${2:k}, ${3:v} in ${1:ipairs(xs)} do\n  ${0:TARGET}\nend",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "forin": true
        },
        "opts": {
          "head": true
        }
      },
      {
        "content": "for k, v in ipairs(${1:table}) do\n  print(k, v)\nend",
        "doc": "",
        "grammar": "snu",
        "label": "for k, v in ipairs(table) do",
        "matches": {
          "print_table": true
        },
        "opts": {
          "head": true
        }
      },
      {
        "content": "print(${0:TARGET})",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "p": true,
          "print": true
        },
        "opts": {
          "head": true
        }
      },
      {
        "content": "[[${0:TARGET}]]",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "comment": true
        },
        "opts": {
          "head": true
        }
      },
      {
        "content": "describe(${1:#:message}, function()\n  ${0:TARGET}\nend)",
        "doc": "",
        "grammar": "snu",
        "label": "describe(message, func)",
        "matches": {
          "describe": true
        },
        "opts": {
          "head": true
        }
      },
      {
        "content": "it(${1:#:message}, function()\n  ${0:TARGET}\nend)",
        "doc": "",
        "grammar": "snu",
        "label": "it(message, func)",
        "matches": {
          "it": true
        },
        "opts": {
          "head": true
        }
      },
      {
        "content": "before_each(function()\n  ${0:TARGET}\nend)",
        "doc": "",
        "grammar": "snu",
        "label": "before_each(func)",
        "matches": {
          "before_each": true
        },
        "opts": {
          "head": true
        }
      },
      {
        "content": "after_each(function()\n  ${0:TARGET}\nend)",
        "doc": "",
        "grammar": "snu",
        "label": "after_each(func)",
        "matches": {
          "after_each": true
        },
        "opts": {
          "head": true
        }
      },
      {
        "content": "setup(function()\n  ${0:TARGET}\nend)",
        "doc": "",
        "grammar": "snu",
        "label": "setup(func)",
        "matches": {
          "setup": true
        },
        "opts": {
          "head": true
        }
      },
      {
        "content": "tear_down(function()\n  ${0:TARGET}\nend)",
        "doc": "",
        "grammar": "snu",
        "label": "tear_down(func)",
        "matches": {
          "tear_down": true
        },
        "opts": {
          "head": true
        }
      },
      {
        "content": "finally(function()\n  ${0:TARGET}\nend)",
        "doc": "",
        "grammar": "snu",
        "label": "finally(func)",
        "matches": {
          "finally": true
        },
        "opts": {
          "head": true
        }
      },
      {
        "content": "#!/usr/bin/env lua\n$1",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "#!": true
        },
        "opts": {}
      },
      {
        "content": "local ${1:x} = ${0:1}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "local": true
        },
        "opts": {}
      },
      {
        "content": "function ${1:fname}(${2:...})\n\t${0:-- body}\nend",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "fun": true
        },
        "opts": {}
      },
      {
        "content": "for ${1:i}=${2:1},${3:10} do\n\t${0:print(i)}\nend",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "for": true
        },
        "opts": {}
      },
      {
        "content": "for ${1:i},${2:v} in pairs(${3:table_name}) do\n\t${0:-- body}\nend",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "forp": true
        },
        "opts": {}
      },
      {
        "content": "for ${1:i},${2:v} in ipairs(${3:table_name}) do\n\t${0:-- body}\nend",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "fori": true
        },
        "opts": {}
      },
      {
        "content": "if ${1:condition} then\n\t${2:-- body}\nend",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "if": true
        },
        "opts": {}
      },
      {
        "content": "if ${1:condition} then\n\t${2:-- if condition}\nelse\n\t${0:-- else}\nend",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ife": true
        },
        "opts": {}
      },
      {
        "content": "elseif ${1:condition} then\n\t${0:--body}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "elif": true
        },
        "opts": {}
      },
      {
        "content": "repeat\n\t${1:--body}\nuntil ${0:condition}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "repeat": true
        },
        "opts": {}
      },
      {
        "content": "while ${1:condition} do\n\t${0:--body}\nend",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "while": true
        },
        "opts": {}
      },
      {
        "content": "print(\"${1:string}\")",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "print": true
        },
        "opts": {}
      },
      {
        "content": "import \"${1:import file}\"",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "im": true
        },
        "opts": {}
      },
      {
        "content": "#!/usr/bin/env lua\n$0",
        "doc": null,
        "grammar": "snu",
        "label": "#!/usr/bin/env lua",
        "matches": {
          "#!": true
        },
        "opts": {
          "b": true
        }
      },
      {
        "content": "function ${1:new_function}(${2:args})\n\t$0\nend",
        "doc": null,
        "grammar": "snu",
        "label": "New function",
        "matches": {
          "!fun(ction)?!": true
        },
        "opts": {
          "b": true,
          "r": true
        }
      },
      {
        "content": "for ${1:name},${2:val} in pairs(${3:table_name}) do\n\t$0\nend",
        "doc": null,
        "grammar": "snu",
        "label": "pair for loop",
        "matches": {
          "forp": true
        },
        "opts": {
          "b": true
        }
      },
      {
        "content": "for ${1:idx},${2:val} in ipairs(${3:table_name}) do\n\t$0\nend",
        "doc": null,
        "grammar": "snu",
        "label": "ipair for foop",
        "matches": {
          "fori": true
        },
        "opts": {
          "b": true
        }
      },
      {
        "content": "do\n\t$0\nend",
        "doc": null,
        "grammar": "snu",
        "label": "do block",
        "matches": {
          "do": true
        },
        "opts": {}
      },
      {
        "content": "repeat\n\t$1\nuntil $0",
        "doc": null,
        "grammar": "snu",
        "label": "repeat loop",
        "matches": {
          "repeat": true
        },
        "opts": {
          "b": true
        }
      },
      {
        "content": "while $1 do\n\t$0\nend",
        "doc": null,
        "grammar": "snu",
        "label": "while loop",
        "matches": {
          "while": true
        },
        "opts": {
          "b": true
        }
      },
      {
        "content": "if $1 then\n\t$0\nend",
        "doc": null,
        "grammar": "snu",
        "label": "if statement",
        "matches": {
          "if": true
        },
        "opts": {
          "b": true
        }
      },
      {
        "content": "if $1 then\n\t$2\nelse\n\t$0\nend",
        "doc": null,
        "grammar": "snu",
        "label": "if/else statement",
        "matches": {
          "ife": true
        },
        "opts": {
          "b": true
        }
      },
      {
        "content": "if $1 then\n\t$2\nelseif $3 then\n\t$0\nend",
        "doc": null,
        "grammar": "snu",
        "label": "if/elseif statement",
        "matches": {
          "eif": true
        },
        "opts": {
          "b": true
        }
      },
      {
        "content": "if $1 then\n\t$2\nelseif $3 then\n\t$4\nelse\n\t$0\nend",
        "doc": null,
        "grammar": "snu",
        "label": "if/elseif/else statement",
        "matches": {
          "eife": true
        },
        "opts": {
          "b": true
        }
      },
      {
        "content": "local ok, err = pcall(${1:your_function})\nif not ok then\n\thandler(${2:ok, err})\n${3:else\n\tsuccess(${4:ok, err})\n}end",
        "doc": null,
        "grammar": "snu",
        "label": "pcall statement",
        "matches": {
          "pcall": true
        },
        "opts": {
          "b": true
        }
      },
      {
        "content": "local ${1:x} = ${0:1}",
        "doc": null,
        "grammar": "snu",
        "label": "local x = 1",
        "matches": {
          "local": true
        },
        "opts": {}
      }
    ],
    "make": [
      {
        "content": "CFLAGS=-Wall -g ${0: -llua -lzeromq}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "CFLAGS": true
        },
        "opts": {
          "head": true
        }
      },
      {
        "content": "clean:\n  rm -f ${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "clean:": true
        },
        "opts": {
          "head": true
        }
      },
      {
        "content": ".PHONY: clean, mrproper\nCC = gcc\nCFLAGS = -g -Wall\nall: $1\n%.o: %.c\n\t$(CC) $(CFLAGS) -c -o $@ $<\n${1:out}: $1.o\n\t$(CC) $(CFLAGS) -o $@ $+\nclean:\n\trm -f *.o core.*\nmrproper: clean\n\trm -f $1",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "base": true
        },
        "opts": {}
      },
      {
        "content": "${1:out}: $1.o\n\t$(CC) $(CFLAGS) -o $@ $+",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "add": true
        },
        "opts": {}
      },
      {
        "content": "print-%: ; @echo $*=$($*)",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "print": true
        },
        "opts": {}
      },
      {
        "content": "ifeq (${1:cond0}, ${2:cond1})\n\t${0:${VISUAL}}\nendif",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "if": true
        },
        "opts": {}
      },
      {
        "content": "ifeq (${1:cond0}, ${2:cond1})\n\t${3:${VISUAL}}\nelse\n\t${0}\nendif",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ife": true
        },
        "opts": {}
      },
      {
        "content": "else\n\t${0:${VISUAL}}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "el": true
        },
        "opts": {}
      },
      {
        "content": ".DEFAULT_GOAL := ${1}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "default": true
        },
        "opts": {}
      },
      {
        "content": "help: ## Prints help for targets with comments\n\t@cat $(MAKEFILE_LIST) | grep -E '^[a-zA-Z_-]+:.*?## .*$$' | awk 'BEGIN {FS = \":.*?## \"}; {printf \"\\033[36m%-30s\\033[0m %s\\n\", $\\$1, $\\$2}'\n${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "help": true
        },
        "opts": {}
      }
    ],
    "mako": [
      {
        "content": "<%def name=\"${1:name}\">\n\t${0:}\n</%def>",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "def": true
        },
        "opts": {}
      },
      {
        "content": "<%call expr=\"${1:name}\">\n\t${0:}\n</%call>",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "call": true
        },
        "opts": {}
      },
      {
        "content": "<%doc>\n\t${0:}\n</%doc>",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "doc": true
        },
        "opts": {}
      },
      {
        "content": "<%text>\n\t${0:}\n</%text>",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "text": true
        },
        "opts": {}
      },
      {
        "content": "% for ${1:i} in ${2:iter}:\n\t${0:}\n% endfor",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "for": true
        },
        "opts": {}
      },
      {
        "content": "% if ${1:condition}:\n\t${0:}\n% endif",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "if if": true
        },
        "opts": {}
      },
      {
        "content": "% if ${1:condition}:\n\t${2:}\n% else:\n\t${0:}\n% endif",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ife if/else": true
        },
        "opts": {}
      },
      {
        "content": "% try:\n\t${1:${VISUAL}}\n% except${2:}:\n\t${0:pass}\n% endtry",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "try": true
        },
        "opts": {}
      },
      {
        "content": "% while ${1:}:\n\t${0:}\n% endwhile",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "wh": true
        },
        "opts": {}
      },
      {
        "content": "<% ${0:} %>",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "<%": true
        },
        "opts": {}
      },
      {
        "content": "<!% ${0:} %>",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "<!%": true
        },
        "opts": {}
      },
      {
        "content": "<%inherit file=\"${0:filename}\" />",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "inherit": true
        },
        "opts": {}
      },
      {
        "content": "<%include file=\"${0:filename}\" />",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "include": true
        },
        "opts": {}
      },
      {
        "content": "<%namespace file=\"${0:name}\" />",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "namespace": true
        },
        "opts": {}
      },
      {
        "content": "<%page args=\"${0:}\" />",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "page": true
        },
        "opts": {}
      },
      {
        "content": "<%def name=\"${1:name}\">\n\t${2:}\n</%def>",
        "doc": null,
        "grammar": "snu",
        "label": "definition",
        "matches": {
          "def": true
        },
        "opts": {
          "b": true
        }
      },
      {
        "content": "<%call expr=\"${1:name}\">\n\t${2:}\n</%call>",
        "doc": null,
        "grammar": "snu",
        "label": "call",
        "matches": {
          "call": true
        },
        "opts": {
          "b": true
        }
      },
      {
        "content": "<%doc>\n\t${1:}\n</%doc>",
        "doc": null,
        "grammar": "snu",
        "label": "doc",
        "matches": {
          "doc": true
        },
        "opts": {
          "b": true
        }
      },
      {
        "content": "<%text>\n\t${1:}\n</%text>",
        "doc": null,
        "grammar": "snu",
        "label": "text",
        "matches": {
          "text": true
        },
        "opts": {
          "b": true
        }
      },
      {
        "content": "% for ${1:i} in ${2:iter}:\n\t${3:}\n% endfor",
        "doc": null,
        "grammar": "snu",
        "label": "for",
        "matches": {
          "for": true
        },
        "opts": {
          "b": true
        }
      },
      {
        "content": "% if ${1:condition}:\n\t${2:}\n% endif",
        "doc": null,
        "grammar": "snu",
        "label": "if ",
        "matches": {
          "if": true
        },
        "opts": {
          "b": true
        }
      },
      {
        "content": "% if ${1:condition}:\n\t${2:}\n% else:\n\t${3:}\n% endif",
        "doc": null,
        "grammar": "snu",
        "label": "if/else",
        "matches": {
          "if": true
        },
        "opts": {
          "b": true
        }
      },
      {
        "content": "% try:\n\t${1:}\n% except${2:}:\n\t${3:pass}\n% endtry",
        "doc": null,
        "grammar": "snu",
        "label": "try",
        "matches": {
          "try": true
        },
        "opts": {
          "b": true
        }
      },
      {
        "content": "% while ${1:}:\n\t${2:}\n% endwhile",
        "doc": null,
        "grammar": "snu",
        "label": "wh",
        "matches": {
          "wh": true
        },
        "opts": {
          "b": true
        }
      },
      {
        "content": "${${1:}}",
        "doc": null,
        "grammar": "snu",
        "label": "$",
        "matches": {
          "$": true
        },
        "opts": {
          "i": true
        }
      },
      {
        "content": "<% ${1:} %>",
        "doc": null,
        "grammar": "snu",
        "label": "<%",
        "matches": {
          "<%": true
        },
        "opts": {
          "b": true
        }
      },
      {
        "content": "<!% ${1:} %>",
        "doc": null,
        "grammar": "snu",
        "label": "<!%",
        "matches": {
          "<!%": true
        },
        "opts": {
          "b": true
        }
      },
      {
        "content": "<%inherit file=\"${1:filename}\" />",
        "doc": null,
        "grammar": "snu",
        "label": "inherit",
        "matches": {
          "inherit": true
        },
        "opts": {
          "b": true
        }
      },
      {
        "content": "<%include file=\"${1:filename}\" />",
        "doc": null,
        "grammar": "snu",
        "label": "include",
        "matches": {
          "include": true
        },
        "opts": {
          "b": true
        }
      },
      {
        "content": "<%namespace file=\"${1:name}\" />",
        "doc": null,
        "grammar": "snu",
        "label": "namespace",
        "matches": {
          "namespace": true
        },
        "opts": {
          "b": true
        }
      },
      {
        "content": "<%page args=\"${1:}\" />",
        "doc": null,
        "grammar": "snu",
        "label": "page",
        "matches": {
          "page": true
        },
        "opts": {
          "b": true
        }
      }
    ],
    "markdown": [
      {
        "content": "# ${0}",
        "doc": "",
        "grammar": "snu",
        "label": "# section heading",
        "matches": {
          "heading": true,
          "section": true
        },
        "opts": {
          "head": true
        }
      },
      {
        "content": "[${1:#:link_id}][]${2}",
        "doc": "",
        "grammar": "snu",
        "label": "[link][]",
        "matches": {
          "link": true
        },
        "opts": {
          "word": true
        }
      },
      {
        "content": "[${1:#:link}][${2:id}]${3}",
        "doc": "",
        "grammar": "snu",
        "label": "[link][id]",
        "matches": {
          "linkid": true
        },
        "opts": {
          "word": true
        }
      },
      {
        "content": "[${1:#:link}](https://${2:#:url})${3}",
        "doc": "",
        "grammar": "snu",
        "label": "[link](url)",
        "matches": {
          "linkurl": true
        },
        "opts": {
          "word": true
        }
      },
      {
        "content": "[${1:#:link}](mailto:${2:#:email})${3}",
        "doc": "",
        "grammar": "snu",
        "label": "[link](email)",
        "matches": {
          "linkemail": true
        },
        "opts": {
          "word": true
        }
      },
      {
        "content": "[${1:#:link}](${2:#:url} \"${3:#:title}\")${4}",
        "doc": "",
        "grammar": "snu",
        "label": "[link](url \"title\")",
        "matches": {
          "linkurltitle": true
        },
        "opts": {
          "word": true
        }
      },
      {
        "content": "[${1:#:id}]: https://${2:#:url} \"${3:#:title}\"",
        "doc": "",
        "grammar": "snu",
        "label": "[id]: url \"title\"",
        "matches": {
          "idurl": true
        },
        "opts": {
          "word": true
        }
      },
      {
        "content": "[${1:#:id}]: mailto:${2:#:url} \"${3:#:title}\"",
        "doc": "",
        "grammar": "snu",
        "label": "[id]: email \"title\"",
        "matches": {
          "idemail": true
        },
        "opts": {
          "word": true
        }
      },
      {
        "content": "![${1:#:alt}][${2:#:id}]${3}",
        "doc": "",
        "grammar": "snu",
        "label": "![alt][id]",
        "matches": {
          "altid": true
        },
        "opts": {
          "word": true
        }
      },
      {
        "content": "![${1:#:alt}](${2:#:url})${3}",
        "doc": "",
        "grammar": "snu",
        "label": "![alt](url)",
        "matches": {
          "alturl": true
        },
        "opts": {
          "word": true
        }
      },
      {
        "content": "![${1:#:alt}](${2:#:url} \"${3:#:title}\")${4}",
        "doc": "",
        "grammar": "snu",
        "label": "![alt](url \"title\")",
        "matches": {
          "alturltitle": true
        },
        "opts": {
          "word": true
        }
      },
      {
        "content": "*${1}*${2}",
        "doc": "",
        "grammar": "snu",
        "label": "*emphasis*",
        "matches": {
          "emphasis1": true
        },
        "opts": {
          "word": true
        }
      },
      {
        "content": "_${1}_${2}",
        "doc": "",
        "grammar": "snu",
        "label": "_emphasis_",
        "matches": {
          "emphasis2": true
        },
        "opts": {
          "word": true
        }
      },
      {
        "content": "**${1}**${2}",
        "doc": "",
        "grammar": "snu",
        "label": "**strong**",
        "matches": {
          "strong1": true
        },
        "opts": {
          "word": true
        }
      },
      {
        "content": "__${1}__${2}",
        "doc": "",
        "grammar": "snu",
        "label": "__strong__",
        "matches": {
          "strong2": true
        },
        "opts": {
          "word": true
        }
      },
      {
        "content": "> ${0}",
        "doc": "",
        "grammar": "snu",
        "label": "quote block",
        "matches": {
          "blockquote": true
        },
        "opts": {
          "head": true
        }
      },
      {
        "content": "[${1:text}](https://${2:address})",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "[": true
        },
        "opts": {}
      },
      {
        "content": "[${1:text}](https://${2:address} \"${3:title}\")",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "[\"": true
        },
        "opts": {}
      },
      {
        "content": "[${1:id}]: https://${2:url}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "[:": true
        },
        "opts": {}
      },
      {
        "content": "[${1:id}]: https://${2:url} \"${3:title}\"",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "[:\"": true
        },
        "opts": {}
      },
      {
        "content": "![${1:alttext}](${2:/images/image.jpg})",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "![": true
        },
        "opts": {}
      },
      {
        "content": "![${1:alttext}](${2:/images/image.jpg} \"${3:title}\")",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "![\"": true
        },
        "opts": {}
      },
      {
        "content": "![${1:id}]: ${2:url}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "![:": true
        },
        "opts": {}
      },
      {
        "content": "![${1:id}]: ${2:url} \"${3:title}\"",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "![:\"": true
        },
        "opts": {}
      },
      {
        "content": "<http://${1:url}>",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "<": true
        },
        "opts": {}
      },
      {
        "content": "**${1:bold}**",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "**": true
        },
        "opts": {}
      },
      {
        "content": "__${1:bold}__",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "__": true
        },
        "opts": {}
      },
      {
        "content": "-   ${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "-": true
        },
        "opts": {}
      },
      {
        "content": "{% blockquote %}\n${0:quote}\n{% endblockquote %}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "blockquote": true
        },
        "opts": {}
      },
      {
        "content": "{% blockquote ${1:author}, ${2:title} %}\n${0:quote}\n{% endblockquote %}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "blockquote-author": true
        },
        "opts": {}
      },
      {
        "content": "{% blockquote ${1:author} ${2:URL} ${3:link_text} %}\n${0:quote}\n{% endblockquote %}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "blockquote-link": true
        },
        "opts": {}
      },
      {
        "content": "{% codeblock %}\n${0:code_snippet}\n{% endcodeblock %}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "codeblock-short": true
        },
        "opts": {}
      },
      {
        "content": "{% codeblock ${1:title} lang:${2:language} ${3:URL} ${4:link_text} %}\n${0:code_snippet}\n{% endcodeblock %}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "codeblock-full": true
        },
        "opts": {}
      },
      {
        "content": "{% gist ${1:gist_id} ${0:filename} %}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "gist-full": true
        },
        "opts": {}
      },
      {
        "content": "{% gist ${0:gist_id} %}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "gist-short": true
        },
        "opts": {}
      },
      {
        "content": "{% img ${1:class} ${2:URL} ${3:width} ${4:height} ${5:title_text} ${0:alt_text} %}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "img": true
        },
        "opts": {}
      },
      {
        "content": "{% youtube ${0:video_id} %}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "youtube": true
        },
        "opts": {}
      },
      {
        "content": "|  ${0:factors}      |    ${1:a}       |  ${2:b}   \t|\n| ------------- |-------------  | ------- |\n|    ${3:f1}    |    Y          | N       |\n|    ${4:f2}    |    Y          | N       |",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "tb": true
        },
        "opts": {}
      },
      {
        "content": "{% pullquote %}\n${1:text} {\" ${2:quote} \"} ${0:text}\n{% endpullquote %}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "pullquote": true
        },
        "opts": {}
      }
    ],
    "matlab": [
      {
        "content": "if ${1}\n\t${0}\nend",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "if if": true
        },
        "opts": {}
      },
      {
        "content": "if ${1}\n\t${2}\nelse\n\t${0}\nend",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ife if ... else": true
        },
        "opts": {}
      },
      {
        "content": "else\n\t${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "el else": true
        },
        "opts": {}
      },
      {
        "content": "elseif ${1}\n\t${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "eif elsif": true
        },
        "opts": {}
      },
      {
        "content": "while ${1}\n\t${0}\nend",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "wh while": true
        },
        "opts": {}
      },
      {
        "content": "for ${1:i} = ${2:1:n}\n\t${0}\nend",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "for for": true
        },
        "opts": {}
      },
      {
        "content": "parfor ${1:i} = ${2:1:n}\n\t${0}\nend",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "parfor parfor": true
        },
        "opts": {}
      },
      {
        "content": "try\n\t${1}\ncatch ${2:err}\n\t${0}\nend",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "try try ... catch": true
        },
        "opts": {}
      },
      {
        "content": "switch ${1:n}\n\tcase ${2:0}\n\t\t${0}\nend",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "switch switch": true
        },
        "opts": {}
      },
      {
        "content": "@(${1:x}) ${0:x*x}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "@ anonymous function": true
        },
        "opts": {}
      },
      {
        "content": "switch ${1:n}\n\tcase ${2:0}\n\t\t${3}${4:\n\totherwise\n\t\t${5}}\nend",
        "doc": null,
        "grammar": "snu",
        "label": "switch ... otherwise",
        "matches": {
          "switch": true
        },
        "opts": {}
      }
    ],
    "mediawiki": [
      {
        "content": "== ${1} ==\n${2}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "==": true
        },
        "opts": {}
      },
      {
        "content": "=== ${1} ===\n${2}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "===": true
        },
        "opts": {}
      },
      {
        "content": "==== ${1} ====\n${2}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "====": true
        },
        "opts": {}
      },
      {
        "content": "===== ${1} =====\n${2}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "=====": true
        },
        "opts": {}
      },
      {
        "content": "====== ${1} ======\n${2}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "======": true
        },
        "opts": {}
      },
      {
        "content": "[[${1}]] ${2}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "[[": true
        },
        "opts": {}
      },
      {
        "content": "''${1}''",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "''": true
        },
        "opts": {}
      },
      {
        "content": "'''${1}'''",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "'''": true
        },
        "opts": {}
      },
      {
        "content": "'''''${1}'''''",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "'''''": true
        },
        "opts": {}
      },
      {
        "content": "<syntaxhighlight lang=\"${1}\">\n${2}\n</syntaxhighlight>",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "sy": true
        },
        "opts": {}
      },
      {
        "content": "<pre>\n${1}\n</pre>",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "pre": true
        },
        "opts": {}
      },
      {
        "content": "<html>\n${1}\n</html>",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "html": true
        },
        "opts": {}
      },
      {
        "content": "<nowiki>${1}</nowiki>",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "nowiki": true
        },
        "opts": {}
      },
      {
        "content": "<tt>${1}</tt>",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "tt": true
        },
        "opts": {}
      },
      {
        "content": "<blockquote>${1}</blockquote>",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "blockquote": true
        },
        "opts": {}
      },
      {
        "content": "<!--\nvim: filetype=mediawiki\n-->",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ft": true
        },
        "opts": {}
      },
      {
        "content": "{|class=\"wikitable\"\n|+ ${1}\n! ${2}\n! ${3}\n|-\n| ${4}\n| ${5}\n|-\n| ${6}\n| ${7}\n|-\n|\n|\n|}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "{|": true
        },
        "opts": {}
      }
    ],
    "mkd": [],
    "moon": [
      {
        "content": "print 'Hello world!'",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "helloworld": true
        },
        "opts": {
          "head": true
        }
      },
      {
        "content": "[${0:TARGET} for ${1:x} in ${2:xs}]",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "map": true
        },
        "opts": {
          "word": true
        }
      },
      {
        "content": "moon.p ${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "p": true
        },
        "opts": {
          "head": true
        }
      },
      {
        "content": "${1:f} = (${2:args}) ->\n  ${0:TARGET}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "defn": true
        },
        "opts": {}
      },
      {
        "content": "${1:f}: (${2:args}) =>\n  ${0:TARGET}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "defm": true
        },
        "opts": {
          "head": true
        }
      },
      {
        "content": "${1:moon} = require '$1'",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "require": true
        },
        "opts": {
          "head": true
        }
      }
    ],
    "mustache": [
      {
        "content": "{{#${1:value}}}\n${0:${VISUAL}}\n{{/$1}}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "if # {{#value}} ... {{/value}}": true
        },
        "opts": {}
      },
      {
        "content": "{{^${1:value}}}\n${0:${VISUAL}}\n{{/$1}}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ifn # {{^value}} ... {{/value}}": true
        },
        "opts": {}
      },
      {
        "content": "{{#${1:value}}}\n${2:${VISUAL}}\n{{/$1}}\n{{^$1}}\n${3}\n{{/$1}}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ife # {{#value}} ... {{/value}} {{^value}} ... {{/value}}": true
        },
        "opts": {}
      }
    ],
    "neosnippet": [
      {
        "content": "snippet     ${1:#:trigger}\nabbr        ${2:#:abbr}\noptions     head\n    ${3:#:TARGET}",
        "doc": "",
        "grammar": "snu",
        "label": "snippet abbr options <snippet code>",
        "matches": {
          "snip": true,
          "snippet": true
        },
        "opts": {
          "head": true
        }
      },
      {
        "content": "include ${0:filetype}.snip",
        "doc": "",
        "grammar": "snu",
        "label": "include *.snip",
        "matches": {
          "inc": true,
          "include": true
        },
        "opts": {
          "head": true
        }
      },
      {
        "content": "${${0:0}}",
        "doc": "",
        "grammar": "snu",
        "label": "${..}",
        "matches": {
          "$": true
        },
        "opts": {
          "word": true
        }
      },
      {
        "content": "\\${0}${0}",
        "doc": "",
        "grammar": "snu",
        "label": "${0}",
        "matches": {
          "0": true
        },
        "opts": {
          "word": true
        }
      },
      {
        "content": "\\${1}${0}",
        "doc": "",
        "grammar": "snu",
        "label": "${1}",
        "matches": {
          "1": true
        },
        "opts": {
          "word": true
        }
      },
      {
        "content": "\\${2}${0}",
        "doc": "",
        "grammar": "snu",
        "label": "${2}",
        "matches": {
          "2": true
        },
        "opts": {
          "word": true
        }
      },
      {
        "content": "\\${3}${0}",
        "doc": "",
        "grammar": "snu",
        "label": "${3}",
        "matches": {
          "3": true
        },
        "opts": {
          "word": true
        }
      },
      {
        "content": "\\${4}${0}",
        "doc": "",
        "grammar": "snu",
        "label": "${4}",
        "matches": {
          "4": true
        },
        "opts": {
          "word": true
        }
      },
      {
        "content": "\\${5}${0}",
        "doc": "",
        "grammar": "snu",
        "label": "${5}",
        "matches": {
          "5": true
        },
        "opts": {
          "word": true
        }
      },
      {
        "content": "${${1:0}:${0:default}}",
        "doc": "",
        "grammar": "snu",
        "label": "${X:default}",
        "matches": {
          "$:": true
        },
        "opts": {
          "word": true
        }
      },
      {
        "content": "\\${0:${0:default}}",
        "doc": "",
        "grammar": "snu",
        "label": "${0:default}",
        "matches": {
          "0:": true
        },
        "opts": {
          "word": true
        }
      },
      {
        "content": "\\${1:${0:default}}",
        "doc": "",
        "grammar": "snu",
        "label": "${1:default}",
        "matches": {
          "1:": true
        },
        "opts": {
          "word": true
        }
      },
      {
        "content": "\\${2:${0:default}}",
        "doc": "",
        "grammar": "snu",
        "label": "${2:default}",
        "matches": {
          "2:": true
        },
        "opts": {
          "word": true
        }
      },
      {
        "content": "\\${3:${0:default}}",
        "doc": "",
        "grammar": "snu",
        "label": "${3:default}",
        "matches": {
          "3:": true
        },
        "opts": {
          "word": true
        }
      },
      {
        "content": "\\${4:${0:default}}",
        "doc": "",
        "grammar": "snu",
        "label": "${4:default}",
        "matches": {
          "4:": true
        },
        "opts": {
          "word": true
        }
      },
      {
        "content": "\\${5:${0:default}}",
        "doc": "",
        "grammar": "snu",
        "label": "${5:default}",
        "matches": {
          "5:": true
        },
        "opts": {
          "word": true
        }
      },
      {
        "content": "${${1:0}#${0:optional}}",
        "doc": "",
        "grammar": "snu",
        "label": "${X#optional}",
        "matches": {
          "$#": true
        },
        "opts": {
          "word": true
        }
      },
      {
        "content": "\\${0:#${0:optional}}",
        "doc": "",
        "grammar": "snu",
        "label": "${0:#optional}",
        "matches": {
          "0#": true
        },
        "opts": {
          "word": true
        }
      },
      {
        "content": "\\${1:#${0:optional}}",
        "doc": "",
        "grammar": "snu",
        "label": "${1:#optional}",
        "matches": {
          "1#": true
        },
        "opts": {
          "word": true
        }
      },
      {
        "content": "\\${2:#${0:optional}}",
        "doc": "",
        "grammar": "snu",
        "label": "${2:#optional}",
        "matches": {
          "2#": true
        },
        "opts": {
          "word": true
        }
      },
      {
        "content": "\\${3:#${0:optional}}",
        "doc": "",
        "grammar": "snu",
        "label": "${3:#optional}",
        "matches": {
          "3#": true
        },
        "opts": {
          "word": true
        }
      },
      {
        "content": "\\${4:#${0:optional}}",
        "doc": "",
        "grammar": "snu",
        "label": "${4:#optional}",
        "matches": {
          "4#": true
        },
        "opts": {
          "word": true
        }
      },
      {
        "content": "\\${5:#${0:optional}}",
        "doc": "",
        "grammar": "snu",
        "label": "${5:#optional}",
        "matches": {
          "5#": true
        },
        "opts": {
          "word": true
        }
      },
      {
        "content": "${${0:0}:TARGET}",
        "doc": "",
        "grammar": "snu",
        "label": "${*:TARGET}",
        "matches": {
          "T": true,
          "TARGET": true
        },
        "opts": {
          "word": true
        }
      },
      {
        "content": "\\${0:TARGET}${0}",
        "doc": "",
        "grammar": "snu",
        "label": "${0:TARGET}",
        "matches": {
          "0T": true,
          "0t": true
        },
        "opts": {
          "word": true
        }
      },
      {
        "content": "\\${1:TARGET}${0}",
        "doc": "",
        "grammar": "snu",
        "label": "${1:TARGET}",
        "matches": {
          "1T": true,
          "1t": true
        },
        "opts": {
          "word": true
        }
      },
      {
        "content": "\\${2:TARGET}${0}",
        "doc": "",
        "grammar": "snu",
        "label": "${2:TARGET}",
        "matches": {
          "2T": true,
          "2t": true
        },
        "opts": {
          "word": true
        }
      },
      {
        "content": "\\${3:TARGET}${0}",
        "doc": "",
        "grammar": "snu",
        "label": "${3:TARGET}",
        "matches": {
          "3T": true,
          "3t": true
        },
        "opts": {
          "word": true
        }
      },
      {
        "content": "\\${4:TARGET}${0}",
        "doc": "",
        "grammar": "snu",
        "label": "${4:TARGET}",
        "matches": {
          "4T": true,
          "4t": true
        },
        "opts": {
          "word": true
        }
      },
      {
        "content": "\\${5:TARGET}${0}",
        "doc": "",
        "grammar": "snu",
        "label": "${5:TARGET}",
        "matches": {
          "5T": true,
          "5t": true
        },
        "opts": {
          "word": true
        }
      }
    ],
    "next": [
      {
        "content": "export async function getServerSideProps(${1:context}) {\n  return {\n    props: {}, \n  }\n}",
        "doc": "If you export an async function called getServerSideProps from a page, Next.js will pre-render this page on each request using the data returned by getServerSideProps. The context parameter is an object containing the following keys: params, req, res, query, preview, previewData.",
        "grammar": "lsp",
        "label": "next-get-server-side-props",
        "matches": {
          "next getserversideprops": true
        },
        "opts": {}
      },
      {
        "content": "export async function getStaticProps(${1:context}) {\n  return {\n    props: {}, \n  }\n}",
        "doc": "If you export an async function called getStaticProps from a page, Next.js will pre-render this page at build time using the props returned by getStaticProps. The context parameter is an object containing the following keys: params, preview, previewData.",
        "grammar": "lsp",
        "label": "next-get-static-props",
        "matches": {
          "next getstaticprops": true
        },
        "opts": {}
      },
      {
        "content": "export async function getStaticPaths() {\n  return {\n    paths: [\n      { params: { ... } } \n    ],\n    fallback: ${1|true,false|}\n  };\n}",
        "doc": "If a page has dynamic routes (documentation) and uses getStaticProps it needs to define a list of paths that have to be rendered to HTML at build time. If you export an async function called getStaticPaths from a page that uses dynamic routes, Next.js will statically pre-render all the paths specified by getStaticPaths.",
        "grammar": "lsp",
        "label": "next-get-static-paths",
        "matches": {
          "next getstaticpaths": true
        },
        "opts": {}
      },
      {
        "content": "import { useRouter } from 'next/router'",
        "doc": null,
        "grammar": "lsp",
        "label": "next-import-use-router",
        "matches": {
          "next import userouter": true
        },
        "opts": {}
      },
      {
        "content": "import Link from 'next/link'",
        "doc": null,
        "grammar": "lsp",
        "label": "next-import-link",
        "matches": {
          "next import link": true
        },
        "opts": {}
      },
      {
        "content": "<Link href=\"${1:#}\">\n  <a>${2:content}</a>\n</Link>",
        "doc": "Link accepts the following props: href, as, passHref, prefetch, replace, scroll, shallow",
        "grammar": "lsp",
        "label": "next-link",
        "matches": {
          "next link": true
        },
        "opts": {}
      },
      {
        "content": "<Link href={{ pathname: '${1:/path}', query: { ${2:paramName}: '${3:paramValue}' } }}>\n  <a>${4:content}</a>\n</Link>",
        "doc": null,
        "grammar": "lsp",
        "label": "next-link-url-object",
        "matches": {
          "next link url object": true
        },
        "opts": {}
      },
      {
        "content": "<Link href=\"${1:/path/[id]}\" as=\"${2:/path/${id}}\">\n  <a>${3:content}</a>\n</Link>",
        "doc": null,
        "grammar": "lsp",
        "label": "next-link-dynamic-route",
        "matches": {
          "next link dynamic route": true
        },
        "opts": {}
      },
      {
        "content": "import Head from 'next/head'",
        "doc": null,
        "grammar": "lsp",
        "label": "next-import-head",
        "matches": {
          "next import head": true
        },
        "opts": {}
      },
      {
        "content": "<Head>\n${1:content}\n</Head>",
        "doc": null,
        "grammar": "lsp",
        "label": "next-head",
        "matches": {
          "next head": true
        },
        "opts": {}
      },
      {
        "content": "export default (req, res) => {\n  res.json(${1:object});\n};",
        "doc": "API routes provide built in middlewares which parse the incoming request. Those middlewares are: req.cookies, req.body, req.query.",
        "grammar": "lsp",
        "label": "next-api",
        "matches": {
          "next api": true
        },
        "opts": {}
      },
      {
        "content": "export default (req, res) => {\n  if (req.method === 'POST') {\n    $1\n  } else {\n    $2\n  }\n};",
        "doc": null,
        "grammar": "lsp",
        "label": "next-api-method",
        "matches": {
          "next api method": true
        },
        "opts": {}
      }
    ],
    "nim": [
      {
        "content": "proc ${1:#:name}(${2}) =\n  ${0:pass}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "proc": true
        },
        "opts": {
          "head": true
        }
      },
      {
        "content": "proc ${1:#:name}(${2}):\ndiscard \"\"\"${3:#:function documentation}\"\"\"\n  ${0:pass}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "procd": true
        },
        "opts": {
          "head": true
        }
      },
      {
        "content": "proc ${1:#:name}(${2}):${3:#:type} =\n  ${0:pass}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "proct": true
        },
        "opts": {
          "head": true
        }
      },
      {
        "content": "proc ${1:#:name}(${2}) =\n  ${0:pass}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "procg": true
        },
        "opts": {
          "head": true
        }
      },
      {
        "content": "proc ${1:#:name}(${2}):${3:#:type} =\n  ${0:pass}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "procgt": true
        },
        "opts": {
          "head": true
        }
      },
      {
        "content": "template ${1:#:name}(${2}):${3:type} =\n  ${0:pass}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "template": true
        },
        "opts": {
          "head": true
        }
      },
      {
        "content": "macro ${1:#:name}(${2}):${3:type} =\n  ${0:pass}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "macro": true
        },
        "opts": {
          "head": true
        }
      },
      {
        "content": "elif ${1:#:condition}:\n  ${0:pass}",
        "doc": "",
        "grammar": "snu",
        "label": "elif ...: ...",
        "matches": {
          "elif": true
        },
        "opts": {
          "head": true
        }
      },
      {
        "content": "else:\n  ${0:pass}",
        "doc": "",
        "grammar": "snu",
        "label": "else: ...",
        "matches": {
          "else": true
        },
        "opts": {
          "head": true
        }
      },
      {
        "content": "for ${1:#:value} in ${2:#:list}:\n  ${0:pass}",
        "doc": "",
        "grammar": "snu",
        "label": "for ... in ...: ...",
        "matches": {
          "for": true
        },
        "opts": {
          "head": true
        }
      },
      {
        "content": "if ${1:#:condition}:\n  ${0:pass}",
        "doc": "",
        "grammar": "snu",
        "label": "if ...: ...",
        "matches": {
          "if": true
        },
        "opts": {
          "head": true
        }
      },
      {
        "content": "when ${1:#:condition}:\n  ${0:pass}",
        "doc": "",
        "grammar": "snu",
        "label": "when ...: ...",
        "matches": {
          "when": true
        },
        "opts": {
          "head": true
        }
      },
      {
        "content": "if isMainModule:\n  ${0:pass}",
        "doc": "",
        "grammar": "snu",
        "label": "if isMainModule: ...",
        "matches": {
          "ifmain": true,
          "main": true
        },
        "opts": {
          "head": true
        }
      },
      {
        "content": "try:\n  ${1:pass}\nexcept ${2:#:ExceptionClass}:\n  ${3:pass}",
        "doc": "",
        "grammar": "snu",
        "label": "try: ... except ...: ...",
        "matches": {
          "tryexcept": true
        },
        "opts": {
          "head": true
        }
      },
      {
        "content": "try:\n  ${1:pass}\nfinally:\n  ${2:pass}",
        "doc": "",
        "grammar": "snu",
        "label": "try: ... finally: ...",
        "matches": {
          "tryfinally": true
        },
        "opts": {
          "head": true
        }
      },
      {
        "content": "try: ${1:pass}\ndefer: ${2:pass}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "trydefer": true
        },
        "opts": {
          "head": true
        }
      },
      {
        "content": "while ${1:#:condition}:\n  ${0:pass}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "while": true
        },
        "opts": {
          "head": true
        }
      },
      {
        "content": "echo(${0:#:TARGET})",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "echo": true
        },
        "opts": {
          "word": true
        }
      },
      {
        "content": "fmt\"${0:#:TARGET}\"",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "fmt": true
        },
        "opts": {
          "word": true
        }
      }
    ],
    "nuxt": [
      {
        "content": "<nuxt-link to=\"$1\">$2</nuxt-link>$0",
        "doc": null,
        "grammar": "lsp",
        "label": "nuxt-linkto",
        "matches": {
          "nuxt linkto": true
        },
        "opts": {}
      },
      {
        "content": "<nuxt-link :to=\"{\t${1|name,path|}: '${2:value}', ${3|params,query|}: {\t${4:key}: '${5:value}'\t}\t}\">$6</nuxt-link>$0",
        "doc": null,
        "grammar": "lsp",
        "label": "nuxt-namedlinkto",
        "matches": {
          "nuxt namedlinkto": true
        },
        "opts": {}
      },
      {
        "content": "<nuxt>$1</nuxt>$0",
        "doc": null,
        "grammar": "lsp",
        "label": "nuxt-view",
        "matches": {
          "nuxt view": true
        },
        "opts": {}
      },
      {
        "content": "<nuxt name=\"$1\">$2</nuxt>$0",
        "doc": null,
        "grammar": "lsp",
        "label": "nuxt-namedview",
        "matches": {
          "nuxt namedview": true
        },
        "opts": {}
      },
      {
        "content": "<nuxt-child $1/>$0",
        "doc": null,
        "grammar": "lsp",
        "label": "nuxt-child",
        "matches": {
          "nuxt child": true
        },
        "opts": {}
      },
      {
        "content": "asyncData ({isDev, route, store, env, params, query, req, res, redirect, error}) {\n\treturn { ${1:data} }\n\n},",
        "doc": "Fetch and pre-render data on the server without using a store. The result from asyncData will be merged with data",
        "grammar": "lsp",
        "label": "nuxt-async-data",
        "matches": {
          "nuxt asyncdata": true
        },
        "opts": {}
      },
      {
        "content": "head () {\n\treturn {\n\t\ttitle: '${1:title}',\n\t\tmeta: [\n\t\t\t{ hid: '${2:description}', name: '${3:description}', content: '${4:custom description}' }\n\t\t]\n\t}\n},",
        "doc": "Use the head method to set the HTML Head tags for the current page",
        "grammar": "lsp",
        "label": "nuxt-head",
        "matches": {
          "nuxt head": true
        },
        "opts": {}
      },
      {
        "content": "middleware ({ store, redirect }) {\n\t${1:data}\n},",
        "doc": "Set the middleware for a specific page of the application.",
        "grammar": "lsp",
        "label": "nuxt-middleware",
        "matches": {
          "nuxt middleware": true
        },
        "opts": {}
      },
      {
        "content": "validate({ params, query, store }) {\n\t${1:data}\n},",
        "doc": "Validate is called every time before navigating to a new route.",
        "grammar": "lsp",
        "label": "nuxt-validate",
        "matches": {
          "nuxt validate": true
        },
        "opts": {}
      },
      {
        "content": "watchQuery (newQuery, oldQuery) {\n\t${1:data}\n},",
        "doc": "Use the watchQuery key to set up a watcher for query strings.",
        "grammar": "lsp",
        "label": "nuxt-watch-query",
        "matches": {
          "nuxt watchquery": true
        },
        "opts": {}
      },
      {
        "content": "nuxtServerInit ({ commit }, { req }) {\n\t${1:data}\n}",
        "doc": "In universal mode, useful to fetch data on the server and give directly to the client-side.",
        "grammar": "lsp",
        "label": "nuxt-serverinit",
        "matches": {
          "nuxt serverinit": true
        },
        "opts": {}
      }
    ],
    "nuxt-config": [
      {
        "content": "{ rel: 'stylesheet', href: '${1:https://fonts.googleapis.com/css?family=Montserrat:600|Rufina:700}' }",
        "doc": "link to include fonts in a nuxt project, in nuxt-config",
        "grammar": "lsp",
        "label": "Nuxt Font",
        "matches": {
          "nfont": true
        },
        "opts": {}
      },
      {
        "content": "css: ['assets/${1:normalize.css}'],",
        "doc": "link to css assets such as normalize",
        "grammar": "lsp",
        "label": "Nuxt Use CSS File",
        "matches": {
          "ncss": true
        },
        "opts": {}
      }
    ],
    "nuxt-script": [
      {
        "content": "async fetch ({ store, ${1:params} }) {\n\tlet { data } = await fetch('${2:endpoint}').then(res => res.json())\n\tstore.commit('${3:MUTATION_TYPE}', data)\n},",
        "doc": "Nuxt Fetch",
        "grammar": "lsp",
        "label": "Nuxt Fetch",
        "matches": {
          "nfetch": true
        },
        "opts": {}
      },
      {
        "content": "this.$route.params.${1:id}",
        "doc": "Nuxt Route Params",
        "grammar": "lsp",
        "label": "Nuxt Route Params",
        "matches": {
          "nparam": true
        },
        "opts": {}
      },
      {
        "content": "head () {\n\treturn {\n\t\ttitle: ${1:'Page Title'},\n\t\tmeta: [\n\t\t\t// hid is used as unique identifier. Do not use `vmid` for it as it will not work\n\t\t\t{ hid: 'description', name: 'description', content: ${2:'My custom description'} }\n\t\t]\n\t}\n},",
        "doc": "Nuxt Head",
        "grammar": "lsp",
        "label": "Nuxt Head",
        "matches": {
          "nhead": true
        },
        "opts": {}
      }
    ],
    "objc": [
      {
        "content": "@selector(${1:#:method}:)",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "sel": true
        },
        "opts": {}
      },
      {
        "content": "#import <${1:Cocoa/Cocoa.h}>",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "imp": true
        },
        "opts": {}
      },
      {
        "content": "#import \"${1}}\"",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "Imp": true
        },
        "opts": {}
      },
      {
        "content": "NSLog(@\"${1}\")",
        "doc": "",
        "grammar": "snu",
        "label": "NSLog(...)",
        "matches": {
          "log": true
        },
        "opts": {}
      },
      {
        "content": "@interface ${1} : ${2:NSObject}\n{\n}\n@end\n@implementation ${1}\n- (id)init\n{\n\tif((self = [super init]))\n\t{${0}\n\t}\n\treturn self;\n}\n@end",
        "doc": "",
        "grammar": "snu",
        "label": "Class",
        "matches": {
          "cl": true
        },
        "opts": {}
      },
      {
        "content": "@interface ${1} : ${2:NSObject}\n{${3}\n}\n${0}\n@end",
        "doc": "",
        "grammar": "snu",
        "label": "ClassInterface",
        "matches": {
          "cli": true
        },
        "opts": {}
      },
      {
        "content": "@implementation ${1:object}\n- (id)init\n{\n\tif((self = [super init]))\n\t{${0}\n\t}\n\treturn self;\n}\n@end",
        "doc": "",
        "grammar": "snu",
        "label": "ClassImplementation",
        "matches": {
          "clm": true
        },
        "opts": {}
      },
      {
        "content": "@interface ${1:NSObject} (${2:Category})\n@end\n@implementation ${1} (${2})\n${0}\n@end",
        "doc": "",
        "grammar": "snu",
        "label": "Category",
        "matches": {
          "cat": true
        },
        "opts": {}
      },
      {
        "content": "@interface ${1:NSObject)} (${2:Category)})\n${0}\n@end",
        "doc": "",
        "grammar": "snu",
        "label": "CategoryInterface",
        "matches": {
          "cati": true
        },
        "opts": {}
      },
      {
        "content": "NSMutableArray *${1:#:array} = [NSMutableArray array];",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "array": true
        },
        "opts": {}
      },
      {
        "content": "NSMutableDictionary *${1:#:dict} = [NSMutableDictionary dictionary];",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "dict": true
        },
        "opts": {}
      },
      {
        "content": "NSBezierPath *${1:#:path} = [NSBezierPath bezierPath];",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "bez": true
        },
        "opts": {}
      },
      {
        "content": "- (${1:#:id})${2:#:method}${3:(#:id)}${4:#:anArgument}\n{\n${0}\n\treturn nil;\n}",
        "doc": "",
        "grammar": "snu",
        "label": "Method",
        "matches": {
          "m": true
        },
        "opts": {}
      },
      {
        "content": "- (${1:#:id})${2:#:method}${3:(#:id)}${4:#:anArgument};",
        "doc": "",
        "grammar": "snu",
        "label": "Method",
        "matches": {
          "M": true
        },
        "opts": {}
      },
      {
        "content": "+ (${1:#:id})${2:#:method}${3:(#:id)}${4:#:anArgument}\n{\n${0}\n\treturn nil;\n}",
        "doc": "",
        "grammar": "snu",
        "label": "ClassMethod",
        "matches": {
          "cm": true
        },
        "opts": {}
      },
      {
        "content": "+ (${1:#:id})${0:#:method};",
        "doc": "",
        "grammar": "snu",
        "label": "InterfaceClassMethod",
        "matches": {
          "icm": true
        },
        "opts": {}
      },
      {
        "content": "- (${1:#:id})${2:#:method}${3:(#:id)}${4:#:anArgument}\n{\n\t${1} res = [super ${2:#:method}]\n\treturn res;\n}",
        "doc": "",
        "grammar": "snu",
        "label": "SubMethod",
        "matches": {
          "sm": true
        },
        "opts": {}
      },
      {
        "content": "+ (void)initialize\n{\n\t[[NSUserDefaults standardUserDefaults] registerDefaults:[NSDictionary dictionaryWithObjectsAndKeys:\n\t\t${0}@\"value\", @\"key\",\n\t\tnil]];\n}",
        "doc": "",
        "grammar": "snu",
        "label": "MethodInitialize",
        "matches": {
          "mi": true
        },
        "opts": {}
      },
      {
        "content": "- (${1:#:id})${2:#:thing}\n{\n\treturn ${2};\n}\n- (void)set${2}:(${1})aValue\n{\n\t${0}${1}old${2} = ${2};\n\t${2} = [aValue retain];\n\t[old${2} release];\n}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "obj": true
        },
        "opts": {}
      },
      {
        "content": "- (${1:#:id})${2:#:thing};\n- (void)set${2}:(${1})aValue;",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "iobj": true
        },
        "opts": {}
      },
      {
        "content": "- (NSString${$1: *)})${1:#:thing}\n{\n\treturn ${2};\n}\n- (void)set${1}:(NSString${2: *})${3}\n{\n\t${3} = [${3} copy];\n\t[${2} release];\n\t${2} = ${3};\n}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "str": true
        },
        "opts": {}
      },
      {
        "content": "- (NSString${1: *)}${1:#:thing};\n- (void)set${1}:(NSString${2: *})${2};",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "istr": true
        },
        "opts": {}
      },
      {
        "content": "- (${1:#:id})${2:#:attribute}\n{\n\t[self willAccessValueForKey:@\"$2\"];\n\t$1 value = [self primitiveValueForKey:@\"$2\"];\n\t[self didAccessValueForKey:@\"$2\"];\n\treturn value;\n}\n- (void)set$2:($1)aValue\n{\n\t[self willChangeValueForKey:@\"$2\"];\n\t[self setPrimitiveValue:aValue forKey:@\"$2\"];\n\t[self didChangeValueForKey:@\"$2\"];\n}",
        "doc": "",
        "grammar": "snu",
        "label": "CoreData",
        "matches": {
          "cd": true
        },
        "opts": {}
      },
      {
        "content": "- (void)addObjectTo${1:#:Things}:(${2:#:id})anObject\n{\n\t[${3}} addObject:anObject];\n}\n- (void)insertObject:($2)anObject in$1AtIndex:(unsigned int)i\n{\n\t[${3} insertObject:anObject atIndex:i];\n}\n- (${2})objectIn${1}AtIndex:(unsigned int)i\n{\n\treturn [${3} objectAtIndex:i];\n}\n- (unsigned int)indexOfObjectIn${1}:(${2})anObject\n{\n\treturn [${3} indexOfObject:anObject];\n}\n- (void)removeObjectFrom${1}AtIndex:(unsigned int)i\n{\n\t [${3} removeObjectAtIndex:i];\n}\n- (unsigned int)countOf${1}\n{\n\treturn [${3} count];\n}\n- (NSArray${4: *}${1}\n{\n\treturn ${3}\n}\n- (void)set${1}:(NSArray${4: *})new${1}\n{\n\t[${3} setArray:new${1}];\n}",
        "doc": "",
        "grammar": "snu",
        "label": "KVCArry",
        "matches": {
          "karray": true
        },
        "opts": {}
      },
      {
        "content": "- (void)addObjectTo${1:#:Things}:(${2:#:id})anObject;\n- (void)insertObject:(${2})anObject in${1}AtIndex:(unsigned int)i;\n- (${2})objectIn${1}AtIndex:(unsigned int)i;\n- (unsigned int)indexOfObjectIn${1}:(${2})anObject;\n- (void)removeObjectFrom${1}AtIndex:(unsigned int)i;\n- (unsigned int)countOf${1};\n- (NSArray${3: *})${1};\n- (void)set${1}:(NSArray${3: *})new${1};",
        "doc": "",
        "grammar": "snu",
        "label": "InterfaceAccessorsForKVCArray",
        "matches": {
          "iarray": true
        },
        "opts": {}
      },
      {
        "content": "- (${1:unsigned int})${2:#:thing}\n{\n\treturn ${3};\n}\n- (void)set${2}:(${1:unsigned int})new${2}\n{\n\t${3} = new${2};\n}",
        "doc": "",
        "grammar": "snu",
        "label": "PrimitiveType",
        "matches": {
          "acc": true
        },
        "opts": {}
      },
      {
        "content": "- (${1:unsigned int})${2:thing};\n- (void)set${2}:($1)new${2};",
        "doc": "",
        "grammar": "snu",
        "label": "Interface:AccessorsForPrimitiveType",
        "matches": {
          "iacc": true
        },
        "opts": {}
      },
      {
        "content": "[[NSUserDefaults standardUserDefaults] objectForKey:${1:key}];",
        "doc": "",
        "grammar": "snu",
        "label": "ReadDefaultsValue",
        "matches": {
          "rdef": true
        },
        "opts": {}
      },
      {
        "content": "[[NSUserDefaults standardUserDefaults] setObject:${1:object} forKey:${2:key}];",
        "doc": "",
        "grammar": "snu",
        "label": "WriteDefaultsValue",
        "matches": {
          "wdef": true
        },
        "opts": {}
      },
      {
        "content": "IBOutlet ${1}${2: *}${3};",
        "doc": "",
        "grammar": "snu",
        "label": "IBOutlet",
        "matches": {
          "ibo": true
        },
        "opts": {}
      },
      {
        "content": "@synthesize ${1:#:property};",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "syn": true
        },
        "opts": {}
      },
      {
        "content": "bind:@\"${2:#:binding}\" toObject:${3:observableController} withKeyPath:@\"${4:keyPath}\" options:${5:nil}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "bind": true
        },
        "opts": {}
      },
      {
        "content": "[[NSNotificationCenter defaultCenter] addObserver:${1:self} selector:@selector(${3}) name:${2:NSWindowDidBecomeMainNotification} object:${4:nil}];",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "reg": true
        },
        "opts": {}
      },
      {
        "content": "[self lockFocus];\n${0}\n[self unlockFocus];",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "focus": true
        },
        "opts": {}
      },
      {
        "content": "unsigned int\t${1:object}Count = [${2:array} count];\nfor(unsigned int index = 0; index < ${1}Count; index += 1)\n{\n\t${3:id}\t${1} = [${2} objectAtIndex:index];\n\t${0}\n}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "forarray": true
        },
        "opts": {}
      },
      {
        "content": "int choice = NSRunAlertPanel(@\"${1:Something important!}\", @\"${2:Something important just happend, and now I need to ask you, do you want to continue?}\", @\"${3:Continue}\", @\"${4:Cancel}\", nil);\nif(choice == NSAlertDefaultReturn) // \"${3:Continue}\"\n{\n\t${0};\n}\nelse if(choice == NSAlertAlternateReturn) // \"${4:Cancel}\"\n{\n}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "alert": true
        },
        "opts": {}
      },
      {
        "content": "${1} Send ${2} to ${1}, if ${1} supports it}${3}\nif ([${1:self} respondsToSelector:@selector(${2:someSelector:})])\n{\n    [${1} ${3}];\n}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "res": true
        },
        "opts": {}
      },
      {
        "content": "if([${1:[self delegate]} respondsToSelector:@selector(${2:selfDidSomething:})])\n\t[${1} ${3}];",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "del": true
        },
        "opts": {}
      },
      {
        "content": "[NSString stringWithFormat:@\"${1}\", ${2}]${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "format": true
        },
        "opts": {}
      },
      {
        "content": "[NSGraphicsContext saveGraphicsState];\n${0}\n[NSGraphicsContext restoreGraphicsState];",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "save": true
        },
        "opts": {}
      },
      {
        "content": "[NSThread detachNewThreadSelector:@selector(${1:#:method}:) toTarget:${2:#:aTarget} withObject:${3:#:anArgument}]",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "thread": true
        },
        "opts": {}
      },
      {
        "content": "NSAutoreleasePool${TM_C_POINTER: *}pool = [NSAutoreleasePool new];\n${0}\n[pool drain];",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "pool": true
        },
        "opts": {}
      },
      {
        "content": "#import <${1:Cocoa/Cocoa.h}>",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "Imp": true
        },
        "opts": {}
      },
      {
        "content": "@selector(${1:method}:)",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "sel": true
        },
        "opts": {}
      },
      {
        "content": "@\"${1}\"",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "s": true
        },
        "opts": {}
      },
      {
        "content": "${1:NSObject} *${2:foo} = [${3:$1 alloc}]${4};",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "o": true
        },
        "opts": {}
      },
      {
        "content": "NSLog(@\"${1:%@}\"${2});",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "log": true
        },
        "opts": {}
      },
      {
        "content": "- (id)init\n{\n\tif (self = [super init]) {\n\t\t${0}\n\t}\n\treturn self;\n}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "init": true
        },
        "opts": {}
      },
      {
        "content": "- (void) dealloc\n{\n\t${0:deallocations}\n\t[super dealloc];\n}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "dealloc": true
        },
        "opts": {}
      },
      {
        "content": "[super ${1:init}]",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "su": true
        },
        "opts": {}
      },
      {
        "content": "IBOutlet ${1:NSSomeClass} *${2:$1};",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ibo": true
        },
        "opts": {}
      },
      {
        "content": "@interface ${1:NSObject} (${2:MyCategory})\n@end\n@implementation $1 ($2)\n${0}\n@end",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "cat": true
        },
        "opts": {}
      },
      {
        "content": "- (${1:id})${2:method}\n{\n\t${0}\n}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "m": true
        },
        "opts": {}
      },
      {
        "content": "- (${1:id})${2:method};",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "md": true
        },
        "opts": {}
      },
      {
        "content": "- (IBAction)${1:method}:(${2:id})sender;",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ibad": true
        },
        "opts": {}
      },
      {
        "content": "- (IBAction)${1:method}:(${2:id})sender\n{\n\t${0}\n}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "iba": true
        },
        "opts": {}
      },
      {
        "content": "- (void)awakeFromNib\n{\n\t${0}\n}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "wake": true
        },
        "opts": {}
      },
      {
        "content": "+ (${1:id})${2:method}\n{\n\t${0:return nil;}\n}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "M": true
        },
        "opts": {}
      },
      {
        "content": "- (${1:id})${2:method}\n{\n\t[super $2];${0}\n\treturn self;\n}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "sm": true
        },
        "opts": {}
      },
      {
        "content": "- (${1:id})${2:thing}\n{\n\treturn $2;\n}\n- (void)set$2:($1)${3:new$2}\n{\n\t[$3 retain];\n\t[$2 release];\n\t$2 = $3;\n}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "objacc": true
        },
        "opts": {}
      },
      {
        "content": "for (${1:Class} *${2:some$1} in ${3:array}) {\n\t${0}\n}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "forin": true
        },
        "opts": {}
      },
      {
        "content": "for (${1:object} in ${2:array}) {\n\t${0:statements}\n}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "fore": true
        },
        "opts": {}
      },
      {
        "content": "unsigned int ${1:object}Count = [${2:array} count];\nfor (unsigned int index = 0; index < $1Count; index++) {\n\t${3:id} $1 = [$2 $1AtIndex:index];\n\t${0}\n}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "forarray": true
        },
        "opts": {}
      },
      {
        "content": "unsigned int ${1:object}Count = [${2:array} count];\nfor (unsigned int index = 0; index < $1Count; index++) {\n\t${3:id} $1 = [$2 $1AtIndex:index];\n\t${0}\n}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "fora": true
        },
        "opts": {}
      },
      {
        "content": "@try {\n\t${1:statements}\n}\n@catch (NSException * e) {\n\t${2:handler}\n}\n@finally {\n\t${0:statements}\n}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "@try": true
        },
        "opts": {}
      },
      {
        "content": "@catch (${1:exception}) {\n\t${0:handler}\n}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "@catch": true
        },
        "opts": {}
      },
      {
        "content": "@finally {\n\t${0:statements}\n}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "@finally": true
        },
        "opts": {}
      },
      {
        "content": "@property (${1:retain}) ${2:NSSomeClass} ${3:*$2};",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "prop": true
        },
        "opts": {}
      },
      {
        "content": "@synthesize ${1:property};",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "syn": true
        },
        "opts": {}
      },
      {
        "content": "[[${1:foo} alloc] init${2}];",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "alloc": true
        },
        "opts": {}
      },
      {
        "content": "[[${1:foo} alloc] init${2}];",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "a": true
        },
        "opts": {}
      },
      {
        "content": "[${1:foo} retain];",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ret": true
        },
        "opts": {}
      },
      {
        "content": "[${0:foo} release];",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "rel": true
        },
        "opts": {}
      },
      {
        "content": "[${0:foo} autorelease];",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "arel": true
        },
        "opts": {}
      },
      {
        "content": "NSAutoreleasePool *${1:pool} = [[NSAutoreleasePool alloc] init];\n${0}\n[$1 drain];",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "pool": true
        },
        "opts": {}
      },
      {
        "content": "NSException *${1:badness};\n$1 = [NSException exceptionWithName:@\"${2:$1Name}\"\n                             reason:@\"${0}\"\n                           userInfo:nil];\n[$1 raise];",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "except": true
        },
        "opts": {}
      },
      {
        "content": "#pragma mark ${0:-}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "prag": true
        },
        "opts": {}
      },
      {
        "content": "@class ${1:Foo};",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "cl": true
        },
        "opts": {}
      },
      {
        "content": "[[NSColor ${0:blackColor}] set];",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "color": true
        },
        "opts": {}
      },
      {
        "content": "NSMutableArray *${1:array} = [NSMutable array];",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "array": true
        },
        "opts": {}
      },
      {
        "content": "NSArray ${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "nsa": true
        },
        "opts": {}
      },
      {
        "content": "NSMutableArray ${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "nsma": true
        },
        "opts": {}
      },
      {
        "content": "NSArray * array;",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "aa": true
        },
        "opts": {}
      },
      {
        "content": "NSMutableArray * array;",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ma": true
        },
        "opts": {}
      },
      {
        "content": "NSMutableDictionary *${1:dict} = [NSMutableDictionary dictionary];",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "dict": true
        },
        "opts": {}
      },
      {
        "content": "NSDictionary ${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "nsd": true
        },
        "opts": {}
      },
      {
        "content": "NSMutableDictionary ${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "nsmd": true
        },
        "opts": {}
      },
      {
        "content": "NSString ${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "nss": true
        },
        "opts": {}
      },
      {
        "content": "NSMutableString ${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "nsms": true
        },
        "opts": {}
      },
      {
        "content": "#import <${1:Cocoa/Cocoa.h}>",
        "doc": null,
        "grammar": "snu",
        "label": "#import <> (Imp)",
        "matches": {
          "Imp": true
        },
        "opts": {}
      },
      {
        "content": "NSMutableArray *${1:array} = [NSMutableArray array];",
        "doc": null,
        "grammar": "snu",
        "label": "NSArray (array)",
        "matches": {
          "array": true
        },
        "opts": {}
      },
      {
        "content": "NSMutableDictionary *${1:dict} = [NSMutableDictionary dictionary];",
        "doc": null,
        "grammar": "snu",
        "label": "NSDictionary (dict)",
        "matches": {
          "dict": true
        },
        "opts": {}
      },
      {
        "content": "unsigned int\t${1:object}Count = [${2:array} count];\n\nfor(unsigned int index = 0; index < $1Count; index += 1)\n{\n\t${3:id}\t$1 = [$2 objectAtIndex:index];\n\t$0\n}",
        "doc": null,
        "grammar": "snu",
        "label": "for NSArray loop (forarray)",
        "matches": {
          "forarray": true
        },
        "opts": {}
      },
      {
        "content": "@selector(${1:method}:)",
        "doc": null,
        "grammar": "snu",
        "label": "@selector",
        "matches": {
          "sel": true
        },
        "opts": {}
      },
      {
        "content": "[NSThread detachNewThreadSelector:@selector(${1:method}:) toTarget:${2:aTarget} withObject:${3:anArgument}]",
        "doc": null,
        "grammar": "snu",
        "label": "Detach New NSThread",
        "matches": {
          "thread": true
        },
        "opts": {}
      },
      {
        "content": "+ (void)initialize\n{\n\t[[NSUserDefaults standardUserDefaults] registerDefaults:[NSDictionary dictionaryWithObjectsAndKeys:\n\t\t$0@\"value\", @\"key\",\n\t\tnil]];\n}",
        "doc": null,
        "grammar": "snu",
        "label": "Initialize Implementation (I)",
        "matches": {
          "I": true
        },
        "opts": {}
      },
      {
        "content": "bind:@\"${1:binding}\" toObject:${2:observableController} withKeyPath:@\"${3:keyPath}\" options:${4:nil}",
        "doc": null,
        "grammar": "snu",
        "label": "Key:value binding (bind)",
        "matches": {
          "bind": true
        },
        "opts": {}
      },
      {
        "content": "[self lockFocus];\n$0\n[self unlockFocus];",
        "doc": null,
        "grammar": "snu",
        "label": "Lock Focus",
        "matches": {
          "focus": true
        },
        "opts": {}
      },
      {
        "content": "NSAutoreleasePool *pool = [NSAutoreleasePool new];\n$0\n[pool drain];",
        "doc": null,
        "grammar": "snu",
        "label": "NSAutoreleasePool (pool)",
        "matches": {
          "pool": true
        },
        "opts": {}
      },
      {
        "content": "int choice = NSRunAlertPanel(@\"${1:Something important!}\", @\"${2:Something important just happend, and now I need to ask you, do you want to continue?}\", @\"${3:Continue}\", @\"${4:Cancel}\", nil);\nif(choice == NSAlertDefaultReturn) // \"$3\"\n{\n\t$0;\n}\nelse if(choice == NSAlertAlternateReturn) // \"$4\"\n{\n\t\t$0\n}",
        "doc": null,
        "grammar": "snu",
        "label": "NSRunAlertPanel (alert)",
        "matches": {
          "alert": true
        },
        "opts": {}
      },
      {
        "content": "[NSString stringWithFormat:@\"$1\", $2]$0",
        "doc": null,
        "grammar": "snu",
        "label": "NSString stringWithFormat (format)",
        "matches": {
          "format": true
        },
        "opts": {}
      },
      {
        "content": "[[NSUserDefaults standardUserDefaults] objectForKey:${1:key}];",
        "doc": null,
        "grammar": "snu",
        "label": "Read from defaults (getprefs)",
        "matches": {
          "getprefs": true
        },
        "opts": {}
      },
      {
        "content": "[NSGraphicsContext saveGraphicsState];\n$0\n[NSGraphicsContext restoreGraphicsState];\n",
        "doc": null,
        "grammar": "snu",
        "label": "Save and Restore Graphics Context (gsave)",
        "matches": {
          "gsave": true
        },
        "opts": {}
      },
      {
        "content": "@synthesize ${1:property};",
        "doc": null,
        "grammar": "snu",
        "label": "Synthesize",
        "matches": {
          "syn": true
        },
        "opts": {}
      },
      {
        "content": "[[NSUserDefaults standardUserDefaults] setObject:${1:object} forKey:${2:key}];",
        "doc": null,
        "grammar": "snu",
        "label": "Write to defaults (setprefs)",
        "matches": {
          "setprefs": true
        },
        "opts": {}
      }
    ],
    "ocaml": [
      {
        "content": "module type ${1} = sig\n  ${2:TARGET}\nend",
        "doc": "",
        "grammar": "snu",
        "label": "module signature",
        "matches": {
          "mot": true
        },
        "opts": {
          "head": true
        }
      },
      {
        "content": "module ${1} = struct\n  ${2:TARGET}\nend",
        "doc": "",
        "grammar": "snu",
        "label": "module struct",
        "matches": {
          "mod": true
        },
        "opts": {
          "head": true
        }
      },
      {
        "content": "module ${1} : sig\n  ${2:TARGET}\nend",
        "doc": "",
        "grammar": "snu",
        "label": "module signature",
        "matches": {
          "mos": true
        },
        "opts": {
          "head": true
        }
      },
      {
        "content": "(* ${0:TARGET} *)",
        "doc": "",
        "grammar": "snu",
        "label": "comment",
        "matches": {
          "cc": true
        },
        "opts": {}
      },
      {
        "content": "(*\n   ${0:TARGET}\n*)",
        "doc": "",
        "grammar": "snu",
        "label": "multi line comment",
        "matches": {
          "Cc": true
        },
        "opts": {}
      },
      {
        "content": "(** ${0:TARGET} *)",
        "doc": "",
        "grammar": "snu",
        "label": "ocamldoc comment (** .. *)",
        "matches": {
          "oo": true
        },
        "opts": {}
      },
      {
        "content": "if ${1:TARGET}\nthen ${2}\nelse ${3}",
        "doc": "",
        "grammar": "snu",
        "label": "if..then..else",
        "matches": {
          "if": true
        },
        "opts": {}
      },
      {
        "content": "let ${1:TARGET} in ${0}",
        "doc": "",
        "grammar": "snu",
        "label": "let..in",
        "matches": {
          "let": true
        },
        "opts": {}
      },
      {
        "content": "let rec ${1:TARGET}\nin ${0}",
        "doc": "",
        "grammar": "snu",
        "label": "let rec .. in",
        "matches": {
          "letr": true
        },
        "opts": {
          "head": true
        }
      },
      {
        "content": "match ${1:TARGET} with\n| ${2} -> ${0}",
        "doc": "",
        "grammar": "snu",
        "label": "match",
        "matches": {
          "match": true
        },
        "opts": {}
      },
      {
        "content": "object\n  ${0:TARGET}\nend",
        "doc": "",
        "grammar": "snu",
        "label": "object",
        "matches": {
          "obj": true
        },
        "opts": {}
      },
      {
        "content": "try ${1:TARGET}\nwith ${0}",
        "doc": "",
        "grammar": "snu",
        "label": "try..with",
        "matches": {
          "try": true
        },
        "opts": {}
      },
      {
        "content": "let open ${1} in\n${2:TARGET}",
        "doc": "",
        "grammar": "snu",
        "label": "let open .. in",
        "matches": {
          "lopen": true
        },
        "opts": {
          "head": true
        }
      },
      {
        "content": "for ${1:i} = ${2:0} to ${3:10} do\n  ${0:TARGET}\ndone",
        "doc": "",
        "grammar": "snu",
        "label": "for i=x..y do; ... done",
        "matches": {
          "for": true
        },
        "opts": {
          "head": true
        }
      },
      {
        "content": "while ${1:true} do\n  ${2:TARGET}\ndone",
        "doc": "",
        "grammar": "snu",
        "label": "while ... do; ... done",
        "matches": {
          "while": true
        },
        "opts": {
          "head": true
        }
      },
      {
        "content": "(fun ${1:x} -> ${2:TARGET})",
        "doc": "",
        "grammar": "snu",
        "label": "(fun x -> ...)",
        "matches": {
          "fun": true
        },
        "opts": {}
      },
      {
        "content": "[| ${0:TARGET} |]",
        "doc": "",
        "grammar": "snu",
        "label": "array literal [| |]",
        "matches": {
          "arl": true
        },
        "opts": {}
      },
      {
        "content": "failwith \"${0:TARGET}\"",
        "doc": "",
        "grammar": "snu",
        "label": "failwith \"...\"",
        "matches": {
          "fail": true
        },
        "opts": {}
      },
      {
        "content": "begin ${0:TARGET} end",
        "doc": "",
        "grammar": "snu",
        "label": "begin ... end",
        "matches": {
          "beg": true
        },
        "opts": {}
      },
      {
        "content": "exception ${0:TARGET} of ${1:string}",
        "doc": "",
        "grammar": "snu",
        "label": "exception",
        "matches": {
          "exn": true
        },
        "opts": {
          "head": true
        }
      },
      {
        "content": "{${0:}|${1:TARGET}|$0}",
        "doc": "",
        "grammar": "snu",
        "label": "string literals {xxx| ... |xxx}",
        "matches": {
          "lit": true
        },
        "opts": {
          "head": true
        }
      },
      {
        "content": "[@@deriving ${0:TARGET}]",
        "doc": "",
        "grammar": "snu",
        "label": "[@@deriving ...]",
        "matches": {
          "@@": true
        },
        "opts": {
          "head": true
        }
      },
      {
        "content": "(** ${0} *)",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "doc": true
        },
        "opts": {}
      },
      {
        "content": "(* ${0} *)",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "comment": true
        },
        "opts": {}
      },
      {
        "content": "let ${1} = ${2} in\n${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "let": true
        },
        "opts": {}
      },
      {
        "content": "let ${1} =\n\t${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "fn": true
        },
        "opts": {}
      },
      {
        "content": "type ${1} = ${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "fun": true
        },
        "opts": {}
      },
      {
        "content": "module ${1} = struct\n\t${0}\nend",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "mod": true
        },
        "opts": {}
      },
      {
        "content": "module type ${1} = sig\n\t${0}\nend",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "modty": true
        },
        "opts": {}
      },
      {
        "content": "match ${1} with\n| ${2} -> ${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "sw": true
        },
        "opts": {}
      },
      {
        "content": "| ${1} -> ${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "|": true
        },
        "opts": {}
      },
      {
        "content": "|> ${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "p": true
        },
        "opts": {}
      },
      {
        "content": "if ${1} then\n\t${2}\nelse\n\t${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "if": true
        },
        "opts": {}
      },
      {
        "content": "let rec ${1} =\n\t${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "fnr": true
        },
        "opts": {}
      },
      {
        "content": "try\n\t${1}\nwith ${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "try": true
        },
        "opts": {}
      },
      {
        "content": "raise (${1:Not_found})",
        "doc": null,
        "grammar": "snu",
        "label": "raise",
        "matches": {
          "rs": true
        },
        "opts": {
          "b": true
        }
      },
      {
        "content": "let open ${1:module} in\n${2:e}",
        "doc": null,
        "grammar": "snu",
        "label": "open",
        "matches": {
          "open": true
        },
        "opts": {}
      },
      {
        "content": "try ${1:e}\nwith ${2:Not_found} -> ${3:()}",
        "doc": null,
        "grammar": "snu",
        "label": "try",
        "matches": {
          "try": true
        },
        "opts": {}
      },
      {
        "content": "let ${1:name} = ref ${2:val} in\n${3:e}",
        "doc": null,
        "grammar": "snu",
        "label": "ref",
        "matches": {
          "ref": true
        },
        "opts": {}
      },
      {
        "content": "match ${1:list} with\n| [] -> ${2:()}\n| x::xs -> ${3:()}",
        "doc": null,
        "grammar": "snu",
        "label": "pattern match on a list",
        "matches": {
          "matchl": true
        },
        "opts": {}
      },
      {
        "content": "match ${1:x} with\n| Some(${2:y}) -> ${3:()}\n| None -> ${4:()}",
        "doc": null,
        "grammar": "snu",
        "label": "pattern match on an option type",
        "matches": {
          "matcho": true
        },
        "opts": {}
      },
      {
        "content": "(fun ${1:x} -> ${2:x})",
        "doc": null,
        "grammar": "snu",
        "label": "anonymous function",
        "matches": {
          "fun": true
        },
        "opts": {}
      },
      {
        "content": "(* ${1:comment} *)",
        "doc": null,
        "grammar": "snu",
        "label": "commment",
        "matches": {
          "cc": true
        },
        "opts": {}
      },
      {
        "content": "let ${1:x} = ${2:v} in\n${3:e}",
        "doc": null,
        "grammar": "snu",
        "label": "let .. in binding",
        "matches": {
          "let": true
        },
        "opts": {}
      },
      {
        "content": "let rec ${1:f} =\n\t${2:expr}",
        "doc": null,
        "grammar": "snu",
        "label": "let rec",
        "matches": {
          "lr": true
        },
        "opts": {}
      },
      {
        "content": "if ${1:(* condition *)} then\n\t${2:(* A *)}\nelse\n\t${3:(* B *)}",
        "doc": null,
        "grammar": "snu",
        "label": "if",
        "matches": {
          "if": true
        },
        "opts": {}
      },
      {
        "content": "if ${1:(* condition *)} then\n\t${2:(* A *)}",
        "doc": null,
        "grammar": "snu",
        "label": "If",
        "matches": {
          "If": true
        },
        "opts": {}
      },
      {
        "content": "while ${1:(* condition *)} do\n\t${2:(* A *)}\ndone",
        "doc": null,
        "grammar": "snu",
        "label": "while",
        "matches": {
          "while": true
        },
        "opts": {}
      },
      {
        "content": "for ${1:i} = ${2:1} to ${3:10} do\n\t${4:(* BODY *)}\ndone",
        "doc": null,
        "grammar": "snu",
        "label": "for",
        "matches": {
          "for": true
        },
        "opts": {}
      },
      {
        "content": "match ${1:(* e1 *)} with\n| ${2:p} -> ${3:e2}",
        "doc": null,
        "grammar": "snu",
        "label": "match",
        "matches": {
          "match": true
        },
        "opts": {}
      },
      {
        "content": "match ${1:(* e1 *)} with\n| ${2:p} -> ${3:e2}",
        "doc": null,
        "grammar": "snu",
        "label": "match",
        "matches": {
          "Match": true
        },
        "opts": {}
      },
      {
        "content": "class ${1:name} = object\n\t${2:methods}\nend",
        "doc": null,
        "grammar": "snu",
        "label": "class",
        "matches": {
          "class": true
        },
        "opts": {}
      },
      {
        "content": "object\n\t${2:methods}\nend",
        "doc": null,
        "grammar": "snu",
        "label": "obj",
        "matches": {
          "obj": true
        },
        "opts": {}
      },
      {
        "content": "object (self)\n\t${2:methods}\nend",
        "doc": null,
        "grammar": "snu",
        "label": "object",
        "matches": {
          "Obj": true
        },
        "opts": {}
      },
      {
        "content": "{< ${1:x} = ${2:y} >}",
        "doc": null,
        "grammar": "snu",
        "label": "object functional update",
        "matches": {
          "{{": true
        },
        "opts": {}
      },
      {
        "content": "begin\n\t${1:block}\nend",
        "doc": null,
        "grammar": "snu",
        "label": "beg",
        "matches": {
          "beg": true
        },
        "opts": {}
      },
      {
        "content": "module ${1:Mod} = ${2:Functor}(${3:Arg})",
        "doc": null,
        "grammar": "snu",
        "label": "module instantiantion with functor",
        "matches": {
          "ml": true
        },
        "opts": {}
      },
      {
        "content": "module ${1:(* Name *)} = struct\n\t${2:(* BODY *)}\nend",
        "doc": null,
        "grammar": "snu",
        "label": "module - no signature",
        "matches": {
          "mod": true
        },
        "opts": {}
      },
      {
        "content": "module ${1:(* Name *)} : ${2:(* SIG *)} = struct\n\t${3:(* BODY *)}\nend",
        "doc": null,
        "grammar": "snu",
        "label": "module with signature",
        "matches": {
          "Mod": true
        },
        "opts": {}
      },
      {
        "content": "sig\n\t${2:(* BODY *)}\nend",
        "doc": null,
        "grammar": "snu",
        "label": "anonymous signature",
        "matches": {
          "sig": true
        },
        "opts": {}
      },
      {
        "content": "functor (${1:Arg} : ${2:ARG}) -> ${3:(* BODY *)}",
        "doc": null,
        "grammar": "snu",
        "label": "functor signature or anonymous functor",
        "matches": {
          "sigf": true
        },
        "opts": {}
      },
      {
        "content": "module ${1:M} (${2:Arg} : ${3:ARG}) = struct\n\t${4:(* BODY *)}\nend",
        "doc": null,
        "grammar": "snu",
        "label": "define functor - no signature",
        "matches": {
          "func": true
        },
        "opts": {}
      },
      {
        "content": "module ${1:M} (${2:Arg} : ${3:ARG}) : ${4:SIG} = struct\n\t${5:(* BODY *)}\nend",
        "doc": null,
        "grammar": "snu",
        "label": "define functor - with signature",
        "matches": {
          "Func": true
        },
        "opts": {}
      },
      {
        "content": "module type ${1:(* Name *)} = sig\n\t${2:(* BODY *)}\nend",
        "doc": null,
        "grammar": "snu",
        "label": "Declare module signature",
        "matches": {
          "mot": true
        },
        "opts": {}
      },
      {
        "content": "module ${1:(* Name *)} : sig\n\t${2:(* SIGNATURE *)}\nend = struct\n\t${3:(* BODY *)}\nend",
        "doc": null,
        "grammar": "snu",
        "label": "Module with anonymous signature",
        "matches": {
          "module": true
        },
        "opts": {}
      },
      {
        "content": "(** ${1:odoc} *)",
        "doc": null,
        "grammar": "snu",
        "label": "odoc",
        "matches": {
          "oo": true
        },
        "opts": {}
      },
      {
        "content": "(*$T ${1:name}\n\t${2:test}\n*)",
        "doc": null,
        "grammar": "snu",
        "label": "inline qtest",
        "matches": {
          "qt": true
        },
        "opts": {}
      }
    ],
    "octave": [],
    "openfoam": [
      {
        "content": "type\t\tfixedValue;\nvalue\t\tuniform ${0};",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "fv": true
        },
        "opts": {}
      },
      {
        "content": "type\t\tzeroGradient;",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "zg": true
        },
        "opts": {}
      },
      {
        "content": "type\t\tsymmetryPlane;",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "sym": true
        },
        "opts": {}
      },
      {
        "content": "forces\n{\n\ttype\t\t\t\tforces;\n\tfunctionObjectLibs\t(\"libforces.so\");\n\tenabled\t\t\t\ttrue;\n\toutputControl\t\t${1:timeStep};\n\toutputInterval\t\t${2:1};\n\tpatches\t\t\t\t(${3});\n\tlog\t\t\t\t\t${4:true};\n\tCofR\t\t\t\t(${0:0 0 0});\n}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "forces": true
        },
        "opts": {}
      },
      {
        "content": "${1:p}\n{\n\tsolver          GAMG;\n\ttolerance       1e-${2:6};\n\trelTol          ${0:0.0};\n\tsmoother        GaussSeidel;\n\tcacheAgglomeration true;\n\tnCellsInCoarsestLevel 10;\n\tagglomerator    faceAreaPair;\n\tmergeLevels     1;\n}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "gamg": true
        },
        "opts": {}
      },
      {
        "content": "${1:U}\n{\n\tsolver          PBiCG;\n\tpreconditioner  DILU;\n\ttolerance       1e-${2:6};\n\trelTol          ${0:0.0};\n}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "pbicg": true
        },
        "opts": {}
      },
      {
        "content": "PIMPLE\n{\n\tnOuterCorrectors \t${1:outer};\n\tnCorrectors     \t${2:inner};\n\tnNonOrthogonalCorrectors ${3:nonOrtho};\n\tpRefCell        \t${4:cell};\n\tpRefValue       \t${0:value for $4};\n}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "pimple": true
        },
        "opts": {}
      }
    ],
    "pandoc": [],
    "perl": [
      {
        "content": "#!/opt/local/bin/perl\nuse strict;\nuse warnings;\n${1}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "perl": true
        },
        "opts": {}
      },
      {
        "content": "sub ${1:#:function_name} {\n\t${2:TARGET}\n}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "sub": true
        },
        "opts": {}
      },
      {
        "content": "if (${1:#:condition}) {\n\t${2:TARGET}\n}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "if": true
        },
        "opts": {}
      },
      {
        "content": "if (${1:#:condition}) {\n\t${2:TARGET}\n} else {\n\t${3:#:else...}\n}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ife": true
        },
        "opts": {}
      },
      {
        "content": "if (${1:#:condition}) {\n\t${2:TARGET}\n} elsif (${3}) {\n\t${4:#:elsif...}\n} else {\n\t${5:#:else...}\n}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ifee": true
        },
        "opts": {}
      },
      {
        "content": "${1:#:expression} if ${2:#:condition};",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "xif": true
        },
        "opts": {}
      },
      {
        "content": "while (${1:#:condition}) {\n\t${2:TARGET}\n}",
        "doc": "",
        "grammar": "snu",
        "label": "wh",
        "matches": {
          "while": true
        },
        "opts": {}
      },
      {
        "content": "${1:#:expression} while ${2:#:condition};",
        "doc": "",
        "grammar": "snu",
        "label": "xwh",
        "matches": {
          "xwhile": true
        },
        "opts": {}
      },
      {
        "content": "for (my $${1:#:var} = 0; $$1 < ${2:#:expression}; $$1++) {\n\t${3:TARGET}\n}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "for": true
        },
        "opts": {}
      },
      {
        "content": "for ${1} (${2:#:expression}){\n\t${3:TARGET}\n}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "fore": true
        },
        "opts": {}
      },
      {
        "content": "${1:#:expression} for @${2:#:array};",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "xfor": true
        },
        "opts": {}
      },
      {
        "content": "unless (${1:condition}) {\n\t${2:TARGET}\n}",
        "doc": "",
        "grammar": "snu",
        "label": "un",
        "matches": {
          "unless": true
        },
        "opts": {}
      },
      {
        "content": "${1:#:expression} unless ${2:#:condition};",
        "doc": "",
        "grammar": "snu",
        "label": "xun",
        "matches": {
          "xunless": true
        },
        "opts": {}
      },
      {
        "content": "eval {\n\t${1:TARGET}\n};\nif ($@) {\n\t${2:#:handle failure...}\n}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "eval": true
        },
        "opts": {}
      },
      {
        "content": "#!/usr/bin/env perl",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "#!": true
        },
        "opts": {}
      },
      {
        "content": "=>",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          ".": true
        },
        "opts": {}
      },
      {
        "content": "sub ${1:function_name} {\n\t${0}\n}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "sub": true
        },
        "opts": {}
      },
      {
        "content": "if (${1}) {\n\t${0}\n}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "if": true
        },
        "opts": {}
      },
      {
        "content": "if (${1}) {\n\t${2}\n}\nelse {\n\t${0}\n}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ife": true
        },
        "opts": {}
      },
      {
        "content": "if (${1}) {\n\t${2}\n}\nelsif (${3}) {\n\t${4:# elsif...}\n}\nelse {\n\t${0}\n}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ifee": true
        },
        "opts": {}
      },
      {
        "content": "elsif (${1}) {\n\t${0}\n}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "eif": true
        },
        "opts": {}
      },
      {
        "content": "${1:expression} if ${2:condition};",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "xif": true
        },
        "opts": {}
      },
      {
        "content": "unless (${1}) {\n\t${0}\n}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "unless": true
        },
        "opts": {}
      },
      {
        "content": "${1:expression} unless ${2:condition};",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "xunless": true
        },
        "opts": {}
      },
      {
        "content": "local $@;\neval {\n\t${1:# do something risky...}\n};\nif (my $e = $@) {\n\t${0:# handle failure...}\n}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "eval": true
        },
        "opts": {}
      },
      {
        "content": "while (${1}) {\n\t${0}\n}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "wh": true
        },
        "opts": {}
      },
      {
        "content": "${1:expression} while ${2:condition};",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "xwh": true
        },
        "opts": {}
      },
      {
        "content": "for (my $${2:var} = 0; $$2 < ${1:count}; $$2${3:++}) {\n\t${0}\n}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "cfor": true
        },
        "opts": {}
      },
      {
        "content": "${1:expression} for @${2:array};",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "xfor": true
        },
        "opts": {}
      },
      {
        "content": "foreach my $${1:x} (@${2:array}) {\n\t${0}\n}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "for": true
        },
        "opts": {}
      },
      {
        "content": "${1:expression} foreach @${2:array};",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "fore": true
        },
        "opts": {}
      },
      {
        "content": "use Moose;\nuse namespace::autoclean;\n${1:#}BEGIN {extends '${2:ParentClass}'};\n${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "moose": true
        },
        "opts": {}
      },
      {
        "content": "use parent qw(${0:Parent Class});",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "parent": true
        },
        "opts": {}
      },
      {
        "content": "my $${1:var} = do { local $/; open my $file, '<', \"${2:file}\"; <$file> };\n${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "slurp": true
        },
        "opts": {}
      },
      {
        "content": "use strict;\nuse warnings;",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "strwar": true
        },
        "opts": {}
      },
      {
        "content": "## no critic\nour $VERSION = '${0:version}';\neval $VERSION;\n## use critic",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "vers": true
        },
        "opts": {}
      },
      {
        "content": "use feature 'switch';",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "switch": true
        },
        "opts": {}
      },
      {
        "content": "sub {\n\t${0}\n}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "asub": true
        },
        "opts": {}
      },
      {
        "content": "BEGIN {\n\t${0}\n}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "begin": true
        },
        "opts": {}
      },
      {
        "content": "__PACKAGE__->${1:package_method}(${0:var})",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "pkgmv": true
        },
        "opts": {}
      },
      {
        "content": "__PACKAGE__->${0:package_method}()",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "pkgm": true
        },
        "opts": {}
      },
      {
        "content": "__PACKAGE__->get_${0:package_method}()",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "pkget": true
        },
        "opts": {}
      },
      {
        "content": "__PACKAGE__->get_${1:package_method}(${0:var})",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "pkgetv": true
        },
        "opts": {}
      },
      {
        "content": "qr/\n     ${0:regex}\n/xms",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "qrx": true
        },
        "opts": {}
      },
      {
        "content": "qr/${0:regex}/x",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "qr/": true
        },
        "opts": {}
      },
      {
        "content": "given ($${1:var}) {\n\t${2:# cases}\n\t${0:# default}\n}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "given": true
        },
        "opts": {}
      },
      {
        "content": "when (${1:case}) {\n\t${0}\n}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "when": true
        },
        "opts": {}
      },
      {
        "content": "@{ ${1:hash}  }{ ${0:array} }",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "hslice": true
        },
        "opts": {}
      },
      {
        "content": "map {  ${0: body }    }  ${1: @array } ;",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "map": true
        },
        "opts": {}
      },
      {
        "content": "=head1 NAME\n${1:ClassName} - ${2:ShortDesc}\n=head1 SYNOPSIS\n  use $1;\n  ${3:# synopsis...}\n=head1 DESCRIPTION\n${0:# longer description...}\n=head1 INTERFACE\n=head1 DEPENDENCIES\n=head1 SEE ALSO",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ppod": true
        },
        "opts": {}
      },
      {
        "content": "=head2 ${1:MethodName}\n${0:Summary....}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "psub": true
        },
        "opts": {}
      },
      {
        "content": "=head2 ${1:MethodName}\n${0:Summary...}\n=cut",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "psubi": true
        },
        "opts": {}
      },
      {
        "content": "=head2 $1\nSummary of $1\n=cut\nsub ${1:subroutine_name} {\n\t${0}\n}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "subpod": true
        },
        "opts": {}
      },
      {
        "content": "=over 2\n=item\nArguments\n=over 3\n=item\nC<${1:DataStructure}>\n  ${2:Sample}\n=back\n=item\nReturn\n=over 3\n=item\nC<${0:...return data}>\n=back\n=back",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "parg": true
        },
        "opts": {}
      },
      {
        "content": "has ${1:attribute} => (\n\tis\t    => '${2:ro|rw}',\n\tisa \t=> '${3:Str|Int|HashRef|ArrayRef|etc}',\n\tdefault => sub {\n\t\t${4:defaultvalue}\n\t},\n\t${0:# other attributes}\n);",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "has": true
        },
        "opts": {}
      },
      {
        "content": "override ${1:attribute} => sub {\n\t${2:# my $self = shift;};\n\t${0:# my ($self, $args) = @_;};\n};",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "override": true
        },
        "opts": {}
      },
      {
        "content": "use Test::More;\nuse Test::Deep; # (); # uncomment to stop prototype errors\nuse Test::Exception;",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "tuse": true
        },
        "opts": {}
      },
      {
        "content": "use lib qw{ ./t/lib };",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "tlib": true
        },
        "opts": {}
      },
      {
        "content": "$ENV{TEST_METHOD} = '${0:regex}';",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "tmeths": true
        },
        "opts": {}
      },
      {
        "content": "use ${0:test_class};\n$1->runtests();",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "trunner": true
        },
        "opts": {}
      },
      {
        "content": "sub t${1:number}_${2:test_case} :Test(${3:num_of_tests}) {\n\tmy $self = shift;\n\t${0}\n}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "tsub": true
        },
        "opts": {}
      },
      {
        "content": "test ${1:test_name} => { description => '${2:Description of test.}'} => sub {\n\tmy ($self) = @_;\n\t${0}\n};",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "trsub": true
        },
        "opts": {}
      },
      {
        "content": "sub prep${1:number}_${2:test_case} :Test(startup) {\n\tmy $self = shift;\n\t${0}\n}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "tprep": true
        },
        "opts": {}
      },
      {
        "content": "use Carp; # 'verbose';\n# cloak \"die\"\n# warn \"warning\"\n$SIG{'__DIE__'} = sub {\n\trequire Carp; Carp::confess\n};",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "debug_trace": true
        },
        "opts": {}
      },
      {
        "content": "use Data::Dump qw(dump);\nwarn dump ${1:variable}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "dump": true
        },
        "opts": {}
      },
      {
        "content": "use DDP;\np ${1:variable}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ddp": true
        },
        "opts": {}
      },
      {
        "content": "subtest '${1: test_name}' => sub {\n\t${2}\n};",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "subtest": true
        },
        "opts": {}
      },
      {
        "content": "if ($1) {\n\t${2:# body...}\n}\nelse {\n\t${3:# else...}\n}\n",
        "doc": null,
        "grammar": "snu",
        "label": "Conditional if..else (ife)",
        "matches": {
          "ife": true
        },
        "opts": {}
      },
      {
        "content": "if ($1) {\n\t${2:# body...}\n}\nelsif ($3) {\n\t${4:# elsif...}\n}\nelse {\n\t${5:# else...}\n}\n",
        "doc": null,
        "grammar": "snu",
        "label": "Conditional if..elsif..else (ifee)",
        "matches": {
          "ifee": true
        },
        "opts": {}
      },
      {
        "content": "${1:expression} unless ${2:condition};\n",
        "doc": null,
        "grammar": "snu",
        "label": "Conditional one-line (unless)",
        "matches": {
          "xunless": true
        },
        "opts": {}
      },
      {
        "content": "${1:expression} if ${2:condition};\n",
        "doc": null,
        "grammar": "snu",
        "label": "Conditional one-line (xif)",
        "matches": {
          "xif": true
        },
        "opts": {}
      },
      {
        "content": "sub ${1:function_name} {\n\t${2:# body...}\n}\n",
        "doc": null,
        "grammar": "snu",
        "label": "Function (sub)",
        "matches": {
          "sub": true
        },
        "opts": {}
      },
      {
        "content": "${1:expression} foreach @${2:array};\n",
        "doc": null,
        "grammar": "snu",
        "label": "Loop one-line (xforeach)",
        "matches": {
          "xfore": true
        },
        "opts": {}
      },
      {
        "content": "${1:expression} while ${2:condition};\n",
        "doc": null,
        "grammar": "snu",
        "label": "Loop one-line (xwhile)",
        "matches": {
          "xwhile": true
        },
        "opts": {}
      },
      {
        "content": "#!/usr/bin/env perl -w\n\nuse strict;\nuse Test::More tests => ${1:1};\nuse ${2:ModuleName};\n\nok(${3:assertion});\n",
        "doc": null,
        "grammar": "snu",
        "label": "Test",
        "matches": {
          "test": true
        },
        "opts": {}
      },
      {
        "content": "local $@;\neval {\n\t${1:# do something risky...}\n};\nif (my $${2:exception} = $@) {\n\t${3:# handle failure...}\n}\n",
        "doc": null,
        "grammar": "snu",
        "label": "eval",
        "matches": {
          "eval": true
        },
        "opts": {}
      },
      {
        "content": "for (my $${1:var} = 0; $$1 < ${2:expression}; $$1++) {\n\t${3:# body...}\n}\n",
        "doc": null,
        "grammar": "snu",
        "label": "for",
        "matches": {
          "for": true
        },
        "opts": {}
      },
      {
        "content": "foreach ${1:my $${2:x}} (@${3:array}) {\n\t${4:# body...}\n}\n",
        "doc": null,
        "grammar": "snu",
        "label": "foreach",
        "matches": {
          "fore": true
        },
        "opts": {}
      },
      {
        "content": "if ($1) {\n\t${2:# body...}\n}\n",
        "doc": null,
        "grammar": "snu",
        "label": "if",
        "matches": {
          "if": true
        },
        "opts": {}
      },
      {
        "content": "my $${1:var} = do { local $/ = undef; open my $fh, '<', ${2:$file}; <$fh> };\n",
        "doc": null,
        "grammar": "snu",
        "label": "slurp",
        "matches": {
          "slurp": true
        },
        "opts": {}
      },
      {
        "content": "unless ($1) {\n\t${2:# body...}\n}\n",
        "doc": null,
        "grammar": "snu",
        "label": "unless",
        "matches": {
          "unless": true
        },
        "opts": {}
      },
      {
        "content": "while ($1) {\n\t${2:# body...}\n}\n",
        "doc": null,
        "grammar": "snu",
        "label": "while",
        "matches": {
          "while": true
        },
        "opts": {}
      },
      {
        "content": "until ($1) {\n\t${2:# body...}\n}\n",
        "doc": null,
        "grammar": "snu",
        "label": "until",
        "matches": {
          "until": true
        },
        "opts": {}
      }
    ],
    "perl6": [
      {
        "content": "#!/usr/bin/env perl6",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "#!": true
        },
        "opts": {}
      },
      {
        "content": "=>",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          ".": true
        },
        "opts": {}
      },
      {
        "content": "sub ${1:function_name}(${2:Str $var}) {\n\t${3}\n}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "sub": true
        },
        "opts": {}
      },
      {
        "content": "multi ${1:function_name}(${2:Str $var}) {\n\t${3}\n}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "mul": true
        },
        "opts": {}
      },
      {
        "content": "if ${1} {\n\t${2}\n}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "if": true
        },
        "opts": {}
      },
      {
        "content": "if ${1} {\n\t${2}\n}\nelse {\n\t${3}\n}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ife": true
        },
        "opts": {}
      },
      {
        "content": "${1:expression} if ${2:condition};",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "xif": true
        },
        "opts": {}
      },
      {
        "content": "unless ${1} {\n\t${2}\n}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "unless": true
        },
        "opts": {}
      },
      {
        "content": "${1:expression} unless ${2:condition};",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "xunless": true
        },
        "opts": {}
      },
      {
        "content": "${1:condition} ?? ${2:value-if-true} !! ${3:value-if-false};",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "tc": true
        },
        "opts": {}
      },
      {
        "content": "given ${1:$var} {\n  when ${2:condition} {\n\t  ${3:# code block ...}\n  }\n  ${4}\n  default {\n\t  ${5}\n  }\n}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "switch": true
        },
        "opts": {}
      },
      {
        "content": "loop (my ${1:$i} = 0; $$1 < ${2:count}; $$1++) {\n\t${3}\n}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "loop": true
        },
        "opts": {}
      },
      {
        "content": "for ${1:@array} -> ${2:$variable} {\n\t${3}\n}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "for": true
        },
        "opts": {}
      },
      {
        "content": "while ${1} {\n\t${2}\n}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "wh": true
        },
        "opts": {}
      },
      {
        "content": "repeat {\n\t${1}\n} ${2:while|until} ${3};",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "rp": true
        },
        "opts": {}
      },
      {
        "content": "${1:my} class ${2:ClassName} ${3:is|does Parent|Role}{\n\t${4}\n}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "cl": true
        },
        "opts": {}
      },
      {
        "content": "has ${1:Type} ${2:$!identifier};",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "has": true
        },
        "opts": {}
      },
      {
        "content": "method ${1:method_name}(${2:$attr}) {\n\t${3}\n}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "mth": true
        },
        "opts": {}
      },
      {
        "content": "method ${1:!}${2:method_name}(${3:$attr}) {\n\t${4}\n}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "pmth": true
        },
        "opts": {}
      },
      {
        "content": "submethod ${1:submethod_name}(${2:$attr}) {\n\t${3}\n}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "smth": true
        },
        "opts": {}
      },
      {
        "content": "use v6;\nuse Test;\n${1:use lib 'lib';}\nplan ${2:$num-tests};",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "test": true
        },
        "opts": {}
      },
      {
        "content": "my ${1:$var} = \"${2:filename}\".IO.slurp;",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "slurp": true
        },
        "opts": {}
      },
      {
        "content": "for \"${1:filename}\".IO.lines -> $line {\n\t${2}\n}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "rfile": true
        },
        "opts": {}
      },
      {
        "content": "my $fh = open \"${1:filename}\", ${2::r|:w|:a};\n${3:# actions};\n$fh.close;",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "open": true
        },
        "opts": {}
      }
    ],
    "phoenix": [
      {
        "content": "defmodule ${1:AppName}Web.${2:ControllerName}Controller do\n\tuse $1Web, :controller\n\t${3}\nend",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "cont": true
        },
        "opts": {}
      },
      {
        "content": "defmodule ${1:AppName}Web.${2:ViewName}View do\n\tuse $1Web, :view\nend",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "view": true
        },
        "opts": {}
      },
      {
        "content": "defmodule ${1:AppName}Web.${2:ChannelName}Channel do\n\tuse $1Web, :channel\nend",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "chan": true
        },
        "opts": {}
      }
    ],
    "php": [
      {
        "content": "${1:public }function ${2:#:FunctionName}(${3})\n{\n\t${4:TARGET}\n}",
        "doc": "",
        "grammar": "snu",
        "label": "public function () {}",
        "matches": {
          "function": true
        },
        "opts": {}
      },
      {
        "content": "function (${1})${2: use } {\n\t${3:TARGET}\n}",
        "doc": "",
        "grammar": "snu",
        "label": "function () {}",
        "matches": {
          "function_literal": true
        },
        "opts": {
          "word": true
        }
      },
      {
        "content": "<?php\n${1:TARGET}\n/* End of file ${2:filename}.php */",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "php": true
        },
        "opts": {}
      },
      {
        "content": "<?php echo ${1} ?>${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "pecho": true
        },
        "opts": {}
      },
      {
        "content": "<?php echo htmlentities(${1}, ENT_QUOTES, 'utf-8') ?>${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "echoh": true
        },
        "opts": {}
      },
      {
        "content": "<?$php foreach ($${1:#:variable} as $${2:#:key}${3: =>}): ?>\n${0:TARGET}\n<?php endforeach; ?>",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "pforeach": true
        },
        "opts": {}
      },
      {
        "content": "<?php if (${1:#:condition}): ?>\n${2:TARGET}\n<?php else: ?>\n${0}\n<?php endif; ?>",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "pifelse": true
        },
        "opts": {}
      },
      {
        "content": "<?php if (${1:#:condition}): ?>\n${0:TARGET}\n<?php endif; ?>",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "pif": true
        },
        "opts": {}
      },
      {
        "content": "<?php else: ?>",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "pelse": true
        },
        "opts": {}
      },
      {
        "content": "<?php $this->${0} ?>",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "pthis": true
        },
        "opts": {}
      },
      {
        "content": "<?php echo $this->${0} ?>",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "pethis": true
        },
        "opts": {}
      },
      {
        "content": "/**\n * ${3:#:undocumented class variable}\n *\n * @var ${4:#:string}\n **/\n${1:#:var} $${2};${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "doc_class_var": true
        },
        "opts": {}
      },
      {
        "content": "/**\n * ${3:#:undocumented constant}\n **/\ndefine(${1} ${2});${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "doc_constant": true
        },
        "opts": {}
      },
      {
        "content": "/**\n * ${4:#:undocumented function}\n *\n * @return ${5:void}\n * @author ${6}\n **/\n${1}function ${2}(${3});${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "doc_interface_function": true
        },
        "opts": {}
      },
      {
        "content": "/**\n * ${4:#:undocumented function}\n *\n * @return ${5:void}\n * @author ${6}\n **/\n${1}function ${2}(${3})\n{\n\t${0:TARGET}\n}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "doc_function": true
        },
        "opts": {}
      },
      {
        "content": "/**\n * ${1}\n *\n * @author ${2}\n * @version ${3}\n * @copyright ${4}\n * @package ${5:default}\n **/\n/**\n * Define DocBlock\n **/",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "doch": true
        },
        "opts": {}
      },
      {
        "content": "/**\n * ${2:#:undocumented class}\n *\n * @package ${3:default}\n * @author ${4}\n **/\ninterface ${1}\n{\n\t${0:TARGET}\n} // END interface $1",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "doci": true
        },
        "opts": {}
      },
      {
        "content": "/**\n * ${0}\n */",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "doc": true
        },
        "opts": {}
      },
      {
        "content": "/**\n * ${1}\n */\nclass ${2:#:ClassName}${3:#:extends}\n{\n\t$5\n\tfunction ${4:__construct}(${5:#:argument})\n\t{\n\t\t${0:# code...}\n\t}\n}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "class_with_constructor": true
        },
        "opts": {}
      },
      {
        "content": "class ${2:#:ClassName} {\n\t${0:TARGET}\n}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "class": true
        },
        "opts": {
          "head": true
        }
      },
      {
        "content": "${1}defined('${2}')${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "def": true
        },
        "opts": {}
      },
      {
        "content": "do {\n\t${0:TARGET}\n} while (${1:#:condition});",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "dowhile": true
        },
        "opts": {
          "head": true
        }
      },
      {
        "content": "$${1:#:retVal} = (${2:#:condition}) ? ${3:#:a} : ${4:#:b};",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "if?": true
        },
        "opts": {
          "head": true
        }
      },
      {
        "content": "if (${1:#:condition}) {\n\t${2:TARGET}\n} else {\n\t${3:#:code...}\n}\n${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ifelse": true
        },
        "opts": {
          "head": true
        }
      },
      {
        "content": "if (${1:#:condition}) {\n\t${0:TARGET}\n}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "if": true
        },
        "opts": {
          "head": true
        }
      },
      {
        "content": "var_dump(${0:TARGET});",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "var_dump": true
        },
        "opts": {
          "head": true
        }
      },
      {
        "content": "print_r(${1});",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "p": true
        },
        "opts": {
          "head": true
        }
      },
      {
        "content": "echo \"${1:#:string}\";",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "echo": true
        },
        "opts": {
          "head": true
        }
      },
      {
        "content": "printf(\"${1:#:string}\\n\"${2:, });",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "println": true
        },
        "opts": {
          "head": true
        }
      },
      {
        "content": "else {\n\t${0:TARGET}\n}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "else": true
        },
        "opts": {}
      },
      {
        "content": "elseif (${1:#:condition}) {\n\t${0:TARGET}\n}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "elseif": true
        },
        "opts": {}
      },
      {
        "content": "for ($${1:i}=${2:0}; $$1 < ${3}; $$1++) {\n\t${0:TARGET}\n}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "for": true
        },
        "opts": {
          "head": true
        }
      },
      {
        "content": "foreach ($${1:#:variable} as $${2:#:key}${3: =>} $${4:#:value}) {\n\t${0:TARGET}\n}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "foreach-hashmap": true
        },
        "opts": {}
      },
      {
        "content": "foreach ($${1:#:variable} as $${2:#:x}) {\n\t${0:TARGET}\n}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "foreach": true,
          "foreach-list": true
        },
        "opts": {
          "head": true
        }
      },
      {
        "content": "function __construct(${1})\n{\n\t${0:TARGET}\n}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "construct": true
        },
        "opts": {
          "head": true
        }
      },
      {
        "content": "<<<${1:HTML}\n${2:TARGET:#:content here}\n$1;",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "here": true
        },
        "opts": {}
      },
      {
        "content": "include '${1:#:file}';${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "inc": true
        },
        "opts": {
          "head": true
        }
      },
      {
        "content": "include_once '${1:#:file}';${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "inco": true
        },
        "opts": {
          "head": true
        }
      },
      {
        "content": "$${1:#:arrayName} = array('${2}' => ${3} ${0});",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "array": true
        },
        "opts": {}
      },
      {
        "content": "require '${1:#:file}';${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "req": true
        },
        "opts": {
          "head": true
        }
      },
      {
        "content": "require_once '${1:#:file}';${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "reqo": true
        },
        "opts": {
          "head": true
        }
      },
      {
        "content": "return${1};${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ret": true
        },
        "opts": {
          "head": true
        }
      },
      {
        "content": "return false;",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "retf": true
        },
        "opts": {
          "head": true
        }
      },
      {
        "content": "return true;",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "rett": true
        },
        "opts": {
          "head": true
        }
      },
      {
        "content": "case '${1:#:variable}':\n\t${0:#:code...}\n\tbreak;",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "case": true
        },
        "opts": {
          "head": true
        }
      },
      {
        "content": "switch (${1:#:variable}) {\ncase '${2:#:value}':\n\t${3:#:code...}\n\tbreak;\n${0}\ndefault:\n\t${4:#:code...}\n\tbreak;\n}",
        "doc": "",
        "grammar": "snu",
        "label": "sw",
        "matches": {
          "switch": true
        },
        "opts": {
          "head": true
        }
      },
      {
        "content": "try {\n\t${1:TARGET}\n} catch (${2:#:Exception} $e) {\n\t${3:#:code}\n}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "try": true
        },
        "opts": {
          "head": true
        }
      },
      {
        "content": "try {\n\t${1:TARGET}\n} catch (${2:#:Exception} $e) {\n\t${3:#:code}\n} finally {\n\t${4:#:code}\n}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "tryf": true
        },
        "opts": {
          "head": true
        }
      },
      {
        "content": "throw new ${1}Exception(${2:\"${3:#:Error Processing Request}\"}${4:});\n${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "throw": true
        },
        "opts": {
          "head": true
        }
      },
      {
        "content": "while (${1}) {\n\t${0:TARGET}\n}",
        "doc": "",
        "grammar": "snu",
        "label": "wh",
        "matches": {
          "while": true
        },
        "opts": {
          "head": true
        }
      },
      {
        "content": "\\$GLOBALS['${1:#:variable}']${2: = }${3:#:something}${4:;}${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "gloabals": true
        },
        "opts": {}
      },
      {
        "content": "\\$_COOKIE['${1:#:variable}']",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "cookie": true
        },
        "opts": {}
      },
      {
        "content": "\\$_ENV['${1:#:variable}']",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "env": true
        },
        "opts": {}
      },
      {
        "content": "\\$_FILES['${1:#:variable}']",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "files": true
        },
        "opts": {}
      },
      {
        "content": "\\$_GET['${1:#:variable}']",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "get": true
        },
        "opts": {}
      },
      {
        "content": "\\$_POST['${1:#:variable}']",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "post": true
        },
        "opts": {}
      },
      {
        "content": "\\$_REQUEST['${1:#:variable}']",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "request": true
        },
        "opts": {}
      },
      {
        "content": "\\$_SERVER['${1:#:variable}']",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "server": true
        },
        "opts": {}
      },
      {
        "content": "\\$_SESSION['${1:#:variable}']",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "session": true
        },
        "opts": {}
      },
      {
        "content": "var_export(${1}, true)",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "inspect": true,
          "var_export": true
        },
        "opts": {}
      },
      {
        "content": "<?php\n${0:${VISUAL}}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "<?": true
        },
        "opts": {}
      },
      {
        "content": "declare(strict_types=${1:1});",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "dst \"declare(strict_types=1)\"": true
        },
        "opts": {}
      },
      {
        "content": "echo ${0};",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ec": true
        },
        "opts": {}
      },
      {
        "content": "<?php echo ${0} ?>",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "<?e": true
        },
        "opts": {}
      },
      {
        "content": "<?=${0}?>",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "<?=": true
        },
        "opts": {}
      },
      {
        "content": "<?= ${0} ?>",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "?=": true
        },
        "opts": {}
      },
      {
        "content": "<?php ${0} ?>",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "?": true
        },
        "opts": {}
      },
      {
        "content": "<?php foreach ($${1:vars} as $${2:$var}): ?>\n\t${0:${VISUAL}}\n<?php endforeach ?>",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "?f": true
        },
        "opts": {}
      },
      {
        "content": "<?php if ($${1:var}): ?>\n\t${0:${VISUAL}}\n<?php endif ?>",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "?i": true
        },
        "opts": {}
      },
      {
        "content": "namespace ${1:Foo\\Bar\\Baz};\n${0:${VISUAL}}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ns": true
        },
        "opts": {}
      },
      {
        "content": "$this->",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "t.": true
        },
        "opts": {}
      },
      {
        "content": "function ${1}(${3})\n{\n\t${0:${VISUAL}}\n}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "f": true
        },
        "opts": {}
      },
      {
        "content": "${1:protected} function ${2:foo}()\n{\n\t${0:${VISUAL}}\n}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "m": true
        },
        "opts": {}
      },
      {
        "content": "/**\n * Gets the value of ${1:foo}\n *\n * @return ${2:string}\n */\n${3:public} function get${4:$1}()\n{\n\treturn $this->${5:$1};\n}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "gm \"PHP Class Getter Setter\"": true
        },
        "opts": {}
      },
      {
        "content": "${1:$foo}->set${2:Bar}(${0});",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "$s": true
        },
        "opts": {}
      },
      {
        "content": "${1:$foo}->get${0:Bar}();",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "$g": true
        },
        "opts": {}
      },
      {
        "content": "$${1:foo} = ${2:true} ? ${3:a} : ${0};",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "=?:": true
        },
        "opts": {}
      },
      {
        "content": "${1:true} ? ${2:a} : ${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "?:": true
        },
        "opts": {}
      },
      {
        "content": "$${1:retVal} = (${2:condition}) ? ${3:a} : ${4:b};",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "t \"$retVal = (condition) ? a : b\"": true
        },
        "opts": {}
      },
      {
        "content": "$_COOKIE['${1:variable}']",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "C": true
        },
        "opts": {}
      },
      {
        "content": "$_ENV['${1:variable}']",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "E": true
        },
        "opts": {}
      },
      {
        "content": "$_FILES['${1:variable}']",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "F": true
        },
        "opts": {}
      },
      {
        "content": "$_GET['${1:variable}']",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "G \"_GET array\"": true
        },
        "opts": {}
      },
      {
        "content": "$_POST['${1:variable}']",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "P \"_POST array\"": true
        },
        "opts": {}
      },
      {
        "content": "$_REQUEST['${1:variable}']",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "R": true
        },
        "opts": {}
      },
      {
        "content": "$_SERVER['${1:variable}']",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "S": true
        },
        "opts": {}
      },
      {
        "content": "$_SESSION['${1:variable}']",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "SS": true
        },
        "opts": {}
      },
      {
        "content": "$_GET['${1}']",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "get \"get\"": true
        },
        "opts": {}
      },
      {
        "content": "$_POST['${1}']",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "post \"post\"": true
        },
        "opts": {}
      },
      {
        "content": "$_SESSION['${1}']",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "session \"session\"": true
        },
        "opts": {}
      },
      {
        "content": "include '${1:file}';",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "inc": true
        },
        "opts": {}
      },
      {
        "content": "include_once '${1:file}';",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "inc1": true
        },
        "opts": {}
      },
      {
        "content": "require '${1:file}';",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "req": true
        },
        "opts": {}
      },
      {
        "content": "require_once '${1:file}';",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "req1": true
        },
        "opts": {}
      },
      {
        "content": "/**\n * ${0}\n */",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "/*": true
        },
        "opts": {}
      },
      {
        "content": "/**\n * ${1:undocumented class variable}\n *\n * @var ${2:string}\n */",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "doc_vp": true
        },
        "opts": {}
      },
      {
        "content": "/**\n * ${3:undocumented class variable}\n *\n * @var ${4:string}\n */\n${1:var} $${2};",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "doc_v": true
        },
        "opts": {}
      },
      {
        "content": "/** @var ${3:string} */\n${1:public} $${2};",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "att": true
        },
        "opts": {}
      },
      {
        "content": "/**\n * ${1:undocumented constant}\n */",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "doc_dp": true
        },
        "opts": {}
      },
      {
        "content": "/**\n * ${3:undocumented constant}\n */\ndefine(${1}, ${2});",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "doc_d": true
        },
        "opts": {}
      },
      {
        "content": "/**\n * {@inheritdoc}\n */",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "inheritdoc \"@inheritdoc docblock\"": true
        },
        "opts": {}
      },
      {
        "content": "define('${1:VARIABLE_NAME}', ${2:'definition'});",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "def \"define('VARIABLE_NAME', 'definition')\"": true
        },
        "opts": {}
      },
      {
        "content": "${1}defined('${2}')",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "def?": true
        },
        "opts": {}
      },
      {
        "content": "while (${1:/* condition */}) {\n\t${0:${VISUAL}}\n}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "wh \"while (condition) { ... }\"": true
        },
        "opts": {}
      },
      {
        "content": "do {\n\t${0:${VISUAL}}\n} while (${1});",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "do \"do { ... } while (condition)\"": true
        },
        "opts": {}
      },
      {
        "content": "if (${1}) {\n\t${0:${VISUAL}}\n}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "if \"if (condition) { ... }\"": true
        },
        "opts": {}
      },
      {
        "content": "if (!${1}) {\n\t${0:${VISUAL}}\n}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ifn \"if (!condition) { ... }\"": true
        },
        "opts": {}
      },
      {
        "content": "<?php if (${1}): ?>\n\t${0:${VISUAL}}\n<?php endif; ?>",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ifil \"<?php if (condition): ?> ... <?php endif; ?>\"": true
        },
        "opts": {}
      },
      {
        "content": "if (${1}) {\n\t${0:${VISUAL}}\n} else {\n\t${2}\n}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ife \"if (cond) { ... } else { ... }\"": true
        },
        "opts": {}
      },
      {
        "content": "<?php if (${1}): ?>\n\t${0:${VISUAL}}\n<?php else: ?>\n\t${2}\n<?php endif; ?>",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ifeil \"<?php if (condition): ?> ... <?php else: ?> ... <?php endif; ?>\"": true
        },
        "opts": {}
      },
      {
        "content": "else {\n\t${0:${VISUAL}}\n}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "el \"else { ... }\"": true
        },
        "opts": {}
      },
      {
        "content": "elseif (${1}) {\n\t${0:${VISUAL}}\n}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "eif \"elseif(condition) { ... }\"": true
        },
        "opts": {}
      },
      {
        "content": "switch ($${1:variable}) {\n\tcase '${2:value}':\n\t\t${3}\n\t\tbreak;\n\t${0}\n\tdefault:\n\t\t${4}\n\t\tbreak;\n}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "switch \"switch($var) { case 'xyz': ... default: .... }\"": true
        },
        "opts": {}
      },
      {
        "content": "case '${1:value}':\n\t${0:${VISUAL}}\n\tbreak;",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "case \"case 'value': ... break\"": true
        },
        "opts": {}
      },
      {
        "content": "for ($${2:i} = 0; $$2 < ${1:count}; $$2${3:++}) {\n\t${0:${VISUAL}}\n}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "for \"for ($i = 0; $i < $count; $i++) { ... }\"": true
        },
        "opts": {}
      },
      {
        "content": "foreach ($${1:variable} as $${2:value}) {\n\t${0:${VISUAL}}\n}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "foreach \"foreach ($var as $value) { .. }\"": true
        },
        "opts": {}
      },
      {
        "content": "<?php foreach ($${1:variable} as $${2:value}): ?>\n\t${0:${VISUAL}}\n<?php endforeach; ?>",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "foreachil \"<?php foreach ($var as $value): ?>  ... <?php endforeach; ?>\"": true
        },
        "opts": {}
      },
      {
        "content": "foreach ($${1:variable} as $${2:key} => $${3:value}) {\n\t${0:${VISUAL}}\n}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "foreachk \"foreach ($var as $key => $value) { .. }\"": true
        },
        "opts": {}
      },
      {
        "content": "<?php foreach ($${1:variable} as $${2:key} => $${3:value}): ?>\n\t${0:<!-- html... -->}\n<?php endforeach; ?>",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "foreachkil \"<?php foreach ($var as $key => $value): ?>  ... <?php endforeach; ?>\"": true
        },
        "opts": {}
      },
      {
        "content": "$${1:arrayName} = ['${2}' => ${3}];",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "array \"$... = ['' => ]\"": true
        },
        "opts": {}
      },
      {
        "content": "try {\n\t${0:${VISUAL}}\n} catch (${1:Exception} $e) {\n}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "try \"try { ... } catch (Exception $e) { ... }\"": true
        },
        "opts": {}
      },
      {
        "content": "${1:static }function (${2:args}) use (${3:&$x, $y /*put vars in scope (closure) */}) {\n\t${0}\n};",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "lambda": true
        },
        "opts": {}
      },
      {
        "content": "echo '<pre>'; var_dump(${0}); echo '</pre>';",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "pd": true
        },
        "opts": {}
      },
      {
        "content": "echo '<pre>'; var_dump(${1}); echo '</pre>'; die(${0:});",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "pdd": true
        },
        "opts": {}
      },
      {
        "content": "var_dump(${0});",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "vd": true
        },
        "opts": {}
      },
      {
        "content": "var_dump(${1}); die(${0:});",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "vdd": true
        },
        "opts": {}
      },
      {
        "content": "print_r(${0});",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "pr": true
        },
        "opts": {}
      },
      {
        "content": "print_r(${0}, 1);",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "prs": true
        },
        "opts": {}
      },
      {
        "content": "error_log(print_r($${1:foo}, true), 3, '${2:/tmp/debug.log}');",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "vdf": true
        },
        "opts": {}
      },
      {
        "content": "header (\"HTTP/1.1 301 Moved Permanently\");\nheader (\"Location: \".URL);\nexit();",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "http_redirect": true
        },
        "opts": {}
      },
      {
        "content": "error_log(var_export(${1}, true));",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "log \"error_log(var_export($var, true));\"": true
        },
        "opts": {}
      },
      {
        "content": "var_export(${1});",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "var \"var_export($var)\"": true
        },
        "opts": {}
      },
      {
        "content": "echo '<pre>' . var_export(${1}, 1) . '</pre>';",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ve \"Dumb debug helper in HTML\"": true
        },
        "opts": {}
      },
      {
        "content": "var_export($1);$0",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "pc \"Dumb debug helper in cli\"": true
        },
        "opts": {}
      },
      {
        "content": "/**\n * ${1:description}\n *\n * @${0}\n */\n${2:protected} $${3:foo};\npublic function get${4:$3}()\n{\n\treturn $this->$3;\n}\npublic function set$4(${5:$4 }$${6:$3})\n{\n\t$this->$3 = $$6;\n\treturn $this;\n}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ags": true
        },
        "opts": {}
      },
      {
        "content": "return true;",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "rett": true
        },
        "opts": {}
      },
      {
        "content": "return false;",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "retf": true
        },
        "opts": {}
      },
      {
        "content": "$${1:foo} = array_map(function($${2:v}) {\n\t${0}\n\treturn $$2;\n}, $$1);",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "am": true
        },
        "opts": {}
      },
      {
        "content": "array_walk($${1:foo}, function(&$${2:v}, $${3:k}) {\n\t$$2 = ${0};\n});",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "aw": true
        },
        "opts": {}
      },
      {
        "content": "static $${1} = null;\nif (is_null($$1)){\n\t$$1 = ${2};\n}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "static_var": true
        },
        "opts": {}
      },
      {
        "content": "<?php\nclass CSVWriter {\n\tpublic function __construct($file_or_handle, $sep = \"\\t\", $quot = '\"'){\n\t\t$args = func_get_args();\n\t\t$mode = isset($opts['mode']) ? $opts['mode'] : 'w';\n\t\t$this->f =\n\t\t\tis_string($file_or_handle)\n\t\t\t? fopen($file_or_handle, $mode)\n\t\t\t: $file_or_handle;\n\t\t$this->fputcsv_args = [$this->f, null, $sep, $quot];\n\t\tif (!$this->f) throw new Exception('bad file descriptor');\n\t}\n\tpublic function write($row){\n\t\t$this->fputcsv_args[1] =& $row;\n\t\tcall_user_func_array('fputcsv', $this->fputcsv_args);\n\t}\n\tpublic function close(){\n\t\tif (!is_null($this->f))\n\t\t\tfclose($this->f);\n\t\t$this->f = null;\n\t}\n\tpublic function __destruct(){\n\t\t$this->close();\n\t}\n}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "CSVWriter": true
        },
        "opts": {}
      },
      {
        "content": "// http://snipplr.com/view.php?codeview&id=1986 // modified\nclass CSVIterator implements Iterator\n{\t\n\tprivate $f;\n\tprivate $curr;\n\tprivate $rowCounter;\n\t /* opts keys:\n\t\t* row_size\n\t\t* escape\n\t\t* enclosure\n\t\t* delimiter\n\t\t*/\n\tpublic function __construct( $file_or_handle, $opts = [4096, ','] )\n\t{\n\t\t$d = function($n) use(&$opts){ return isset($opts[$n]) ? $opts[$n] : false; };\n\t\t$this->combine = $d('combine');\n\t\t$this->headers = $d('headers');\n\t\t$this->headerCheckFunction = $d('header_check_function');\n\t\t$this->f =\n\t\t\tis_string($file_or_handle)\n\t\t\t? fopen( $file_or_handle, 'r' )\n\t\t\t: $file_or_handle;\n\t\tif (!$this->f) throw new Exception('bad file descriptor');\n\t\t$this->fgetcsv_args = [\n\t\t\t\t$this->f,\n\t\t\t\tisset($opts['row_size']) ? $opts['row_size'] : 4096,\n\t\t\t\tisset($opts['delimiter']) ? $opts['delimiter'] : ',',\n\t\t\t\tisset($opts['enclosure']) ? $opts['enclosure'] : '\"',\n\t\t\t\tisset($opts['escape']) ? $opts['escape'] : '\\\\',\n\t\t];\n\t\t$this->start();\n\t}\n\tprotected function readRow(){\n\t\t$this->curr = call_user_func_array('fgetcsv', $this->fgetcsv_args );\n\t\t$this->rowCounter++;\n\t\tif ($this->rowCounter == 1){\n\t\t\t$this->processHeader();\n\t\t} elseif ($this->curr) {\n\t\t\t$this->processRow();\n\t\t}\n\t}\n\tpublic function processHeader(){\n\t\tif ($this->headers || $this->combine){\n\t\t\t$this->header = $this->curr;\n\t\t\tif ($this->headerCheckFunction){\n\t\t\t\t$f = $this->headerCheckFunction;\n\t\t\t\t$f($this->header);\n\t\t\t}\n\t\t\t$this->readRow();\n\t\t}\n\t}\n\tpublic function processRow(){\n\t\tif ($this->combine)\n\t\t\t$this->curr = array_combine($this->header, $this->curr);\n\t}\n\tpublic function start(){\n\t\t$this->rowCounter = 0;\n\t\trewind( $this->f );\n\t\t$this->readRow();\n\t}\n\tpublic function rewind()\n\t{\n\t\t$this->start();\n\t}\n\tpublic function current()\n\t{\n\t\t$curr = $this->curr;\n\t\t$this->readRow();\n\t\treturn $curr;\n\t}\n\tpublic function key()\n\t{\n\t\treturn $this->rowCounter;\n\t}\n\tpublic function next()\n\t{\n\t\treturn $this->curr;\n\t}\n\tpublic function valid(){\n\t\tif( !$this->next() )\n\t\t{\n\t\t\tfclose( $this->f );\n\t\t\treturn FALSE;\n\t\t}\n\t\treturn TRUE;\n\t}\n} // end class",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "CSVIterator": true
        },
        "opts": {}
      },
      {
        "content": "$this->assertEquals(${1:$expected}, ${2:$actual});",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ase \"$this->assertEquals($a, $b)\"": true
        },
        "opts": {}
      },
      {
        "content": "$this->assertNotEquals(${1:$expected}, ${2:$actual});",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "asne \"$this->assertNotEquals($a, $b)\"": true
        },
        "opts": {}
      },
      {
        "content": "$this->assertFalse(${1});",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "asf \"$this->assertFalse($a)\"": true
        },
        "opts": {}
      },
      {
        "content": "$this->assertTrue(${1});",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ast \"$this->assertTrue($a)\"": true
        },
        "opts": {}
      },
      {
        "content": "$this->assertFileExists(${1:'path/to/file'});",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "asfex \"$this->assertFileExists('path/to/file')\"": true
        },
        "opts": {}
      },
      {
        "content": "$this->assertFileNotExists(${1:'path/to/file'});",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "asfnex \"$this->assertFileNotExists('path/to/file')\"": true
        },
        "opts": {}
      },
      {
        "content": "$this->assertContains(${1:$needle}, ${2:$haystack});",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ascon \"$this->assertContains($needle, $haystack)\"": true
        },
        "opts": {}
      },
      {
        "content": "$this->assertNotContains(${1:$needle}, ${2:$haystack});",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "asncon \"$this->assertNotContains($needle, $haystack)\"": true
        },
        "opts": {}
      },
      {
        "content": "$this->assertContainsOnly(${1:$needle}, ${2:$haystack});",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ascono \"$this->assertContainsOnly($needle, $haystack)\"": true
        },
        "opts": {}
      },
      {
        "content": "$this->assertContainsOnlyInstancesOf(${1:Example}::class, ${2:$haystack});",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "asconoi \"$this->assertContainsOnlyInstancesOf(Example::class, $haystack)\"": true
        },
        "opts": {}
      },
      {
        "content": "$this->assertArrayHasKey(${1:$key}, ${2:$array});",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ashk \"$this->assertArrayHasKey($key, $array)\"": true
        },
        "opts": {}
      },
      {
        "content": "this->assertArrayNotHasKey(${1:$key}, ${2:$array});",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "asnhk \"$this->assertArrayNotHasKey($key, $array)\"": true
        },
        "opts": {}
      },
      {
        "content": "$this->assertClassHasAttribute(${1:$attributeName}, ${2:Example}::class);",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ascha \"$this->assertClassHasAttribute($name, Example::class)\"": true
        },
        "opts": {}
      },
      {
        "content": "$this->assertInstanceOf(${1:Example}::class, ${2:$actual});",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "asi \"$this->assertInstanceOf(Example::class, $actual)\"": true
        },
        "opts": {}
      },
      {
        "content": "$this->assertInternalType(${1:'string'}, ${2:actual});",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "asit \"$this->assertInternalType('string', $actual)\"": true
        },
        "opts": {}
      },
      {
        "content": "$this->assertCount(${1:$expectedCount}, ${2:$haystack});",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "asco \"$this->assertCount($count, $haystack)\"": true
        },
        "opts": {}
      },
      {
        "content": "$this->assertNotCount(${1:$count}, ${2:$haystack});",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "asnco \"$this->assertNotCount($count, $haystack)\"": true
        },
        "opts": {}
      },
      {
        "content": "$this->assertArraySubset(${1:$subset}, ${2:$array});",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "assub \"$this->assertArraySubset($subset, $array)\"": true
        },
        "opts": {}
      },
      {
        "content": "$this->assertNull(${1});",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "asnu \"$this->assertNull($a)\"": true
        },
        "opts": {}
      },
      {
        "content": "$this->assertNotNull(${1});",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "asnnu \"$this->assertNotNull($a)\"": true
        },
        "opts": {}
      },
      {
        "content": "public function test${1}()\n{\n\t${0:${VISUAL}}\n}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "test \"public function testXYZ() { ... }\"": true
        },
        "opts": {}
      },
      {
        "content": "protected function setUp()\n{\n\t${0:${VISUAL}}\n}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "setup \"protected function setUp() { ... }\"": true
        },
        "opts": {}
      },
      {
        "content": "protected function tearDown()\n{\n\t${0:${VISUAL}}\n}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "teardown \"protected function tearDown() { ... }\"": true
        },
        "opts": {}
      },
      {
        "content": "$${1:observer} = $this->prophesize(${2:SomeClass}::class);",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "proph \"$observer = $this->prophesize(SomeClass::class);\"": true
        },
        "opts": {}
      },
      {
        "content": "$${1:mock} = $this->createMock(${2:SomeClass}::class);",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "mock \"$mock = $this->createMock(SomeClass::class);\"": true
        },
        "opts": {}
      },
      {
        "content": "expects($this->${1:once}())\n\t->method('${2}')\n\t->with(${3})\n\t->willReturn(${4});",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "exp \"phpunit expects\"": true
        },
        "opts": {}
      },
      {
        "content": "/**\n* @group ${1}\n*/",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "testcmt \"phpunit comment with group\"": true
        },
        "opts": {}
      },
      {
        "content": "$this->fail(${1});",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "fail \"$this->fail()\"": true
        },
        "opts": {}
      },
      {
        "content": "$this->markTestIncomplete(${1});",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "marki \"$this->markTestIncomplete()\"": true
        },
        "opts": {}
      },
      {
        "content": "$this->markTestSkipped(${1});",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "marks \"$this->markTestSkipped()\"": true
        },
        "opts": {}
      },
      {
        "content": "throw new ${1:Exception}(\"${2:Error Processing Request}\");",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "te \"throw new Exception()\"": true
        },
        "opts": {}
      },
      {
        "content": "file_put_contents(${1:file}, ${2:content}${3:, FILE_APPEND});$0",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "fpc \"file_put_contents\" b": true
        },
        "opts": {}
      },
      {
        "content": "str_replace(${1:search}, ${2:replace}, ${3:subject})$0",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "sr \"str_replace\"": true
        },
        "opts": {}
      },
      {
        "content": "in_array(${1:needle}, ${2:haystack})$0",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ia \"in_array\"": true
        },
        "opts": {}
      },
      {
        "content": "isset(${1:var})$0",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "is \"isset\"": true
        },
        "opts": {}
      },
      {
        "content": "isset($${1:array}[${2:key}])$0",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "isa \"isset array\"": true
        },
        "opts": {}
      },
      {
        "content": "is_null($${1:var})$0",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "in \"is_null\"": true
        },
        "opts": {}
      },
      {
        "content": "file_exists(${1:file})$0",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "fe \"file_exists\"": true
        },
        "opts": {}
      },
      {
        "content": "is_dir(${1:path})$0",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "id \"is_dir\"": true
        },
        "opts": {}
      }
    ],
    "php-laravel": [],
    "php-phpspec": [
      {
        "content": "function it_$1()\n{\n\t${0:${VISUAL}}\n}",
        "doc": null,
        "grammar": "snu",
        "label": "function it_does_something() { ... }",
        "matches": {
          "it": true
        },
        "opts": {}
      },
      {
        "content": "function let()\n{\n\t${0:${VISUAL}}\n}",
        "doc": null,
        "grammar": "snu",
        "label": "function let() { ... }",
        "matches": {
          "let": true
        },
        "opts": {}
      },
      {
        "content": "function letgo()\n{\n\t${0:${VISUAL}}\n}",
        "doc": null,
        "grammar": "snu",
        "label": "function letgo() { ... }",
        "matches": {
          "letgo": true
        },
        "opts": {}
      },
      {
        "content": "$this->beConstructedWith($1);",
        "doc": null,
        "grammar": "snu",
        "label": "$this->beConstructedWith($arg)",
        "matches": {
          "cw": true
        },
        "opts": {}
      },
      {
        "content": "$this->beConstructedThrough(${1:'methodName'}, [${2:'$arg'}]);",
        "doc": null,
        "grammar": "snu",
        "label": "$this->beConstructedThrough($methodName, [$arg])",
        "matches": {
          "ct": true
        },
        "opts": {}
      },
      {
        "content": "$this->${1:method}()->shouldReturn(${2:'value'});",
        "doc": null,
        "grammar": "snu",
        "label": "$this->XYZ()->shouldReturn('value')",
        "matches": {
          "sreturn": true
        },
        "opts": {}
      },
      {
        "content": "$this->${1:method}()->shouldNotReturn(${2:'value'});",
        "doc": null,
        "grammar": "snu",
        "label": "$this->XYZ()->shouldNotReturn('value')",
        "matches": {
          "snreturn": true
        },
        "opts": {}
      },
      {
        "content": "$this->${1:method}()->shouldBe(${2:'value'});",
        "doc": null,
        "grammar": "snu",
        "label": "$this->XYZ()->shouldBe('value')",
        "matches": {
          "sbe": true
        },
        "opts": {}
      },
      {
        "content": "$this->${1:method}()->shouldNotBe(${2:'value'});",
        "doc": null,
        "grammar": "snu",
        "label": "$this->XYZ()->shouldNotBe('value')",
        "matches": {
          "snbe": true
        },
        "opts": {}
      },
      {
        "content": "$this->${1:method}()->shouldEqual(${2:'value'});",
        "doc": null,
        "grammar": "snu",
        "label": "$this->XYZ()->shouldEqual('value')",
        "matches": {
          "sequal": true
        },
        "opts": {}
      },
      {
        "content": "$this->${1:method}()->shouldNotEqual(${2:'value'});",
        "doc": null,
        "grammar": "snu",
        "label": "$this->XYZ()->shouldNotEqual('value')",
        "matches": {
          "snequal": true
        },
        "opts": {}
      },
      {
        "content": "$this->${1:method}()->shouldBeEqualTo(${2:'value'});",
        "doc": null,
        "grammar": "snu",
        "label": "$this->XYZ()->shouldBeEqualTo('value')",
        "matches": {
          "sbequalto": true
        },
        "opts": {}
      },
      {
        "content": "$this->${1:method}()->shouldNotBeEqualTo(${2:'value'});",
        "doc": null,
        "grammar": "snu",
        "label": "$this->XYZ()->shouldNotBeEqualTo('value')",
        "matches": {
          "snbequalto": true
        },
        "opts": {}
      },
      {
        "content": "$this->${1:method}()->shouldBeLike(${2:'value'});",
        "doc": null,
        "grammar": "snu",
        "label": "$this->XYZ()->shouldBeLike('value')",
        "matches": {
          "sblike": true
        },
        "opts": {}
      },
      {
        "content": "$this->${1:method}()->shouldNotBeLike(${2:'value'});",
        "doc": null,
        "grammar": "snu",
        "label": "$this->XYZ()->shouldNotBeLike('value')",
        "matches": {
          "snblike": true
        },
        "opts": {}
      },
      {
        "content": "$this->shouldThrow(${1:'\\Exception'})->during${2:Method}(${3:'$arg'});",
        "doc": null,
        "grammar": "snu",
        "label": "$this->shouldThrow('\\Exception')->duringXYZ($arg)",
        "matches": {
          "sthrowm": true
        },
        "opts": {}
      },
      {
        "content": "$this->shouldThrow(${1:'\\Exception'})->duringInstantiation();",
        "doc": null,
        "grammar": "snu",
        "label": "$this->shouldThrow('\\Exception')->duringInstantiation()",
        "matches": {
          "sthrowi": true
        },
        "opts": {}
      },
      {
        "content": "$this->shouldHaveType($1);",
        "doc": null,
        "grammar": "snu",
        "label": "$this->shouldHaveType('Type')",
        "matches": {
          "stype": true
        },
        "opts": {}
      },
      {
        "content": "$this->shouldNotHaveType($1);",
        "doc": null,
        "grammar": "snu",
        "label": "$this->shouldNotHaveType('Type')",
        "matches": {
          "sntype": true
        },
        "opts": {}
      },
      {
        "content": "$this->shouldReturnAnInstanceOf($1);",
        "doc": null,
        "grammar": "snu",
        "label": "$this->shouldReturnAnInstanceOf('Type')",
        "matches": {
          "srinstance": true
        },
        "opts": {}
      },
      {
        "content": "$this->shouldNotReturnAnInstanceOf($1);",
        "doc": null,
        "grammar": "snu",
        "label": "$this->shouldNotReturnAnInstanceOf('Type')",
        "matches": {
          "snrinstance": true
        },
        "opts": {}
      },
      {
        "content": "$this->shouldBeAnInstanceOf($1);",
        "doc": null,
        "grammar": "snu",
        "label": "$this->shouldBeAnInstanceOf('Type')",
        "matches": {
          "sbinstance": true
        },
        "opts": {}
      },
      {
        "content": "$this->shouldNotBeAnInstanceOf($1);",
        "doc": null,
        "grammar": "snu",
        "label": "$this->shouldNotBeAnInstanceOf('Type')",
        "matches": {
          "snbinstance": true
        },
        "opts": {}
      },
      {
        "content": "$this->shouldImplement($1);",
        "doc": null,
        "grammar": "snu",
        "label": "$this->shouldImplement('Type')",
        "matches": {
          "simplement": true
        },
        "opts": {}
      },
      {
        "content": "$this->shouldNotImplement($1);",
        "doc": null,
        "grammar": "snu",
        "label": "$this->shouldNotImplement('Type')",
        "matches": {
          "snimplement": true
        },
        "opts": {}
      },
      {
        "content": "$this->shouldBe$1();",
        "doc": null,
        "grammar": "snu",
        "label": "$this->shouldBeXYZ()",
        "matches": {
          "sbstate": true
        },
        "opts": {}
      },
      {
        "content": "$this->shouldNotBe$1();",
        "doc": null,
        "grammar": "snu",
        "label": "$this->shouldNotBeXYZ()",
        "matches": {
          "snbstate": true
        },
        "opts": {}
      },
      {
        "content": "$this->${1:method}()->shouldHaveCount(${2:7});",
        "doc": null,
        "grammar": "snu",
        "label": "$this->XYZ()->shouldHaveCount(7)",
        "matches": {
          "scount": true
        },
        "opts": {}
      },
      {
        "content": "$this->${1:method}()->shouldNotHaveCount(${2:7});",
        "doc": null,
        "grammar": "snu",
        "label": "$this->XYZ()->shouldNotHaveCount(7)",
        "matches": {
          "sncount": true
        },
        "opts": {}
      },
      {
        "content": "$this->${1:method}()->shouldBe${2:String|Array|Bool}();",
        "doc": null,
        "grammar": "snu",
        "label": "$this->XYZ()->shouldBeString|Array|Bool()",
        "matches": {
          "sbscalar": true
        },
        "opts": {}
      },
      {
        "content": "$this->${1:method}()->shouldNotBe${2:String|Array|Bool}();",
        "doc": null,
        "grammar": "snu",
        "label": "$this->XYZ()->shouldNotBeString|Array|Bool()",
        "matches": {
          "snbscalar": true
        },
        "opts": {}
      },
      {
        "content": "$this->${1:method}()->shouldContain(${2:'value'});",
        "doc": null,
        "grammar": "snu",
        "label": "$this->XYZ()->shouldContain('value')",
        "matches": {
          "scontain": true
        },
        "opts": {}
      },
      {
        "content": "$this->${1:method}()->shouldNotContain(${2:'value'});",
        "doc": null,
        "grammar": "snu",
        "label": "$this->XYZ()->shouldNotContain('value')",
        "matches": {
          "sncontain": true
        },
        "opts": {}
      },
      {
        "content": "$this->${1:method}()->shouldHaveKey(${2:'key'});",
        "doc": null,
        "grammar": "snu",
        "label": "$this->XYZ()->shouldHaveKey('key')",
        "matches": {
          "skey": true
        },
        "opts": {}
      },
      {
        "content": "$this->${1:method}()->shouldNotHaveKey(${2:'key'});",
        "doc": null,
        "grammar": "snu",
        "label": "$this->XYZ()->shouldNotHaveKey('key')",
        "matches": {
          "snkey": true
        },
        "opts": {}
      },
      {
        "content": "$this->${1:method}()->shouldHaveKeyWithValue(${2:'key'}, ${3:'value'});",
        "doc": null,
        "grammar": "snu",
        "label": "$this->XYZ()->shouldHaveKeyWithValue('key', 'value')",
        "matches": {
          "skeyvalue": true
        },
        "opts": {}
      },
      {
        "content": "$this->${1:method}()->shouldNotHaveKeyWithValue(${2:'key'}, ${3:'value'});",
        "doc": null,
        "grammar": "snu",
        "label": "$this->XYZ()->shouldNotHaveKeyWithValue('key', 'value')",
        "matches": {
          "snkeyvalue": true
        },
        "opts": {}
      },
      {
        "content": "$this->${1:method}()->shouldStartWith(${2:'string'});",
        "doc": null,
        "grammar": "snu",
        "label": "$this->XYZ()->shouldStartWith('string')",
        "matches": {
          "sstart": true
        },
        "opts": {}
      },
      {
        "content": "$this->${1:method}()->shouldNotStartWith(${2:'string'});",
        "doc": null,
        "grammar": "snu",
        "label": "$this->XYZ()->shouldNotStartWith('string')",
        "matches": {
          "snstart": true
        },
        "opts": {}
      },
      {
        "content": "$this->${1:method}()->shouldEndWith(${2:'string'});",
        "doc": null,
        "grammar": "snu",
        "label": "$this->XYZ()->shouldEndWith('string')",
        "matches": {
          "send": true
        },
        "opts": {}
      },
      {
        "content": "$this->${1:method}()->shouldNotEndWith(${2:'string'});",
        "doc": null,
        "grammar": "snu",
        "label": "$this->XYZ()->shouldNotEndWith('string')",
        "matches": {
          "snend": true
        },
        "opts": {}
      },
      {
        "content": "$this->${1:method}()->shouldMatch(${2:'/wizard/i'});",
        "doc": null,
        "grammar": "snu",
        "label": "$this->XYZ()->shouldMatch('/wizard/i')",
        "matches": {
          "smatch": true
        },
        "opts": {}
      },
      {
        "content": "$this->${1:method}()->shouldNotMatch(${2:'/wizard/i'});",
        "doc": null,
        "grammar": "snu",
        "label": "$this->XYZ()->shouldNotMatch('/wizard/i')",
        "matches": {
          "snmatch": true
        },
        "opts": {}
      }
    ],
    "php-symfony2": [
      {
        "content": "/**\n* @Route(\"/${1:route_name}\", name=\"$1\")\n* @Template()\n*/\npublic function $1Action($2)\n{\n\t$3\n\treturn ${4:[];}$0\n}",
        "doc": null,
        "grammar": "snu",
        "label": "Symfony 2 Controller action",
        "matches": {
          "sfa": true
        },
        "opts": {}
      },
      {
        "content": "/**\n * @Route(\"$3\", name=\"$4\")\n * @Method({${5:\"POST\"}})\n * @Template()\n */\npublic function $1Action($2)\n{\n\t$6\n}",
        "doc": null,
        "grammar": "snu",
        "label": "Symfony2 action",
        "matches": {
          "act": true
        },
        "opts": {
          "b": true
        }
      },
      {
        "content": "$this->redirect($this->generateUrl('$1', $2));",
        "doc": null,
        "grammar": "snu",
        "label": "Symfony2 redirect",
        "matches": {
          "redir": true
        },
        "opts": {
          "b": true
        }
      },
      {
        "content": "use Symfony\\Bundle\\FrameworkBundle\\Controller\\Controller;$1",
        "doc": null,
        "grammar": "snu",
        "label": "Symfony2 use Symfony\\..\\Controller",
        "matches": {
          "usecontroller": true
        },
        "opts": {
          "b": true
        }
      },
      {
        "content": "use Symfony\\Component\\HttpFoundation\\Request;$1",
        "doc": null,
        "grammar": "snu",
        "label": "Symfony2 use Symfony\\..\\Request",
        "matches": {
          "usereauest": true
        },
        "opts": {
          "b": true
        }
      },
      {
        "content": "use Sensio\\Bundle\\FrameworkExtraBundle\\Configuration\\Route;$1",
        "doc": null,
        "grammar": "snu",
        "label": "Symfony2 use Sensio\\..\\Route",
        "matches": {
          "useroute": true
        },
        "opts": {
          "b": true
        }
      },
      {
        "content": "use Symfony\\Component\\HttpFoundation\\Response;$1",
        "doc": null,
        "grammar": "snu",
        "label": "Symfony2 use Symfony\\..\\Response",
        "matches": {
          "useresponse": true
        },
        "opts": {
          "b": true
        }
      },
      {
        "content": "use Symfony\\Component\\HttpFoundation\\File\\UploadedFile;$1",
        "doc": null,
        "grammar": "snu",
        "label": "Symfony2 use Symfony\\..\\File",
        "matches": {
          "usefile": true
        },
        "opts": {
          "b": true
        }
      },
      {
        "content": "use Symfony\\Component\\Validator\\Constraints as Assert;$1",
        "doc": null,
        "grammar": "snu",
        "label": "Symfony2 use Symfony\\..\\Constraints as Assert",
        "matches": {
          "useassert": true
        },
        "opts": {
          "b": true
        }
      },
      {
        "content": "use Sensio\\Bundle\\FrameworkExtraBundle\\Configuration\\Template;$1",
        "doc": null,
        "grammar": "snu",
        "label": "Symfony2 use Sensio\\..\\Template",
        "matches": {
          "usetemplate": true
        },
        "opts": {
          "b": true
        }
      },
      {
        "content": "use Sensio\\Bundle\\FrameworkExtraBundle\\Configuration\\Cache;$1",
        "doc": null,
        "grammar": "snu",
        "label": "Symfony2 use Sensio\\..\\Cache",
        "matches": {
          "usecache": true
        },
        "opts": {
          "b": true
        }
      },
      {
        "content": "use Sensio\\Bundle\\FrameworkExtraBundle\\Configuration\\Method;$1",
        "doc": null,
        "grammar": "snu",
        "label": "Symfony2 use Sensio\\..\\Method",
        "matches": {
          "usemethod": true
        },
        "opts": {
          "b": true
        }
      },
      {
        "content": "use Doctrine\\Common\\Collections\\ArrayCollection;$1",
        "doc": null,
        "grammar": "snu",
        "label": "Symfony2 use Doctrine\\..\\ArrayCollection",
        "matches": {
          "usearray": true
        },
        "opts": {
          "b": true
        }
      },
      {
        "content": "use Doctrine\\ORM\\Mapping as ORM;$1",
        "doc": null,
        "grammar": "snu",
        "label": "Symfony2 use Doctrine\\..\\Mapping as ORM",
        "matches": {
          "useorm": true
        },
        "opts": {
          "b": true
        }
      },
      {
        "content": "use JMS\\SecurityExtraBundle\\Annotation\\Secure;$1",
        "doc": null,
        "grammar": "snu",
        "label": "Symfony2 use JMS\\..\\Secure",
        "matches": {
          "usesecure": true
        },
        "opts": {
          "b": true
        }
      }
    ],
    "plsql": [
      {
        "content": "create or replace package ${1:name}\nas\n\t${0:-- spec}\nend; -- end of package spec $1",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ps": true
        },
        "opts": {}
      },
      {
        "content": "create or replace package body ${1:name}\nas\n\t${0:-- body}\nend; -- end of package body $1;",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "pb": true
        },
        "opts": {}
      },
      {
        "content": "procedure ${1:name}(${0:args});",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "pps": true
        },
        "opts": {}
      },
      {
        "content": "procedure ${1:name}(${2:args})\nas\nbegin\n\t${0:-- body}\nend $2;",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ppb": true
        },
        "opts": {}
      },
      {
        "content": "function ${1:name}(${2:args})\n  return ${0:type};",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "pfs": true
        },
        "opts": {}
      },
      {
        "content": "function ${1:name}(${2:args})\n  return ${3:type}\nas\n\tl_res\t$3;\nbegin\n\t${0:-- body};\n\treturn l_res;\nend $1;",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "pfb": true
        },
        "opts": {}
      },
      {
        "content": "show errors;",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "err": true
        },
        "opts": {}
      },
      {
        "content": "${1:name} ${2:in} ${3:type} ${0: := null}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "p": true
        },
        "opts": {}
      },
      {
        "content": "type tr_${1:name} is record (${0:/* columns */});",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "tr": true
        },
        "opts": {}
      },
      {
        "content": "type tt_${1:name} is table of tr_${0:name};",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "tt": true
        },
        "opts": {}
      },
      {
        "content": "type tt_${1:name} is table of tr_${0:name} index by binary_integer;",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "tti": true
        },
        "opts": {}
      },
      {
        "content": "/*\n *\t${0: comment ...}\n */",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "doc": true
        },
        "opts": {}
      },
      {
        "content": "begin\n\t${0}\nend;",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "beg": true
        },
        "opts": {}
      },
      {
        "content": "declare\n\t${1}\nbegin\n\t${0}\nend;",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "dec": true
        },
        "opts": {}
      },
      {
        "content": "for ${1:i} in 1 .. ${0:l_res}.count loop\n\tpipe row( $2($1) );\nend loop;\nreturn;",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "rpipe": true
        },
        "opts": {}
      },
      {
        "content": "bulk collect into ${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "bc": true
        },
        "opts": {}
      },
      {
        "content": "l_${1}\t\t${0:number};",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "l": true
        },
        "opts": {}
      },
      {
        "content": "dbms_output.put_line('${0}');",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "log": true
        },
        "opts": {}
      },
      {
        "content": "for ${1:i} in ${2:1}..${3:42} loop\n\t${0}\nend loop;",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "for": true
        },
        "opts": {}
      },
      {
        "content": "for ${1:rec} in (${2: select}) loop\n\t${0}\nend loop;",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "fors": true
        },
        "opts": {}
      },
      {
        "content": "for ${1:i} in ${2:l_var}.first .. $2.last loop\n\t${0: -- dbms_output.put_line($2($1)); }\nend loop;",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "forc": true
        },
        "opts": {}
      },
      {
        "content": "if ${1} then\n\t${0}\nend if;",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "if": true
        },
        "opts": {}
      },
      {
        "content": "if ${1} then\n\t${2}\nelse\n\t${0}\nend if;",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ife": true
        },
        "opts": {}
      }
    ],
    "po": [
      {
        "content": "msgid \"${1}\"\nmsgstr \"${2}\"\n${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "msg": true
        },
        "opts": {}
      }
    ],
    "processing": [
      {
        "content": "/**\n *\t${1:@private}$0\n */\n${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "docc": true
        },
        "opts": {}
      },
      {
        "content": "${1:void/private/protected/public}${2: static} ${3:name}(${4}) {\n\t${5://if not void return null;}\n}\n${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "fun": true
        },
        "opts": {}
      },
      {
        "content": "${1:void }${2:name}(${3}) {\n\t${4://if not void return null;}\n}\n${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "fn": true
        },
        "opts": {}
      },
      {
        "content": "static final ${1:Object} ${2:VAR_NAM} = ${0};",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "const": true
        },
        "opts": {}
      },
      {
        "content": "${1:private/public }${2:static }${3:String} ${4:str}${5: =}${0:value};",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "var": true
        },
        "opts": {}
      },
      {
        "content": "${1:private/public }${2:Object} ${3:o}${4: = new }$2(${0});",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "obj": true
        },
        "opts": {}
      },
      {
        "content": "for (int ${2:i} = 0; $2 < ${1:Things}.length; $2${3:++}) {\n\t${0:$1[$2]}\n};",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "for": true
        },
        "opts": {}
      },
      {
        "content": "while (${1:/* condition */}) {\n\t${0}\n}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "wh": true
        },
        "opts": {}
      },
      {
        "content": "break ${1:label};",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "break": true
        },
        "opts": {}
      },
      {
        "content": "case ${1:expression} :\n\t${0}\nbreak;",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "case": true
        },
        "opts": {}
      },
      {
        "content": "default :\n\t${1}\nbreak;",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "default": true
        },
        "opts": {}
      },
      {
        "content": "switch(${1:expression}) {\n\tcase '${3:case}':\n\t\t${4}\n\t\tbreak;\n\t${0}\n\tdefault:\n\t\t${2}\n}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "switch": true
        },
        "opts": {}
      },
      {
        "content": "try {\n\t${0:${VISUAL}}\n} catch(${1:Exception} ${2:e}) {\n}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "try": true
        },
        "opts": {}
      },
      {
        "content": "try {\n\t${0:${VISUAL}}\n} catch(${1:Exception} ${2:e}) {\n} finally {\n}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "tryf": true
        },
        "opts": {}
      },
      {
        "content": "throw new (\"${1:Exception()}\");",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "throw": true
        },
        "opts": {}
      },
      {
        "content": "? ${1:trueExpression} : ${2:falseExpression}\n${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "?": true
        },
        "opts": {}
      },
      {
        "content": "if (${1:true}) {${0}}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "if": true
        },
        "opts": {}
      },
      {
        "content": "if (${1:true}) {${2}}\nelse{${0}}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ife": true
        },
        "opts": {}
      },
      {
        "content": "public ${1:String} get${2}() {\n\treturn ${0:fieldName};\n}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "get": true
        },
        "opts": {}
      },
      {
        "content": "public void set${1}(${0:String} new${1}) {\n\t${1:fieldName} = new${1};\n}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "set": true
        },
        "opts": {}
      },
      {
        "content": "println(\"${0}\");",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "pr": true
        },
        "opts": {}
      },
      {
        "content": "void setup(){\n\t${1}\n}\nvoid draw(){\n\t${0}\n}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "setup": true
        },
        "opts": {}
      },
      {
        "content": "import processing.opengl.*;\nimport javax.media.opengl.*;\nPGraphicsOpenGL pgl;\nGL gl;\nvoid setup(){\n\tsize( ${1:300}, ${2:300}, OPENGL );\n\tcolorMode( RGB, 1.0 );\n\thint( ENABLE_OPENGL_4X_SMOOTH );\n\tpgl = (PGraphicsOpenGL) g;\n\tgl = pgl.gl;\n\tgl.setSwapInterval(1);\n\tinitGL();\n\t${3}\n}\nvoid draw(){\n\tpgl.beginGL();\n\t\t${4}\n\tpgl.endGL();\n\tgetOpenGLErrors();\n}\nvoid initGL(){\n\t${0}\n}\nvoid getOpenGLErrors(){\n\tint error = gl.glGetError();\n\tswitch (error){\n\t\tcase 1280 :\n\t\t\tprintln(\"GL_INVALID_ENUM - An invalid enumerant was passed to an OpenGL command.\");\n\t\tbreak;\n\t\tcase 1282 :\n\t\t\tprintln(\"GL_INVALID_OPERATION - An OpenGL command was issued that was invalid or inappropriate for the current state.\");\n\t\tbreak;\n\t\tcase 1281 :\n\t\t\tprintln(\"GL_INVALID_VALUE - A value was passed to OpenGL that was outside the allowed range.\");\n\t\tbreak;\n\t\tcase 1285 :\n\t\t\tprintln(\"GL_OUT_OF_MEMORY - OpenGL was unable to allocate enough memory to process a command.\");\n\t\tbreak;\n\t\tcase 1283 :\n\t\t\tprintln(\"GL_STACK_OVERFLOW - A command caused an OpenGL stack to overflow.\");\n\t\tbreak;\n\t\tcase 1284 :\n\t\t\tprintln(\"GL_STACK_UNDERFLOW - A command caused an OpenGL stack to underflow.\");\n\t\tbreak;\n\t\tcase 32817 :\n\t\t\tprintln(\"GL_TABLE_TOO_LARGE\");\n\t\tbreak;\n\t}\n}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "opengl": true
        },
        "opts": {}
      },
      {
        "content": "pgl.beginGL();\n\t${0}\npgl.endGL();",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "gl begin gl": true
        },
        "opts": {}
      },
      {
        "content": "// specify the minimum swap interval for buffer swaps.\ngl.setSwapInterval(${0:interval});",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "gl gl swap interval": true
        },
        "opts": {}
      },
      {
        "content": "// execute a display list\ngl.glCallList(${0:list});",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "gl gl call list": true
        },
        "opts": {}
      },
      {
        "content": "// import java.nio.IntBuffer;\n// import java.nio.FloatBuffer;\n// import com.sun.opengl.util.BufferUtil;\n// You might need to create four buffers to store vertext data, normal data, texture coordinate data, and indices in vertex arrays\nIntBuffer bufferObjects = IntBuffer.allocate(${1:4});\ngl.glGenBuffers($1, bufferObjects);\nint vertexCount = ${2:3};\nint numCoordinates = ${0:3};\n// vertexCount * numCoordinates\nFloatBuffer vertices = BufferUtil.newFloatBuffer(vertexCount * numCoordinates);\nfloat[] v = {0.0f, 0.0f, 0.0f,\n\t\t\t\t\t\t 1.0f, 0.0f, 0.0f,\n\t\t\t\t\t\t 0.0f, 1.0f, 1.0f};\nvertices.put(v);\n// Bind the first buffer object ID for use with vertext array data\ngl.glBindBuffer(GL.GL_ARRAY_BUFFER, bufferObjects.get(0));\ngl.glBufferData(GL.GL_ARRAY_BUFFER, vertexCount * numCoordinates * BufferUtil.SIZEOF_FLOAT, vertices, GL.GL_STATIC_DRAW);",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "gl gl gen buffers": true
        },
        "opts": {}
      },
      {
        "content": "${0:// A buffer ID of zero unbinds a buffer object}\ngl.glBindBuffer(GL.GL_ARRAY_BUFFER, ${1:0});",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "gl gl bind buffer": true
        },
        "opts": {}
      },
      {
        "content": "${0:// Parameters are the same for glGenBuffers}\ngl.glDeleteBuffers(${1:4}, ${2:bufferObjects});",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "gl gl delete buffers": true
        },
        "opts": {}
      },
      {
        "content": "// enable or disable writing into the depth buffer\ngl.glDepthMask(${0:flag});",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "gl gl depth mask": true
        },
        "opts": {}
      },
      {
        "content": "// replaces the top of the active matrix stack with the identity matrix\ngl.glLoadIdentity();",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "gl gl load identity": true
        },
        "opts": {}
      },
      {
        "content": "// set the current texture coordinates - 2 floats\ngl.glTexCoord2f(${1:0.0f}, ${0:0.0f});",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "gl gl tex coord 2f": true
        },
        "opts": {}
      },
      {
        "content": "gl.glVertex2f(${1:0.0f}, ${0:0.0f});",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "gl gl vertex 2f": true
        },
        "opts": {}
      },
      {
        "content": "gl.glVertex3f(${1:0.0f}, ${2:0.0f}, ${0:0.0f});",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "gl gl vertex 3f": true
        },
        "opts": {}
      },
      {
        "content": "// multiply the current matrix by a translation matrix\ngl.glTranslatef(${1:x}, ${2:y}, ${0:z});",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "gl gl translate f": true
        },
        "opts": {}
      },
      {
        "content": "// rotate, x-axis, y-axis, z-axiz\ngl.glRotatef(${1:angle}, ${2:x}, ${3:y}, ${0:z});",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "gl gl rotate f": true
        },
        "opts": {}
      },
      {
        "content": "// multiply the current matrix by a general scaling matrix\ngl.glScalef(${1:x}, ${2:y}, ${0:z});",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "gl gl scale f": true
        },
        "opts": {}
      },
      {
        "content": "gl.glColor4f(${1:red}, ${2:green}, ${3:blue}, ${0:alpha});",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "gl gl color 4f": true
        },
        "opts": {}
      },
      {
        "content": "gl.glClearColor(${1:red}, ${2:green}, ${3:blue}, ${0:alpha});",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "gl gl clear color": true
        },
        "opts": {}
      },
      {
        "content": "gl.glColor3f(${1:red}, ${2:green}, ${0:blue});",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "gl gl color 3f": true
        },
        "opts": {}
      },
      {
        "content": "// spush and pop the current matrix stack\ngl.glPushMatrix();\n${0}\ngl.glPopMatrix();",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "gl gl push matrix": true
        },
        "opts": {}
      },
      {
        "content": "gl.glGenLists(${0:1})",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "gl gl gen lists": true
        },
        "opts": {}
      },
      {
        "content": "// Empties buffers. Call this when all previous issues commands completed\ngl.glFlush();\n${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "gl gl flush": true
        },
        "opts": {}
      },
      {
        "content": "println(gl.glGetError());",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "gl gl get error": true
        },
        "opts": {}
      },
      {
        "content": "gl.glClear(${1:GL.GL_COLOR_BUFFER_BIT}${2: | }${0:GL.GL_DEPTH_BUFFER_BIT});",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "gl gl clear": true
        },
        "opts": {}
      },
      {
        "content": "frameRate(${1:30});\n${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "frameRate": true
        },
        "opts": {}
      },
      {
        "content": "saveFrame(\"${1:filename-####}${0:.ext}\");",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "saveFrame": true
        },
        "opts": {}
      },
      {
        "content": "size(${1:200}, ${2:200}${0:, P3D});",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "size normal": true
        },
        "opts": {}
      },
      {
        "content": "size(${1:200}, ${2:200}${0:, OPENGL});",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "size opengl": true
        },
        "opts": {}
      },
      {
        "content": "color ${1:c}${2: = color(}${3:value1, }${4:value2, }${0:value3)};",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "color": true
        },
        "opts": {}
      },
      {
        "content": "char ${1:m}${2: = \"}${0:char\"};",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "char": true
        },
        "opts": {}
      },
      {
        "content": "float ${1:f}${2: = }${0:0.0f};",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "float": true
        },
        "opts": {}
      },
      {
        "content": "int ${1:f}${2: = }${0:0};",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "int": true
        },
        "opts": {}
      },
      {
        "content": "boolean ${1:b}${2: = }${0:true};",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "boolean": true
        },
        "opts": {}
      },
      {
        "content": "byte ${1:b}${2: = }${0:127};",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "byte": true
        },
        "opts": {}
      },
      {
        "content": "String ${1:str}${2: = \"}${0:CCCP\"};",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "string": true
        },
        "opts": {}
      },
      {
        "content": "${1:int}[] ${2:numbers}${3: = new $1}[${0:length}];",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "array": true
        },
        "opts": {}
      },
      {
        "content": "${1:Object} ${2:o}${3: = new $1}(${0});",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "object": true
        },
        "opts": {}
      },
      {
        "content": "curve(${1:x1}, ${2:y1}, ${3:x2}, ${4:y2}, ${5:x3}, ${6:y3}, ${7:x4}, ${0:y4});",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "curve": true
        },
        "opts": {}
      },
      {
        "content": "curve(${1:x1}, ${2:y1}, ${3:z1}, ${4:x2}, ${5:y2}, ${6:z2}, ${7:x3}, ${8:y3}, ${9:z3}, ${10:x4}, ${11:y4}, ${0:z4});",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "curve 3D": true
        },
        "opts": {}
      },
      {
        "content": "curveDetail(${0:detail});",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "curveDetail": true
        },
        "opts": {}
      },
      {
        "content": "curvePoint(${1:a}, ${2:b}, ${3:c}, ${4:d}, ${0:t});",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "curvePoint": true
        },
        "opts": {}
      },
      {
        "content": "curveTightness(${0:squishy});",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "curveTightness": true
        },
        "opts": {}
      },
      {
        "content": "bezier(${1:x1}, ${2:y1}, ${3:cx1}, ${4:cy1}, ${5:cx2}, ${6:cy2}, ${7:x2}, ${0:y2});",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "bezier": true
        },
        "opts": {}
      },
      {
        "content": "bezier(${1:x1}, ${2:y1}, ${3:z1}, ${4:cx1}, ${5:cy1}, ${6:cz1}, ${7:cx2}, ${8:cy2}, ${9:cz2}, ${10:x2}, ${11:y2}, ${0:z2});",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "bezier 3D": true
        },
        "opts": {}
      },
      {
        "content": "bezierDetail(${0:detail});",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "bezierDetail": true
        },
        "opts": {}
      },
      {
        "content": "bezierTangent(${1:a}, ${2:b}, ${3:c}, ${4:d}, ${0:t});",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "bezierTangent": true
        },
        "opts": {}
      },
      {
        "content": "bezierPoint(${1:a}, ${2:b}, ${3:c}, ${4:d}, ${0:t});",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "bezierPoint": true
        },
        "opts": {}
      },
      {
        "content": "vertex(${1:x}, ${2:y}${3:, }${4:u}${5:, }${0:v});",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "vertex": true
        },
        "opts": {}
      },
      {
        "content": "vertex(${1:x}, ${2:y}, ${3:z}${4:, }${5:u}${6:, }${0:v});",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "vertex 3D": true
        },
        "opts": {}
      },
      {
        "content": "bezierVertex(${1:cx1}, ${2:cy1}, ${3:cx2}, ${4:cy2}, ${5:x}, ${0:y});",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "bezierVertex": true
        },
        "opts": {}
      },
      {
        "content": "bezierVertex(${1:cx1}, ${2:cy1}, ${3:cz1}, ${4:cx2}, ${5:cy2}, ${6:cz2}, ${7:x}, ${8:y}, ${0:z});",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "bezierVertex 3D": true
        },
        "opts": {}
      },
      {
        "content": "curveVertex(${1:x}, ${0:y});",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "curveVertex": true
        },
        "opts": {}
      },
      {
        "content": "curveVertex(${1:x}, ${2:y}, ${0:z});",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "curveVertex 3D": true
        },
        "opts": {}
      },
      {
        "content": "stroke(${1:value1}, ${2:value2}, ${3:value3}${4:, }${0:alpha});",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "stroke": true
        },
        "opts": {}
      },
      {
        "content": "strokeWeight(${0:1});",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "strokeWeight": true
        },
        "opts": {}
      },
      {
        "content": "void mouseDragged(){\n\t${0}\n}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "mouseDragged": true
        },
        "opts": {}
      },
      {
        "content": "void mouseMoved(){\n\t${0}\n}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "mouseMoved": true
        },
        "opts": {}
      },
      {
        "content": "void mouseReleased(){\n\t${0}\n}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "mouseReleased": true
        },
        "opts": {}
      },
      {
        "content": "void mousePressed(){\n\t${0}\n}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "mousePressed": true
        },
        "opts": {}
      },
      {
        "content": "void keyReleased(){\n\t${0}\n}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "keyReleased": true
        },
        "opts": {}
      },
      {
        "content": "void keyTyped(){\n\t${0}\n}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "keyTyped": true
        },
        "opts": {}
      },
      {
        "content": "void keyPressed(){\n\t${0}\n}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "keyPressed": true
        },
        "opts": {}
      },
      {
        "content": "loadStrings(\"${0:filename}\");",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "loadStrings": true
        },
        "opts": {}
      },
      {
        "content": "saveStrings(${1:filename}, ${0:strings});",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "saveStrings": true
        },
        "opts": {}
      },
      {
        "content": "loadBytes(\"${0:filename}\");",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "loadBytes": true
        },
        "opts": {}
      },
      {
        "content": "beginRecord(${1:renderer}, ${0:filename});",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "beginRecord": true
        },
        "opts": {}
      },
      {
        "content": "saveBytes(${1:filename}, ${0:bytes});",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "saveBytes": true
        },
        "opts": {}
      },
      {
        "content": "createWriter(${0:filename});",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "createWriter": true
        },
        "opts": {}
      },
      {
        "content": "createReader(${0:filename});",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "createReader": true
        },
        "opts": {}
      },
      {
        "content": "pushMatrix();\n${0:};\npopMatrix();",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "pushMatrix": true
        },
        "opts": {}
      },
      {
        "content": "text(${1:data}, ${2:x}, ${3:y}${4:, }${0:z});",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "text data": true
        },
        "opts": {}
      },
      {
        "content": "text(${1:stringdata}, ${2:x}, ${3:y}, ${4:width}, ${5:height}${6:, }${0:z});",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "text stringdata": true
        },
        "opts": {}
      },
      {
        "content": "textSize(${0:size});",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "textSize": true
        },
        "opts": {}
      },
      {
        "content": "textLeading(${0:size});",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "textLeading": true
        },
        "opts": {}
      },
      {
        "content": "textWidth(${0:data});",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "textWidth": true
        },
        "opts": {}
      },
      {
        "content": "PFont ${1:font};\n$1 = loadFont(\"${0:FFScala-32.vlw}\");",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "font": true
        },
        "opts": {}
      },
      {
        "content": "${1:font} = loadFont(\"${0:FFScala-32.vlw}\");",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "loadFont": true
        },
        "opts": {}
      },
      {
        "content": "textFont(${1:font}${2:, }${0:size});",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "textFont": true
        },
        "opts": {}
      },
      {
        "content": "tan(${0:rad});",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "tan": true
        },
        "opts": {}
      },
      {
        "content": "atan(${0:rad});",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "atan": true
        },
        "opts": {}
      },
      {
        "content": "atan2(${0:rad});",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "atan2": true
        },
        "opts": {}
      },
      {
        "content": "sin(${0:rad});",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "sin": true
        },
        "opts": {}
      },
      {
        "content": "asin(${0:rad});",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "asin": true
        },
        "opts": {}
      },
      {
        "content": "cos(${0:rad});",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "cos": true
        },
        "opts": {}
      },
      {
        "content": "acos(${0:rad});",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "acos": true
        },
        "opts": {}
      },
      {
        "content": "degrees(${0:rad});",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "degrees": true
        },
        "opts": {}
      },
      {
        "content": "radians(${0:deg});",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "radians": true
        },
        "opts": {}
      },
      {
        "content": "randomSeed(${0:value});",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "randomSseed": true
        },
        "opts": {}
      },
      {
        "content": "random(${1:value1}${2:, }${0:value2});",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "random": true
        },
        "opts": {}
      },
      {
        "content": "pow(${1:num}, ${0:exponent});",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "pow": true
        },
        "opts": {}
      },
      {
        "content": "floor(${0:value});",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "floor": true
        },
        "opts": {}
      },
      {
        "content": "sqrt(${0:value});",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "sqrt": true
        },
        "opts": {}
      },
      {
        "content": "abs(${0:value});",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "abs": true
        },
        "opts": {}
      },
      {
        "content": "sq(${0:value});",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "sq": true
        },
        "opts": {}
      },
      {
        "content": "ceil(${0:value});",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ceil": true
        },
        "opts": {}
      },
      {
        "content": "exp(${0:value});",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "exp": true
        },
        "opts": {}
      },
      {
        "content": "round(${0:value}};",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "round": true
        },
        "opts": {}
      },
      {
        "content": "min(${1:value1}, ${2:value2}${3:, }${0:value3});",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "min": true
        },
        "opts": {}
      },
      {
        "content": "max(${1:value1}, ${2:value2}${3:, }${0:value3});",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "max": true
        },
        "opts": {}
      },
      {
        "content": "max(${0:array});",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "max array": true
        },
        "opts": {}
      },
      {
        "content": "min(${0:array});",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "min array": true
        },
        "opts": {}
      },
      {
        "content": "log(${0:value});",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "log": true
        },
        "opts": {}
      },
      {
        "content": "map(${1:value}, ${2:low1}, ${4:high1}, ${5:low2}, ${0:high2});",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "map": true
        },
        "opts": {}
      },
      {
        "content": "norm(${1:value}, ${2:low}, ${0:high});",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "norm": true
        },
        "opts": {}
      },
      {
        "content": "constrain(${1:value}, ${2:min}, ${0:max});",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "constrain": true
        },
        "opts": {}
      },
      {
        "content": "mag(${1:a}, ${2:b}${3:, }${0:c});",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "mag": true
        },
        "opts": {}
      },
      {
        "content": "dist(${1:x1}, ${2:y1}, ${4:x2}, ${0:y2});",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "dist": true
        },
        "opts": {}
      },
      {
        "content": "dist(${1:x1}, ${2:y1}, ${3:z1}, ${4:x2}, ${5:y2}, ${0:z2});",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "dist 3D": true
        },
        "opts": {}
      },
      {
        "content": "noise(${1:x}${2:, }${3:y}${4:, }${0:z});",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "noise": true
        },
        "opts": {}
      },
      {
        "content": "noiseDetail(${1:octaves}${2:, }${0:falloff});",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "noiseDetail": true
        },
        "opts": {}
      },
      {
        "content": "noiseSeed(${0:x});",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "noiseSeed": true
        },
        "opts": {}
      },
      {
        "content": "shininess(${0:shine});",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "shininess": true
        },
        "opts": {}
      },
      {
        "content": "specular(${1:value1}, ${2:value2}, ${3:value3}${4:, }${0:alpha});",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "specular": true
        },
        "opts": {}
      },
      {
        "content": "ambient(${1:value1}, ${2:value2}, ${0:value3});",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ambient": true
        },
        "opts": {}
      },
      {
        "content": "emissive(${1:value1}, ${2:value2}, ${0:value3});",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "emissive": true
        },
        "opts": {}
      },
      {
        "content": "directionalLight(${1:v1}, ${2:v2}, ${3:v3}, ${4:nx}, ${5:ny}, ${0:nz});",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "diretionalLight": true
        },
        "opts": {}
      },
      {
        "content": "pointLight(${1:v1}, ${2:v2}, ${3:v3}, ${4:nx}, ${5:ny}, ${0:nz});",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "pointLight": true
        },
        "opts": {}
      },
      {
        "content": "lightFalloff(${1:constant}, ${2:linear}, ${0:quadratic});",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "lightFalloff": true
        },
        "opts": {}
      },
      {
        "content": "normal(${1:nx}, ${2:ny}, ${0:nz});",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "normal": true
        },
        "opts": {}
      },
      {
        "content": "lightSpecular(${1:v1}, ${2:v2}, ${0:v3});",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "lightSpecular": true
        },
        "opts": {}
      },
      {
        "content": "ambientLight(${1:v1}, ${2:v2}, ${3:v3}${7:, ${4:x}, ${5:y}, ${0:z}});",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ambientLight": true
        },
        "opts": {}
      },
      {
        "content": "spotLight(${1:v1}, ${2:v2}, ${3:v3}, ${4:x}, ${5:y}, ${6:z}, ${7:nx}, ${8:ny}, ${9:nz}, ${10:angle}, ${0:concentration});",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "spotLight": true
        },
        "opts": {}
      },
      {
        "content": "camera(${1:eyeX}, ${2:eyeY}, ${3:eyeZ}, ${4:centerX}, ${5:centerY}, ${6:centerZ}, ${7:upX}, ${8:upY}, ${0:upZ});",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "camera": true
        },
        "opts": {}
      },
      {
        "content": "ortho(${1:left}, ${2:right}, ${3:bottom}, ${4:top}, ${5:near}, ${0:far});",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ortho": true
        },
        "opts": {}
      },
      {
        "content": "perspective(${1:fov}, ${2:aspect}, ${3:zNear}, ${0:zFar});",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "perspective": true
        },
        "opts": {}
      },
      {
        "content": "frustrum(${1:left}, ${2:right}, ${3:bottom}, ${4:top}, ${5:near}, ${0:far});",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "frustrum": true
        },
        "opts": {}
      },
      {
        "content": "rotate${1:X}(${0:angle});",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "rotate": true
        },
        "opts": {}
      },
      {
        "content": "translate(${1:x}, ${2:y}${3:, }${0:z});",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "translate": true
        },
        "opts": {}
      },
      {
        "content": "scale(${0:size});",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "scale size": true
        },
        "opts": {}
      },
      {
        "content": "scale(${1:x}, ${2:y}${3:, }${0:z});",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "scale": true
        },
        "opts": {}
      },
      {
        "content": "${1:model/screen}${2:X}(${3:x}, ${4:y}, ${0:z});",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "coord": true
        },
        "opts": {}
      },
      {
        "content": "brightness(${0:color});",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "brightness": true
        },
        "opts": {}
      },
      {
        "content": "lerpColor(${1:c1}, ${2:c2}, ${0:amt});",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "lerpColor": true
        },
        "opts": {}
      },
      {
        "content": "saturation(${0:color});",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "saturation": true
        },
        "opts": {}
      },
      {
        "content": "hue(${0:color});",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "hue": true
        },
        "opts": {}
      },
      {
        "content": "alpha(${0:color});",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "alpha": true
        },
        "opts": {}
      },
      {
        "content": "tint(${1:value1}, ${2:value2}, ${3:value3}${4:, }${0:alpha});",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "tint": true
        },
        "opts": {}
      },
      {
        "content": "set(${1:x}, ${2:y}, ${0:color/image});",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "set pixel": true
        },
        "opts": {}
      },
      {
        "content": "pixels[${0:index}]",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "pixels": true
        },
        "opts": {}
      },
      {
        "content": "get(${1:x}, ${2:y}${3:, }${4:width}${5:, }${0:height});",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "get pixel": true
        },
        "opts": {}
      },
      {
        "content": "triangle(${1:x1}, ${2:y1}, ${3:x2}, ${4:y2}, ${5:x3}, ${0:y3});",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "triangle": true
        },
        "opts": {}
      },
      {
        "content": "line(${1:x1}, ${2:y1}, ${3:x2}, ${0:y2});",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "line": true
        },
        "opts": {}
      },
      {
        "content": "line(${1:x1}, ${2:y1}, ${3:z1}, ${4:x2}, ${5:y2}, ${0:z2});",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "line 3D": true
        },
        "opts": {}
      },
      {
        "content": "arc(${1:x}, ${2:y}, ${3:width}, ${4:height}, ${5:start}, ${0:stop});",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "arc": true
        },
        "opts": {}
      },
      {
        "content": "point(${1:x}, ${2:y}${3:, }${0:z});",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "point": true
        },
        "opts": {}
      },
      {
        "content": "quad(${1:x1}, ${2:y1}, ${3:x2}, ${4:y2}, ${5:x3}, ${6:y3}, ${7:x4}, ${0:y4});",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "quad": true
        },
        "opts": {}
      },
      {
        "content": "ellipse(${1:x}, ${2:y}, ${3:width}, ${0:height});",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ellipse": true
        },
        "opts": {}
      },
      {
        "content": "rect(${1:x}, ${2:y}, ${3:width}, ${0:height});",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "rect": true
        },
        "opts": {}
      },
      {
        "content": "box(${1:width}, ${2:height}, ${0:depth});",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "box": true
        },
        "opts": {}
      },
      {
        "content": "sphere(${0:radius});",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "sphere": true
        },
        "opts": {}
      },
      {
        "content": "sphereDetail(${0:n});",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "sphereDetails": true
        },
        "opts": {}
      },
      {
        "content": "split(\"${1:str}\"${2: , }${0:delimiter});",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "split": true
        },
        "opts": {}
      },
      {
        "content": "splitTokens(${1:str}${2:, }${0:tokens});",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "splitTokens": true
        },
        "opts": {}
      },
      {
        "content": "join(${1:strgArray}${2: , }${0:seperator});",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "join": true
        },
        "opts": {}
      },
      {
        "content": "shorten(${0:array});",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "shorten": true
        },
        "opts": {}
      },
      {
        "content": "concat(${1:array1}, ${0:array2});",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "concat": true
        },
        "opts": {}
      },
      {
        "content": "subset(${1:array}, ${0:offset});",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "subset": true
        },
        "opts": {}
      },
      {
        "content": "append(${1:array}, ${0:element});",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "append": true
        },
        "opts": {}
      },
      {
        "content": "reverse(${0:array});",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "reverse": true
        },
        "opts": {}
      },
      {
        "content": "splice(${1:array}, ${2:value/array2}, ${0:index});",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "splice": true
        },
        "opts": {}
      },
      {
        "content": "sort(${1:dataArray}${2:, }${0:count});",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "sort": true
        },
        "opts": {}
      },
      {
        "content": "expand(${1:array}${2:, }${0:newSize});",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "expand": true
        },
        "opts": {}
      },
      {
        "content": "arrayCopy(${1:src}, ${2:dest}, ${3:, }${0:length});",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "arrayCopy": true
        },
        "opts": {}
      },
      {
        "content": "str(\"${0:str}\");",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "str": true
        },
        "opts": {}
      },
      {
        "content": "match(${1:str}, ${0:regexp});",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "match": true
        },
        "opts": {}
      },
      {
        "content": "trim(${0:str});",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "trim": true
        },
        "opts": {}
      },
      {
        "content": "nf(${2:value}, ${3:left}${4:, }${0:right});",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "nf": true
        },
        "opts": {}
      },
      {
        "content": "nfs(${2:value}, ${3:left}${4:, }${0:right});",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "nfs": true
        },
        "opts": {}
      },
      {
        "content": "nfp(${2:value}, ${3:left}${4:, }${0:right});",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "nfp": true
        },
        "opts": {}
      },
      {
        "content": "nfc(${1:value}${2:, }${0:right});",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "nfc": true
        },
        "opts": {}
      },
      {
        "content": "unbinary(\"${0:str}\"});",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "unbinary": true
        },
        "opts": {}
      },
      {
        "content": "hex(${0:c});",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "hexadecimal": true
        },
        "opts": {}
      },
      {
        "content": "unhex(${0:c});",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "unhex": true
        },
        "opts": {}
      },
      {
        "content": "binary(${1:value}${2:, }${0:digits});",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "binary": true
        },
        "opts": {}
      },
      {
        "content": "loadImage(${0:filename});",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "loadImage": true
        },
        "opts": {}
      },
      {
        "content": "image(${1:img}, ${2:x}, ${3:y}${4:, }${5:width}${6:, }${0:height});",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "image": true
        },
        "opts": {}
      },
      {
        "content": "copy(${1:srcImg}${2:, }${3:x}, ${4:y}, ${5:width}, ${6:height}, ${7:dx}, ${8:dy}, ${9:dwidth}, ${0:dheight});",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "copy": true
        },
        "opts": {}
      },
      {
        "content": "background(${1:value1}, ${2:value2}, ${3:value3}${4:, }${0:alpha});",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "bg": true
        },
        "opts": {}
      },
      {
        "content": "PGraphics pg;\npg = createGraphics(${1:width}, ${2:height}${3:, }${0:applet});",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "pg": true
        },
        "opts": {}
      },
      {
        "content": "PImage(${1:width}, ${0:height});",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "pimage": true
        },
        "opts": {}
      },
      {
        "content": "fill(${1:value1}, ${2:value2}, ${3:value3}${4:, }${0:alpha});",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "fill": true
        },
        "opts": {}
      },
      {
        "content": "red(${0:color});",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "red": true
        },
        "opts": {}
      },
      {
        "content": "green(${0:color});",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "green": true
        },
        "opts": {}
      },
      {
        "content": "blue(${0:color});",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "blue": true
        },
        "opts": {}
      },
      {
        "content": "status(${0:text});",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "status": true
        },
        "opts": {}
      },
      {
        "content": "param(${0:s});",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "param": true
        },
        "opts": {}
      },
      {
        "content": "link(${1:url}${2:, }${0:target});",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "link": true
        },
        "opts": {}
      },
      {
        "content": "@${1:param/return/private/public}  ${1:parameter}  ${0:description}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "@": true
        },
        "opts": {}
      }
    ],
    "progress": [
      {
        "content": "DEFINE BUFFER b_${1:TableName} FOR $1 ${0}.",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "defbuf": true
        },
        "opts": {}
      },
      {
        "content": "DEFINE VARIABLE ${1:VariableName} AS ${0}.",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "defvar": true
        },
        "opts": {}
      },
      {
        "content": "NO-LOCK",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "nl": true
        },
        "opts": {}
      },
      {
        "content": "NO-ERROR",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ne": true
        },
        "opts": {}
      },
      {
        "content": "NO-LOCK NO-ERROR",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "nle": true
        },
        "opts": {}
      },
      {
        "content": "INITIAL ${0:?}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ini": true
        },
        "opts": {}
      },
      {
        "content": "NO-UNDO",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "nu": true
        },
        "opts": {}
      },
      {
        "content": "ERROR",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "err": true
        },
        "opts": {}
      },
      {
        "content": "FIND FIRST ${1:BufferName}\n${2:WHERE $1.${3}} ${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ff": true
        },
        "opts": {}
      },
      {
        "content": "DEFINE INPUT PARAMETER ${1:ParamName} AS ${0}.",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "input": true
        },
        "opts": {}
      },
      {
        "content": "DEFINE OUTPUT PARAMETER ${1:ParamName} AS ${0:ParamType}.",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "output": true
        },
        "opts": {}
      },
      {
        "content": "/******************************************************************************/\nPROCEDURE ${1:ProcName}:\n\t${0}\nEND PROCEDURE. /* $1 */\n/******************************************************************************/",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "proc": true
        },
        "opts": {}
      },
      {
        "content": "MESSAGE \"${1:MessageContent}\" ${2:Data} VIEW-AS ALERT-BOX.",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "alert": true
        },
        "opts": {}
      },
      {
        "content": "IF ${1:Condition}\nTHEN ${2:Action}\n${3:ELSE ${4:OtherWise}}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "if": true
        },
        "opts": {}
      },
      {
        "content": "DO${1: Clauses}:\n\t${0}\nEND.",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "do": true
        },
        "opts": {}
      },
      {
        "content": "INTEGER",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "int": true
        },
        "opts": {}
      },
      {
        "content": "CHARACTER",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "char": true
        },
        "opts": {}
      },
      {
        "content": "LOGICAL",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "log": true
        },
        "opts": {}
      },
      {
        "content": "DECIMAL",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "dec": true
        },
        "opts": {}
      },
      {
        "content": "/* ------------------------------------------------------------------------- */",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "sep": true
        },
        "opts": {}
      }
    ],
    "prolog": [
      {
        "content": ":- initialization main.\nmain :-\n  current_prolog_flag(argv, Args),\n  writeln(Args),\n  halt.",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "main": true
        },
        "opts": {
          "head": true
        }
      },
      {
        "content": ":- module(${1:name}, [${0:export}]).",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "module": true
        },
        "opts": {
          "head": true
        }
      },
      {
        "content": ":- begin_tests(${1:name}).\n  ${0}\n:- end_tests($1).",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "begintest": true
        },
        "opts": {
          "head": true
        }
      },
      {
        "content": ":- run_tests.\n:- halt.",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "runtest": true
        },
        "opts": {
          "head": true
        }
      },
      {
        "content": "test(${1:case}, [true(${2:var} = ${3:value})]) :-\n  ${0:goal}.",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "test": true
        },
        "opts": {
          "head": true
        }
      }
    ],
    "prop-types": [
      {
        "content": "import PropTypes from 'prop-types'\n",
        "doc": null,
        "grammar": "lsp",
        "label": "prop-types-import",
        "matches": {
          "impt": true,
          "prop-types import": true
        },
        "opts": {}
      },
      {
        "content": "PropTypes.array,",
        "doc": "Array prop type",
        "grammar": "lsp",
        "label": "prop-type-array",
        "matches": {
          "prop-types array": true,
          "pta": true
        },
        "opts": {}
      },
      {
        "content": "PropTypes.array.isRequired,",
        "doc": "Array prop type required",
        "grammar": "lsp",
        "label": "prop-type-array-required",
        "matches": {
          "prop-types array required": true,
          "ptar": true
        },
        "opts": {}
      },
      {
        "content": "PropTypes.bool,",
        "doc": "Bool prop type",
        "grammar": "lsp",
        "label": "prop-type-bool",
        "matches": {
          "prop-types bool": true,
          "ptb": true
        },
        "opts": {}
      },
      {
        "content": "PropTypes.bool.isRequired,",
        "doc": "Bool prop type required",
        "grammar": "lsp",
        "label": "prop-type-bool-required",
        "matches": {
          "prop-types bool required": true,
          "ptbr": true
        },
        "opts": {}
      },
      {
        "content": "PropTypes.func,",
        "doc": "Func prop type",
        "grammar": "lsp",
        "label": "prop-type-func",
        "matches": {
          "prop-types func": true,
          "ptf": true
        },
        "opts": {}
      },
      {
        "content": "PropTypes.func.isRequired,",
        "doc": "Func prop type required",
        "grammar": "lsp",
        "label": "prop-type-func-required",
        "matches": {
          "prop-types func required": true,
          "ptfr": true
        },
        "opts": {}
      },
      {
        "content": "PropTypes.number,",
        "doc": "Number prop type",
        "grammar": "lsp",
        "label": "prop-type-number",
        "matches": {
          "prop-types number": true,
          "ptn": true
        },
        "opts": {}
      },
      {
        "content": "PropTypes.number.isRequired,",
        "doc": "Number prop type required",
        "grammar": "lsp",
        "label": "prop-type-number-required",
        "matches": {
          "prop-types number required": true,
          "ptnr": true
        },
        "opts": {}
      },
      {
        "content": "PropTypes.object,",
        "doc": "Object prop type",
        "grammar": "lsp",
        "label": "prop-type-object",
        "matches": {
          "prop-types object": true,
          "pto": true
        },
        "opts": {}
      },
      {
        "content": "PropTypes.object.isRequired,",
        "doc": "Object prop type required",
        "grammar": "lsp",
        "label": "prop-type-object-required",
        "matches": {
          "prop-types object required": true,
          "ptor": true
        },
        "opts": {}
      },
      {
        "content": "PropTypes.string,",
        "doc": "String prop type",
        "grammar": "lsp",
        "label": "prop-type-string",
        "matches": {
          "prop-types string": true,
          "pts": true
        },
        "opts": {}
      },
      {
        "content": "PropTypes.string.isRequired,",
        "doc": "String prop type required",
        "grammar": "lsp",
        "label": "prop-type-string-required",
        "matches": {
          "prop-types string required": true,
          "ptsr": true
        },
        "opts": {}
      },
      {
        "content": "PropTypes.node,",
        "doc": "Anything that can be rendered: numbers, strings, elements or an array",
        "grammar": "lsp",
        "label": "prop-type-node",
        "matches": {
          "prop-types node": true,
          "ptnd": true
        },
        "opts": {}
      },
      {
        "content": "PropTypes.node.isRequired,",
        "doc": "Anything that can be rendered: numbers, strings, elements or an array required",
        "grammar": "lsp",
        "label": "prop-type-node-required",
        "matches": {
          "prop-types node required": true,
          "ptndr": true
        },
        "opts": {}
      },
      {
        "content": "PropTypes.element,",
        "doc": "React element prop type",
        "grammar": "lsp",
        "label": "prop-type-element",
        "matches": {
          "prop-types element": true,
          "ptel": true
        },
        "opts": {}
      },
      {
        "content": "PropTypes.element.isRequired,",
        "doc": "React element prop type required",
        "grammar": "lsp",
        "label": "prop-type-element-required",
        "matches": {
          "prop-types element required": true,
          "ptelr": true
        },
        "opts": {}
      },
      {
        "content": "PropTypes.instanceOf($0),",
        "doc": "Is an instance of a class prop type",
        "grammar": "lsp",
        "label": "prop-type-instance-of",
        "matches": {
          "prop-types instanceof": true,
          "pti": true
        },
        "opts": {}
      },
      {
        "content": "PropTypes.instanceOf($0).isRequired,",
        "doc": "Is an instance of a class prop type required",
        "grammar": "lsp",
        "label": "prop-type-instance-of-required",
        "matches": {
          "prop-types instanceof required": true,
          "ptir": true
        },
        "opts": {}
      },
      {
        "content": "PropTypes.oneOf(['$0']),",
        "doc": "Prop type limited to specific values by treating it as an enum",
        "grammar": "lsp",
        "label": "prop-type-enum",
        "matches": {
          "prop-types enum": true,
          "pte": true
        },
        "opts": {}
      },
      {
        "content": "PropTypes.oneOf(['$0']).isRequired,",
        "doc": "Prop type limited to specific values by treating it as an enum required",
        "grammar": "lsp",
        "label": "prop-type-enum-required",
        "matches": {
          "prop-types enum required": true,
          "pter": true
        },
        "opts": {}
      },
      {
        "content": "PropTypes.oneOfType([\n\t$0\n]),",
        "doc": "An object that could be one of many types",
        "grammar": "lsp",
        "label": "prop-type-one-of-type",
        "matches": {
          "prop-types oneoftype": true,
          "ptet": true
        },
        "opts": {}
      },
      {
        "content": "PropTypes.oneOfType([\n\t$0\n]).isRequired,",
        "doc": "An object that could be one of many types required",
        "grammar": "lsp",
        "label": "prop-type-one-of-type-required",
        "matches": {
          "prop-types oneoftype required": true,
          "ptetr": true
        },
        "opts": {}
      },
      {
        "content": "PropTypes.arrayOf($0),",
        "doc": "An array of a certain type",
        "grammar": "lsp",
        "label": "prop-type-array-of",
        "matches": {
          "prop-types arrayof": true,
          "ptao": true
        },
        "opts": {}
      },
      {
        "content": "PropTypes.arrayOf($0).isRequired,",
        "doc": "An array of a certain type required",
        "grammar": "lsp",
        "label": "prop-type-array-of-required",
        "matches": {
          "prop-types arrayof required": true,
          "ptaor": true
        },
        "opts": {}
      },
      {
        "content": "PropTypes.objectOf($0),",
        "doc": "An object with property values of a certain type",
        "grammar": "lsp",
        "label": "prop-type-object-of",
        "matches": {
          "prop-types objectof": true,
          "ptoo": true
        },
        "opts": {}
      },
      {
        "content": "PropTypes.objectOf($0).isRequired,",
        "doc": "An object with property values of a certain type required",
        "grammar": "lsp",
        "label": "prop-type-object-of-required",
        "matches": {
          "prop-types objectof required": true,
          "ptoor": true
        },
        "opts": {}
      },
      {
        "content": "PropTypes.shape({\n\t$0\n}),",
        "doc": "An object taking on a particular shape",
        "grammar": "lsp",
        "label": "prop-type-shape",
        "matches": {
          "prop-types shape": true,
          "ptsh": true
        },
        "opts": {}
      },
      {
        "content": "PropTypes.shape({\n\t$0\n}).isRequired,",
        "doc": "An object taking on a particular shape required",
        "grammar": "lsp",
        "label": "prop-type-shape-required",
        "matches": {
          "prop-types shape required": true,
          "ptshr": true
        },
        "opts": {}
      },
      {
        "content": "static propTypes = {\n$0\n}\n",
        "doc": null,
        "grammar": "lsp",
        "label": "prop-type-static",
        "matches": {
          "prop-types static": true,
          "ptypes": true
        },
        "opts": {}
      },
      {
        "content": "PropTypes.any,",
        "doc": "Any prop type",
        "grammar": "lsp",
        "label": "prop-type-any",
        "matches": {
          "prop-types any": true,
          "ptany": true
        },
        "opts": {}
      }
    ],
    "proto": [],
    "ps1": [
      {
        "content": "class {\n\t[string] ${1:FirstName}\n}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "class": true
        },
        "opts": {}
      },
      {
        "content": "function ${1:name} {\n\t[CmdletBinding()]\n\tparam (\n\t\t[Parameter(Mandatory = $true)]\n\t\t[string] ${2:Param}\n\t)\n\tbegin {\n\t}\n\tprocess {\n\t}\n\tend {\n\t}\n}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "function": true
        },
        "opts": {}
      },
      {
        "content": "$Params = @{\n\t${1:Param1} = '${2:Value1}'\n\t${3:Param2} = '${4:Value2}'\n}\n${5:CommandName} @Params",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "splatting": true
        },
        "opts": {}
      },
      {
        "content": "enum ${1:name} {\n\t${2:item1}\n\t${3:item2}\n}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "enum": true
        },
        "opts": {}
      },
      {
        "content": "if (${1:condition}) {\n\t${2:statement}\n}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "if": true
        },
        "opts": {}
      },
      {
        "content": "if ( ${1:condition} ) {\n\t${2}\n}\nelse {\n\t${3}\n}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ife": true
        },
        "opts": {}
      },
      {
        "content": "while (${1:condition}) {\n\t${2:statement}\n}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "while": true
        },
        "opts": {}
      },
      {
        "content": "${1:command} | Where-Object -FilterScript { $PSItem.${2:property} -${3:operator} '${4:expression}' } | Sort-Object -Property ${5:sortproperty}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "filtersort": true
        },
        "opts": {}
      },
      {
        "content": "foreach ( $${1:iterator} in $${2:collection} ) {\n\t${3:statement}\n}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "foreach": true
        },
        "opts": {}
      },
      {
        "content": "Export-CSV -NoTypeInformation -Path ${1:path}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "epcsv": true
        },
        "opts": {}
      },
      {
        "content": "<#\n.SYNOPSIS\n\t${1:Short Description}\n.DESCRIPTION\n\t${2:Full Description}\n.PARAMETER ${3:Param1}\n\t${4: $3 usage}\n.EXAMPLE\n\t${5:Example}\n.NOTES\n\t${6:notes}\n.LINK\n\t${7:online help}\n#>",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "help": true
        },
        "opts": {}
      },
      {
        "content": "switch ( ${1:test} ){\n\t${2:condition1} { ${3:action} }\n\t${4:condition2} { ${5:action} }\n\tdefault { ${6:action} }",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "switch": true
        },
        "opts": {}
      }
    ],
    "puppet": [
      {
        "content": "case $${1:variable} {\n\tdefault: { ${0} }\n}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "case": true
        },
        "opts": {}
      },
      {
        "content": "if $${1:variable} {\n\t${2}\n} else {\n\t${0}\n}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ife": true
        },
        "opts": {}
      },
      {
        "content": "if $${1:variable} {\n\t${0}\n}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "if": true
        },
        "opts": {}
      },
      {
        "content": "if defined(${1:Resource}[\"${2:name}\"]) {\n\t${0}\n}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ifd": true
        },
        "opts": {}
      },
      {
        "content": "if !defined(${1:Resource}[\"${2:name}\"]) {\n\t${0}\n}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ifnd": true
        },
        "opts": {}
      },
      {
        "content": "else {\n\t${0}\n}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "el": true
        },
        "opts": {}
      },
      {
        "content": "? {\n\t\"${1}\"\t=> ${0}\n  }",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "?": true
        },
        "opts": {}
      },
      {
        "content": "[ ${1} ]",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "[": true
        },
        "opts": {}
      },
      {
        "content": "${1}\t=> ${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          ">": true
        },
        "opts": {}
      },
      {
        "content": "\"puppet://puppet/${1:module name}/${0:file name}\"",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "p:": true
        },
        "opts": {}
      },
      {
        "content": "alert(\"${1:message}\")",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "alert": true
        },
        "opts": {}
      },
      {
        "content": "crit(\"${1:message}\")",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "crit": true
        },
        "opts": {}
      },
      {
        "content": "debug(\"${1:message}\")",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "debug": true
        },
        "opts": {}
      },
      {
        "content": "defined(${1:Resource}[\"${2:name}\"])",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "defined": true
        },
        "opts": {}
      },
      {
        "content": "emerg(\"${1:message}\")",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "emerg": true
        },
        "opts": {}
      },
      {
        "content": "extlookup(\"${1:variable}\")",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "extlookup Simple extlookup": true
        },
        "opts": {}
      },
      {
        "content": "extlookup(\"${1:variable}\", \"${2:default}\")",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "extlookup Extlookup with defaults": true
        },
        "opts": {}
      },
      {
        "content": "extlookup(\"${1:variable}\", \"${2:default}\", \"${3:data source}\")",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "extlookup Extlookup with defaults and custom data file": true
        },
        "opts": {}
      },
      {
        "content": "fail(\"${1:message}\")",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "fail": true
        },
        "opts": {}
      },
      {
        "content": "info(\"${1:message}\")",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "info": true
        },
        "opts": {}
      },
      {
        "content": "inline_template(\"<%= ${1} %>\")",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "inline_template": true
        },
        "opts": {}
      },
      {
        "content": "notice(\"${1:message}\")",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "notice": true
        },
        "opts": {}
      },
      {
        "content": "realize(${1:Resource}[${2:name}])",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "realize": true
        },
        "opts": {}
      },
      {
        "content": "regsubst(${1:hay stack}, ${2:needle}, \"${3:replacement}\")",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "regsubst": true
        },
        "opts": {}
      },
      {
        "content": "include ${1:classname}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "inc": true
        },
        "opts": {}
      },
      {
        "content": "split(${1:hay stack}, \"${2:patten}\")",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "split": true
        },
        "opts": {}
      },
      {
        "content": "versioncmp(\"${1:version}\", \"${2:version}\")",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "versioncmp": true
        },
        "opts": {}
      },
      {
        "content": "warning(\"${1:message}\")",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "warning": true
        },
        "opts": {}
      },
      {
        "content": "cron { \"${1:name}\":\n\tcommand => \"${2}\",\n\tuser    => \"${3:root}\",\n\t${4}    => ${0},\n}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "cron": true
        },
        "opts": {}
      },
      {
        "content": "exec { \"${1:name}\":\n\tcommand => \"${2:$1}\",\n\tuser    => \"${3:root}\",\n\t${4}    => ${0},\n}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "exec": true
        },
        "opts": {}
      },
      {
        "content": "user { \"${1:user}\":\n\tensure      => present,\n\tcomment     => \"${2:$1}\",\n\tmanagehome  => true,\n\thome        => \"${0:/home/$1}\",\n}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "user": true
        },
        "opts": {}
      },
      {
        "content": "group { \"${1:group}\":\n\tensure => ${0:present},\n}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "group": true
        },
        "opts": {}
      },
      {
        "content": "host { \"${1:hostname}\":\n\tip => ${0:127.0.0.1},\n}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "host": true
        },
        "opts": {}
      },
      {
        "content": "mailalias { \"${1:localpart}\":\n\trecipient => \"${0:recipient}\",\n}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "mailalias": true
        },
        "opts": {}
      },
      {
        "content": "mount { \"${1:destination path}\":\n\tensure\t=> ${2:mounted},\n\tdevice\t=> \"${0:device name or path}\",\n}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "mount": true
        },
        "opts": {}
      },
      {
        "content": "notify { \"${1:message}\": }",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "notify": true
        },
        "opts": {}
      },
      {
        "content": "package { \"${1:package name}\":\n\tensure\t=> ${0:present},\n}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "package": true
        },
        "opts": {}
      },
      {
        "content": "yumrepo { \"${1:repo name}\":\n\tdescr   => \"${2:$1}\",\n\tenabled => ${0:1},\n}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "yumrepo": true
        },
        "opts": {}
      },
      {
        "content": "define ${1} (${2}) {\n\t${0}\n}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "define": true
        },
        "opts": {}
      },
      {
        "content": "service { \"${1:service}\":\n\tensure    => running,\n\tenable    => true,\n\trequire   => [ Package[\"${2:package}\"], File[\"${3:file}\"], ],\n\tsubscribe => [ File[\"${4:configfile1}\"], File[\"${5:configfile2}\"], Package[\"${6:package}\"], ],\n}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "service": true
        },
        "opts": {}
      },
      {
        "content": "file { \"${1:filename}\":\n\tensure  => ${2:present},\n\towner   => \"${3:root}\",\n\tgroup   => \"${4:root}\",\n\tmode    => \"${5:0644}\",\n\tsource  => \"puppet:///modules/${6:module}/${7:source}\",\n\tcontent => template(\"${8:module}/${9:template}\"),\n\talias   => \"${10:alias}\",\n\trequire => [ Package[\"${11:package}\"], File[\"${12:file}\"], ],\n}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "file": true
        },
        "opts": {}
      },
      {
        "content": "archive { \"${1:filename}\":\n\tensure     => ${2:present},\n\turl        => \"http://${3:url}\",\n\textension  => \"${4:tgz}\",\n\ttarget     => \"${5:target}\",\n\tchecksum   => ${6:false},\n\tsrc_target => \"${7:/tmp}\",\n}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "archive": true
        },
        "opts": {}
      },
      {
        "content": "firewall { \"${1:comment}\":\n\tproto\t=> ${2:tcp},\n\taction\t=> ${3:accept},\n\tport\t=> ${4},\n}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "firewall": true
        },
        "opts": {}
      }
    ],
    "purescript": [
      {
        "content": "import ${0:Data.List}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "imp": true
        },
        "opts": {}
      },
      {
        "content": "import ${1:Data.List} as ${0:List}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "impq": true
        },
        "opts": {}
      },
      {
        "content": "${1:name} :: ${2:a}\n$1 = ${0:undefined}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "fn0": true
        },
        "opts": {}
      },
      {
        "content": "${1:fn} :: ${2:a} -> ${3:a}\n$1 ${4}= ${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "fn": true
        },
        "opts": {}
      },
      {
        "content": "${1:fn} :: ${2:a} -> ${3:a}\n$1 ${4}= ${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "fn1": true
        },
        "opts": {}
      },
      {
        "content": "${1:fn} :: ${2:a} -> ${3:a} -> ${4:a}\n$1 ${5}= ${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "fn2": true
        },
        "opts": {}
      },
      {
        "content": "${1:fn} :: ${2:a} -> ${3:a} -> ${4:a} -> ${5:a}\n$1 ${6}= ${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "fn3": true
        },
        "opts": {}
      },
      {
        "content": "case ${1} of\n\t${2} -> ${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "case": true
        },
        "opts": {}
      },
      {
        "content": "let\n\t${1} = ${2}\nin\n\t${3}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "let": true
        },
        "opts": {}
      },
      {
        "content": "where\n\t${1} = ${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "where": true
        },
        "opts": {}
      },
      {
        "content": "module Test.Main where\nimport Prelude\nimport Test.Unit (suite, test)\nimport Test.Unit.Main (runTest)\nimport Test.Unit.Assert as Assert\nmain = runTest do\n\tsuite \"${1}\" do\n\t\ttest \"${2:the tests run}\" do\n\t\t\tAssert.equal\n\t\t\t\t\"Hello, world!\"\n\t\t\t\t\"Hello, sailor!\"",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "testunit": true
        },
        "opts": {}
      },
      {
        "content": "if ${1} then\n\t${2:${VISUAL}}\nelse\n\t${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "if": true
        },
        "opts": {}
      },
      {
        "content": "{-| ${0}\n-}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "doc": true
        },
        "opts": {}
      },
      {
        "content": "type ${1:Type} =\n\t${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ty": true
        },
        "opts": {}
      },
      {
        "content": "data ${1:Type} =\n\t${0:$1}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "da": true
        },
        "opts": {}
      },
      {
        "content": "newtype ${1:Type} =\n\t${2:$1} ${0:Int}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "nty": true
        },
        "opts": {}
      },
      {
        "content": "foreign import ${1} :: ${2}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "fi": true
        },
        "opts": {}
      }
    ],
    "python": [
      {
        "content": "#!/usr/bin/env python3\n${0}",
        "doc": "",
        "grammar": "snu",
        "label": "#!/usr/bin/env python3",
        "matches": {
          "#!": true,
          "shebang": true
        },
        "opts": {
          "head": true
        }
      },
      {
        "content": "class ${1:#:name}(${2:object}):\n\tdef __init__(self, ${3}):\n\t\t${0:pass}",
        "doc": "",
        "grammar": "snu",
        "label": "class Class(...): ...",
        "matches": {
          "class": true
        },
        "opts": {
          "head": true
        }
      },
      {
        "content": "class ${1:#:name}(${2:object}):\n\t\"\"\"${3:#:class documentation}\"\"\"\n\tdef __init__(self, ${4}):\n\t\t\"\"\"${5:#:__init__ documentation}\"\"\"\n\t\t${0:pass}",
        "doc": "",
        "grammar": "snu",
        "label": "class Class(...): \"...\"",
        "matches": {
          "classd": true
        },
        "opts": {
          "head": true
        }
      },
      {
        "content": "def ${1:#:name}(${2}):\n\t${0:pass}",
        "doc": "",
        "grammar": "snu",
        "label": "def function(...): ...",
        "matches": {
          "def": true
        },
        "opts": {
          "head": true
        }
      },
      {
        "content": "def ${1:#:name}(${2}):\n\t\"\"\"${3:#:function documentation}\"\"\"\n\t${0:pass}",
        "doc": "",
        "grammar": "snu",
        "label": "def function(...): \"\"\"...\"\"\"",
        "matches": {
          "defd": true
        },
        "opts": {
          "head": true
        }
      },
      {
        "content": "def ${1:#:name}(self, ${2}):\n\t${0:pass}",
        "doc": "",
        "grammar": "snu",
        "label": "def method(self, ...): ...",
        "matches": {
          "defm": true
        },
        "opts": {
          "head": true
        }
      },
      {
        "content": "def ${1:#:name}(self, ${2}):\n\t\"\"\"${3:#:method documentation}\"\"\"\n\t${0:pass}",
        "doc": "",
        "grammar": "snu",
        "label": "def method(self, ...): \"...\"",
        "matches": {
          "defmd": true
        },
        "opts": {
          "head": true
        }
      },
      {
        "content": "elif ${1:#:condition}:\n\t${0:pass}",
        "doc": "",
        "grammar": "snu",
        "label": "elif ...: ...",
        "matches": {
          "elif": true
        },
        "opts": {
          "head": true
        }
      },
      {
        "content": "else:\n\t${0:pass}",
        "doc": "",
        "grammar": "snu",
        "label": "else: ...",
        "matches": {
          "else": true
        },
        "opts": {
          "head": true
        }
      },
      {
        "content": "with open(${1:#:file}, '${2:r}') as ${3:f}:\n\t${0:pass}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "fileidiom": true,
          "with_open": true
        },
        "opts": {
          "head": true
        }
      },
      {
        "content": "for ${1:#:value} in ${2:#:list}:\n\t${0:pass}",
        "doc": "",
        "grammar": "snu",
        "label": "for ... in ...: ...",
        "matches": {
          "for": true
        },
        "opts": {
          "head": true
        }
      },
      {
        "content": "if ${1:#:condition}:\n\t${0:pass}",
        "doc": "",
        "grammar": "snu",
        "label": "if ...: ...",
        "matches": {
          "if": true
        },
        "opts": {
          "head": true
        }
      },
      {
        "content": "if __name__ == '__main__':\n\t${0:pass}",
        "doc": "",
        "grammar": "snu",
        "label": "if __name__ == '__main__': ...",
        "matches": {
          "ifmain": true,
          "main": true
        },
        "opts": {
          "head": true
        }
      },
      {
        "content": "try:\n\t${1:pass}\nexcept ${2:#:ExceptionClass}:\n\t${3:pass}",
        "doc": "",
        "grammar": "snu",
        "label": "try: ... except ...: ...",
        "matches": {
          "tryexcept": true
        },
        "opts": {
          "head": true
        }
      },
      {
        "content": "try:\n\t${1:pass}\nfinally:\n\t${2:pass}",
        "doc": "",
        "grammar": "snu",
        "label": "try: ... finally: ...",
        "matches": {
          "tryfinally": true
        },
        "opts": {
          "head": true
        }
      },
      {
        "content": "while ${1:#:condition}:\n\t${0:pass}",
        "doc": "",
        "grammar": "snu",
        "label": "while ...: ...",
        "matches": {
          "while": true
        },
        "opts": {
          "head": true
        }
      },
      {
        "content": "with ${1:open}(${2:#:filename, mode}) as ${3:f}:\n\t${0:pass}",
        "doc": "",
        "grammar": "snu",
        "label": "with {func}({file}) as :",
        "matches": {
          "with": true
        },
        "opts": {
          "head": true
        }
      },
      {
        "content": "[$1 for ${1:x} in ${2:#:list} if ${3:#:condition}]",
        "doc": "",
        "grammar": "snu",
        "label": "[x for x in {list} if {condition}]",
        "matches": {
          "filter": true
        },
        "opts": {}
      },
      {
        "content": "print(${0:#:TARGET})",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "print": true
        },
        "opts": {
          "word": true
        }
      },
      {
        "content": "# -*- coding: utf-8 -*-",
        "doc": "",
        "grammar": "snu",
        "label": "# -*- coding ...",
        "matches": {
          "coding": true
        },
        "opts": {}
      },
      {
        "content": "getattr(${1:#:obj}, ${2:#:attr})",
        "doc": "",
        "grammar": "snu",
        "label": "getattr(..., ...)",
        "matches": {
          "getattr": true
        },
        "opts": {
          "word": true
        }
      },
      {
        "content": "setattr(${1:#:obj}, ${2:#:attr}, ${3:#:value})",
        "doc": "",
        "grammar": "snu",
        "label": "setattr(..., ...)",
        "matches": {
          "setattr": true
        },
        "opts": {}
      },
      {
        "content": "hasattr(${1:#:obj}, ${2:#:attr})",
        "doc": "",
        "grammar": "snu",
        "label": "hasattr(..., ...)",
        "matches": {
          "hasattr": true
        },
        "opts": {
          "word": true
        }
      },
      {
        "content": "import pdb; pdb.set_trace()",
        "doc": "",
        "grammar": "snu",
        "label": "import pdb..",
        "matches": {
          "pdb": true
        },
        "opts": {}
      },
      {
        "content": "import ipdb; ipdb.set_trace()",
        "doc": "",
        "grammar": "snu",
        "label": "import ipdb..",
        "matches": {
          "ipdb": true
        },
        "opts": {}
      },
      {
        "content": "import pudb; pudb.set_trace()",
        "doc": "",
        "grammar": "snu",
        "label": "import pudb..",
        "matches": {
          "pudb": true
        },
        "opts": {}
      },
      {
        "content": "from PyQt5.QtCore import pyqtRemoveInputHook\npyqtRemoveInputHook()\nimport pdb; pdb.set_trace()",
        "doc": "",
        "grammar": "snu",
        "label": "removeInputHook...pdb",
        "matches": {
          "qtpdb": true
        },
        "opts": {}
      },
      {
        "content": "from IPython import embed; embed()",
        "doc": "",
        "grammar": "snu",
        "label": "import ipython..",
        "matches": {
          "ipy": true
        },
        "opts": {}
      },
      {
        "content": "#!/usr/bin/env python3",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "#!": true
        },
        "opts": {}
      },
      {
        "content": "#!/usr/bin/env python2\n# -*- coding: utf-8 -*-",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "#!2": true
        },
        "opts": {}
      },
      {
        "content": "#!/usr/bin/env python3",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "#!3": true
        },
        "opts": {}
      },
      {
        "content": "import ${0:module}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "imp": true
        },
        "opts": {}
      },
      {
        "content": "def __unicode__(self):\n\t${0:representation}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "uni": true
        },
        "opts": {}
      },
      {
        "content": "from ${1:package} import ${0:module}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "from": true
        },
        "opts": {}
      },
      {
        "content": "@unittest.skip(${1:skip_reason})",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "sk \"skip unittests\" b": true
        },
        "opts": {}
      },
      {
        "content": "while ${1:condition}:\n\t${0:${VISUAL}}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "wh": true
        },
        "opts": {}
      },
      {
        "content": "while True:\n\t${1}\n\tif ${0:condition}:\n\t\tbreak",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "dowh": true
        },
        "opts": {}
      },
      {
        "content": "with ${1:expr} as ${2:var}:\n\t${0:${VISUAL}}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "with": true
        },
        "opts": {}
      },
      {
        "content": "async with ${1:expr} as ${2:var}:\n\t${0:${VISUAL}}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "awith": true
        },
        "opts": {}
      },
      {
        "content": "class ${1:ClassName}(${2:object}):\n\t\"\"\"${3:docstring for $1}\"\"\"\n\tdef __init__(self, ${4:arg}):\n\t\t${5:super($1, self).__init__()}\n\t\tself.$4 = $4\n\t\t${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "cl": true
        },
        "opts": {}
      },
      {
        "content": "class ${1:class_name}:\n\t\"\"\"${0:description}\"\"\"",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "cla": true
        },
        "opts": {}
      },
      {
        "content": "class ${1:class_name}:\n\t\"\"\"${2:description}\"\"\"\n\tdef __init__(self, ${3:args}):\n\t\t${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "clai": true
        },
        "opts": {}
      },
      {
        "content": "def __init__(self, ${1:args}):\n\t${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "defi": true
        },
        "opts": {}
      },
      {
        "content": "def ${1:mname}(self, ${2:arg}):\n\t${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "defm": true
        },
        "opts": {}
      },
      {
        "content": "async def ${1:mname}(self, ${2:arg}):\n\t${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "adefm": true
        },
        "opts": {}
      },
      {
        "content": "def ${1:foo}():\n\tdoc = \"${2:The $1 property.}\"\n\tdef fget(self):\n\t\t${3:return self._$1}\n\tdef fset(self, value):\n\t\t${4:self._$1 = value}\n\tdef fdel(self):\n\t\t${0:del self._$1}\n\treturn locals()\n$1 = property(**$1())",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "property": true
        },
        "opts": {}
      },
      {
        "content": "if ${1:condition}:\n\t${0:${VISUAL}}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "if": true
        },
        "opts": {}
      },
      {
        "content": "else:\n\t${0:${VISUAL}}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "el": true
        },
        "opts": {}
      },
      {
        "content": "elif ${1:condition}:\n\t${0:${VISUAL}}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ei": true
        },
        "opts": {}
      },
      {
        "content": "for ${1:item} in ${2:items}:\n\t${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "for": true
        },
        "opts": {}
      },
      {
        "content": "# -*- coding: utf-8 -*-",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "cutf8": true
        },
        "opts": {}
      },
      {
        "content": "# -*- coding: latin-1 -*-",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "clatin1": true
        },
        "opts": {}
      },
      {
        "content": "# -*- coding: ascii -*-",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "cascii": true
        },
        "opts": {}
      },
      {
        "content": "${1:var} = lambda ${2:vars} : ${0:action}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ld": true
        },
        "opts": {}
      },
      {
        "content": "return ${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ret": true
        },
        "opts": {}
      },
      {
        "content": "self.",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          ".": true
        },
        "opts": {}
      },
      {
        "content": "self.${1:attribute} = $1",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "sa self.attribute = attribute": true
        },
        "opts": {}
      },
      {
        "content": "try:\n\t${1:${VISUAL}}\nexcept ${2:Exception} as ${3:e}:\n\t${0:raise $3}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "try Try/Except": true
        },
        "opts": {}
      },
      {
        "content": "try:\n\t${1:${VISUAL}}\nexcept ${2:Exception} as ${3:e}:\n\t${4:raise $3}\nelse:\n\t${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "trye Try/Except/Else": true
        },
        "opts": {}
      },
      {
        "content": "try:\n\t${1:${VISUAL}}\nexcept ${2:Exception} as ${3:e}:\n\t${4:raise $3}\nfinally:\n\t${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "tryf Try/Except/Finally": true
        },
        "opts": {}
      },
      {
        "content": "try:\n\t${1:${VISUAL}}\nexcept ${2:Exception} as ${3:e}:\n\t${4:raise $3}\nelse:\n\t${5}\nfinally:\n\t${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "tryef Try/Except/Else/Finally": true
        },
        "opts": {}
      },
      {
        "content": "if __name__ == '__main__':\n\t${0:main()}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ifmain": true
        },
        "opts": {}
      },
      {
        "content": "__${1:init}__",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "_": true
        },
        "opts": {}
      },
      {
        "content": "__import__('pdb').set_trace()",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "pdb": true
        },
        "opts": {}
      },
      {
        "content": "__import__('bpdb').set_trace()",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "bpdb": true
        },
        "opts": {}
      },
      {
        "content": "__import__('ipdb').set_trace()",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ipdb": true
        },
        "opts": {}
      },
      {
        "content": "__import__('IPython').embed()",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "iem": true
        },
        "opts": {}
      },
      {
        "content": "__import__('rpdb').set_trace()",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "rpdb": true
        },
        "opts": {}
      },
      {
        "content": "__import__('wdb').set_trace()",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "wdb": true
        },
        "opts": {}
      },
      {
        "content": "__import__('ptpython.repl', fromlist=('repl')).embed(globals(), locals(), vi_mode=${1:False}, history_filename=${2:None})",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ptpython": true
        },
        "opts": {}
      },
      {
        "content": "__import__('pudb').set_trace()",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "pudb": true
        },
        "opts": {}
      },
      {
        "content": "from pudb.remote import set_trace\nset_trace()",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "pudbr": true
        },
        "opts": {}
      },
      {
        "content": "__import__('nose').tools.set_trace()",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "nosetrace": true
        },
        "opts": {}
      },
      {
        "content": "__import__('pprint').pprint(${1})",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "pprint": true
        },
        "opts": {}
      },
      {
        "content": "\"\"\"${0:doc}\n\"\"\"",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "\"": true
        },
        "opts": {}
      },
      {
        "content": "self.assertEqual(${0}, ${1})",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "a=": true
        },
        "opts": {}
      },
      {
        "content": "class ${1:ExampleCase}(unittest.TestCase):\n\tdef test_${2:description}(self):\n\t\t${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "testcase": true
        },
        "opts": {}
      },
      {
        "content": "# given: ${1}\n# when: ${2}\n# then: ${3}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "tgwt": true
        },
        "opts": {}
      },
      {
        "content": "from __future__ import ${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "fut": true
        },
        "opts": {}
      },
      {
        "content": "try:\n\t# Short option syntax: \"hv:\"\n\t# Long option syntax: \"help\" or \"verbose=\"\n\topts, args = getopt.getopt(sys.argv[1:], \"${1:short_options}\", [${2:long_options}])\nexcept getopt.GetoptError, err:\n\t# Print debug info\n\tprint str(err)\n\t${3:error_action}\nfor option, argument in opts:\n\tif option in (\"-h\", \"--help\"):\n\t\t${0}\n\telif option in (\"-v\", \"--verbose\"):\n\t\tverbose = argument",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "getopt": true
        },
        "opts": {}
      },
      {
        "content": "${0:sub_parser} = parser.add_subparsers().add_parser(\"${1:name}\")",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "addsp": true
        },
        "opts": {}
      },
      {
        "content": "parser.add_argument(\"${0:short_arg}\", \"${1:long_arg}\", default=${2:None}, help=\"${3:Help text}\")",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "addarg": true
        },
        "opts": {}
      },
      {
        "content": "parser.add_argument(\"${0:arg}\", nargs=\"${1:*}\", default=${2:None}, help=\"${3:Help text}\")",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "addnarg": true
        },
        "opts": {}
      },
      {
        "content": "parser.add_argument(\"${0:arg}\", \"${1:long_arg}\", action=\"${2:store_true}\", default=${3:False}, help=\"${4:Help text}\")",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "addaarg": true
        },
        "opts": {}
      },
      {
        "content": "import logging\nLOGGER = logging.getLogger(${0:__name__})",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "glog": true
        },
        "opts": {}
      },
      {
        "content": "LOGGER.error(${0:msg})",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "le": true
        },
        "opts": {}
      },
      {
        "content": "LOGGER.debug(${0:msg})",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "lg": true
        },
        "opts": {}
      },
      {
        "content": "LOGGER.warning(${0:msg})",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "lw": true
        },
        "opts": {}
      },
      {
        "content": "LOGGER.critical(${0:msg})",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "lc": true
        },
        "opts": {}
      },
      {
        "content": "LOGGER.info(${0:msg})",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "li": true
        },
        "opts": {}
      },
      {
        "content": "\"\"\"${1:Description}\n@param ${2:param}: ${3: Description}\n@type  $2: ${4: Type}\n@return: ${5: Description}\n@rtype : ${6: Type}\n@raise e: ${0: Description}\n\"\"\"",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "epydoc": true
        },
        "opts": {}
      },
      {
        "content": "def ${1:__init__}(self, *args, **kwargs):\n    super(${0:ClassName}, self).$1(*args, **kwargs)",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "dol": true
        },
        "opts": {}
      },
      {
        "content": "self.${1:var_name} = kwargs.get('$1', ${2:None})",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "kwg": true
        },
        "opts": {}
      },
      {
        "content": "${1:var_name} = kwargs.get('$1', ${2:None})",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "lkwg": true
        },
        "opts": {}
      },
      {
        "content": "*args${1:,}${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "args": true
        },
        "opts": {}
      },
      {
        "content": "**kwargs${1:,}${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "kwargs": true
        },
        "opts": {}
      },
      {
        "content": "*args, **kwargs${1:,}${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "akw": true
        },
        "opts": {}
      },
      {
        "content": "[${1} for ${2} in ${3:${VISUAL}}]${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "lcp list comprehension": true
        },
        "opts": {}
      },
      {
        "content": "{${1}: ${2} for ${3} in ${4:${VISUAL}}}${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "dcp dict comprehension": true
        },
        "opts": {}
      },
      {
        "content": "{${1} for ${2} in ${3:${VISUAL}}}${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "scp set comprehension": true
        },
        "opts": {}
      },
      {
        "content": "def __len__(self):\n\t${1:pass}\ndef __getitem__(self, key):\n\t${2:pass}\ndef __setitem__(self, key, value):\n\t${3:pass}\ndef __delitem__(self, key):\n\t${4:pass}\ndef __iter__(self):\n\t${5:pass}\ndef __reversed__(self):\n\t${6:pass}\ndef __contains__(self, item):\n\t${7:pass}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "contain \"methods for emulating a container type\" b": true
        },
        "opts": {}
      },
      {
        "content": "def __enter__(self):\n\t${1:pass}\ndef __exit__(self, exc_type, exc_value, traceback):\n\t${2:pass}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "context \"context manager methods\" b": true
        },
        "opts": {}
      },
      {
        "content": "def __getattr__(self, name):\n\t${1:pass}\ndef __setattr__(self, name, value):\n\t${2:pass}\ndef __delattr__(self, name):\n\t${3:pass}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "attr \"methods for customizing attribute access\" b": true
        },
        "opts": {}
      },
      {
        "content": "def __get__(self, instance, owner):\n\t${1:pass}\ndef __set__(self, instance, value):\n\t${2:pass}\ndef __delete__(self, instance):\n\t${3:pass}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "desc \"methods implementing descriptors\" b": true
        },
        "opts": {}
      },
      {
        "content": "def __eq__(self, other):\n\t${1:pass}\ndef __ne__(self, other):\n\t${2:pass}\ndef __lt__(self, other):\n\t${3:pass}\ndef __le__(self, other):\n\t${4:pass}\ndef __gt__(self, other):\n\t${5:pass}\ndef __ge__(self, other):\n\t${6:pass}\ndef __cmp__(self, other):\n\t${7:pass}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "cmp \"methods implementing rich comparison\"": true
        },
        "opts": {}
      },
      {
        "content": "def __repr__(self):\n\t${1:pass}\ndef __str__(self):\n\t${2:pass}\ndef __unicode__(self):\n\t${3:pass}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "repr \"methods implementing string representation\"": true
        },
        "opts": {}
      },
      {
        "content": "def __add__(self, other):\n\t${1:pass}\ndef __sub__(self, other):\n\t${2:pass}\ndef __mul__(self, other):\n\t${3:pass}\ndef __div__(self, other):\n\t${4:pass}\ndef __truediv__(self, other):\n\t${5:pass}\ndef __floordiv__(self, other):\n\t${6:pass}\ndef __mod__(self, other):\n\t${7:pass}\ndef __divmod__(self, other):\n\t${8:pass}\ndef __pow__(self, other):\n\t${9:pass}\ndef __lshift__(self, other):\n\t${10:pass}\ndef __rshift__(self, other):\n\t${11:pass}\ndef __and__(self, other):\n\t${12:pass}\ndef __xor__(self, other):\n\t${13:pass}\ndef __or__(self, other):\n\t${14:pass}\ndef __neg__(self):\n\t${15:pass}\ndef __pos__(self):\n\t${16:pass}\ndef __abs__(self):\n\t${17:pass}\ndef __invert__(self):\n\t${18:pass}\ndef __complex__(self):\n\t${19:pass}\ndef __int__(self):\n\t${20:pass}\ndef __long__(self):\n\t${21:pass}\ndef __float__(self):\n\t${22:pass}\ndef __oct__(self):\n\t${22:pass}\ndef __hex__(self):\n\t${23:pass}\ndef __index__(self):\n\t${24:pass}\ndef __coerce__(self, other):\n\t${25:pass}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "numeric \"methods for emulating a numeric type\" b": true
        },
        "opts": {}
      },
      {
        "content": "#!/usr/bin/env python\n$0",
        "doc": null,
        "grammar": "snu",
        "label": "#!/usr/bin/env python",
        "matches": {
          "#!": true
        },
        "opts": {
          "b": true
        }
      },
      {
        "content": "# -*- coding: utf-8 -*-\n$0",
        "doc": null,
        "grammar": "snu",
        "label": "# encoding: UTF-8",
        "matches": {
          "\"^# ?[uU][tT][fF]-?8": true
        },
        "opts": {
          "r": true
        }
      }
    ],
    "r": [
      {
        "content": "#!/usr/bin/env Rscript",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "#!": true
        },
        "opts": {}
      },
      {
        "content": "library(${0:package})",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "lib": true
        },
        "opts": {}
      },
      {
        "content": "require(${0:package})",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "req": true
        },
        "opts": {}
      },
      {
        "content": "source('${0:file}')",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "source": true
        },
        "opts": {}
      },
      {
        "content": "if (${1:condition}) {\n\t${0}\n}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "if": true
        },
        "opts": {}
      },
      {
        "content": "else {\n\t${0}\n}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "el": true
        },
        "opts": {}
      },
      {
        "content": "else if (${1:condition}) {\n\t${0}\n}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ei": true
        },
        "opts": {}
      },
      {
        "content": "while(${1}) {\n\t${2}\n}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "wh": true
        },
        "opts": {}
      },
      {
        "content": "for (${1:item} in ${2:list}) {\n\t${3}\n}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "for": true
        },
        "opts": {}
      },
      {
        "content": "foreach (${1:item} = ${2:list}) {\n\t${3}\n}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "foreach": true
        },
        "opts": {}
      },
      {
        "content": "${1:name} <- function (${2:variables}) {\n\t${0}\n}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "fun": true
        },
        "opts": {}
      },
      {
        "content": "return(${0})",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ret": true
        },
        "opts": {}
      },
      {
        "content": "${1:name}[${2:rows}, ${0:cols}]",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "df": true
        },
        "opts": {}
      },
      {
        "content": "c(${0:items})",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "c": true
        },
        "opts": {}
      },
      {
        "content": "list(${0:items})",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "li": true
        },
        "opts": {}
      },
      {
        "content": "matrix(${1:data}, nrow = ${2:rows}, ncol = ${0:cols})",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "mat": true
        },
        "opts": {}
      },
      {
        "content": "apply(${1:array}, ${2:margin}, ${0:function})",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "apply": true
        },
        "opts": {}
      },
      {
        "content": "lapply(${1:list}, ${0:function})",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "lapply": true
        },
        "opts": {}
      },
      {
        "content": "lapply(${1:list}, ${0:function})",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "sapply": true
        },
        "opts": {}
      },
      {
        "content": "vapply(${1:list}, ${2:function}, ${0:type})",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "vapply": true
        },
        "opts": {}
      },
      {
        "content": "mapply(${1:function}, ${0:...})",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "mapply": true
        },
        "opts": {}
      },
      {
        "content": "tapply(${1:vector}, ${2:index}, ${0:function})",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "tapply": true
        },
        "opts": {}
      },
      {
        "content": "rapply(${1:list}, ${0:function})",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "rapply": true
        },
        "opts": {}
      },
      {
        "content": "ddply(${1:frame}, ${2:variables}, ${0:function})",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "dd": true
        },
        "opts": {}
      },
      {
        "content": "dlply(${1:frame}, ${2:variables}, ${0:function})",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "dl": true
        },
        "opts": {}
      },
      {
        "content": "daply(${1:frame}, ${2:variables}, ${0:function})",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "da": true
        },
        "opts": {}
      },
      {
        "content": "d_ply(${1:frame}, ${2:variables}, ${0:function})",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "d_": true
        },
        "opts": {}
      },
      {
        "content": "adply(${1:array}, ${2:margin}, ${0:function})",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ad": true
        },
        "opts": {}
      },
      {
        "content": "alply(${1:array}, ${2:margin}, ${0:function})",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "al": true
        },
        "opts": {}
      },
      {
        "content": "aaply(${1:array}, ${2:margin}, ${0:function})",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "aa": true
        },
        "opts": {}
      },
      {
        "content": "a_ply(${1:array}, ${2:margin}, ${0:function})",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "a_": true
        },
        "opts": {}
      },
      {
        "content": "ldply(${1:list}, ${0:function})",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ld": true
        },
        "opts": {}
      },
      {
        "content": "llply(${1:list}, ${0:function})",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ll": true
        },
        "opts": {}
      },
      {
        "content": "laply(${1:list}, ${0:function})",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "la": true
        },
        "opts": {}
      },
      {
        "content": "l_ply(${1:list}, ${0:function})",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "l_": true
        },
        "opts": {}
      },
      {
        "content": "mdply(${1:matrix}, ${0:function})",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "md": true
        },
        "opts": {}
      },
      {
        "content": "mlply(${1:matrix}, ${0:function})",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ml": true
        },
        "opts": {}
      },
      {
        "content": "maply(${1:matrix}, ${0:function})",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ma": true
        },
        "opts": {}
      },
      {
        "content": "m_ply(${1:matrix}, ${0:function})",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "m_": true
        },
        "opts": {}
      },
      {
        "content": "plot(${1:x}, ${0:y})",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "pl": true
        },
        "opts": {}
      },
      {
        "content": "ggplot(${1:data}, aes(${0:aesthetics}))",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ggp": true
        },
        "opts": {}
      },
      {
        "content": "${1:(jpeg,bmp,png,tiff)}(filename = '${2:filename}', width = ${3}, height = ${4}, unit = '${5}')\n${0:plot}\ndev.off()",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "img": true
        },
        "opts": {}
      },
      {
        "content": "fisher.test(${1:x}, ${0:y})",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "fis": true
        },
        "opts": {}
      },
      {
        "content": "chisq.test(${1:x}, ${0:y})",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "chi": true
        },
        "opts": {}
      },
      {
        "content": "t.test(${1:x}, ${0:y})",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "tt": true
        },
        "opts": {}
      },
      {
        "content": "wilcox.test(${1:x}, ${0:y})",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "wil": true
        },
        "opts": {}
      },
      {
        "content": "cor.test(${1:x}, ${0:y})",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "cor": true
        },
        "opts": {}
      },
      {
        "content": "var.test(${1:x}, ${0:y})",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "fte": true
        },
        "opts": {}
      },
      {
        "content": "kv.test(${1:x}, ${0:y})",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "kvt": true
        },
        "opts": {}
      }
    ],
    "r-snippets": [
      {
        "content": "rug(${1:jitter(${2:x})})",
        "doc": null,
        "grammar": "lsp",
        "label": "rug",
        "matches": {
          "rug": true
        },
        "opts": {}
      },
      {
        "content": "apply(${1:X}, ${2:MARGIN}, ${3:FUN}, ${4:...})",
        "doc": "Apply",
        "grammar": "lsp",
        "label": "app",
        "matches": {
          "apply": true
        },
        "opts": {}
      },
      {
        "content": "attach(${1:frame})",
        "doc": "Attach",
        "grammar": "lsp",
        "label": "att",
        "matches": {
          "attach": true
        },
        "opts": {}
      },
      {
        "content": "cat(${1:file}, ${2:sep = ${3:\"\"}}, ${4:fill = ${5:FALSE}}, ${6:labels = ${7:NULL}}, ${8:append = ${9:FALSE}})",
        "doc": "Cat",
        "grammar": "lsp",
        "label": "cat",
        "matches": {
          "cat": true
        },
        "opts": {}
      },
      {
        "content": "cum${1:max}(${2:x})",
        "doc": "Cummulative",
        "grammar": "lsp",
        "label": "cum",
        "matches": {
          "cum": true
        },
        "opts": {}
      },
      {
        "content": "cummax(${1:x}",
        "doc": "Cummulative max",
        "grammar": "lsp",
        "label": "cuma",
        "matches": {
          "cumaax": true
        },
        "opts": {}
      },
      {
        "content": "cummin(${1:x}",
        "doc": "Cummulative min",
        "grammar": "lsp",
        "label": "cumi",
        "matches": {
          "cumin": true
        },
        "opts": {}
      },
      {
        "content": "data.frame(${1:...}, ${2:row.names = ${3:NULL}}, ${4:check.rows = ${5:FALSE}}, ${6:check.names = ${7:TRUE}}, ${8:stringsAsFactors = ${9:default.stringsAsFactors()}})",
        "doc": "Data Frame",
        "grammar": "lsp",
        "label": "daf",
        "matches": {
          "data.frame": true
        },
        "opts": {}
      },
      {
        "content": "density(${1:x}${2:, bw = ${3:bandwidth}})",
        "doc": "Density",
        "grammar": "lsp",
        "label": "den",
        "matches": {
          "density": true
        },
        "opts": {}
      },
      {
        "content": "detach(${0:})",
        "doc": "Detach",
        "grammar": "lsp",
        "label": "det",
        "matches": {
          "detach": true
        },
        "opts": {}
      },
      {
        "content": "cut(${1:x}, breaks = c(${2:${3:}, ${4:max(${1:x})}}))",
        "doc": "Divide Into Intervals",
        "grammar": "lsp",
        "label": "cut",
        "matches": {
          "cut": true
        },
        "opts": {}
      },
      {
        "content": "expand.grid(${1:...}, ${2:KEEP.OUT.ATTRS = ${3:TRUE}}, ${4:stringsAsFactors = ${5:TRUE}})",
        "doc": "Expand grid",
        "grammar": "lsp",
        "label": "exp",
        "matches": {
          "exppand": true
        },
        "opts": {}
      },
      {
        "content": "factor(${1:x})",
        "doc": "Factor",
        "grammar": "lsp",
        "label": "fac",
        "matches": {
          "factor": true
        },
        "opts": {}
      },
      {
        "content": "function(${1:x}) ${3:{$0\\}}",
        "doc": "Function",
        "grammar": "lsp",
        "label": "fun",
        "matches": {
          "function": true
        },
        "opts": {}
      },
      {
        "content": "glm(${1:formula}, ${2:family = {3:gaussian}}, ${4:data})",
        "doc": "Generalized Linear Models",
        "grammar": "lsp",
        "label": "glm",
        "matches": {
          "glm": true
        },
        "opts": {}
      },
      {
        "content": "grep(${1:pattern}, ${2:x}, ${3:ignore.case = ${4:FALSE}}, ${5:perl = ${6:FALSE}})",
        "doc": "Grep",
        "grammar": "lsp",
        "label": "grep",
        "matches": {
          "grep": true
        },
        "opts": {}
      },
      {
        "content": "grep(${1:pattern}, ${2:x}, ${3:ignore.case = ${4:FALSE}}, ${5:perl = ${6:FALSE}}, ${7:value = ${8:FALSE}}, ${9:fixed = ${10:TRUE}})",
        "doc": "Grep",
        "grammar": "lsp",
        "label": "grep2",
        "matches": {
          "grep": true
        },
        "opts": {}
      },
      {
        "content": "grep(${1:pattern}, ${2:x}, ${3:ignore.case = ${4:FALSE}}, ${5:perl = ${6:FALSE}}, ${7:fixed = ${8:TRUE}})",
        "doc": "Grep logical",
        "grammar": "lsp",
        "label": "grepl",
        "matches": {
          "grepl": true
        },
        "opts": {}
      },
      {
        "content": "install.packages(${1:pkgs}, ${2:lib}, ${3:repos = ${4:getOption(\"repos\")}}, ${5:contriburl = ${6:contrib.url(repos, type)}})",
        "doc": "Install package",
        "grammar": "lsp",
        "label": "ins",
        "matches": {
          "insall": true
        },
        "opts": {}
      },
      {
        "content": "kmeans(${1:x}, ${2:centers}, ${3:iter.max = ${4:10}}, ${5:nstart = ${6:1}}, ${7:algorithm = ${8:c(\"Hartigan-Wong\", \"Lloyd\", \"Forgy\",\"MacQueen\")}}, ${9:trace = ${10:FALSE}})",
        "doc": "Kmeans",
        "grammar": "lsp",
        "label": "km",
        "matches": {
          "kmeans": true
        },
        "opts": {}
      },
      {
        "content": "kruskal.test(${1:formula}, ${2:data}, ${3:subset}, ${4:na.action}, ${5:...})",
        "doc": "Kruskal-Wallis Rank Sum test",
        "grammar": "lsp",
        "label": "kr",
        "matches": {
          "kruskal": true
        },
        "opts": {}
      },
      {
        "content": "lapply(${1:X}, ${2:FUN}, ${3:...})",
        "doc": "Lapply",
        "grammar": "lsp",
        "label": "lap",
        "matches": {
          "lapply": true
        },
        "opts": {}
      },
      {
        "content": "length(${1:x})",
        "doc": "Length",
        "grammar": "lsp",
        "label": "len",
        "matches": {
          "length": true
        },
        "opts": {}
      },
      {
        "content": "library(${1:package}, ${2:help}, ${3:pos = ${4:2}}, ${5:lib.loc = ${6:NULL}})",
        "doc": "Library",
        "grammar": "lsp",
        "label": "lib",
        "matches": {
          "library": true
        },
        "opts": {}
      },
      {
        "content": "lines(${1:x}${2:, color=${3:red}})",
        "doc": "Polygonal Line",
        "grammar": "lsp",
        "label": "lin",
        "matches": {
          "lines": true
        },
        "opts": {}
      },
      {
        "content": "data(${1:name})",
        "doc": "Load Dataset",
        "grammar": "lsp",
        "label": "dat",
        "matches": {
          "data": true
        },
        "opts": {}
      },
      {
        "content": "load(${1:file}, ${2:envir = ${3:parent.frame()}}, ${4:verbose = ${5:FALSE}})",
        "doc": "Load RData",
        "grammar": "lsp",
        "label": "loa",
        "matches": {
          "load": true
        },
        "opts": {}
      },
      {
        "content": "mean(${1:x}${2:, na.rm=${3:FALSE}})",
        "doc": "Mean",
        "grammar": "lsp",
        "label": "mea",
        "matches": {
          "mean": true
        },
        "opts": {}
      },
      {
        "content": "merge(${1:x}, ${2:y}, ${3:by = ${4:intersect(names(x), names(y))}}, ${5:all = ${6:FALSE}})",
        "doc": "Merge",
        "grammar": "lsp",
        "label": "mer",
        "matches": {
          "merge": true
        },
        "opts": {}
      },
      {
        "content": "names(${1:x})",
        "doc": "Names",
        "grammar": "lsp",
        "label": "nam",
        "matches": {
          "names": true
        },
        "opts": {}
      },
      {
        "content": "options(${1:...})",
        "doc": "Options",
        "grammar": "lsp",
        "label": "opt",
        "matches": {
          "option": true
        },
        "opts": {}
      },
      {
        "content": "order(${1:...}, ${2:na.last = ${3:TRUE}}, ${4:decreasing = ${5:FALSE}})",
        "doc": "Order",
        "grammar": "lsp",
        "label": "ord",
        "matches": {
          "order": true
        },
        "opts": {}
      },
      {
        "content": "outer(${1:X}, ${2:Y}, ${3:FUN = ${4:\"*\"}}, ${5:...})",
        "doc": "Outer",
        "grammar": "lsp",
        "label": "out",
        "matches": {
          "outer": true
        },
        "opts": {}
      },
      {
        "content": "paste(${1:...}, ${2:sep = ${3:\" \"}}, ${3:collapse = ${4:NULL}})",
        "doc": "Paste",
        "grammar": "lsp",
        "label": "pas",
        "matches": {
          "paste": true
        },
        "opts": {}
      },
      {
        "content": "paste(${1:...}, ${2:collapse = ${3:NULL}})",
        "doc": "Paste0",
        "grammar": "lsp",
        "label": "pas0",
        "matches": {
          "pas0": true
        },
        "opts": {}
      },
      {
        "content": "plot(${1:x}, ${2:y}, ${3:...})",
        "doc": "Plot",
        "grammar": "lsp",
        "label": "plot",
        "matches": {
          "plot": true
        },
        "opts": {}
      },
      {
        "content": "points(${1:x}, ${2:y = ${3:NULL}}, ${4:type = ${5:\"p\"}}, ${6:...})",
        "doc": "Points",
        "grammar": "lsp",
        "label": "poi",
        "matches": {
          "point": true
        },
        "opts": {}
      },
      {
        "content": "print(${1:x}, ${2:...})",
        "doc": "Print",
        "grammar": "lsp",
        "label": "pri",
        "matches": {
          "print": true
        },
        "opts": {}
      },
      {
        "content": "quantile(${1:x}, ${2:probs = ${3:seq(0, 1, 0.25)}}, ${4:na.rm = ${5:FALSE}}, ${6:names = ${7:TRUE}}, ${8:type = ${9:7}}, ${10:...})",
        "doc": "Quantile",
        "grammar": "lsp",
        "label": "qua",
        "matches": {
          "quantile": true
        },
        "opts": {}
      },
      {
        "content": "read.table('${1:filename}'${2:, header = ${3:TRUE},  sep = '${4:\t}',  stringsAsFactors = ${5:FALSE}})",
        "doc": "Read From File",
        "grammar": "lsp",
        "label": "reat",
        "matches": {
          "read": true
        },
        "opts": {}
      },
      {
        "content": "rep(${1:x}, ${2:...})",
        "doc": "Rep",
        "grammar": "lsp",
        "label": "rep",
        "matches": {
          "rep": true
        },
        "opts": {}
      },
      {
        "content": "sample(${1:x}, ${2:size}, ${3:replace = ${4:FALSE}}, ${5:prob = ${6:NULL}})",
        "doc": "Sample",
        "grammar": "lsp",
        "label": "sam",
        "matches": {
          "sample": true
        },
        "opts": {}
      },
      {
        "content": "seq(${1:from}, ${2:to}, ${3:by})",
        "doc": "Sequence (from,to,by)",
        "grammar": "lsp",
        "label": "seq",
        "matches": {
          "seq": true
        },
        "opts": {}
      },
      {
        "content": "sort(${1:x})",
        "doc": "Sort",
        "grammar": "lsp",
        "label": "sor",
        "matches": {
          "sort": true
        },
        "opts": {}
      },
      {
        "content": "source(${1:'${2:}'}${3:, chdir = ${4:TRUE}})",
        "doc": "Source",
        "grammar": "lsp",
        "label": "sou",
        "matches": {
          "source": true
        },
        "opts": {}
      },
      {
        "content": "sd(${1:x}${2:, na.rm=${3:FALSE}})",
        "doc": "Standard deviation",
        "grammar": "lsp",
        "label": "sd",
        "matches": {
          "sd": true
        },
        "opts": {}
      },
      {
        "content": "table(${1:...})",
        "doc": "Table",
        "grammar": "lsp",
        "label": "tab",
        "matches": {
          "table": true
        },
        "opts": {}
      },
      {
        "content": "tapply(${1:X}, ${2:INDEX}, ${3:FUN = ${4:NULL}}, ${5:...}, ${6:simplify = ${7:TRUE}})",
        "doc": "Tapply",
        "grammar": "lsp",
        "label": "tap",
        "matches": {
          "tapply": true
        },
        "opts": {}
      },
      {
        "content": "unique(${1:x}, ${2:incomparables = ${3:FALSE}}, ${4:...})",
        "doc": "Unique",
        "grammar": "lsp",
        "label": "uni",
        "matches": {
          "unique": true
        },
        "opts": {}
      },
      {
        "content": "which(${1:x}, ${2:arr.ind = ${3:FALSE}}, ${4:useNames = ${5:TRUE}})",
        "doc": "Which",
        "grammar": "lsp",
        "label": "whi",
        "matches": {
          "which": true
        },
        "opts": {}
      },
      {
        "content": "write.csv(${1:x}, ${2:file = ${3:\"\"}}, ${4:append = ${5:FALSE}}, ${6:quote = ${7:TRUE}}, ${8:sep = ${9:\" \"}}",
        "doc": "Write csv",
        "grammar": "lsp",
        "label": "wric",
        "matches": {
          "write": true
        },
        "opts": {}
      },
      {
        "content": "${1:file = }file.choose()${0:}",
        "doc": "file.choose",
        "grammar": "lsp",
        "label": "fch",
        "matches": {
          "fch": true
        },
        "opts": {}
      },
      {
        "content": "library(cluster)\nclara(${1:xData}, k = ${2:k}, metric = ${3:metric}, stand = ${4:stand}, samples = ${5:samples})",
        "doc": "Cluster data into k clusters (library: cluster)",
        "grammar": "lsp",
        "label": "Clustering",
        "matches": {
          "clara": true
        },
        "opts": {}
      },
      {
        "content": "lmObj <- lm(${1:yCol} ~ {2:xCol}, data = ${3:data}, subset = ${4:subset}, weights = ${5:weights}, na.action = ${6:na.action})\nsummary(lmObj)",
        "doc": "Fit a linear model",
        "grammar": "lsp",
        "label": "Linear model",
        "matches": {
          "lm": true
        },
        "opts": {}
      },
      {
        "content": "lmObj <- lm(${1:yCol} ~ {2:xCol}, data = ${3:data}, subset = ${4:subset}, weights = ${5:weights}, na.action = ${6:na.action})\nsummary(lmObj)\nplot(lmObj, which=c(1)) # Plot residuals versus fitted",
        "doc": "Fit a linear model and create a plot",
        "grammar": "lsp",
        "label": "Linear model with plot",
        "matches": {
          "lmplot": true
        },
        "opts": {}
      },
      {
        "content": "loess(${1:yCol} ~ {2:xCol}, data = ${3:data}, subset = ${4:subset}, weights = ${5:weights}, span = ${6:span},\ndegree = ${7:degree}, na.action = {8:na.action})",
        "doc": "Local polynomial regression",
        "grammar": "lsp",
        "label": "loess",
        "matches": {
          "loess": true
        },
        "opts": {}
      },
      {
        "content": "summary(${1:dataName}, digits = ${2:digits}, maxsum = ${3:maxsum})",
        "doc": "Mean, median, 25th and 75th quartiles, min, and max of variables",
        "grammar": "lsp",
        "label": "Descriptive statistics summary",
        "matches": {
          "summary": true
        },
        "opts": {}
      },
      {
        "content": "crossTable <- xtabs(~${1:varNames}, data= ${2:dataName}, exclude = c(${3:exclude}), subset = ${4:subset})\nftable(crossTable)  # print crosstabs\nsummary(crossTable) # chi-square tests",
        "doc": "Crosstabulations for variables in a data frame",
        "grammar": "lsp",
        "label": "Crosstabs",
        "matches": {
          "xtabs": true
        },
        "opts": {}
      },
      {
        "content": "${1:dfname} <- data.frame(${2:a} = character(), ${3:b} = character())",
        "doc": "Code snippet for an empty character data frame",
        "grammar": "lsp",
        "label": "Empty data frame (character)",
        "matches": {
          "df2c": true
        },
        "opts": {}
      },
      {
        "content": "${1:dfname} <- data.frame(${2:x} = numeric(), ${3:y} = numeric())",
        "doc": "Code snippet for an empty numerical data frame",
        "grammar": "lsp",
        "label": "Empty data frame (numeric)",
        "matches": {
          "df2n": true
        },
        "opts": {}
      },
      {
        "content": "${1:dfname} <- data.frame(${2:varlist})",
        "doc": "Create a data frame from vectors",
        "grammar": "lsp",
        "label": "Data frame",
        "matches": {
          "dfv": true
        },
        "opts": {}
      },
      {
        "content": "${1:outFactor} <- factor(x = ${2:dataVec}, levels = ${3:levels}, exclude = ${4:exclude})",
        "doc": "Create a factor (categorical variable) from a vector",
        "grammar": "lsp",
        "label": "Categorical variable",
        "matches": {
          "factor": true
        },
        "opts": {}
      },
      {
        "content": "${1:outMatrix} <- matrix(data = ${2:dataVec}, nrow = ${3:nrow}, ncol = ${4:ncol}, byrow = ${5:byrow})",
        "doc": "Create a matrix from a vector",
        "grammar": "lsp",
        "label": "Matrix",
        "matches": {
          "matrix": true
        },
        "opts": {}
      },
      {
        "content": "${1:newdataframe} <- na.omit(${2:dataframe})",
        "doc": "Remove all rows with missing values from data frame",
        "grammar": "lsp",
        "label": "remove missings",
        "matches": {
          "naomit": true
        },
        "opts": {}
      },
      {
        "content": "${1:dfname} <- read.csv(file = \"${2:file}\", header = ${3|TRUE,FALSE|},  sep = \"${4|\\,,;|}\", row.names = ${5:NULL},  stringsAsFactors = ${6|FALSE,TRUE|})",
        "doc": "Read a data table from a comma-separated file (CSV) and create a data frame",
        "grammar": "lsp",
        "label": "Read CSV",
        "matches": {
          "readc": true
        },
        "opts": {}
      },
      {
        "content": "else {\n   ${1:selected}\n}",
        "doc": "Code snippet for 'else' conditional",
        "grammar": "lsp",
        "label": "else",
        "matches": {
          "else": true
        },
        "opts": {}
      },
      {
        "content": "else if (${1:condition}) {\n   ${2:selected}\n}",
        "doc": "Code snippet for 'else' conditional",
        "grammar": "lsp",
        "label": "elseif",
        "matches": {
          "elseif": true
        },
        "opts": {}
      },
      {
        "content": "for (${1:identifier} in ${2:collection}) {\n   ${3:selected}\n}",
        "doc": "Code snippet for 'for' loop",
        "grammar": "lsp",
        "label": "for",
        "matches": {
          "for": true
        },
        "opts": {}
      },
      {
        "content": "${1:name} <- function(${2:parameters}) {\n   ${3:selected}\n}",
        "doc": "Named function",
        "grammar": "lsp",
        "label": "function",
        "matches": {
          "function": true
        },
        "opts": {}
      },
      {
        "content": "if (${1:condition}) {\n   ${2:selected}\n}",
        "doc": "Code snippet for 'if' conditional",
        "grammar": "lsp",
        "label": "if",
        "matches": {
          "if": true
        },
        "opts": {}
      },
      {
        "content": "if (${1:condition}) {\n   ${2:selected}\n} else {\n   \n}",
        "doc": "Code snippet for 'if-else' conditional block",
        "grammar": "lsp",
        "label": "if-else block",
        "matches": {
          "ifelse": true
        },
        "opts": {}
      },
      {
        "content": "#region $0",
        "doc": "Folding Region Start",
        "grammar": "lsp",
        "label": "Region Start",
        "matches": {
          "#region": true
        },
        "opts": {}
      },
      {
        "content": "#endregion",
        "doc": "Folding Region End",
        "grammar": "lsp",
        "label": "Region End",
        "matches": {
          "#endregion": true
        },
        "opts": {}
      }
    ],
    "racket": [
      {
        "content": "#lang racket",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "#r": true
        },
        "opts": {}
      },
      {
        "content": "#lang typed/racket",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "#tr": true
        },
        "opts": {}
      },
      {
        "content": "#lang racket/gui",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "#rg": true
        },
        "opts": {}
      },
      {
        "content": "#lang scribble/base",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "#sb": true
        },
        "opts": {}
      },
      {
        "content": "#lang datalog",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "#d": true
        },
        "opts": {}
      },
      {
        "content": "#lang web-server/insta",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "#wi": true
        },
        "opts": {}
      },
      {
        "content": "(define ${1} ${0})",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "def": true
        },
        "opts": {}
      },
      {
        "content": "(define (${1})\n\t${0})",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "defun": true
        },
        "opts": {}
      },
      {
        "content": "(define-values (${1}) (${0}))",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "defv \"define-values\"": true
        },
        "opts": {}
      },
      {
        "content": "(define/match (${1})\n  [(${2}) ${3}]\n\t${0})",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "defm \"define/match\"": true
        },
        "opts": {}
      },
      {
        "content": "(define-syntax (${1})\n\t${0})",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "defs \"define-syntax\"": true
        },
        "opts": {}
      },
      {
        "content": "(if ${1} ${2} ${0})",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "if": true
        },
        "opts": {}
      },
      {
        "content": "(if (not ${1}) ${2} ${0})",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ifn": true
        },
        "opts": {}
      },
      {
        "content": "(if ${1}\n\t(let (${2})\n\t\t${3})\n\t${0})",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ifl": true
        },
        "opts": {}
      },
      {
        "content": "(if (not ${1})\n\t(let (${2})\n\t\t${3})\n\t${0})",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ifnl": true
        },
        "opts": {}
      },
      {
        "content": "(if ${1}\n\t(begin\n\t\t${2})\n\t${0})",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ifb": true
        },
        "opts": {}
      },
      {
        "content": "(if (not ${1})\n\t(begin\n\t\t${2})\n\t${0})",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ifnb": true
        },
        "opts": {}
      },
      {
        "content": "(when ${1}\n\t${0})",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "when": true
        },
        "opts": {}
      },
      {
        "content": "(unless ${1} ${2} ${0})",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "unless": true
        },
        "opts": {}
      },
      {
        "content": "(cond\n\t[(${1}) ${0}])",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "cond": true
        },
        "opts": {}
      },
      {
        "content": "(cond\n\t[(${1}) ${2}]\n\t[else ${0}])",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "conde": true
        },
        "opts": {}
      },
      {
        "content": "(case ${1}\n\t[(${2}) ${0}])",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "case": true
        },
        "opts": {}
      },
      {
        "content": "(match ${1}\n\t[(${2}) ${0}])",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "match": true
        },
        "opts": {}
      },
      {
        "content": "(for ([${1}])\n\t${0})",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "for": true
        },
        "opts": {}
      },
      {
        "content": "(for/list ([${1}])\n\t${0})",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "forl \"for/list\"": true
        },
        "opts": {}
      },
      {
        "content": "(for/fold\n\t([${1}])\n\t([${2}])\n\t${0})",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "forf \"for/fold\"": true
        },
        "opts": {}
      },
      {
        "content": "(for/foldr\n\t([${1}])\n\t([${2}])\n\t${0})",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "forfr \"for/foldr\"": true
        },
        "opts": {}
      },
      {
        "content": "(for/and ([${1}])\n\t${0})",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "fora \"for/and\"": true
        },
        "opts": {}
      },
      {
        "content": "(for/or ([${1}])\n\t${0})",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "foro \"for/or\"": true
        },
        "opts": {}
      },
      {
        "content": "(for/sum ([${1}])\n\t${0})",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "fors \"for/sum\"": true
        },
        "opts": {}
      },
      {
        "content": "(for/product ([${1}])\n\t${0})",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "forp \"for/product\"": true
        },
        "opts": {}
      },
      {
        "content": "(for/first ([${1}])\n\t${0})",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "forfi \"for/first\"": true
        },
        "opts": {}
      },
      {
        "content": "(for/last ([${1}])\n\t${0})",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "forla \"for/last\"": true
        },
        "opts": {}
      },
      {
        "content": "(lambda (${1}) ${0})",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "lambda": true
        },
        "opts": {}
      },
      {
        "content": "(apply ${1} ${0})",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "apply": true
        },
        "opts": {}
      },
      {
        "content": "(map ${1} ${0})",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "map": true
        },
        "opts": {}
      },
      {
        "content": "(filter ${1} ${0})",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "filter": true
        },
        "opts": {}
      },
      {
        "content": "(require ${0})",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "req": true
        },
        "opts": {}
      },
      {
        "content": "(provide ${0})",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "prov": true
        },
        "opts": {}
      },
      {
        "content": "(let ([${1}]) ${0})",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "let": true
        },
        "opts": {}
      },
      {
        "content": "(let/cc here (set! ${1} here) ${0})",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "letcc": true
        },
        "opts": {}
      },
      {
        "content": "(begin\n\t${0})",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "begin": true
        },
        "opts": {}
      }
    ],
    "rails": [
      {
        "content": "render",
        "doc": "",
        "grammar": "snu",
        "label": "render",
        "matches": {
          "rr": true
        },
        "opts": {}
      },
      {
        "content": "render action: ",
        "doc": "",
        "grammar": "snu",
        "label": "render :action",
        "matches": {
          "ra": true
        },
        "opts": {}
      },
      {
        "content": "render controller: ",
        "doc": "",
        "grammar": "snu",
        "label": "render :controller",
        "matches": {
          "rc": true
        },
        "opts": {}
      },
      {
        "content": "render file: ",
        "doc": "",
        "grammar": "snu",
        "label": "render :file",
        "matches": {
          "rf": true
        },
        "opts": {}
      },
      {
        "content": "render inline: ",
        "doc": "",
        "grammar": "snu",
        "label": "render :inline",
        "matches": {
          "ri": true
        },
        "opts": {}
      },
      {
        "content": "render json: ",
        "doc": "",
        "grammar": "snu",
        "label": "render :json",
        "matches": {
          "rj": true
        },
        "opts": {}
      },
      {
        "content": "render layout: ",
        "doc": "",
        "grammar": "snu",
        "label": "render :layout",
        "matches": {
          "rl": true
        },
        "opts": {}
      },
      {
        "content": "render partial: ",
        "doc": "",
        "grammar": "snu",
        "label": "render :partial",
        "matches": {
          "rp": true
        },
        "opts": {}
      },
      {
        "content": "render text: ",
        "doc": "",
        "grammar": "snu",
        "label": "render :text",
        "matches": {
          "rt": true
        },
        "opts": {}
      },
      {
        "content": "render xml: ",
        "doc": "",
        "grammar": "snu",
        "label": "render :xml",
        "matches": {
          "rx": true
        },
        "opts": {}
      },
      {
        "content": "distance_of_time_in_words",
        "doc": "",
        "grammar": "snu",
        "label": "distance_of_time_in_words",
        "matches": {
          "dotiw": true
        },
        "opts": {}
      },
      {
        "content": "time_ago_in_words",
        "doc": "",
        "grammar": "snu",
        "label": "time_ago_in_words",
        "matches": {
          "taiw": true
        },
        "opts": {}
      },
      {
        "content": "redirect_to",
        "doc": "",
        "grammar": "snu",
        "label": "redirect_to",
        "matches": {
          "re": true
        },
        "opts": {}
      },
      {
        "content": "redirect_to action: ",
        "doc": "",
        "grammar": "snu",
        "label": "redirect_to :action",
        "matches": {
          "rea": true
        },
        "opts": {}
      },
      {
        "content": "redirect_to controller: ",
        "doc": "",
        "grammar": "snu",
        "label": "redirect_to :controller",
        "matches": {
          "rec": true
        },
        "opts": {}
      },
      {
        "content": "respond_to",
        "doc": "",
        "grammar": "snu",
        "label": "respond_to",
        "matches": {
          "rst": true
        },
        "opts": {}
      },
      {
        "content": "belongs_to",
        "doc": "",
        "grammar": "snu",
        "label": "belongs_to",
        "matches": {
          "bt": true
        },
        "opts": {}
      },
      {
        "content": "has_one",
        "doc": "",
        "grammar": "snu",
        "label": "has_one",
        "matches": {
          "ho": true
        },
        "opts": {}
      },
      {
        "content": "has_many",
        "doc": "",
        "grammar": "snu",
        "label": "has_many",
        "matches": {
          "hm": true
        },
        "opts": {}
      },
      {
        "content": "has_and_belongs_to_many",
        "doc": "",
        "grammar": "snu",
        "label": "has_and_belongs_to_many",
        "matches": {
          "habtm": true
        },
        "opts": {}
      },
      {
        "content": "composed_of",
        "doc": "",
        "grammar": "snu",
        "label": "composed_of",
        "matches": {
          "co": true
        },
        "opts": {}
      },
      {
        "content": "validates_associated",
        "doc": "",
        "grammar": "snu",
        "label": "validates_associated",
        "matches": {
          "va": true
        },
        "opts": {}
      },
      {
        "content": "validates_acceptance_of",
        "doc": "",
        "grammar": "snu",
        "label": "validates_acceptance_of",
        "matches": {
          "vb": true
        },
        "opts": {}
      },
      {
        "content": "validates_confirmation_of",
        "doc": "",
        "grammar": "snu",
        "label": "validates_confirmation_of",
        "matches": {
          "vc": true
        },
        "opts": {}
      },
      {
        "content": "validates_exclusion_of",
        "doc": "",
        "grammar": "snu",
        "label": "validates_exclusion_of",
        "matches": {
          "ve": true
        },
        "opts": {}
      },
      {
        "content": "validates_format_of",
        "doc": "",
        "grammar": "snu",
        "label": "validates_format_of",
        "matches": {
          "vf": true
        },
        "opts": {}
      },
      {
        "content": "validates_inclusion_of",
        "doc": "",
        "grammar": "snu",
        "label": "validates_inclusion_of",
        "matches": {
          "vi": true
        },
        "opts": {}
      },
      {
        "content": "validates_length_of",
        "doc": "",
        "grammar": "snu",
        "label": "validates_length_of",
        "matches": {
          "vl": true
        },
        "opts": {}
      },
      {
        "content": "validates_numericality_of",
        "doc": "",
        "grammar": "snu",
        "label": "validates_numericality_of",
        "matches": {
          "vn": true
        },
        "opts": {}
      },
      {
        "content": "validates_presence_of",
        "doc": "",
        "grammar": "snu",
        "label": "validates_presence_of",
        "matches": {
          "vp": true
        },
        "opts": {}
      },
      {
        "content": "validates_uniqueness_of",
        "doc": "",
        "grammar": "snu",
        "label": "validates_uniqueness_of",
        "matches": {
          "vu": true
        },
        "opts": {}
      },
      {
        "content": "logger.debug",
        "doc": "",
        "grammar": "snu",
        "label": "logger.debug",
        "matches": {
          "logd": true
        },
        "opts": {}
      },
      {
        "content": "logger.info",
        "doc": "",
        "grammar": "snu",
        "label": "logger.info",
        "matches": {
          "logi": true
        },
        "opts": {}
      },
      {
        "content": "logger.warn",
        "doc": "",
        "grammar": "snu",
        "label": "logger.warn",
        "matches": {
          "logw": true
        },
        "opts": {}
      },
      {
        "content": "logger.error",
        "doc": "",
        "grammar": "snu",
        "label": "logger.error",
        "matches": {
          "loge": true
        },
        "opts": {}
      },
      {
        "content": "logger.fatal",
        "doc": "",
        "grammar": "snu",
        "label": "logger.fatal",
        "matches": {
          "logf": true
        },
        "opts": {}
      },
      {
        "content": "action: ",
        "doc": "",
        "grammar": "snu",
        "label": "action:",
        "matches": {
          "action": true
        },
        "opts": {}
      },
      {
        "content": "co________: ",
        "doc": "",
        "grammar": "snu",
        "label": "co________:",
        "matches": {
          "co_": true
        },
        "opts": {}
      },
      {
        "content": "id: ",
        "doc": "",
        "grammar": "snu",
        "label": "id:",
        "matches": {
          "id": true
        },
        "opts": {}
      },
      {
        "content": "object: ",
        "doc": "",
        "grammar": "snu",
        "label": "object:",
        "matches": {
          "object": true
        },
        "opts": {}
      },
      {
        "content": "partial: ",
        "doc": "",
        "grammar": "snu",
        "label": "partial:",
        "matches": {
          "partial": true
        },
        "opts": {}
      },
      {
        "content": "assert_redirected_to ${1:action}: '${2:index}'",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "art": true
        },
        "opts": {}
      },
      {
        "content": "assert_redirected_to ${1:parent}_${2:child}_path(${3:@$1}, ${0:@$2})",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "artnp": true
        },
        "opts": {}
      },
      {
        "content": "assert_redirected_to ${1:parent}_${2:child}_path(${0:@$1})",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "artnpp": true
        },
        "opts": {}
      },
      {
        "content": "assert_redirected_to ${1:model}_path(${0:@$1})",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "artp": true
        },
        "opts": {}
      },
      {
        "content": "assert_redirected_to ${0:model}s_path",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "artpp": true
        },
        "opts": {}
      },
      {
        "content": "assert_difference '${1:Model}.${2:count}', ${3:1} do\n\t${0}\nend",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "asd": true
        },
        "opts": {}
      },
      {
        "content": "assert_no_difference '${1:Model}.${2:count}' do\n\t${0}\nend",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "asnd": true
        },
        "opts": {}
      },
      {
        "content": "assert_response :${1:success}, @response.body",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "asre": true
        },
        "opts": {}
      },
      {
        "content": "assert_rjs :${1:replace}, '${0:dom id}'",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "asrj": true
        },
        "opts": {}
      },
      {
        "content": "assert_select '${1:path}', ${2:text}: '${3:inner_html}' ${4:do}\n\t${0}\nend",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ass assert_select(..)": true
        },
        "opts": {}
      },
      {
        "content": "before_action :${0:method}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ba": true
        },
        "opts": {}
      },
      {
        "content": "before_filter :${0:method}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "bf": true
        },
        "opts": {}
      },
      {
        "content": "belongs_to :${0:association}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "bt": true
        },
        "opts": {}
      },
      {
        "content": "belongs_to :${1:association}, polymorphic: true",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "btp": true
        },
        "opts": {}
      },
      {
        "content": "cattr_accessor :${0:attr_names}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "crw": true
        },
        "opts": {}
      },
      {
        "content": "def create\n\t@${1:model_class_name} = ${2:ModelClassName}.new($1_params)\n\trespond_to do |format|\n\t\tif @$1.save\n\t\t\tflash[:notice] = '$2 was successfully created.'\n\t\t\tformat.html { redirect_to(@$1) }\n\t\t\tformat.json  { render json: @$1, status: :created, location: @$1 }\n\t\telse\n\t\t\tformat.html { render action: 'new' }\n\t\t\tformat.json  { render json: @$1.errors, status: :unprocessable_entity }\n\t\tend\n\tend\nend",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "defcreate": true
        },
        "opts": {}
      },
      {
        "content": "def destroy\n\t@${1:model_class_name} = ${2:ModelClassName}.find(params[:id])\n\t@$1.destroy\n\trespond_to do |format|\n\t\tformat.html { redirect_to($1s_url) }\n\t\tformat.json  { head :ok }\n\tend\nend",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "defdestroy": true
        },
        "opts": {}
      },
      {
        "content": "def edit\n\t@${1:model_class_name} = ${0:ModelClassName}.find(params[:id])\nend",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "defedit": true
        },
        "opts": {}
      },
      {
        "content": "def index\n\t@${1:model_class_name} = ${2:ModelClassName}.all\n\trespond_to do |format|\n\t\tformat.html # index.html.erb\n\t\tformat.json  { render json: @$1s }\n\tend\nend",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "defindex": true
        },
        "opts": {}
      },
      {
        "content": "def new\n\t@${1:model_class_name} = ${2:ModelClassName}.new\n\trespond_to do |format|\n\t\tformat.html # new.html.erb\n\t\tformat.json  { render json: @$1 }\n\tend\nend",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "defnew": true
        },
        "opts": {}
      },
      {
        "content": "def show\n\t@${1:model_class_name} = ${2:ModelClassName}.find(params[:id])\n\trespond_to do |format|\n\t\tformat.html # show.html.erb\n\t\tformat.json  { render json: @$1 }\n\tend\nend",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "defshow": true
        },
        "opts": {}
      },
      {
        "content": "def update\n\t@${1:model_class_name} = ${2:ModelClassName}.find(params[:id])\n\trespond_to do |format|\n\t\tif @$1.update($1_params)\n\t\t\tflash[:notice] = '$2 was successfully updated.'\n\t\t\tformat.html { redirect_to(@$1) }\n\t\t\tformat.json  { head :ok }\n\t\telse\n\t\t\tformat.html { render action: 'edit' }\n\t\t\tformat.json  { render json: @$1.errors, status: :unprocessable_entity }\n\t\tend\n\tend\nend",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "defupdate": true
        },
        "opts": {}
      },
      {
        "content": "def ${1:model_class_name}_params\n\tparams.require(:$1).permit()\nend",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "defparams": true
        },
        "opts": {}
      },
      {
        "content": "delegate :${1:methods}, to: :${0:object}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "dele delegate .. to": true
        },
        "opts": {}
      },
      {
        "content": "delegate :${1:methods}, to: :${2:object}, prefix: :${3:prefix}, allow_nil: ${0:allow_nil}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "dele delegate .. to .. prefix .. allow_nil": true
        },
        "opts": {}
      },
      {
        "content": "alias_method_chain :${1:method_name}, :${0:feature}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "amc": true
        },
        "opts": {}
      },
      {
        "content": "flash[:${1:notice}] = '${0}'",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "flash": true
        },
        "opts": {}
      },
      {
        "content": "has_and_belongs_to_many :${1:object}, join_table: '${2:table_name}', foreign_key: '${3}_id'",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "habtm": true
        },
        "opts": {}
      },
      {
        "content": "has_many :${0:object}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "hm": true
        },
        "opts": {}
      },
      {
        "content": "has_many :${1:other}s, class_name: '${2:$1}', foreign_key: '${3:$1}_id', dependent: :destroy",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "hmd": true
        },
        "opts": {}
      },
      {
        "content": "has_many :${1:object}, through: :${0:object}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "hmt": true
        },
        "opts": {}
      },
      {
        "content": "has_one :${0:object}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ho": true
        },
        "opts": {}
      },
      {
        "content": "has_one :${1:object}, dependent: :${0:destroy}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "hod": true
        },
        "opts": {}
      },
      {
        "content": "I18n.t('${1:type.key}')",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "i18": true
        },
        "opts": {}
      },
      {
        "content": "<%= image_submit_tag('${1:agree.png}', id: '${2:id}'${0}) %>",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ist": true
        },
        "opts": {}
      },
      {
        "content": "Rails.logger.${1:debug} ${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "log": true
        },
        "opts": {}
      },
      {
        "content": "RAILS_DEFAULT_LOGGER.${1:debug} ${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "log2": true
        },
        "opts": {}
      },
      {
        "content": "logger.debug { '${1:message}' }",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "logd": true
        },
        "opts": {}
      },
      {
        "content": "logger.error { '${1:message}' }",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "loge": true
        },
        "opts": {}
      },
      {
        "content": "logger.fatal { '${1:message}' }",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "logf": true
        },
        "opts": {}
      },
      {
        "content": "logger.info { '${1:message}' }",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "logi": true
        },
        "opts": {}
      },
      {
        "content": "logger.warn { '${1:message}' }",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "logw": true
        },
        "opts": {}
      },
      {
        "content": "${1:map}.${2:connect} '${0:controller/:action/:id}'",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "mapc": true
        },
        "opts": {}
      },
      {
        "content": "${1:map}.catch_all '*${2:anything}', controller: '${3:default}', action: '${4:error}'",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "mapca": true
        },
        "opts": {}
      },
      {
        "content": "${1:map}.resource :${0:resource}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "mapr": true
        },
        "opts": {}
      },
      {
        "content": "${1:map}.resources :${0:resource}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "maprs": true
        },
        "opts": {}
      },
      {
        "content": "${1:map}.with_options ${2:controller}: '${3:thing}' do |$3|\n\t${0}\nend",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "mapwo": true
        },
        "opts": {}
      },
      {
        "content": "before_validation :${0:method}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "mbv": true
        },
        "opts": {}
      },
      {
        "content": "before_create :${0:method}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "mbc": true
        },
        "opts": {}
      },
      {
        "content": "before_update :${0:method}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "mbu": true
        },
        "opts": {}
      },
      {
        "content": "before_save :${0:method}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "mbs": true
        },
        "opts": {}
      },
      {
        "content": "before_destroy :${0:method}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "mbd": true
        },
        "opts": {}
      },
      {
        "content": "after_validation :${0:method}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "mav": true
        },
        "opts": {}
      },
      {
        "content": "after_find :${0:method}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "maf": true
        },
        "opts": {}
      },
      {
        "content": "after_touch :${0:method}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "mat": true
        },
        "opts": {}
      },
      {
        "content": "after_create :${0:method}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "macr": true
        },
        "opts": {}
      },
      {
        "content": "after_update :${0:method}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "mau": true
        },
        "opts": {}
      },
      {
        "content": "after_save :${0:method}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "mas": true
        },
        "opts": {}
      },
      {
        "content": "after_destroy :${0:method}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "mad": true
        },
        "opts": {}
      },
      {
        "content": "around_create :${0:method}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "marc": true
        },
        "opts": {}
      },
      {
        "content": "around_update :${0:method}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "maru": true
        },
        "opts": {}
      },
      {
        "content": "around_save :${0:method}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "mars": true
        },
        "opts": {}
      },
      {
        "content": "around_destroy :${0:method}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "mard": true
        },
        "opts": {}
      },
      {
        "content": "change_table :${1:table_name} do |t|\n\t${0}\nend",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "mcht": true
        },
        "opts": {}
      },
      {
        "content": "map(&:${0:id})",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "mp": true
        },
        "opts": {}
      },
      {
        "content": "mattr_accessor :${0:attr_names}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "mrw": true
        },
        "opts": {}
      },
      {
        "content": "order('${0:field}')",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "oa": true
        },
        "opts": {}
      },
      {
        "content": "order('${0:field} DESC')",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "od": true
        },
        "opts": {}
      },
      {
        "content": "params[:${1:id}]",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "pa": true
        },
        "opts": {}
      },
      {
        "content": "render action: '${0:action}'",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ra": true
        },
        "opts": {}
      },
      {
        "content": "render action: '${1:action}', layout: '${0:layoutname}'",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ral": true
        },
        "opts": {}
      },
      {
        "content": "respond_to do |format|\n\tformat.${1:html} { ${0} }\nend",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "rest": true
        },
        "opts": {}
      },
      {
        "content": "render file: '${0:filepath}'",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "rf": true
        },
        "opts": {}
      },
      {
        "content": "render file: '${1:filepath}', use_full_path: ${0:false}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "rfu": true
        },
        "opts": {}
      },
      {
        "content": "render inline: \"${0:<%= 'hello' %>}\"",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ri": true
        },
        "opts": {}
      },
      {
        "content": "render inline: \"${1:<%= 'hello' %>}\", locals: { ${2:name}: '${3:value}'${0} }",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ril": true
        },
        "opts": {}
      },
      {
        "content": "render inline: \"${1:<%= 'hello' %>}\", type: ${0::rxml}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "rit": true
        },
        "opts": {}
      },
      {
        "content": "render json: '${0:text to render}'",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "rjson": true
        },
        "opts": {}
      },
      {
        "content": "render layout: '${0:layoutname}'",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "rl": true
        },
        "opts": {}
      },
      {
        "content": "render nothing: ${0:true}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "rn": true
        },
        "opts": {}
      },
      {
        "content": "render nothing: ${1:true}, status: ${0:401}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "rns": true
        },
        "opts": {}
      },
      {
        "content": "render partial: '${0:item}'",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "rp": true
        },
        "opts": {}
      },
      {
        "content": "render partial: '${1:item}', collection: ${0:@$1s}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "rpc": true
        },
        "opts": {}
      },
      {
        "content": "render partial: '${1:item}', locals: { ${2:$1}: ${0:@$1} }",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "rpl": true
        },
        "opts": {}
      },
      {
        "content": "render partial: '${1:item}', object: ${0:@$1}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "rpo": true
        },
        "opts": {}
      },
      {
        "content": "render partial: '${1:item}', status: ${0:500}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "rps": true
        },
        "opts": {}
      },
      {
        "content": "render text: '${0:text to render}'",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "rt": true
        },
        "opts": {}
      },
      {
        "content": "render text: '${1:text to render}', layout: '${0:layoutname}'",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "rtl": true
        },
        "opts": {}
      },
      {
        "content": "render text: '${1:text to render}', layout: ${0:true}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "rtlt": true
        },
        "opts": {}
      },
      {
        "content": "render text: '${1:text to render}', status: ${0:401}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "rts": true
        },
        "opts": {}
      },
      {
        "content": "render :update do |${1:page}|\n\t$1.${0}\nend",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ru": true
        },
        "opts": {}
      },
      {
        "content": "render xml: '${0:text to render}'",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "rxml": true
        },
        "opts": {}
      },
      {
        "content": "scope :${1:name}, -> { where(${2:field}: ${0:value}) }",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "sc": true
        },
        "opts": {}
      },
      {
        "content": "scope :${1:name}, lambda do |${2:value}|\n\twhere('${3:field = ?}', ${0:value})\nend",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "sl": true
        },
        "opts": {}
      },
      {
        "content": "Digest::SHA1.hexdigest(${0:string})",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "sha1": true
        },
        "opts": {}
      },
      {
        "content": "class ${1:ModelClassName}Sweeper < ActionController::Caching::Sweeper\n\tobserve $1\n\tdef after_save(${0:model_class_name})\n\t\texpire_cache($2)\n\tend\n\tdef after_destroy($2)\n\t\texpire_cache($2)\n\tend\n\tdef expire_cache($2)\n\t\texpire_page\n\tend\nend",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "sweeper": true
        },
        "opts": {}
      },
      {
        "content": "validates_associated :${0:attribute}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "va validates_associated": true
        },
        "opts": {}
      },
      {
        "content": "validates :${0:terms}, acceptance: true",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "va validates .., acceptance: true": true
        },
        "opts": {}
      },
      {
        "content": "validates :${0:attribute}, confirmation: true",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "vc": true
        },
        "opts": {}
      },
      {
        "content": "validates :${1:attribute}, exclusion: { in: ${0:%w( mov avi )} }",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ve": true
        },
        "opts": {}
      },
      {
        "content": "validates :${1:attribute}, format: { with: /${0:regex}/ }",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "vf": true
        },
        "opts": {}
      },
      {
        "content": "validates :${1:attribute}, inclusion: { in: %w(${0: mov avi }) }",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "vi": true
        },
        "opts": {}
      },
      {
        "content": "validates :${1:attribute}, length: { in: ${2:3}..${0:20} }",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "vl": true
        },
        "opts": {}
      },
      {
        "content": "validates :${0:attribute}, numericality: true",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "vn": true
        },
        "opts": {}
      },
      {
        "content": "validates :${0:attribute}, presence: true",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "vp": true
        },
        "opts": {}
      },
      {
        "content": "validates :${0:attribute}, uniqueness: true",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "vu": true
        },
        "opts": {}
      },
      {
        "content": "format.${1:js|xml|html} { ${0} }",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "format": true
        },
        "opts": {}
      },
      {
        "content": "where(${1:'conditions'}${0:, bind_var})",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "wc": true
        },
        "opts": {}
      },
      {
        "content": "where(${1:field}: ${0:value})",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "wf": true
        },
        "opts": {}
      },
      {
        "content": "xhr :delete, :${1:destroy}, id: ${2:1}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "xdelete": true
        },
        "opts": {}
      },
      {
        "content": "xhr :get, :${1:show}, id: ${2:1}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "xget": true
        },
        "opts": {}
      },
      {
        "content": "xhr :post, :${1:create}, ${2:object}: ${3:object}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "xpost": true
        },
        "opts": {}
      },
      {
        "content": "xhr :put, :${1:update}, id: ${2:1}, ${3:object}: ${4:object}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "xput": true
        },
        "opts": {}
      },
      {
        "content": "test '${1:should do something}' do\n\t${0}\nend",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "test": true
        },
        "opts": {}
      },
      {
        "content": "add_column :${1:table_name}, :${2:column_name}, :${0:data_type}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "mac": true
        },
        "opts": {}
      },
      {
        "content": "add_index :${1:table_name}, :${0:column_name}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "mai": true
        },
        "opts": {}
      },
      {
        "content": "remove_column :${1:table_name}, :${0:column_name}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "mrc": true
        },
        "opts": {}
      },
      {
        "content": "rename_column :${1:table_name}, :${2:old_column_name}, :${0:new_column_name}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "mrnc": true
        },
        "opts": {}
      },
      {
        "content": "change_column :${1:table}, :${2:column}, :${0:type}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "mcc": true
        },
        "opts": {}
      },
      {
        "content": "t.${1:string} :${2:title}${3:, null: false}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "mnc": true
        },
        "opts": {}
      },
      {
        "content": "create_table :${1:table_name} do |t|\n\t${0}\nend",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "mct": true
        },
        "opts": {}
      },
      {
        "content": "reversible do |dir|\n\tdir.up do\n\t\t${0}\n\tend\n\tdir.down do\n\tend\nend",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "mrev reversible do |dir| ... dir.up .. dir.down .. end": true
        },
        "opts": {}
      },
      {
        "content": "class Migration${1:class_name} < ApplicationRecord\n\tself.table_name = :${2:model_name}s\nend",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "cmm class Migration... < ApplicationModel .. self.table_name .. end": true
        },
        "opts": {}
      },
      {
        "content": "t.remove :${0:column}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "trc": true
        },
        "opts": {}
      },
      {
        "content": "t.rename :${1:old_column_name}, :${2:new_column_name}\n${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "tre": true
        },
        "opts": {}
      },
      {
        "content": "t.references :${0:model}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "tref": true
        },
        "opts": {}
      },
      {
        "content": "t.boolean :${1:title}\n${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "tcb": true
        },
        "opts": {}
      },
      {
        "content": "t.binary :${1:title}, limit: ${2:2}.megabytes\n${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "tcbi": true
        },
        "opts": {}
      },
      {
        "content": "t.decimal :${1:title}, precision: ${2:10}, scale: ${3:2}\n${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "tcd": true
        },
        "opts": {}
      },
      {
        "content": "t.date :${1:title}\n${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "tcda": true
        },
        "opts": {}
      },
      {
        "content": "t.datetime :${1:title}\n${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "tcdt": true
        },
        "opts": {}
      },
      {
        "content": "t.float :${1:title}\n${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "tcf": true
        },
        "opts": {}
      },
      {
        "content": "t.change :${1:name}, :${2:string}, ${3:limit}: ${4:80}\n${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "tch": true
        },
        "opts": {}
      },
      {
        "content": "t.integer :${1:title}\n${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "tci": true
        },
        "opts": {}
      },
      {
        "content": "t.integer :lock_version, null: false, default: 0\n${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "tcl": true
        },
        "opts": {}
      },
      {
        "content": "t.references :${1:taggable}, polymorphic: { default: '${2:Photo}' }\n${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "tcr": true
        },
        "opts": {}
      },
      {
        "content": "t.string :${1:title}\n${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "tcs": true
        },
        "opts": {}
      },
      {
        "content": "t.text :${1:title}\n${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "tct": true
        },
        "opts": {}
      },
      {
        "content": "t.time :${1:title}\n${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "tcti": true
        },
        "opts": {}
      },
      {
        "content": "t.timestamp :${1:title}\n${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "tcts": true
        },
        "opts": {}
      },
      {
        "content": "t.timestamps\n${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "tctss": true
        },
        "opts": {}
      },
      {
        "content": "it { should filter_param :${0:key} }",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "isfp": true
        },
        "opts": {}
      },
      {
        "content": "it { should redirect_to ${0:url} }",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "isrt": true
        },
        "opts": {}
      },
      {
        "content": "it { should render_template ${0} }",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "isrtp": true
        },
        "opts": {}
      },
      {
        "content": "it { should render_with_layout ${0} }",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "isrwl": true
        },
        "opts": {}
      },
      {
        "content": "it { should rescue_from ${0:exception} }",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "isrf": true
        },
        "opts": {}
      },
      {
        "content": "it { should respond_with ${0:status} }",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "isrw": true
        },
        "opts": {}
      },
      {
        "content": "it { should route(:${1:method}, '${0:path}') }",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "isr": true
        },
        "opts": {}
      },
      {
        "content": "it { should set_session :${0:key} }",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "isss": true
        },
        "opts": {}
      },
      {
        "content": "it { should set_the_flash('${0}') }",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "issf": true
        },
        "opts": {}
      },
      {
        "content": "it { should allow_mass_assignment_of :${0} }",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "isama": true
        },
        "opts": {}
      },
      {
        "content": "it { should allow_value(${1}).for :${0} }",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "isav": true
        },
        "opts": {}
      },
      {
        "content": "it { should ensure_exclusion_of :${0} }",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "isee": true
        },
        "opts": {}
      },
      {
        "content": "it { should ensure_inclusion_of :${0} }",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "isei": true
        },
        "opts": {}
      },
      {
        "content": "it { should ensure_length_of :${0} }",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "isel": true
        },
        "opts": {}
      },
      {
        "content": "it { should validate_acceptance_of :${0} }",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "isva": true
        },
        "opts": {}
      },
      {
        "content": "it { should validate_confirmation_of :${0} }",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "isvc": true
        },
        "opts": {}
      },
      {
        "content": "it { should validate_numericality_of :${0} }",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "isvn": true
        },
        "opts": {}
      },
      {
        "content": "it { should validate_presence_of :${0} }",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "isvp": true
        },
        "opts": {}
      },
      {
        "content": "it { should validate_uniqueness_of :${0} }",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "isvu": true
        },
        "opts": {}
      },
      {
        "content": "it { should accept_nested_attributes_for :${0} }",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "isana": true
        },
        "opts": {}
      },
      {
        "content": "it { should belong_to :${0} }",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "isbt": true
        },
        "opts": {}
      },
      {
        "content": "it { should belong_to(:${1}).counter_cache ${0:true} }",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "isbtcc": true
        },
        "opts": {}
      },
      {
        "content": "it { should have_and_belong_to_many :${0} }",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ishbtm": true
        },
        "opts": {}
      },
      {
        "content": "it { should be_valid }",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "isbv": true
        },
        "opts": {}
      },
      {
        "content": "it { should have_db_column :${0} }",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ishc": true
        },
        "opts": {}
      },
      {
        "content": "it { should have_db_index :${0} }",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ishi": true
        },
        "opts": {}
      },
      {
        "content": "it { should have_many :${0} }",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ishm": true
        },
        "opts": {}
      },
      {
        "content": "it { should have_many(:${1}).through :${0} }",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ishmt": true
        },
        "opts": {}
      },
      {
        "content": "it { should have_one :${0} }",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "isho": true
        },
        "opts": {}
      },
      {
        "content": "it { should have_readonly_attribute :${0} }",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ishro": true
        },
        "opts": {}
      },
      {
        "content": "it { should serialize :${0} }",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "iss": true
        },
        "opts": {}
      },
      {
        "content": "it { should respond_to :${0} }",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "isres": true
        },
        "opts": {}
      },
      {
        "content": "it { should respond_to(:${1}).with(${0}).arguments }",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "isresw": true
        },
        "opts": {}
      },
      {
        "content": "${1:super_class}.instance_method(:${0:method}).bind(self).call",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "super_call": true
        },
        "opts": {}
      },
      {
        "content": "accepts_nested_attributes_for :${1:association_name}${2:${3:, allow_destroy: true}${4:, reject_if: proc \\{ |obj| ${5:obj.blank?} \\}}}\n",
        "doc": null,
        "grammar": "snu",
        "label": "accepts_nested_attributes_for",
        "matches": {
          "anaf": true
        },
        "opts": {}
      },
      {
        "content": "t.binary :${1:title}${2:, limit: ${3:2}.megabytes}\n$0",
        "doc": null,
        "grammar": "snu",
        "label": "Create binary column",
        "matches": {
          "tcbi": true
        },
        "opts": {}
      },
      {
        "content": "t.boolean :${1:title}\n$0",
        "doc": null,
        "grammar": "snu",
        "label": "Create boolean column",
        "matches": {
          "tcb": true
        },
        "opts": {}
      },
      {
        "content": "class ${1:Model}Controller < ApplicationController\n\tbefore_action :find_${2:model}\n\n\t$0\n\n\tprivate\n\tdef find_$2\n\t\t@$2 = ${3:$1}.find(params[:id]) if params[:id]\n\tend\nend",
        "doc": null,
        "grammar": "snu",
        "label": "Create controller class",
        "matches": {
          "clac": true
        },
        "opts": {}
      },
      {
        "content": "t.date :${1:title}\n$0",
        "doc": null,
        "grammar": "snu",
        "label": "Create date column",
        "matches": {
          "tcda": true
        },
        "opts": {}
      },
      {
        "content": "t.datetime :${1:title}\n$0",
        "doc": null,
        "grammar": "snu",
        "label": "Create datetime column",
        "matches": {
          "tcdt": true
        },
        "opts": {}
      },
      {
        "content": "t.decimal :${1:title}${2:${3:, precision: ${4:10}}${5:, scale: ${6:2}}}\n$0",
        "doc": null,
        "grammar": "snu",
        "label": "Create decimal column",
        "matches": {
          "tcd": true
        },
        "opts": {}
      },
      {
        "content": "t.float :${1:title}\n$0",
        "doc": null,
        "grammar": "snu",
        "label": "Create float column",
        "matches": {
          "tcf": true
        },
        "opts": {}
      },
      {
        "content": "require 'test_helper'\n\nclass ${1:Model}ControllerTest < ActionController::TestCase\n\ttest$0\nend\n",
        "doc": null,
        "grammar": "snu",
        "label": "Create functional test class",
        "matches": {
          "clact": true
        },
        "opts": {}
      },
      {
        "content": "t.integer :${1:title}\n$0",
        "doc": null,
        "grammar": "snu",
        "label": "Create integer column",
        "matches": {
          "tci": true
        },
        "opts": {}
      },
      {
        "content": "t.integer :lock_version, null: false, default: 0\n$0",
        "doc": null,
        "grammar": "snu",
        "label": "Create lock_version column",
        "matches": {
          "tcl": true
        },
        "opts": {}
      },
      {
        "content": "t.references :${1:taggable}${2:, polymorphic: ${3:{ default: '${4:Photo}' }}}\n$0",
        "doc": null,
        "grammar": "snu",
        "label": "Create references column",
        "matches": {
          "tcr": true
        },
        "opts": {}
      },
      {
        "content": "t.string :${1:title}\n$0",
        "doc": null,
        "grammar": "snu",
        "label": "Create string column",
        "matches": {
          "tcs": true
        },
        "opts": {}
      },
      {
        "content": "t.text :${1:title}\n$0",
        "doc": null,
        "grammar": "snu",
        "label": "Create text column",
        "matches": {
          "tct": true
        },
        "opts": {}
      },
      {
        "content": "t.time :${1:title}\n$0",
        "doc": null,
        "grammar": "snu",
        "label": "Create time column",
        "matches": {
          "tcti": true
        },
        "opts": {}
      },
      {
        "content": "t.timestamp :${1:title}\n$0",
        "doc": null,
        "grammar": "snu",
        "label": "Create timestamp column",
        "matches": {
          "tcts": true
        },
        "opts": {}
      },
      {
        "content": "t.timestamps\n$0",
        "doc": null,
        "grammar": "snu",
        "label": "Create timestamps columns",
        "matches": {
          "tctss": true
        },
        "opts": {}
      },
      {
        "content": "t.column ${1:title}, :${2:string}\n$0",
        "doc": null,
        "grammar": "snu",
        "label": "Migration Create Column (mcc)",
        "matches": {
          "mcol": true
        },
        "opts": {}
      },
      {
        "content": "t.column ${1:title}, :${2:string}\nmccc$0",
        "doc": null,
        "grammar": "snu",
        "label": "Migration Create Column Continue (mccc)",
        "matches": {
          "mccc": true
        },
        "opts": {}
      },
      {
        "content": "drop_table :${1:table}${2: [press tab twice to generate create_table]}",
        "doc": null,
        "grammar": "snu",
        "label": "Migration Drop Create Table (mdct)",
        "matches": {
          "mtab": true
        },
        "opts": {}
      },
      {
        "content": "remove_column :${1:table}, :${2:column}${3: [press tab twice to generate add_column]}",
        "doc": null,
        "grammar": "snu",
        "label": "Migration Remove and Add Column (mrac)",
        "matches": {
          "mcol": true
        },
        "opts": {}
      },
      {
        "content": "RAILS_DEFAULT_LOGGER.debug \"${1:message}\"$0",
        "doc": null,
        "grammar": "snu",
        "label": "RAILS_DEFAULT_LOGGER.debug (rdb)",
        "matches": {
          "rdb": true
        },
        "opts": {}
      },
      {
        "content": "t.rename(:${1:old_column_name}, :${2:new_column_name})\n$0",
        "doc": null,
        "grammar": "snu",
        "label": "Table column(s) rename",
        "matches": {
          "tre": true
        },
        "opts": {}
      },
      {
        "content": "assert_redirected_to ${2:action: \"${1:index}\"}",
        "doc": null,
        "grammar": "snu",
        "label": "Test Assert Redirected To (art)",
        "matches": {
          "art": true
        },
        "opts": {}
      },
      {
        "content": "assert_response :${1:success}, @response.body$0",
        "doc": null,
        "grammar": "snu",
        "label": "Test Assert Response (are)",
        "matches": {
          "asre": true
        },
        "opts": {}
      },
      {
        "content": "after_create $0",
        "doc": null,
        "grammar": "snu",
        "label": "after_create",
        "matches": {
          "aftc": true
        },
        "opts": {}
      },
      {
        "content": "after_destroy $0",
        "doc": null,
        "grammar": "snu",
        "label": "after_destroy",
        "matches": {
          "aftd": true
        },
        "opts": {}
      },
      {
        "content": "after_save $0",
        "doc": null,
        "grammar": "snu",
        "label": "after_save",
        "matches": {
          "afts": true
        },
        "opts": {}
      },
      {
        "content": "after_update $0",
        "doc": null,
        "grammar": "snu",
        "label": "after_update",
        "matches": {
          "aftu": true
        },
        "opts": {}
      },
      {
        "content": "after_validation $0",
        "doc": null,
        "grammar": "snu",
        "label": "after_validation",
        "matches": {
          "aftv": true
        },
        "opts": {}
      },
      {
        "content": "after_validation_on_create $0",
        "doc": null,
        "grammar": "snu",
        "label": "after_validation_on_create",
        "matches": {
          "aftvoc": true
        },
        "opts": {}
      },
      {
        "content": "after_validation_on_update $0",
        "doc": null,
        "grammar": "snu",
        "label": "after_validation_on_update",
        "matches": {
          "aftvou": true
        },
        "opts": {}
      },
      {
        "content": "assert(${1:var} = assigns(:$1), \"Cannot find @$1\")\n$0",
        "doc": null,
        "grammar": "snu",
        "label": "assert(var = assigns(:var))",
        "matches": {
          "asg": true
        },
        "opts": {}
      },
      {
        "content": "assert_difference \"${1:Model}.${2:count}\", ${3:1} do\n\t$0\nend",
        "doc": null,
        "grammar": "snu",
        "label": "assert_difference",
        "matches": {
          "asd": true
        },
        "opts": {}
      },
      {
        "content": "assert_no_difference \"${1:Model}.${2:count}\" do\n\t$0\nend",
        "doc": null,
        "grammar": "snu",
        "label": "assert_no_difference",
        "matches": {
          "asnd": true
        },
        "opts": {}
      },
      {
        "content": "assert_redirected_to ${10:${2:parent}_${3:child}_path(${4:@}${5:$2})}",
        "doc": null,
        "grammar": "snu",
        "label": "assert_redirected_to (nested path plural)",
        "matches": {
          "artnpp": true
        },
        "opts": {}
      },
      {
        "content": "assert_redirected_to ${2:${12:parent}_${13:child}_path(${14:@}${15:$12}, ${16:@}${17:$13})}",
        "doc": null,
        "grammar": "snu",
        "label": "assert_redirected_to (nested path)",
        "matches": {
          "artnp": true
        },
        "opts": {}
      },
      {
        "content": "assert_redirected_to ${10:${2:model}s_path}",
        "doc": null,
        "grammar": "snu",
        "label": "assert_redirected_to (path plural)",
        "matches": {
          "artpp": true
        },
        "opts": {}
      },
      {
        "content": "assert_redirected_to ${2:${12:model}_path(${13:@}${14:$12})}",
        "doc": null,
        "grammar": "snu",
        "label": "assert_redirected_to (path)",
        "matches": {
          "artp": true
        },
        "opts": {}
      },
      {
        "content": "assert_rjs :${1:replace}, ${2:\"${3:dom id}\"}",
        "doc": null,
        "grammar": "snu",
        "label": "assert_rjs",
        "matches": {
          "asrj": true
        },
        "opts": {}
      },
      {
        "content": "assert_select '${1:path}'${2:, ${3:text}: ${4:'${5:inner_html}'}}${6: do\n\t$0\nend}",
        "doc": null,
        "grammar": "snu",
        "label": "assert_select",
        "matches": {
          "ass": true
        },
        "opts": {}
      },
      {
        "content": "before_create $0",
        "doc": null,
        "grammar": "snu",
        "label": "before_create",
        "matches": {
          "befc": true
        },
        "opts": {}
      },
      {
        "content": "before_destroy $0",
        "doc": null,
        "grammar": "snu",
        "label": "before_destroy",
        "matches": {
          "befd": true
        },
        "opts": {}
      },
      {
        "content": "before_save $0",
        "doc": null,
        "grammar": "snu",
        "label": "before_save",
        "matches": {
          "befs": true
        },
        "opts": {}
      },
      {
        "content": "before_update $0",
        "doc": null,
        "grammar": "snu",
        "label": "before_update",
        "matches": {
          "befu": true
        },
        "opts": {}
      },
      {
        "content": "before_validation $0",
        "doc": null,
        "grammar": "snu",
        "label": "before_validation",
        "matches": {
          "befv": true
        },
        "opts": {}
      },
      {
        "content": "before_validation_on_create $0",
        "doc": null,
        "grammar": "snu",
        "label": "before_validation_on_create",
        "matches": {
          "befvoc": true
        },
        "opts": {}
      },
      {
        "content": "before_validation_on_update",
        "doc": null,
        "grammar": "snu",
        "label": "before_validation_on_update",
        "matches": {
          "befvou": true
        },
        "opts": {}
      },
      {
        "content": "cattr_accessor :${0:attr_names}",
        "doc": null,
        "grammar": "snu",
        "label": "cattr_accessor",
        "matches": {
          "crw": true
        },
        "opts": {}
      },
      {
        "content": "test \"${1:something interesting}\" do\n\t$0\nend",
        "doc": null,
        "grammar": "snu",
        "label": "test do..end",
        "matches": {
          "test": true
        },
        "opts": {}
      },
      {
        "content": "def test_should_get_${1:action}\n\t${2:@${3:model} = ${4:$3s}(:${5:fixture_name})\n\t}get :$1${6:, id: @$3.to_param}\n\tassert_response :success\n\t$0\nend",
        "doc": null,
        "grammar": "snu",
        "label": "def get request",
        "matches": {
          "deftg": true
        },
        "opts": {}
      },
      {
        "content": "def test_should_post_${1:action}\n\t${3:@$2 = ${4:$2s}(:${5:fixture_name})\n\t}post :$1${6:, id: @$2.to_param}, ${2:model}: { $0 }\n\tassert_response :redirect\n\nend",
        "doc": null,
        "grammar": "snu",
        "label": "def post request",
        "matches": {
          "deftp": true
        },
        "opts": {}
      },
      {
        "content": "find(:all${1:, conditions: ['${2:${3:field} = ?}', ${5:true}]})",
        "doc": null,
        "grammar": "snu",
        "label": "find(:all)",
        "matches": {
          "fina": true
        },
        "opts": {}
      },
      {
        "content": "find(:first${1:, conditions: ['${2:${3:field} = ?}', ${5:true}]})",
        "doc": null,
        "grammar": "snu",
        "label": "find(:first)",
        "matches": {
          "finf": true
        },
        "opts": {}
      },
      {
        "content": "find(${1:id})",
        "doc": null,
        "grammar": "snu",
        "label": "find(id)",
        "matches": {
          "fini": true
        },
        "opts": {}
      },
      {
        "content": "has_and_belongs_to_many :${1:object}${2:, join_table: \"${3:table_name}\", foreign_key: \"${4:$1_id}\"}",
        "doc": null,
        "grammar": "snu",
        "label": "has_and_belongs_to_many (habtm)",
        "matches": {
          "habtm": true
        },
        "opts": {}
      },
      {
        "content": "has_many :${1:object}s${2:, class_name: \"$1\", foreign_key: \"${4:reference}_id\"}",
        "doc": null,
        "grammar": "snu",
        "label": "has_many (hm)",
        "matches": {
          "hm": true
        },
        "opts": {}
      },
      {
        "content": "has_many :${1:objects}, through: :${2:join_association}${3:, source: :${4:$2_table_foreign_key_to_$1_table}}",
        "doc": null,
        "grammar": "snu",
        "label": "has_many (through)",
        "matches": {
          "hmt": true
        },
        "opts": {}
      },
      {
        "content": "has_many :${1:object}s${2:, class_name: \"$1\", foreign_key: \"${4:reference}_id\"}, dependent: :destroy$0",
        "doc": null,
        "grammar": "snu",
        "label": "has_many dependent: :destroy",
        "matches": {
          "hmd": true
        },
        "opts": {}
      },
      {
        "content": "${1:Rails.}logger.debug { \"${1:message}\" }$0",
        "doc": null,
        "grammar": "snu",
        "label": "logger.debug",
        "matches": {
          "logd": true
        },
        "opts": {}
      },
      {
        "content": "logger.error { \"${1:message}\" }$0",
        "doc": null,
        "grammar": "snu",
        "label": "logger.error",
        "matches": {
          "loge": true
        },
        "opts": {}
      },
      {
        "content": "logger.fatal { \"${1:message}\" }$0",
        "doc": null,
        "grammar": "snu",
        "label": "logger.fatal",
        "matches": {
          "logf": true
        },
        "opts": {}
      },
      {
        "content": "logger.info { \"${1:message}\" }$0",
        "doc": null,
        "grammar": "snu",
        "label": "logger.info",
        "matches": {
          "logi": true
        },
        "opts": {}
      },
      {
        "content": "logger.warn { \"${1:message}\" }$0",
        "doc": null,
        "grammar": "snu",
        "label": "logger.warn",
        "matches": {
          "logw": true
        },
        "opts": {}
      },
      {
        "content": "map(&:${1:id})",
        "doc": null,
        "grammar": "snu",
        "label": "map(&:sym_proc)",
        "matches": {
          "mp": true
        },
        "opts": {}
      },
      {
        "content": "${1:map}.catch_all \"*${2:anything}\", controller: \"${3:default}\", action: \"${4:error}\"\n",
        "doc": null,
        "grammar": "snu",
        "label": "map.catch_all",
        "matches": {
          "mapca": true
        },
        "opts": {}
      },
      {
        "content": "${1:map}.${2:connect} '${3::controller/:action/:id}'",
        "doc": null,
        "grammar": "snu",
        "label": "map.named_route",
        "matches": {
          "map": true
        },
        "opts": {}
      },
      {
        "content": "${1:map}.resource :${2:resource}${10: do |${11:$2}|\n\t$0\nend}",
        "doc": null,
        "grammar": "snu",
        "label": "map.resource",
        "matches": {
          "mapr": true
        },
        "opts": {}
      },
      {
        "content": "${1:map}.resources :${2:resource}${10: do |${11:$2}|\n\t$0\nend}",
        "doc": null,
        "grammar": "snu",
        "label": "map.resources",
        "matches": {
          "maprs": true
        },
        "opts": {}
      },
      {
        "content": "mattr_accessor :${0:attr_names}",
        "doc": null,
        "grammar": "snu",
        "label": "mattr_accessor",
        "matches": {
          "mrw": true
        },
        "opts": {}
      },
      {
        "content": "named_scope :name${1:, joins: :${2:table}}, conditions: ${3:['${4:${5:field} = ?}', ${6:true}]}\n",
        "doc": null,
        "grammar": "snu",
        "label": "named_scope",
        "matches": {
          "nc": true
        },
        "opts": {}
      },
      {
        "content": "default_scope ${1:order(${2:'${3:created_at DESC}'})}",
        "doc": null,
        "grammar": "snu",
        "label": "default_scope",
        "matches": {
          "dscope": true
        },
        "opts": {}
      },
      {
        "content": "flash[:${1:notice}] = \"${2:Successfully created...}\"$0",
        "doc": null,
        "grammar": "snu",
        "label": "flash[...]",
        "matches": {
          "flash": true
        },
        "opts": {}
      },
      {
        "content": "redirect_to action: \"${1:index}\"",
        "doc": null,
        "grammar": "snu",
        "label": "redirect_to (action)",
        "matches": {
          "rea": true
        },
        "opts": {}
      },
      {
        "content": "redirect_to action: \"${1:show}\", id: ${0:@item}",
        "doc": null,
        "grammar": "snu",
        "label": "redirect_to (action, id)",
        "matches": {
          "reai": true
        },
        "opts": {}
      },
      {
        "content": "redirect_to controller: \"${1:items}\"",
        "doc": null,
        "grammar": "snu",
        "label": "redirect_to (controller)",
        "matches": {
          "rec": true
        },
        "opts": {}
      },
      {
        "content": "redirect_to controller: \"${1:items}\", action: \"${2:list}\"",
        "doc": null,
        "grammar": "snu",
        "label": "redirect_to (controller, action)",
        "matches": {
          "reca": true
        },
        "opts": {}
      },
      {
        "content": "redirect_to controller: \"${1:items}\", action: \"${2:show}\", id: ${0:@item}",
        "doc": null,
        "grammar": "snu",
        "label": "redirect_to (controller, action, id)",
        "matches": {
          "recai": true
        },
        "opts": {}
      },
      {
        "content": "redirect_to(${2:${10:parent}_${11:child}_path(${12:@}${13:$10})})",
        "doc": null,
        "grammar": "snu",
        "label": "redirect_to (nested path plural)",
        "matches": {
          "renpp": true
        },
        "opts": {}
      },
      {
        "content": "redirect_to(${2:${12:parent}_${13:child}_path(${14:@}${15:$12}, ${16:@}${17:$13})})",
        "doc": null,
        "grammar": "snu",
        "label": "redirect_to (nested path)",
        "matches": {
          "renp": true
        },
        "opts": {}
      },
      {
        "content": "redirect_to(${2:${10:model}s_path})",
        "doc": null,
        "grammar": "snu",
        "label": "redirect_to (path plural)",
        "matches": {
          "repp": true
        },
        "opts": {}
      },
      {
        "content": "redirect_to(${2:${12:model}_path(${13:@}${14:$12})})",
        "doc": null,
        "grammar": "snu",
        "label": "redirect_to (path)",
        "matches": {
          "rep": true
        },
        "opts": {}
      },
      {
        "content": "redirect_to :back",
        "doc": null,
        "grammar": "snu",
        "label": "redirect_to :back",
        "matches": {
          "reb": true
        },
        "opts": {}
      },
      {
        "content": "render action: \"${1:action}\"",
        "doc": null,
        "grammar": "snu",
        "label": "render (action)... (ra)",
        "matches": {
          "ra": true
        },
        "opts": {}
      },
      {
        "content": "render action: \"${1:action}\", layout: \"${2:layoutname}\"",
        "doc": null,
        "grammar": "snu",
        "label": "render (action,layout) (ral)",
        "matches": {
          "ral": true
        },
        "opts": {}
      },
      {
        "content": "render file: \"${1:filepath}\"",
        "doc": null,
        "grammar": "snu",
        "label": "render (file) (rf)",
        "matches": {
          "rf": true
        },
        "opts": {}
      },
      {
        "content": "render file: \"${1:filepath}\", use_full_path: ${2:false}",
        "doc": null,
        "grammar": "snu",
        "label": "render (file,use_full_path) (rfu)",
        "matches": {
          "rfu": true
        },
        "opts": {}
      },
      {
        "content": "render inline: \"${1:<%= 'hello' %>}\"",
        "doc": null,
        "grammar": "snu",
        "label": "render (inline) (ri)",
        "matches": {
          "ri": true
        },
        "opts": {}
      },
      {
        "content": "render inline: \"${1:<%= 'hello' %>}\", locals { ${2::name}: \"${3:value}\"$4 }",
        "doc": null,
        "grammar": "snu",
        "label": "render (inline,locals) (ril)",
        "matches": {
          "ril": true
        },
        "opts": {}
      },
      {
        "content": "render inline: \"${1:<%= 'hello' %>}\", type: ${2::rjson}",
        "doc": null,
        "grammar": "snu",
        "label": "render (inline,type) (rit)",
        "matches": {
          "rit": true
        },
        "opts": {}
      },
      {
        "content": "render layout: \"${1:layoutname}\"",
        "doc": null,
        "grammar": "snu",
        "label": "render (layout) (rl)",
        "matches": {
          "rl": true
        },
        "opts": {}
      },
      {
        "content": "render nothing: ${1:true}",
        "doc": null,
        "grammar": "snu",
        "label": "render (nothing) (rn)",
        "matches": {
          "rn": true
        },
        "opts": {}
      },
      {
        "content": "render nothing: ${1:true}, status: ${2:401}",
        "doc": null,
        "grammar": "snu",
        "label": "render (nothing,status) (rns)",
        "matches": {
          "rns": true
        },
        "opts": {}
      },
      {
        "content": "render text: \"${1:text to render...}\"",
        "doc": null,
        "grammar": "snu",
        "label": "render (text) (rt)",
        "matches": {
          "rt": true
        },
        "opts": {}
      },
      {
        "content": "render text: \"${1:text to render...}\", layout: \"${2:layoutname}\"",
        "doc": null,
        "grammar": "snu",
        "label": "render (text,layout) (rtl)",
        "matches": {
          "rtl": true
        },
        "opts": {}
      },
      {
        "content": "render text: \"${1:text to render...}\", layout: ${2:true}",
        "doc": null,
        "grammar": "snu",
        "label": "render (text,layout => true) (rtlt)",
        "matches": {
          "rtlt": true
        },
        "opts": {}
      },
      {
        "content": "render text: \"${1:text to render...}\", status: ${2:401}",
        "doc": null,
        "grammar": "snu",
        "label": "render (text,status) (rts)",
        "matches": {
          "rts": true
        },
        "opts": {}
      },
      {
        "content": "render :update do |${2:page}|\n\t$2.$0\nend",
        "doc": null,
        "grammar": "snu",
        "label": "render (update)",
        "matches": {
          "ru": true
        },
        "opts": {}
      },
      {
        "content": "respond_to do |wants|\n\twants.${1:html}${2: { $0 }}\nend",
        "doc": null,
        "grammar": "snu",
        "label": "respond_to",
        "matches": {
          "rest": true
        },
        "opts": {}
      },
      {
        "content": "t.binary :${1:title}${2:, limit: ${3:2}.megabytes}\nt.$0",
        "doc": null,
        "grammar": "snu",
        "label": "t.binary (tcbi)",
        "matches": {
          "t.": true
        },
        "opts": {}
      },
      {
        "content": "t.boolean :${1:title}\nt.$0",
        "doc": null,
        "grammar": "snu",
        "label": "t.boolean (tcb)",
        "matches": {
          "t.": true
        },
        "opts": {}
      },
      {
        "content": "t.date :${1:title}\nt.$0",
        "doc": null,
        "grammar": "snu",
        "label": "t.date (tcda)",
        "matches": {
          "t.": true
        },
        "opts": {}
      },
      {
        "content": "t.datetime :${1:title}\nt.$0",
        "doc": null,
        "grammar": "snu",
        "label": "t.datetime (tcdt)",
        "matches": {
          "t.": true
        },
        "opts": {}
      },
      {
        "content": "t.decimal :${1:title}${2:${3:, precision: ${4:10}}${5:, scale: ${6:2}}}\nt.$0",
        "doc": null,
        "grammar": "snu",
        "label": "t.decimal (tcd)",
        "matches": {
          "t.": true
        },
        "opts": {}
      },
      {
        "content": "t.float :${1:title}\nt.$0",
        "doc": null,
        "grammar": "snu",
        "label": "t.float (tcf)",
        "matches": {
          "t.": true
        },
        "opts": {}
      },
      {
        "content": "t.integer :${1:title}\nt.$0",
        "doc": null,
        "grammar": "snu",
        "label": "t.integer (tci)",
        "matches": {
          "t.": true
        },
        "opts": {}
      },
      {
        "content": "t.integer :lock_version, null: false, default: 0\nt.$0",
        "doc": null,
        "grammar": "snu",
        "label": "t.lock_version (tcl)",
        "matches": {
          "t.": true
        },
        "opts": {}
      },
      {
        "content": "t.references :${1:taggable}${2:, polymorphic: ${3:{ default: '${4:Photo}' }}}\nt.$0",
        "doc": null,
        "grammar": "snu",
        "label": "t.references (tcr)",
        "matches": {
          "t.": true
        },
        "opts": {}
      },
      {
        "content": "t.rename(:${1:old_column_name}, :${2:new_column_name})\nt.$0",
        "doc": null,
        "grammar": "snu",
        "label": "t.rename (tre)",
        "matches": {
          "t.": true
        },
        "opts": {}
      },
      {
        "content": "t.string :${1:title}\nt.$0",
        "doc": null,
        "grammar": "snu",
        "label": "t.string (tcs)",
        "matches": {
          "t.": true
        },
        "opts": {}
      },
      {
        "content": "t.text :${1:title}\nt.$0",
        "doc": null,
        "grammar": "snu",
        "label": "t.text (tct)",
        "matches": {
          "t.": true
        },
        "opts": {}
      },
      {
        "content": "t.time :${1:title}\nt.$0",
        "doc": null,
        "grammar": "snu",
        "label": "t.time (tcti)",
        "matches": {
          "t.": true
        },
        "opts": {}
      },
      {
        "content": "t.timestamp :${1:title}\nt.$0",
        "doc": null,
        "grammar": "snu",
        "label": "t.timestamp (tcts)",
        "matches": {
          "t.": true
        },
        "opts": {}
      },
      {
        "content": "t.timestamps\nt.$0",
        "doc": null,
        "grammar": "snu",
        "label": "t.timestamps (tctss)",
        "matches": {
          "t.": true
        },
        "opts": {}
      },
      {
        "content": "validates_acceptance_of :${1:terms}${2:${3:, accept: \"${4:1}\"}${5:, message: \"${6:You must accept the terms of service}\"}}, if: proc { |obj| ${7:obj.condition?} }}",
        "doc": null,
        "grammar": "snu",
        "label": "validates_acceptance_of if",
        "matches": {
          "vaoif": true
        },
        "opts": {}
      },
      {
        "content": "validates :${1:terms}${2:, acceptance: ${3:{ accept: \"${4:1}\"${5:, message: \"${6:You must accept the terms of service}\"}}} }",
        "doc": null,
        "grammar": "snu",
        "label": "validates_acceptance_of",
        "matches": {
          "vao": true
        },
        "opts": {}
      },
      {
        "content": "validates_associated :${1:attribute}${2:, on: :${3:create}}",
        "doc": null,
        "grammar": "snu",
        "label": "validates_associated (va)",
        "matches": {
          "va": true
        },
        "opts": {}
      },
      {
        "content": "validates_associated :${1:attribute}${2:, on: :${3:create}, if: proc { |obj| ${5:obj.condition?} }}",
        "doc": null,
        "grammar": "snu",
        "label": "validates_associated if (vaif)",
        "matches": {
          "vaif": true
        },
        "opts": {}
      },
      {
        "content": "validates_confirmation_of :${1:attribute}${2:, on: :${3:create}, message: \"${4:should match confirmation}\"}",
        "doc": null,
        "grammar": "snu",
        "label": "validates_confirmation_of (vc)",
        "matches": {
          "vc": true
        },
        "opts": {}
      },
      {
        "content": "validates_confirmation_of :${1:attribute}${2:, on: :${3:create}, message: \"${4:should match confirmation}\", if: proc { |obj| ${5:obj.condition?} }}",
        "doc": null,
        "grammar": "snu",
        "label": "validates_confirmation_of if (vcif)",
        "matches": {
          "vcif": true
        },
        "opts": {}
      },
      {
        "content": "validates_exclusion_of :${1:attribute}${2:, in: ${3:%w( ${4:mov avi} )}, on: :${5:create}, message: \"${6:extension %s is not allowed}\"}",
        "doc": null,
        "grammar": "snu",
        "label": "validates_exclusion_of (ve)",
        "matches": {
          "ve": true
        },
        "opts": {}
      },
      {
        "content": "validates_exclusion_of :${1:attribute}${2:, in: ${3:%w( ${4:mov avi} )}, on: :${5:create}, message: \"${6:extension %s is not allowed}\"}, if: proc { |obj| ${7:obj.condition?} }}",
        "doc": null,
        "grammar": "snu",
        "label": "validates_exclusion_of if (veif)",
        "matches": {
          "veif": true
        },
        "opts": {}
      },
      {
        "content": "validates_format_of :${1:attribute}, with: /${2:^[${3:\\w\\d}]+\\$}/${4:, on: :${5:create}, message: \"${6:is invalid}\"}, if: proc { |obj| ${7:obj.condition?} }}",
        "doc": null,
        "grammar": "snu",
        "label": "validates_format_of if",
        "matches": {
          "vfif": true
        },
        "opts": {}
      },
      {
        "content": "validates_format_of :${1:attribute}, with: /${2:^[${3:\\w\\d}]+\\$}/${4:, on: :${5:create}, message: \"${6:is invalid}\"}",
        "doc": null,
        "grammar": "snu",
        "label": "validates_format_of",
        "matches": {
          "vf": true
        },
        "opts": {}
      },
      {
        "content": "validates_inclusion_of :${1:attribute}${2:, in: ${3:%w( ${4:mov avi} )}, on: :${5:create}, message: \"${6:extension %s is not included in the list}\"}, if: proc { |obj| ${7:obj.condition?} }}",
        "doc": null,
        "grammar": "snu",
        "label": "validates_inclusion_of if",
        "matches": {
          "viif": true
        },
        "opts": {}
      },
      {
        "content": "validates_inclusion_of :${1:attribute}${2:, in: ${3:%w( ${4:mov avi} )}, on: :${5:create}, message: \"${6:extension %s is not included in the list}\"}",
        "doc": null,
        "grammar": "snu",
        "label": "validates_inclusion_of",
        "matches": {
          "vi": true
        },
        "opts": {}
      },
      {
        "content": "validates_length_of :${1:attribute}, within: ${2:3..20}${3:, on: :${4:create}, message: \"${5:must be present}\"}",
        "doc": null,
        "grammar": "snu",
        "label": "validates_length_of (vl)",
        "matches": {
          "vl": true
        },
        "opts": {}
      },
      {
        "content": "validates_length_of :${1:attribute}, within: ${2:3..20}${3:, on: :${4:create}, message: \"${5:must be present}\"}, if: proc { |obj| ${6:obj.condition?} }}",
        "doc": null,
        "grammar": "snu",
        "label": "validates_length_of if",
        "matches": {
          "vlif": true
        },
        "opts": {}
      },
      {
        "content": "validates_numericality_of :${1:attribute}${2:, on: :${3:create}, message: \"${4:is not a number}\"}, if: proc { |obj| ${5:obj.condition?} }}",
        "doc": null,
        "grammar": "snu",
        "label": "validates_numericality_of if",
        "matches": {
          "vnif": true
        },
        "opts": {}
      },
      {
        "content": "validates_numericality_of :${1:attribute}${2:, on: :${3:create}, message: \"${4:is not a number}\"}",
        "doc": null,
        "grammar": "snu",
        "label": "validates_numericality_of",
        "matches": {
          "vn": true
        },
        "opts": {}
      },
      {
        "content": "validates_presence_of :${1:attribute}${2:, on: :${3:create}, message: \"${4:can't be blank}\"}",
        "doc": null,
        "grammar": "snu",
        "label": "validates_presence_of (vp)",
        "matches": {
          "vp": true
        },
        "opts": {}
      },
      {
        "content": "validates_presence_of :${1:attribute}${2:, on: :${3:create}, message: \"${4:can't be blank}\"}, if: proc { |obj| ${5:obj.condition?} }}",
        "doc": null,
        "grammar": "snu",
        "label": "validates_presence_of if (vpif) 2",
        "matches": {
          "vpif": true
        },
        "opts": {}
      },
      {
        "content": "validates_uniqueness_of :${1:attribute}${2:, on: :${3:create}, message: \"${4:must be unique}\"}",
        "doc": null,
        "grammar": "snu",
        "label": "validates_uniqueness_of (vu)",
        "matches": {
          "vu": true
        },
        "opts": {}
      },
      {
        "content": "validates_uniqueness_of :${1:attribute}${2:, on: :${3:create}, message: \"${4:must be unique}\", if: proc { |obj| ${6:obj.condition?} }}",
        "doc": null,
        "grammar": "snu",
        "label": "validates_uniqueness_of if (vuif)",
        "matches": {
          "vuif": true
        },
        "opts": {}
      },
      {
        "content": "verify only: [:$1], method: :post, render {:status: 500, text: \"use HTTP-POST\"}\n",
        "doc": null,
        "grammar": "snu",
        "label": "verify -- render",
        "matches": {
          "verify": true
        },
        "opts": {}
      },
      {
        "content": "verify only: [:$1], session: :user, params: :id, redirect_to {:action: '${2:index}'}\n",
        "doc": null,
        "grammar": "snu",
        "label": "verify -- redirect",
        "matches": {
          "verify": true
        },
        "opts": {}
      },
      {
        "content": "wants.${1:js|json|html}${2: { $0 }}",
        "doc": null,
        "grammar": "snu",
        "label": "wants_format",
        "matches": {
          "wants": true
        },
        "opts": {}
      },
      {
        "content": "xhr :delete, :${1:destroy}, id: ${2:1}$0",
        "doc": null,
        "grammar": "snu",
        "label": "xhr delete",
        "matches": {
          "xdelete": true
        },
        "opts": {}
      },
      {
        "content": "xhr :get, :${1:show}${2:, id: ${3:1}}$0",
        "doc": null,
        "grammar": "snu",
        "label": "xhr get",
        "matches": {
          "xget": true
        },
        "opts": {}
      },
      {
        "content": "xhr :post, :${1:create}, ${2:object}: { $3 }",
        "doc": null,
        "grammar": "snu",
        "label": "xhr post",
        "matches": {
          "xpost": true
        },
        "opts": {}
      },
      {
        "content": "xhr :put, :${1:update}, id: ${2:1}, ${3:object}: { $4 }$0",
        "doc": null,
        "grammar": "snu",
        "label": "xhr put",
        "matches": {
          "xput": true
        },
        "opts": {}
      },
      {
        "content": "collection do\n\t${1:get :${2:action}}\n\t${3:put :${4:action}}\n\t${5:post :${6:action}}\n\t${7:delete :${8:action}}\nend",
        "doc": null,
        "grammar": "snu",
        "label": "collection routes",
        "matches": {
          "col": true
        },
        "opts": {}
      },
      {
        "content": "format.${1:html|xml|json|js|any} { $0 }",
        "doc": null,
        "grammar": "snu",
        "label": "format (respond_with)",
        "matches": {
          "format": true
        },
        "opts": {}
      },
      {
        "content": "gem '${1:name}'${2:${3:, \"${4:1.0}\"}${5:${6:, require: ${7:\"${8:$1}\"}}${9:, group: :${10:test}}}}",
        "doc": null,
        "grammar": "snu",
        "label": "gem",
        "matches": {
          "gem": true
        },
        "opts": {}
      },
      {
        "content": "gem '${1:paperclip}', git: \"${2:git://github.com/thoughtbot/paperclip.git}\"${3:, branch: \"${4:rails3}\"}",
        "doc": null,
        "grammar": "snu",
        "label": "gem :git",
        "matches": {
          "gemg": true
        },
        "opts": {}
      },
      {
        "content": "match '${1:${2::controller}${3:/${4::action}${5:/${6::id}${7:(.:format)}}}}'${8: '${9:$2}#${10:$4}'${11:, as: :${12:$10}}}",
        "doc": null,
        "grammar": "snu",
        "label": "match",
        "matches": {
          "match": true
        },
        "opts": {}
      },
      {
        "content": "member do\n\t${1:get :${2:action}}\n\t${3:put :${4:action}}\n\t${5:post :${6:action}}\n\t${7:delete :${8:action}}\nend",
        "doc": null,
        "grammar": "snu",
        "label": "member routes",
        "matches": {
          "member": true
        },
        "opts": {}
      },
      {
        "content": "resources :${1:posts}${2: do\n\t$3\nend}",
        "doc": null,
        "grammar": "snu",
        "label": "resources",
        "matches": {
          "res": true
        },
        "opts": {}
      },
      {
        "content": "scope :${1:name}, { ${2:joins(:${3:table}).}where(${4:'${5:$3.${6:field}} = ?', ${7:'${8:value}'}}) }",
        "doc": null,
        "grammar": "snu",
        "label": "scope",
        "matches": {
          "scope": true
        },
        "opts": {}
      },
      {
        "content": "scope :${1:name}, lambda { |${2:param}| ${3:where(${4::${5:field}: ${6:\"${7:value}\"}})} }",
        "doc": null,
        "grammar": "snu",
        "label": "scope lambda",
        "matches": {
          "scopel": true
        },
        "opts": {}
      },
      {
        "content": "scope :${1:name}, { ${2:where(${3::${4:field}: ${5:'${6:value}'}})} } do\n\tdef ${7:method_name}\n\t\t$0\n\tend\nend",
        "doc": null,
        "grammar": "snu",
        "label": "scope with extension",
        "matches": {
          "scopee": true
        },
        "opts": {}
      },
      {
        "content": "scoped_by_${1:attribute}(${2:id})",
        "doc": null,
        "grammar": "snu",
        "label": "scoped_by",
        "matches": {
          "sb": true
        },
        "opts": {}
      },
      {
        "content": "setup do\n\t$0\nend",
        "doc": null,
        "grammar": "snu",
        "label": "setup do..end",
        "matches": {
          "setup": true
        },
        "opts": {}
      }
    ],
    "react": [
      {
        "content": "import React from 'react'\n",
        "doc": "import React",
        "grammar": "lsp",
        "label": "import-react",
        "matches": {
          "imr": true,
          "react import": true
        },
        "opts": {}
      },
      {
        "content": "import React, { Component } from 'react'\n",
        "doc": "",
        "grammar": "lsp",
        "label": "import-react-component",
        "matches": {
          "imrc": true,
          "react import component": true
        },
        "opts": {}
      },
      {
        "content": "import React, { Component } from 'react'\nimport PropTypes from 'prop-types'\n",
        "doc": null,
        "grammar": "lsp",
        "label": "import-react-component-prop-types",
        "matches": {
          "imrcp": true,
          "react import component proptypes": true
        },
        "opts": {}
      },
      {
        "content": "import React, { PureComponent } from 'react'\n",
        "doc": null,
        "grammar": "lsp",
        "label": "import-react-purecomponent",
        "matches": {
          "imrpc": true,
          "react import purecomponent": true
        },
        "opts": {}
      },
      {
        "content": "import React, { PureComponent } from 'react'\nimport PropTypes from 'prop-types'\n",
        "doc": null,
        "grammar": "lsp",
        "label": "import-react-pure-component-prop-types",
        "matches": {
          "imrpcp": true,
          "react import purecomponent proptypes": true
        },
        "opts": {}
      },
      {
        "content": "import React, { memo } from 'react'\n",
        "doc": null,
        "grammar": "lsp",
        "label": "import-react-memo",
        "matches": {
          "imrm": true,
          "react import memo": true
        },
        "opts": {}
      },
      {
        "content": "import React, { memo } from 'react'\nimport PropTypes from 'prop-types'\n",
        "doc": null,
        "grammar": "lsp",
        "label": "import-react-memo-prop-types",
        "matches": {
          "imrmp": true,
          "react import memo proptypes": true
        },
        "opts": {}
      },
      {
        "content": "import React, { useState } from 'react'\n",
        "doc": null,
        "grammar": "lsp",
        "label": "import-react-usestate",
        "matches": {
          "imrs": true,
          "react import usestate": true
        },
        "opts": {}
      },
      {
        "content": "import React, { useState, useEffect } from 'react'\n",
        "doc": null,
        "grammar": "lsp",
        "label": "import-react-usestate-useeffect",
        "matches": {
          "imrse": true,
          "react import usestate useeffect": true
        },
        "opts": {}
      },
      {
        "content": "constructor(props) {\n\tsuper(props)\n\n\tthis.state = {\n\t\t $0\n\t}\n}\n",
        "doc": "Adds a default constructor for it('', () => {})the class that contains props as arguments",
        "grammar": "lsp",
        "label": "react-class-constructor",
        "matches": {
          "rconst": true,
          "react class constructor": true
        },
        "opts": {}
      },
      {
        "content": "state = {\n\t$1\n}\n",
        "doc": "Creates empty state object. To be used in a constructor.",
        "grammar": "lsp",
        "label": "react-empty-state",
        "matches": {
          "est": true,
          "react empty state": true
        },
        "opts": {}
      },
      {
        "content": "componentWillMount() {\n\t$0\n}\n",
        "doc": "DEPRECATED!!!. Invoked once, both on the client and server, immediately before the initial rendering occurs",
        "grammar": "lsp",
        "label": "react-componentwillmount",
        "matches": {
          "cwm": true,
          "react componentwillmount": true
        },
        "opts": {}
      },
      {
        "content": "componentDidMount() {\n\t$0\n}\n",
        "doc": "Invoked once, only on the client (not on the server), immediately after the initial rendering occurs.",
        "grammar": "lsp",
        "label": "react-componentdidmount",
        "matches": {
          "cdm": true,
          "react componentdidmount": true
        },
        "opts": {}
      },
      {
        "content": "componentWillReceiveProps(nextProps) {\n\t$0\n}\n",
        "doc": "DEPRECATED!!!. Invoked when a component is receiving new props. This method is not called for the initial render.",
        "grammar": "lsp",
        "label": "react-componentwillreceiveprops",
        "matches": {
          "cwr": true,
          "react componentwillreceiveprops": true
        },
        "opts": {}
      },
      {
        "content": "shouldComponentUpdate(nextProps, nextState) {\n\t$0\n}\n",
        "doc": "Invoked before rendering when new props or state are being received. ",
        "grammar": "lsp",
        "label": "react-shouldcomponentupdate",
        "matches": {
          "react shouldcomponentupdate": true,
          "scu": true
        },
        "opts": {}
      },
      {
        "content": "componentWillUpdate(nextProps, nextState) {\n\t$0\n}\n",
        "doc": "DEPRECATED!!!. Invoked immediately before rendering when new props or state are being received.",
        "grammar": "lsp",
        "label": "react-componentwillupdate",
        "matches": {
          "cwup": true,
          "react componentwillupdate": true
        },
        "opts": {}
      },
      {
        "content": "componentDidUpdate(prevProps, prevState) {\n\t$0\n}\n",
        "doc": "Invoked immediately after the component's updates are flushed to the DOM.",
        "grammar": "lsp",
        "label": "react-componentdidupdate",
        "matches": {
          "cdup": true,
          "react componentdidupdate": true
        },
        "opts": {}
      },
      {
        "content": "componentWillUnmount() {\n\t$0\n}\n",
        "doc": "Invoked immediately before a component is unmounted from the DOM.",
        "grammar": "lsp",
        "label": "react-componentwillunmount",
        "matches": {
          "cwun": true,
          "react componentwillunmount": true
        },
        "opts": {}
      },
      {
        "content": "static getDerivedStateFromProps(props, state) {\n\t${1}\n}",
        "doc": "Invoked right before calling the render method, both on the initial mount and on subsequent updates.",
        "grammar": "lsp",
        "label": "react-getderivedstatefromprops",
        "matches": {
          "gdsfp": true,
          "react getderivedstatefromprops": true
        },
        "opts": {}
      },
      {
        "content": "getSnapshotBeforeUpdate = (prevProps, prevState) => {\n\t$0\n}\n",
        "doc": "Called right before mutations are made (e.g. before the DOM is updated)",
        "grammar": "lsp",
        "label": "react-getsnapshotbeforeupdate",
        "matches": {
          "gsbu": true,
          "react getsnapshotbeforeupdate": true
        },
        "opts": {}
      },
      {
        "content": "render() {\n\treturn (\n\t\t<div>\n\t\t\t$0\n\t\t</div>\n\t)\n}",
        "doc": "Basic render.",
        "grammar": "lsp",
        "label": "react-component-render",
        "matches": {
          "react component render": true,
          "ren": true
        },
        "opts": {}
      },
      {
        "content": "const ${1:contextName} = React.createContext()\n",
        "doc": "Create React context",
        "grammar": "lsp",
        "label": "react-createcontext",
        "matches": {
          "rcontext": true,
          "react createcontext": true
        },
        "opts": {}
      },
      {
        "content": "this.${1:refName}Ref = React.createRef()\n",
        "doc": "Create ref statement used inside constructor",
        "grammar": "lsp",
        "label": "react-createref",
        "matches": {
          "cref": true,
          "react createref": true
        },
        "opts": {}
      },
      {
        "content": "const ref = React.createRef()\n",
        "doc": "Forward ref statement used inside component",
        "grammar": "lsp",
        "label": "react-forwardref",
        "matches": {
          "fref": true,
          "react forwardref": true
        },
        "opts": {}
      },
      {
        "content": "this.setState({$0})",
        "doc": "Performs a shallow merge of nextState into current state",
        "grammar": "lsp",
        "label": "react-component-set-state-object",
        "matches": {
          "react componentsetstateobject": true,
          "sst": true
        },
        "opts": {}
      },
      {
        "content": "this.setState((state, props) => { return { $0 }})\n",
        "doc": "Performs a shallow merge of nextState into current state",
        "grammar": "lsp",
        "label": "react-component-set-state-func",
        "matches": {
          "react component setstate func": true,
          "ssf": true
        },
        "opts": {}
      },
      {
        "content": "this.props.$0",
        "doc": "Access component's props",
        "grammar": "lsp",
        "label": "react-component-props",
        "matches": {
          "props": true,
          "react component props": true
        },
        "opts": {}
      },
      {
        "content": "this.state.$0",
        "doc": null,
        "grammar": "lsp",
        "label": "react-component-state",
        "matches": {
          "react component state": true,
          "state": true
        },
        "opts": {}
      },
      {
        "content": "this.${1:methodName} = this.${1:methodName}.bind(this)$0",
        "doc": "Binds this to a method",
        "grammar": "lsp",
        "label": "react-bind-this",
        "matches": {
          "bnd": true,
          "react bind this": true
        },
        "opts": {}
      },
      {
        "content": "import React from 'react'\nimport PropTypes from 'prop-types'\n\nexport default (WrappedComponent) => {\n\tconst hocComponent = ({ ...props }) => <WrappedComponent {...props} />\n\n\thocComponent.propTypes = {\n\t}\n\n\treturn hocComponent\n}\n",
        "doc": null,
        "grammar": "lsp",
        "label": "react-hoc",
        "matches": {
          "hoc": true,
          "react hoc": true
        },
        "opts": {}
      },
      {
        "content": "useEffect(() => {\n\t${1:effect}\n\treturn () => {\n\t\t${2:cleanup}\n\t};\n}, [${3:input}])",
        "doc": null,
        "grammar": "lsp",
        "label": "react-useeffect",
        "matches": {
          "react useeffect": true,
          "useeffect": true
        },
        "opts": {}
      },
      {
        "content": "const ${1:context} = useContext(${2:contextValue})",
        "doc": null,
        "grammar": "lsp",
        "label": "react-usecontext",
        "matches": {
          "react usecontext": true,
          "usecontext": true
        },
        "opts": {}
      },
      {
        "content": "useCallback(\n\t() => {\n\t\t${1:callback}\n\t},\n\t[${2:input}],\n)",
        "doc": null,
        "grammar": "lsp",
        "label": "react-usecallback",
        "matches": {
          "react usecallback": true,
          "usecallback": true
        },
        "opts": {}
      },
      {
        "content": "useMemo(() => ${1:function}, ${2:input})",
        "doc": null,
        "grammar": "lsp",
        "label": "react-usememo",
        "matches": {
          "react usememo": true,
          "usememo": true
        },
        "opts": {}
      },
      {
        "content": "const ${1:ref} = useRef(${2:initialValue})",
        "doc": null,
        "grammar": "lsp",
        "label": "react-useref",
        "matches": {
          "react useref": true,
          "useref": true
        },
        "opts": {}
      },
      {
        "content": "useImperativeHandle(\n\t${1:ref},\n\t() => {\n\t\t${2:handler}\n\t},\n\t[${3:input}],\n)",
        "doc": null,
        "grammar": "lsp",
        "label": "react-useimperativehandle",
        "matches": {
          "react useimperativehandle": true,
          "useimperativehandle": true
        },
        "opts": {}
      },
      {
        "content": "useDebugValue(${1:value})",
        "doc": null,
        "grammar": "lsp",
        "label": "react-usedebugvalue",
        "matches": {
          "react usedebugvalue": true,
          "usedebugvalue": true
        },
        "opts": {}
      },
      {
        "content": "useLayoutEffect(() => {\n\t${1:effect}\n\treturn () => {\n\t\t${2:cleanup}\n\t};\n}, [${3:input}])",
        "doc": null,
        "grammar": "lsp",
        "label": "react-uselayouteffect",
        "matches": {
          "react uselayouteffect": true,
          "uselayouteffect": true
        },
        "opts": {}
      }
    ],
    "react-helmet": [
      {
        "content": "import { Helmet } from 'react-helmet';",
        "doc": null,
        "grammar": "lsp",
        "label": "react-helmet-import",
        "matches": {
          "react-helmet import": true
        },
        "opts": {}
      },
      {
        "content": "<Helmet>\n  <title>${1:title}</title>\n</Helmet>",
        "doc": null,
        "grammar": "lsp",
        "label": "react-helmet-title",
        "matches": {
          "react-helmet title": true
        },
        "opts": {}
      },
      {
        "content": "<Helmet>\n${1:example}\n</Helmet>",
        "doc": null,
        "grammar": "lsp",
        "label": "react-helmet-component",
        "matches": {
          "react-helmet component": true
        },
        "opts": {}
      }
    ],
    "react-intersection-observer": [
      {
        "content": "const [ref, inView, entry] = useInView(options)",
        "doc": "The new React Hooks make it easier than ever to monitor the inView state of your components. Call the useInView hook with the (optional) options you need. It will return an array containing a ref, the inView status and the current IntersectionObserverEntry. Assign the ref to the DOM element you want to monitor, and the hook will report the status. \n\nOptions\nroot(type: Element, default: window, required: false)\nThe Element that is used as the viewport for checking visibility of the target. Defaults to the browser viewport (window) if not specified or if null.\n\nrootMargin(type: String, default: '0px', required: false)\nMargin around the root. Can have values similar to the CSS margin property.\n\nthreshold(type: Number, default: 0, required: false)\nNumber between 0 and 1 indicating the percentage that should be visible before triggering. Can also be an array of numbers, to create multiple trigger points.\n\ntriggerOnce(type: Boolean, default: false, required: false)\nOnly trigger this method once",
        "grammar": "lsp",
        "label": "react-intersection-observer-use-in-view",
        "matches": {
          "react-intersection-observer useinview": true,
          "rio useinview": true
        },
        "opts": {}
      },
      {
        "content": "import { useInView } from 'react-intersection-observer';",
        "doc": null,
        "grammar": "lsp",
        "label": "react-intersection-observer-import",
        "matches": {
          "react-intersection-observer import": true,
          "rio import": true
        },
        "opts": {}
      }
    ],
    "react-modal": [
      {
        "content": "import Modal from 'react-modal'",
        "doc": "import react-modal",
        "grammar": "lsp",
        "label": "react-modal-import",
        "matches": {
          "imrm": true,
          "react-modal import": true
        },
        "opts": {}
      }
    ],
    "reason": [
      {
        "content": "/*\n\t${0}\n */",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "doc": true
        },
        "opts": {}
      },
      {
        "content": "let ${1} = ${0};",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "let": true
        },
        "opts": {}
      },
      {
        "content": "let ${1} = (${2}) => {\n\t${0}\n};",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "fn": true
        },
        "opts": {}
      },
      {
        "content": "fun ${1} => ${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "fun": true
        },
        "opts": {}
      },
      {
        "content": "type ${1} = ${0};",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ty": true
        },
        "opts": {}
      },
      {
        "content": "module ${1} = {\n\t${0}\n};",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "mod": true
        },
        "opts": {}
      },
      {
        "content": "module type ${1} = {\n\t${0}\n};",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "modty": true
        },
        "opts": {}
      },
      {
        "content": "switch (${1}) {\n| ${2} => ${0}\n}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "sw": true
        },
        "opts": {}
      },
      {
        "content": "| ${1} => ${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "|": true
        },
        "opts": {}
      },
      {
        "content": "|> ${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "p": true
        },
        "opts": {}
      },
      {
        "content": "if (${1}) {\n\t${2}\n} else {\n\t${0}\n}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "if": true
        },
        "opts": {}
      }
    ],
    "redux": [
      {
        "content": "import { connect } from 'react-redux'\n",
        "doc": "Import connect from Redux",
        "grammar": "lsp",
        "label": "redux-import-connect",
        "matches": {
          "redux import connect": true
        },
        "opts": {}
      },
      {
        "content": "const mapStateToProps = (state) => ({\n\t${1}\n})\n\nconst mapDispatchToProps = {\n\t\n}\n",
        "doc": "Creates mapStateToProps function.",
        "grammar": "lsp",
        "label": "redux-map-to-props",
        "matches": {
          "redux map props": true
        },
        "opts": {}
      },
      {
        "content": "export const ${1:constantName} = '${1:constantName}'",
        "doc": null,
        "grammar": "lsp",
        "label": "redux-const",
        "matches": {
          "redux const": true,
          "rxconst": true
        },
        "opts": {}
      },
      {
        "content": "const initialState = {\n\n}\n\nexport default (state = initialState, { type, payload }) => {\n\tswitch (type) {\n\n\tcase ${1:typeName}:\n\t\treturn { ...state, ...payload }\n\n\tdefault:\n\t\treturn state\n\t}\n}\n",
        "doc": "Redux reducer template",
        "grammar": "lsp",
        "label": "redux-reducer",
        "matches": {
          "redux reducer": true,
          "rxreducer": true
        },
        "opts": {}
      },
      {
        "content": "const ${1:actionCreatorName} = ${2:payload} => {\n  return {\n    type: '${3:ACTION_TYPE}',\n    payload: ${2:payload},\n  };\n};",
        "doc": "Redux action template",
        "grammar": "lsp",
        "label": "redux-action",
        "matches": {
          "redux action": true,
          "rxaction": true
        },
        "opts": {}
      },
      {
        "content": "import { useSelector, useDispatch } from 'react-redux';",
        "doc": "Import Redux hooks (useSelector, useDispatch)",
        "grammar": "lsp",
        "label": "redux-import-hooks",
        "matches": {
          "irrh": true,
          "redux import hooks": true
        },
        "opts": {}
      },
      {
        "content": "const $1 = useSelector(state => state.$1);",
        "doc": "Redux useSelector() hook",
        "grammar": "lsp",
        "label": "redux-useselector",
        "matches": {
          "redux useselector": true,
          "uss": true
        },
        "opts": {}
      },
      {
        "content": "const dispatch = useDispatch();",
        "doc": "Redux useDispatch() hook",
        "grammar": "lsp",
        "label": "redux-usedispatch-hook",
        "matches": {
          "redux usedispatch": true,
          "rxusdh": true
        },
        "opts": {}
      },
      {
        "content": "const $1 = $2 => dispatch($3);",
        "doc": "Redux dispatch hook",
        "grammar": "lsp",
        "label": "redux-dispatch-hook",
        "matches": {
          "redux dispatch": true,
          "rxd": true
        },
        "opts": {}
      }
    ],
    "redux-thunk": [
      {
        "content": "import thunk from 'redux-thunk'",
        "doc": "Import thunk from redux-thunk",
        "grammar": "lsp",
        "label": "redux-thunk-import",
        "matches": {
          "redux-thunk import": true
        },
        "opts": {}
      },
      {
        "content": "import { createStore, applyMiddleware } from 'redux';\nimport thunk from 'redux-thunk';\nimport ${1:rootReducer} from '${1:./reducers/index}';\n\nconst store = createStore(\n  ${1:rootReducer},\n  applyMiddleware(thunk)\n);",
        "doc": "Create store with thunk template",
        "grammar": "lsp",
        "label": "redux-thunk-store",
        "matches": {
          "redux-thunk createstore": true
        },
        "opts": {}
      }
    ],
    "requirejs_coffee": [
      {
        "content": "define [\"${1:#dependencies1}\"], (${2:#dependencies2}) ->\n\t${0:TARGET}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "def": true
        },
        "opts": {}
      },
      {
        "content": "define \"${1:#name}\", [\"${2:#dependencies1}\"], (${3:#dependencies2}) ->\n\t${0:TARGET}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "defn": true
        },
        "opts": {}
      },
      {
        "content": "require [\"${1:#dependencies1}\"], (${2:#dependencies2}) ->\n\t${0:TARGET}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "reqjs": true
        },
        "opts": {}
      }
    ],
    "rmarkdown": [
      {
        "content": "**${1:${TM_SELECTED_TEXT}}**$0",
        "doc": "Insert bold text",
        "grammar": "lsp",
        "label": "Insert bold text",
        "matches": {
          "bold": true
        },
        "opts": {}
      },
      {
        "content": "*${1:${TM_SELECTED_TEXT}}*$0",
        "doc": "Insert italic text",
        "grammar": "lsp",
        "label": "Insert italic text",
        "matches": {
          "italic": true
        },
        "opts": {}
      },
      {
        "content": "> ${1:${TM_SELECTED_TEXT}}",
        "doc": "Insert quoted text",
        "grammar": "lsp",
        "label": "Insert quoted text",
        "matches": {
          "quote": true
        },
        "opts": {}
      },
      {
        "content": "`${1:${TM_SELECTED_TEXT}}`$0",
        "doc": "Insert code",
        "grammar": "lsp",
        "label": "Insert code",
        "matches": {
          "code": true
        },
        "opts": {}
      },
      {
        "content": "```${1:language}\n$0\n```",
        "doc": "Insert fenced code block",
        "grammar": "lsp",
        "label": "Insert fenced code block",
        "matches": {
          "fenced codeblock": true
        },
        "opts": {}
      },
      {
        "content": "# ${1:text}",
        "doc": "Insert heading",
        "grammar": "lsp",
        "label": "Insert heading",
        "matches": {
          "heading": true
        },
        "opts": {}
      },
      {
        "content": "- ${1:first}\n- ${2:second}\n- ${3:third}\n$0",
        "doc": "Insert unordered list",
        "grammar": "lsp",
        "label": "Insert unordered list",
        "matches": {
          "unordered list": true
        },
        "opts": {}
      },
      {
        "content": "1. ${1:first}\n2. ${2:second}\n3. ${3:third}\n$0",
        "doc": "Insert ordered list",
        "grammar": "lsp",
        "label": "Insert ordered list",
        "matches": {
          "ordered list": true
        },
        "opts": {}
      },
      {
        "content": "----------\n",
        "doc": "Insert horizontal rule",
        "grammar": "lsp",
        "label": "Insert horizontal rule",
        "matches": {
          "horizontal rule": true
        },
        "opts": {}
      },
      {
        "content": "[${1:text}](http://${2:link})$0",
        "doc": "Insert link",
        "grammar": "lsp",
        "label": "Insert link",
        "matches": {
          "link": true
        },
        "opts": {}
      },
      {
        "content": "![${1:alt}](http://${2:link})$0",
        "doc": "Insert image",
        "grammar": "lsp",
        "label": "Insert image",
        "matches": {
          "image": true
        },
        "opts": {}
      },
      {
        "content": "```{${1:language}}\n$0\n```",
        "doc": "Insert code chunk",
        "grammar": "lsp",
        "label": "Insert code chunk",
        "matches": {
          "code chunk": true
        },
        "opts": {}
      },
      {
        "content": "```{r}\n$0\n```",
        "doc": "Insert R code chunk",
        "grammar": "lsp",
        "label": "Insert R code chunk",
        "matches": {
          "r code chunk": true
        },
        "opts": {}
      }
    ],
    "rmd": [
      {
        "content": "${1:term}\n  ~  ${2:definition}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "::": true
        },
        "opts": {}
      },
      {
        "content": "[${1:link}](http://${2:url} \"${3:title}\")${4}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "[": true
        },
        "opts": {}
      },
      {
        "content": "[${1:id}]: http://${2:url} \"${3:title}\"",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "[:": true
        },
        "opts": {}
      },
      {
        "content": "[${1:link}](mailto:${2:email})${3}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "[@": true
        },
        "opts": {}
      },
      {
        "content": "[${1:id}]: mailto:${2:email} \"${3:title}\"",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "[:@": true
        },
        "opts": {}
      },
      {
        "content": "![${1:alt}](${2:url} \"${3:title}\")${4}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "![": true
        },
        "opts": {}
      },
      {
        "content": "![${1:id}]: ${2:url} \"${3:title}\"",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "![:": true
        },
        "opts": {}
      },
      {
        "content": "[^${1:id}]: ${2:note}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "[^:": true
        },
        "opts": {}
      },
      {
        "content": "require(${1:}, quietly = TRUE)",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "req": true
        },
        "opts": {}
      },
      {
        "content": "if ( ${1:condition} )\n{\n\t${2:}\n}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "if": true
        },
        "opts": {}
      },
      {
        "content": "else\n{\n\t${1:}\n}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "el": true
        },
        "opts": {}
      },
      {
        "content": "${1:funname} <- \t\t\t# ${2:}\n\tfunction\n(\n \t${3:}\n)\n{\n  ${4:}\n}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "fun": true
        },
        "opts": {}
      },
      {
        "content": "repeat{\n  ${2:}\n  if(${1:condition}) break\n}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "re": true
        },
        "opts": {}
      },
      {
        "content": "matrix(NA, nrow = ${1:}, ncol = ${2:})",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ma": true
        },
        "opts": {}
      },
      {
        "content": "data.frame(${1:}, header = TRUE)",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "df": true
        },
        "opts": {}
      },
      {
        "content": "args <- commandArgs(TRUE)\nif (length(args) == 0)\n    stop(\"Please give ${1:}!\")\nif (!all(file.exists(args)))\n     stop(\"Couln't find input files!\")",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "cmdarg": true
        },
        "opts": {}
      },
      {
        "content": "require('getopt', quietly = TRUE)\nopt_spec <- matrix(c(\n\t\t\t\t'help',     'h', 0, \"logical\", \t\"Getting help\",\n\t\t\t\t'file',     'f', 1, \"character\",\"File to process\"\n                ), ncol = 5, byrow = TRUE)\nopt <- getopt(spec = opt_spec)\nif ( !is.null(opt$help) || is.null(commandArgs()) )   {\n    cat(getopt(spec = opt_spec, usage = TRUE, command = \"yourCmd\"))\n    q(status=0)\n}\n# some inital value\nif ( is.null(opt$???) )    { opt$??? <- ??? }",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "getopt": true
        },
        "opts": {}
      },
      {
        "content": "require(\"optparse\", quietly = TRUE)\noption_list <-\n    list(make_option(c(\"-n\", \"--add_numbers\"), action=\"store_true\", default=FALSE,\n                     help=\"Print line number at the beginning of each line [default]\")\n         )\nparser <- OptionParser(usage = \"%prog [options] file\", option_list=option_list)\narguments <- parse_args(parser, positional_arguments = TRUE)\nopt <- arguments$options\nif(length(arguments$args) != 1) {\n    cat(\"Incorrect number of required positional arguments\\n\\n\")\n    print_help(parser)\n    stop()\n} else {\n    file <- arguments$args\n}\nif( file.access(file) == -1) {\n    stop(sprintf(\"Specified file ( %s ) does not exist\", file))\n} else {\n    file_text <- readLines(file)\n}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "optparse": true
        },
        "opts": {}
      },
      {
        "content": "#!/usr/bin/env Rscript",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "#!": true
        },
        "opts": {}
      },
      {
        "content": "# Development & Debugging, don't forget to uncomment afterwards!\n#--------------------------------------------------------------------------------\n#setwd(\"~/Projekte/${1:}\")\n#opt <- list(${2:}\n#            )\n#--------------------------------------------------------------------------------",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "debug": true
        },
        "opts": {}
      }
    ],
    "rnoweb": [],
    "robot": [
      {
        "content": "\\${${1:name}}=    Catenate    SEPARATOR=${2:---}    ${3:Hello}    ${4:world}",
        "doc": null,
        "grammar": "snu",
        "label": "Catenate",
        "matches": {
          "cat": true
        },
        "opts": {}
      },
      {
        "content": "\\${${1:val}}=    Evaluate    ${2:${x} - 10}",
        "doc": null,
        "grammar": "snu",
        "label": "Evaluate",
        "matches": {
          "eval": true
        },
        "opts": {}
      },
      {
        "content": "No Operation",
        "doc": null,
        "grammar": "snu",
        "label": "No Operation",
        "matches": {
          "nop": true
        },
        "opts": {}
      },
      {
        "content": "Return From Keyword    ${1:${optional return value}}",
        "doc": null,
        "grammar": "snu",
        "label": "Return From Keyword",
        "matches": {
          "rfk": true
        },
        "opts": {}
      },
      {
        "content": "Return From Keyword If    '\\${${1:rc}}' != '${2:abc}'    ${3:${optional return value}}",
        "doc": null,
        "grammar": "snu",
        "label": "Return From Keyword If",
        "matches": {
          "rfki": true
        },
        "opts": {}
      },
      {
        "content": "Run Keyword    ${1:${kw}}    ${2:${args}}",
        "doc": null,
        "grammar": "snu",
        "label": "Run Keyword",
        "matches": {
          "rk": true
        },
        "opts": {}
      },
      {
        "content": "Run Keyword And Continue On Failure    ${1:${kw}}    ${2:${args}}",
        "doc": null,
        "grammar": "snu",
        "label": "Run Keyword And Continue On Failure",
        "matches": {
          "rkacof": true
        },
        "opts": {}
      },
      {
        "content": "Run Keyword And Expect Error    ${1:My error}    ${2:${kw}}    ${3:${args}}",
        "doc": null,
        "grammar": "snu",
        "label": "Run Keyword And Expect Error",
        "matches": {
          "rkaee": true
        },
        "opts": {}
      },
      {
        "content": "Run Keyword And Ignore Error    ${1:${kw}}    ${2:${args}}\n\\${${3:result}}    \\${${4:return_value}}=    Run Keyword And Ignore Error    ${1:${kw}}    ${2:${args}}",
        "doc": null,
        "grammar": "snu",
        "label": "Run Keyword And Ignore Error",
        "matches": {
          "rkaie": true
        },
        "opts": {}
      },
      {
        "content": "Run Keyword And Return    ${1:${kw}}    ${2:${args}}",
        "doc": null,
        "grammar": "snu",
        "label": "Run Keyword And Return",
        "matches": {
          "rkar": true
        },
        "opts": {}
      },
      {
        "content": "Run Keyword And Return If    '\\${${1:rc}}' != '${2:abc}'    ${3:${kw}}    ${4:${args}}",
        "doc": null,
        "grammar": "snu",
        "label": "Run Keyword And Return If",
        "matches": {
          "rkari": true
        },
        "opts": {}
      },
      {
        "content": "\\${${3:result}}=    Run Keyword And Return Status    ${1:${kw}}    ${2:${args}}",
        "doc": null,
        "grammar": "snu",
        "label": "Run Keyword And Return Status",
        "matches": {
          "rkars": true
        },
        "opts": {}
      },
      {
        "content": "Run Keyword If Any Critical Tests Failed    ${1:${kw}}    ${2:${args}}",
        "doc": null,
        "grammar": "snu",
        "label": "Run Keyword If Any Critical Tests Failed",
        "matches": {
          "rkiactf": true
        },
        "opts": {}
      },
      {
        "content": "Run Keyword If All Critical Tests Passed    ${1:${kw}}    ${2:${args}}",
        "doc": null,
        "grammar": "snu",
        "label": "Run Keyword If All Critical Tests Passed",
        "matches": {
          "rkiactp": true
        },
        "opts": {}
      },
      {
        "content": "Run Keyword If Any Tests Failed    ${1:${kw}}    ${2:${args}}",
        "doc": null,
        "grammar": "snu",
        "label": "Run Keyword If Any Tests Failed",
        "matches": {
          "rkiatf": true
        },
        "opts": {}
      },
      {
        "content": "Run Keyword If All Tests Passed    ${1:${kw}}    ${2:${args}}",
        "doc": null,
        "grammar": "snu",
        "label": "Run Keyword If All Tests Passed",
        "matches": {
          "rkiatp": true
        },
        "opts": {}
      },
      {
        "content": "Run Keyword If Test Failed    ${1:${kw}}    ${2:${args}}",
        "doc": null,
        "grammar": "snu",
        "label": "Run Keyword If Test Failed",
        "matches": {
          "rkitf": true
        },
        "opts": {}
      },
      {
        "content": "Run Keyword If Test Passed    ${1:${kw}}    ${2:${args}}",
        "doc": null,
        "grammar": "snu",
        "label": "Run Keyword If Test Passed",
        "matches": {
          "rkitp": true
        },
        "opts": {}
      },
      {
        "content": "Run Keyword If Timeout Occurred    ${1:${kw}}    ${2:${args}}",
        "doc": null,
        "grammar": "snu",
        "label": "Run Keyword If Timeout Occurred",
        "matches": {
          "rkito": true
        },
        "opts": {}
      },
      {
        "content": "Run Keyword Unless    '\\${${1:rc}}' != '${2:abc}'    ${3:${kw}}    ${4:${args}}",
        "doc": null,
        "grammar": "snu",
        "label": "Run Keyword Unless",
        "matches": {
          "rku": true
        },
        "opts": {}
      },
      {
        "content": "Set Global Variable    \\${${1:name}}    ${2:${value}}",
        "doc": null,
        "grammar": "snu",
        "label": "Set Global Variable",
        "matches": {
          "sgv": true
        },
        "opts": {}
      },
      {
        "content": "Should Be Equal    \"\\${${1:var}}\"    \"${2:expected value}\"    ${3:\"optional error msg\"}\t${4:ignore_case=True}",
        "doc": null,
        "grammar": "snu",
        "label": "Should Be Equal",
        "matches": {
          "sbe": true
        },
        "opts": {}
      },
      {
        "content": "Sleep    ${1:2 minutes 10 seconds}",
        "doc": null,
        "grammar": "snu",
        "label": "Sleep",
        "matches": {
          "sleep": true
        },
        "opts": {}
      },
      {
        "content": "Set Suite Variable    \\${${1:name}}    ${2:${value}}",
        "doc": null,
        "grammar": "snu",
        "label": "Set Suite Variable",
        "matches": {
          "ssv": true
        },
        "opts": {}
      },
      {
        "content": "Set Test Variable    \\${${1:name}}    ${2:${value}}",
        "doc": null,
        "grammar": "snu",
        "label": "Set Test Variable",
        "matches": {
          "stv": true
        },
        "opts": {}
      },
      {
        "content": "\\${${1:name}}=    Set Variable    ${2:${value}}",
        "doc": null,
        "grammar": "snu",
        "label": "Set Variable",
        "matches": {
          "sv": true
        },
        "opts": {}
      },
      {
        "content": "Import library    Dialogs\nPause execution",
        "doc": null,
        "grammar": "snu",
        "label": "Pause test execution",
        "matches": {
          "pause": true
        },
        "opts": {}
      },
      {
        "content": "[Teardown]    Run Keyword If Test Failed    Run Keywords\n...    Import library    Dialogs    AND\n...    Pause execution",
        "doc": null,
        "grammar": "snu",
        "label": "Teardown Pause - pause test execution only on failure",
        "matches": {
          "tpause": true
        },
        "opts": {}
      },
      {
        "content": "Capture Page Screenshot    ${1:${optional filename}}",
        "doc": null,
        "grammar": "snu",
        "label": "Capture Page Screenshot",
        "matches": {
          "cps": true
        },
        "opts": {}
      },
      {
        "content": "Element Should Be Disabled    \\${${1:locator}}",
        "doc": null,
        "grammar": "snu",
        "label": "Element Should Be Disabled",
        "matches": {
          "esbd": true
        },
        "opts": {}
      },
      {
        "content": "Element Should Be Enabled    ${${1:locator}}",
        "doc": null,
        "grammar": "snu",
        "label": "Element Should Be Enabled",
        "matches": {
          "esbe": true
        },
        "opts": {}
      },
      {
        "content": "Element Should Be Focused    ${${1:locator}}",
        "doc": null,
        "grammar": "snu",
        "label": "Element Should Be Focused",
        "matches": {
          "esbf": true
        },
        "opts": {}
      },
      {
        "content": "Element Should Be Visible    ${${1:locator}}    ${2:${optional message}}",
        "doc": null,
        "grammar": "snu",
        "label": "Element Should Be Visible",
        "matches": {
          "esbv": true
        },
        "opts": {}
      },
      {
        "content": "Element Should Contain    ${${1:locator}}    ${2:${expected}}    ${3:${optional message}}",
        "doc": null,
        "grammar": "snu",
        "label": "Element Should Contain",
        "matches": {
          "esc": true
        },
        "opts": {}
      },
      {
        "content": "Element Should Not Be Visible    ${${1:locator}}    ${2:${optional message}}",
        "doc": null,
        "grammar": "snu",
        "label": "Element Should Not Be Visible",
        "matches": {
          "esnbv": true
        },
        "opts": {}
      },
      {
        "content": "Element Should Not Contain    ${${1:locator}}    ${2:${expected}}    ${3:${optional message}}",
        "doc": null,
        "grammar": "snu",
        "label": "Element Should Not Contain",
        "matches": {
          "esnc": true
        },
        "opts": {}
      },
      {
        "content": "Element Text Should Be    ${${1:locator}}    ${2:${expected}}    ${3:${optional message}}",
        "doc": null,
        "grammar": "snu",
        "label": "Element Text Should Be",
        "matches": {
          "etsb": true
        },
        "opts": {}
      },
      {
        "content": "Execute Async Javascript    ${1:${code line 1}}    ${2:${code line 2}}",
        "doc": null,
        "grammar": "snu",
        "label": "Execute Async Javascript",
        "matches": {
          "eaj": true
        },
        "opts": {}
      },
      {
        "content": "Execute Javascript    ${1:${code line 1}}    ${2:${code line 2}}",
        "doc": null,
        "grammar": "snu",
        "label": "Execute Javascript",
        "matches": {
          "ej": true
        },
        "opts": {}
      },
      {
        "content": "\\${${1:x}}    \\${${2:y}}=    Get Window Position",
        "doc": null,
        "grammar": "snu",
        "label": "Get Window Position",
        "matches": {
          "gwp": true
        },
        "opts": {}
      },
      {
        "content": "\\${${1:width}}    \\${${2:height}}=    Get Window Size",
        "doc": null,
        "grammar": "snu",
        "label": "Get Window Size",
        "matches": {
          "gws": true
        },
        "opts": {}
      },
      {
        "content": "Maximize Browser Window",
        "doc": null,
        "grammar": "snu",
        "label": "Maximize Browser Window",
        "matches": {
          "mbw": true
        },
        "opts": {}
      },
      {
        "content": "Mouse Down    ${${1:locator}}",
        "doc": null,
        "grammar": "snu",
        "label": "Mouse Down",
        "matches": {
          "md": true
        },
        "opts": {}
      },
      {
        "content": "Mouse Down On Image    ${1:${locator}}",
        "doc": null,
        "grammar": "snu",
        "label": "Mouse Down On Image",
        "matches": {
          "mdoi": true
        },
        "opts": {}
      },
      {
        "content": "Mouse Down On Link    ${1:${locator}}",
        "doc": null,
        "grammar": "snu",
        "label": "Mouse Down On Link",
        "matches": {
          "mdol": true
        },
        "opts": {}
      },
      {
        "content": "Mouse Out    ${1:${locator}}",
        "doc": null,
        "grammar": "snu",
        "label": "Mouse Out",
        "matches": {
          "mout": true
        },
        "opts": {}
      },
      {
        "content": "Mouse Over    ${1:${locator}}",
        "doc": null,
        "grammar": "snu",
        "label": "Mouse Over",
        "matches": {
          "mover": true
        },
        "opts": {}
      },
      {
        "content": "Mouse Up    ${1:${locator}}",
        "doc": null,
        "grammar": "snu",
        "label": "Mouse Up",
        "matches": {
          "mu": true
        },
        "opts": {}
      },
      {
        "content": "Open Browser    ${1:${url}}    ${2:${browser=firefox}}    ${3:${alias=None}}    ${4:${remote_url=False}}    ${5:${desired_capabilities=None}}    ${6:${ff_profile_dir=None}}",
        "doc": null,
        "grammar": "snu",
        "label": "Open Browser",
        "matches": {
          "ob": true
        },
        "opts": {}
      },
      {
        "content": "Open Context Menu    ${1:${locator}}",
        "doc": null,
        "grammar": "snu",
        "label": "Open Context Menu",
        "matches": {
          "ocm": true
        },
        "opts": {}
      },
      {
        "content": "Page Should Contain    ${1:${text}}    ${2:loglevel=INFO}",
        "doc": null,
        "grammar": "snu",
        "label": "Page Should Contain",
        "matches": {
          "psc": true
        },
        "opts": {}
      },
      {
        "content": "Page Should Contain Button    ${1:${locator}}    ${2:${message=}}    ${3:loglevel=INFO}",
        "doc": null,
        "grammar": "snu",
        "label": "Page Should Contain Button",
        "matches": {
          "pscb": true
        },
        "opts": {}
      },
      {
        "content": "Page Should Contain Checkbox    ${1:${locator}}    ${2:${message=}}    ${3:loglevel=INFO}",
        "doc": null,
        "grammar": "snu",
        "label": "Page Should Contain Checkbox",
        "matches": {
          "pscc": true
        },
        "opts": {}
      },
      {
        "content": "Page Should Contain Element    ${1:${locator}}    ${2:${message=}}    ${3:loglevel=INFO}",
        "doc": null,
        "grammar": "snu",
        "label": "Page Should Contain Element",
        "matches": {
          "psce": true
        },
        "opts": {}
      },
      {
        "content": "Page Should Contain Image    ${1:${locator}}    ${2:${message=}}    ${3:loglevel=INFO}",
        "doc": null,
        "grammar": "snu",
        "label": "Page Should Contain Image",
        "matches": {
          "psci": true
        },
        "opts": {}
      },
      {
        "content": "Page Should Contain Link    ${1:${locator}}    ${2:${message=}}    ${3:loglevel=INFO}",
        "doc": null,
        "grammar": "snu",
        "label": "Page Should Contain Link",
        "matches": {
          "pscl": true
        },
        "opts": {}
      },
      {
        "content": "Page Should Contain Radio Button    ${1:${locator}}    ${2:${message=}}    ${3:loglevel=INFO}",
        "doc": null,
        "grammar": "snu",
        "label": "Page Should Contain Radio Button",
        "matches": {
          "pscrb": true
        },
        "opts": {}
      },
      {
        "content": "Page Should Contain Textfield    ${1:${locator}}    ${2:${message=}}    ${3:loglevel=INFO}",
        "doc": null,
        "grammar": "snu",
        "label": "Page Should Contain Textfield",
        "matches": {
          "psct": true
        },
        "opts": {}
      },
      {
        "content": "Page Should Not Contain    ${1:${text}}    ${2:loglevel=INFO}",
        "doc": null,
        "grammar": "snu",
        "label": "Page Should Not Contain",
        "matches": {
          "psnc": true
        },
        "opts": {}
      },
      {
        "content": "Page Should Not Contain Button    ${1:${locator}}    ${2:${message=}}    ${3:loglevel=INFO}",
        "doc": null,
        "grammar": "snu",
        "label": "Page Should Not Contain Button",
        "matches": {
          "psncb": true
        },
        "opts": {}
      },
      {
        "content": "Page Should Not Contain Checkbox    ${1:${locator}}    ${2:${message=}}    ${3:loglevel=INFO}",
        "doc": null,
        "grammar": "snu",
        "label": "Page Should Not Contain Checkbox",
        "matches": {
          "psncc": true
        },
        "opts": {}
      },
      {
        "content": "Page Should Not Contain Element    ${1:${locator}}    ${2:${message=}}    ${3:loglevel=INFO}",
        "doc": null,
        "grammar": "snu",
        "label": "Page Should Not Contain Element",
        "matches": {
          "psnce": true
        },
        "opts": {}
      },
      {
        "content": "Page Should Not Contain Image    ${1:${locator}}    ${2:${message=}}    ${3:loglevel=INFO}",
        "doc": null,
        "grammar": "snu",
        "label": "Page Should Not Contain Image",
        "matches": {
          "psnci": true
        },
        "opts": {}
      },
      {
        "content": "Page Should Not Contain Link    ${1:${locator}}    ${2:${message=}}    ${3:loglevel=INFO}",
        "doc": null,
        "grammar": "snu",
        "label": "Page Should Not Contain Link",
        "matches": {
          "psncl": true
        },
        "opts": {}
      },
      {
        "content": "Page Should Not Contain Radio Button    ${1:${locator}}    ${2:${message=}}    ${3:loglevel=INFO}",
        "doc": null,
        "grammar": "snu",
        "label": "Page Should Not Contain Radio Button",
        "matches": {
          "psncrb": true
        },
        "opts": {}
      },
      {
        "content": "Page Should Not Contain Textfield    ${1:${locator}}    ${2:${message=}}    ${3:loglevel=INFO}",
        "doc": null,
        "grammar": "snu",
        "label": "Page Should Not Contain Textfield",
        "matches": {
          "psnct": true
        },
        "opts": {}
      },
      {
        "content": "Register Keyword To Run On Failure    ${1:${kw}}",
        "doc": null,
        "grammar": "snu",
        "label": "Register Keyword To Run On Failure",
        "matches": {
          "rktrof": true
        },
        "opts": {}
      },
      {
        "content": "Wait Until Element Contains    ${1:${locator}}    ${2:${text}}    ${3:${timeout=None}}    ${4:${error=None}}",
        "doc": null,
        "grammar": "snu",
        "label": "Wait Until Element Contains",
        "matches": {
          "wuec": true
        },
        "opts": {}
      },
      {
        "content": "Wait Until Element Does Not Contain    ${1:${locator}}    ${2:${text}}    ${3:${timeout=None}}    ${4:${error=None}}",
        "doc": null,
        "grammar": "snu",
        "label": "Wait Until Element Does Not Contain",
        "matches": {
          "wuednc": true
        },
        "opts": {}
      },
      {
        "content": "Wait Until Element Is Enabled    ${1:${locator}}    ${2:${timeout=None}}    ${3:${error=None}}",
        "doc": null,
        "grammar": "snu",
        "label": "Wait Until Element Is Enabled",
        "matches": {
          "wueie": true
        },
        "opts": {}
      },
      {
        "content": "Wait Until Element Is Not Visible    ${1:${locator}}    ${2:${timeout=None}}    ${3:${error=None}}",
        "doc": null,
        "grammar": "snu",
        "label": "Wait Until Element Is Not Visible",
        "matches": {
          "wueinv": true
        },
        "opts": {}
      },
      {
        "content": "Wait Until Element Is Visible    ${1:${locator}}    ${2:${timeout=None}}    ${3:${error=None}}",
        "doc": null,
        "grammar": "snu",
        "label": "Wait Until Element Is Visible",
        "matches": {
          "wueiv": true
        },
        "opts": {}
      },
      {
        "content": "Wait Until Page Contains    ${1:${text}}    ${2:${timeout=None}}    ${3:${error=None}}",
        "doc": null,
        "grammar": "snu",
        "label": "Wait Until Page Contains",
        "matches": {
          "wupc": true
        },
        "opts": {}
      },
      {
        "content": "Wait Until Page Contains Element    ${1:${locator}}    ${2:${timeout=None}}    ${3:${error=None}}",
        "doc": null,
        "grammar": "snu",
        "label": "Wait Until Page Contains Element",
        "matches": {
          "wupce": true
        },
        "opts": {}
      },
      {
        "content": "Wait Until Page Does Not Contain    ${1:${text}}    ${2:${timeout=None}}    ${3:${error=None}}",
        "doc": null,
        "grammar": "snu",
        "label": "Wait Until Page Does Not Contain",
        "matches": {
          "wupdnc": true
        },
        "opts": {}
      },
      {
        "content": "Wait Until Page Does Not Contain Element    ${1:${locator}}    ${2:${timeout=None}}    ${3:${error=None}}",
        "doc": null,
        "grammar": "snu",
        "label": "Wait Until Page Does Not Contain Element",
        "matches": {
          "wupdnce": true
        },
        "opts": {}
      }
    ],
    "rst": [
      {
        "content": "===========================\n${1:#:content_name}\n===========================\n.. contents:: contents_name\ntitle1\n====================================\nsubtitle1\n-----------------------------------\nsubtitle2\n-----------------------------------\nsubtitle3\n-----------------------------------\ntitle2\n====================================\nsubtitle1\n-----------------------------------\nsubtitle2\n-----------------------------------\nsubtitle3\n-----------------------------------\ntitle3\n====================================\nsubtitle1\n-----------------------------------\nsubtitle2\n-----------------------------------\nsubtitle3\n-----------------------------------",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "quickstart": true
        },
        "opts": {
          "head": true
        }
      },
      {
        "content": ".. contents:: ${1:#:contents_name}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "contnents": true
        },
        "opts": {
          "head": true
        }
      },
      {
        "content": "${1:#:title}\n====================================",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "title": true
        },
        "opts": {
          "head": true
        }
      },
      {
        "content": "${1:#:subtitle}\n-----------------------------------",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "subtitle": true
        },
        "opts": {
          "head": true
        }
      },
      {
        "content": ".. code-block:: ${1:#:filetype}\n${2:#:content}",
        "doc": "",
        "grammar": "snu",
        "label": "code",
        "matches": {
          "code_block": true
        },
        "opts": {
          "head": true
        }
      },
      {
        "content": "+------------------+------------+-----------------------+------------+\n|${1:#:cel} | | | |\n+==================+============+=======================+============+\n| | | | |\n+------------------+------------+-----------------------+------------+\n| | | | |\n+------------------+------------+-----------------------+------------+",
        "doc": "",
        "grammar": "snu",
        "label": "grid_table",
        "matches": {
          "table_grid": true
        },
        "opts": {
          "head": true
        }
      },
      {
        "content": ":${1:#:text}:\n: :\n: :\n: :",
        "doc": "",
        "grammar": "snu",
        "label": "simple_table",
        "matches": {
          "table_simple": true
        },
        "opts": {
          "head": true
        }
      },
      {
        "content": "-\n-\n-\n-",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "list": true
        },
        "opts": {
          "head": true
        }
      },
      {
        "content": "- ${1:#:text}\n-\n-\n-",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "nested_list": true
        },
        "opts": {
          "head": true
        }
      },
      {
        "content": "[#]",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "caption": true
        },
        "opts": {
          "head": true
        }
      },
      {
        "content": ".. image:: ${1:#:path}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "image": true
        },
        "opts": {
          "head": true
        }
      },
      {
        "content": "**${1:#:text}**",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "strong": true
        },
        "opts": {
          "head": true
        }
      },
      {
        "content": ".. toctree::\n\t:maxdepth: ${1:2}\n\t${2:#:FILES}",
        "doc": "",
        "grammar": "snu",
        "label": "directive_toctree",
        "matches": {
          "toctree": true
        },
        "opts": {
          "head": true
        }
      },
      {
        "content": ".. code-block:: ${1:python}\n\t${1:#:TERGET}",
        "doc": "",
        "grammar": "snu",
        "label": "syntax",
        "matches": {
          "syntax": true
        },
        "opts": {
          "indent": true
        }
      },
      {
        "content": ".. _${1:#:NAME}:\n${2:#:CURSOR}",
        "doc": "",
        "grammar": "snu",
        "label": "label",
        "matches": {
          "label": true
        },
        "opts": {
          "head": true
        }
      },
      {
        "content": ".. contents::\n\t:depth: ${1:2}\n\t${2::local:}",
        "doc": "",
        "grammar": "snu",
        "label": "directive_content",
        "matches": {
          "content": true
        },
        "opts": {
          "head": true
        }
      },
      {
        "content": ".. table:: ${1:#:TITLE}\n\t${0:#:CURSOR}",
        "doc": "",
        "grammar": "snu",
        "label": "directive_table",
        "matches": {
          "table": true
        },
        "opts": {
          "head": true
        }
      },
      {
        "content": ".. csv-table:: ${1:#:TITLE}\n\t:header: \"${2:#:Header1}\", \"${3:#:Header2}\"${4:#:Headers}\n\t\"${5:#:Column1}\", \"${6:#:Column2}\"${0:#:CURSOR}",
        "doc": "",
        "grammar": "snu",
        "label": "directive_csvtable",
        "matches": {
          "csvtable": true
        },
        "opts": {
          "head": true
        }
      },
      {
        "content": ".. ${1:#:NAME}:: ${0:#:CURSOR}",
        "doc": "",
        "grammar": "snu",
        "label": "directive",
        "matches": {
          "directive": true
        },
        "opts": {}
      },
      {
        "content": ".. note:: ${0:#:CURSOR}",
        "doc": "",
        "grammar": "snu",
        "label": "note",
        "matches": {
          "note": true
        },
        "opts": {}
      },
      {
        "content": ".. tip:: ${0:#:CURSOR}",
        "doc": "",
        "grammar": "snu",
        "label": "tip",
        "matches": {
          "tip": true
        },
        "opts": {}
      },
      {
        "content": ".. warning:: ${0:#:CURSOR}",
        "doc": "",
        "grammar": "snu",
        "label": "warning",
        "matches": {
          "warning": true
        },
        "opts": {}
      },
      {
        "content": ".. attention:: ${0:#:CURSOR}",
        "doc": "",
        "grammar": "snu",
        "label": "attention",
        "matches": {
          "attention": true
        },
        "opts": {}
      },
      {
        "content": ".. caution:: ${0:#:CURSOR}",
        "doc": "",
        "grammar": "snu",
        "label": "caution",
        "matches": {
          "caution": true
        },
        "opts": {}
      },
      {
        "content": ".. danger:: ${0:#:CURSOR}",
        "doc": "",
        "grammar": "snu",
        "label": "danger",
        "matches": {
          "danger": true
        },
        "opts": {}
      },
      {
        "content": ".. error:: ${0:#:CURSOR}",
        "doc": "",
        "grammar": "snu",
        "label": "error",
        "matches": {
          "error": true
        },
        "opts": {}
      },
      {
        "content": ".. hint:: ${0:#:CURSOR}",
        "doc": "",
        "grammar": "snu",
        "label": "hint",
        "matches": {
          "hint": true
        },
        "opts": {}
      },
      {
        "content": ".. important:: ${0:#:CURSOR}",
        "doc": "",
        "grammar": "snu",
        "label": "important",
        "matches": {
          "important": true
        },
        "opts": {}
      },
      {
        "content": ".. seealso:: ${0:#:CURSOR}",
        "doc": "",
        "grammar": "snu",
        "label": "seealso",
        "matches": {
          "seealso": true
        },
        "opts": {}
      },
      {
        "content": ":${1:field name}: ${0:field body}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          ":": true
        },
        "opts": {}
      },
      {
        "content": "*${1:Emphasis}* ${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "*": true
        },
        "opts": {}
      },
      {
        "content": "**${1:Strong emphasis}** ${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "**": true
        },
        "opts": {}
      },
      {
        "content": "${1:Title}\n=====${2:=}\n${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "=": true
        },
        "opts": {}
      },
      {
        "content": "${1:Title}\n-----${2:-}\n${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "-": true
        },
        "opts": {}
      },
      {
        "content": ".. |${1:alias}| image:: ${0:img}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "img:": true
        },
        "opts": {}
      },
      {
        "content": ".. figure:: ${1:img}\n\t:alt: ${2:alter text}\n\t$0",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "fig:": true
        },
        "opts": {}
      },
      {
        "content": ".. contents:: ${1:Table of Contents}\n\t${0:content}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "con:": true
        },
        "opts": {}
      },
      {
        "content": ".. code:: ${1:type}\n\t${0:write some code}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "cod:": true
        },
        "opts": {}
      },
      {
        "content": ".. tip::\n\t${0:my tips}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "tip:": true
        },
        "opts": {}
      },
      {
        "content": ".. note::\n\t${0:my notes}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "not:": true
        },
        "opts": {}
      },
      {
        "content": ".. warning::\n\t${0:attention!}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "war:": true
        },
        "opts": {}
      },
      {
        "content": ".. important::\n\t${0:this is importatnt}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "imp:": true
        },
        "opts": {}
      },
      {
        "content": ".. attention::\n\t${0:hey!}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "att:": true
        },
        "opts": {}
      },
      {
        "content": ".. danger::\n\t${0:ah!}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "dan:": true
        },
        "opts": {}
      },
      {
        "content": ".. error::\n\t${0:Error occur}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "err:": true
        },
        "opts": {}
      },
      {
        "content": ".. caution::\n\t${0:Watch out!}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "cau:": true
        },
        "opts": {}
      },
      {
        "content": ".. sidebar:: ${1:Title}\n\t${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "sid:": true
        },
        "opts": {}
      },
      {
        "content": ".. todo::\n\t${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "tod:": true
        },
        "opts": {}
      },
      {
        "content": ".. list-table:: ${1:Title}\n\t:header-rows: 1\n\t:stub-columns: 0\n\t* - ${0:R1C1}\n\t  - R1C2\n\t* - R2C1\n\t  - R2C2",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "lis:": true
        },
        "opts": {}
      },
      {
        "content": ".. csv-table:: ${1:Title}\n\t:header-rows: 1\n\t:stub-columns: 0\n\t${0:R1C1}, R1C2\n\tR2C1, R2C2",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "csv:": true
        },
        "opts": {}
      },
      {
        "content": ".. toctree::\n\t:maxdepth: 2\n\t${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "toc:": true
        },
        "opts": {}
      },
      {
        "content": "\\ *${1:Emphasis}*\\ ${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "*c": true
        },
        "opts": {}
      },
      {
        "content": "\\ **${1:Strong emphasis}**\\ ${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "**c": true
        },
        "opts": {}
      }
    ],
    "ruby": [
      {
        "content": "#!/usr/bin/env ruby\n${0}",
        "doc": "",
        "grammar": "snu",
        "label": "#!/usr/bin/env ruby",
        "matches": {
          "#!": true,
          "shebang": true
        },
        "opts": {
          "head": true
        }
      },
      {
        "content": "if ${1:#:condition}\n  ${0:TARGET}\nend",
        "doc": "",
        "grammar": "snu",
        "label": "if ... end",
        "matches": {
          "if": true
        },
        "opts": {}
      },
      {
        "content": "unless ${1:#:condition}\n  ${0:TARGET}\nend",
        "doc": "",
        "grammar": "snu",
        "label": "unless ... end",
        "matches": {
          "unless": true
        },
        "opts": {}
      },
      {
        "content": "def ${1:#:method_name}\n  ${0:TARGET}\nend",
        "doc": "",
        "grammar": "snu",
        "label": "def ... end",
        "matches": {
          "def": true
        },
        "opts": {}
      },
      {
        "content": "def ${1:#:method_name}\n  ${2:TARGET}\nrescue ${3:#:StandardError} => ${4:error}\n  ${0}\nend",
        "doc": "",
        "grammar": "snu",
        "label": "def ... rescue ... end",
        "matches": {
          "defr": true,
          "defrescue": true
        },
        "opts": {}
      },
      {
        "content": "do\n  ${0:TARGET}\nend",
        "doc": "",
        "grammar": "snu",
        "label": "do ... end",
        "matches": {
          "do": true
        },
        "opts": {}
      },
      {
        "content": "do |${1:#:var}|\n  ${0:TARGET}\nend",
        "doc": "",
        "grammar": "snu",
        "label": "do |var| ... end",
        "matches": {
          "dovar": true
        },
        "opts": {}
      },
      {
        "content": "{\n  ${0:TARGET}\n}",
        "doc": "",
        "grammar": "snu",
        "label": "{ ... }",
        "matches": {
          "block": true
        },
        "opts": {}
      },
      {
        "content": "{|${1:#:var}|\n  ${0:TARGET}\n}",
        "doc": "",
        "grammar": "snu",
        "label": "{|var| ... }",
        "matches": {
          "blockvar": true
        },
        "opts": {}
      },
      {
        "content": "File.open(${1:#:filename}, '${2:#:mode}') do |${3:io}|\n  ${0:TARGET}\nend",
        "doc": "",
        "grammar": "snu",
        "label": "File.open(filename) do ... end",
        "matches": {
          "fileopen": true,
          "open": true
        },
        "opts": {}
      },
      {
        "content": "end",
        "doc": "",
        "grammar": "snu",
        "label": "=> end?",
        "matches": {
          "edn": true
        },
        "opts": {}
      },
      {
        "content": "# coding: utf-8\nrequire 'erb'\nputs ERB::Util.url_encode '${1}'",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "urlencode": true
        },
        "opts": {}
      },
      {
        "content": "# coding: utf-8\n${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "enc": true,
          "encoding": true
        },
        "opts": {}
      },
      {
        "content": "each do |${1:#:variable}|\n  ${0}\nend",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "each": true
        },
        "opts": {
          "word": true
        }
      },
      {
        "content": "each_byte {|${1:#:variable}| ${0} }",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "each_byte": true
        },
        "opts": {
          "word": true
        }
      },
      {
        "content": "each_char {|${1:#:variable}| ${0} }",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "each_char": true
        },
        "opts": {
          "word": true
        }
      },
      {
        "content": "each_index {|${1:#:variable}| ${0} }",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "each_index": true
        },
        "opts": {
          "word": true
        }
      },
      {
        "content": "each_key {|${1:#:variable}| ${0} }",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "each_key": true
        },
        "opts": {
          "word": true
        }
      },
      {
        "content": "each_line {|${1:#:variable}| ${0} }",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "each_line": true
        },
        "opts": {
          "word": true
        }
      },
      {
        "content": "each_with_index {|${1:#:variable}| ${0} }",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "each_with_index": true
        },
        "opts": {
          "word": true
        }
      },
      {
        "content": "each_pair {|${1:#:key}, ${2:value}| ${0} }",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "each_pair": true
        },
        "opts": {
          "word": true
        }
      },
      {
        "content": "each_pair do |${1:key}, ${2:value}|\n  ${0}\nend",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "each_pair_do": true
        },
        "opts": {
          "word": true
        }
      },
      {
        "content": "map {|${1:#:variable}| ${0} }",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "map": true
        },
        "opts": {
          "word": true
        }
      },
      {
        "content": "sort {|${1:x}, ${2:y}| ${0} }",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "sort": true
        },
        "opts": {
          "word": true
        }
      },
      {
        "content": "sort_by {|${1:#:variable}| ${0} }",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "sort_by": true
        },
        "opts": {
          "word": true
        }
      },
      {
        "content": "-> (${1:#:args}) { ${0} }",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "lambda": true
        },
        "opts": {
          "word": true
        }
      },
      {
        "content": "lambda {|${1:#:args}| ${0} }",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "lambda-keyword": true
        },
        "opts": {
          "word": true
        }
      },
      {
        "content": "if __FILE__ == \\$0\n  ${0:TARGET}\nend",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "main": true
        },
        "opts": {
          "head": true
        }
      },
      {
        "content": "File.dirname(File.expand_path(__FILE__))",
        "doc": "",
        "grammar": "snu",
        "label": "File.dirname(...)",
        "matches": {
          "__dir__": true,
          "filedir-legacy-compatibility": true
        },
        "opts": {}
      },
      {
        "content": "Dir.glob(${1:'**/*'}) do |fname|\n  ${0:TARGET}\nend",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "glob": true
        },
        "opts": {
          "head": true
        }
      },
      {
        "content": "case ${1}\nwhen ${2}\n  ${3}\nelse\n  ${0}\nend",
        "doc": "",
        "grammar": "snu",
        "label": "case ... when ... else ... end",
        "matches": {
          "case": true
        },
        "opts": {
          "head": true
        }
      },
      {
        "content": "# encoding: utf-8",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "enc": true
        },
        "opts": {}
      },
      {
        "content": "# frozen_string_literal: true",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "frozen": true
        },
        "opts": {}
      },
      {
        "content": "#!/usr/bin/env ruby",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "#!": true
        },
        "opts": {}
      },
      {
        "content": "=begin rdoc\n\t${0}\n=end",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "=b": true
        },
        "opts": {}
      },
      {
        "content": "protected\n${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "prot": true
        },
        "opts": {}
      },
      {
        "content": "private\n${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "priv": true
        },
        "opts": {}
      },
      {
        "content": ":yields: ${0:arguments}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "y": true
        },
        "opts": {}
      },
      {
        "content": "#!/usr/bin/env ruby -wKU",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "rb": true
        },
        "opts": {}
      },
      {
        "content": "begin\n\t${0}\nrescue ${1:StandardError} => ${2:e}\nend",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "beg": true
        },
        "opts": {}
      },
      {
        "content": "require '${1}'",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "req require": true
        },
        "opts": {}
      },
      {
        "content": "require_relative '${1}'",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "reqr": true
        },
        "opts": {}
      },
      {
        "content": "# =>",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "#": true
        },
        "opts": {}
      },
      {
        "content": "case ${1:object}\nwhen ${2:condition}\n\t${0}\nend",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "case": true
        },
        "opts": {}
      },
      {
        "content": "when ${1:condition}\n\t${0:${VISUAL}}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "when": true
        },
        "opts": {}
      },
      {
        "content": "def ${1:method_name}\n\t${0}\nend",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "def": true
        },
        "opts": {}
      },
      {
        "content": "def test_${1:case_name}\n\t${0}\nend",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "deft": true
        },
        "opts": {}
      },
      {
        "content": "class Class\n\tdef descendants\n\t\tObjectSpace.each_object(::Class).select { |klass| klass < self }\n\tend\nend",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "descendants": true
        },
        "opts": {}
      },
      {
        "content": "if ${1:condition}\n\t${0:${VISUAL}}\nend",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "if": true
        },
        "opts": {}
      },
      {
        "content": "if ${1:condition}\n\t${2:${VISUAL}}\nelse\n\t${0}\nend",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ife": true
        },
        "opts": {}
      },
      {
        "content": "elsif ${1:condition}\n\t${0:${VISUAL}}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "eif": true
        },
        "opts": {}
      },
      {
        "content": "if ${1:condition}\n\t$2\nelsif ${3:condition}\n\t$4\nelse\n\t$0\nend",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ifee": true
        },
        "opts": {}
      },
      {
        "content": "unless ${1:condition}\n\t${0:${VISUAL}}\nend",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "unless": true
        },
        "opts": {}
      },
      {
        "content": "unless ${1:condition}\n\t$2\nelse\n\t$0\nend",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "unlesse": true
        },
        "opts": {}
      },
      {
        "content": "unless ${1:condition}\n\t$2\nelsif ${3:condition}\n\t$4\nelse\n\t$0\nend",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "unlesee": true
        },
        "opts": {}
      },
      {
        "content": "while ${1:condition}\n\t${0:${VISUAL}}\nend",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "wh": true
        },
        "opts": {}
      },
      {
        "content": "for ${1:e} in ${2:c}\n\t${0}\nend",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "for": true
        },
        "opts": {}
      },
      {
        "content": "until ${1:condition}\n\t${0:${VISUAL}}\nend",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "until": true
        },
        "opts": {}
      },
      {
        "content": "class ${0:BlankSlate}\n\tinstance_methods.each { |meth| undef_method(meth) unless meth =~ /\\A__/ }\nend",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "blankslate class BlankSlate .. initialize .. end": true
        },
        "opts": {}
      },
      {
        "content": "class << ${1:self}\n\t${0}\nend",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "claself class << self .. end": true
        },
        "opts": {}
      },
      {
        "content": "attr_reader :${0:attr_names}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "r": true
        },
        "opts": {}
      },
      {
        "content": "attr_writer :${0:attr_names}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "w": true
        },
        "opts": {}
      },
      {
        "content": "attr_accessor :${0:attr_names}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "rw": true
        },
        "opts": {}
      },
      {
        "content": "attr_protected :${0:attr_names}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "atp": true
        },
        "opts": {}
      },
      {
        "content": "attr_accessible :${0:attr_names}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ata": true
        },
        "opts": {}
      },
      {
        "content": "accepts_nested_attributes_for :${0:association}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ana": true
        },
        "opts": {}
      },
      {
        "content": "@${1:variable_name} ||= ${0:cached_value}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ivc": true
        },
        "opts": {}
      },
      {
        "content": "include Enumerable\ndef each(&block)\n\t${0}\nend",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "Enum": true
        },
        "opts": {}
      },
      {
        "content": "include Comparable\ndef <=>(other)\n\t${0}\nend",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "Comp": true
        },
        "opts": {}
      },
      {
        "content": "extend Forwardable",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "Forw-": true
        },
        "opts": {}
      },
      {
        "content": "def self.${1:class_method_name}\n\t${0}\nend",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "defs": true
        },
        "opts": {}
      },
      {
        "content": "def initialize(${1:args})\n\t${0}\nend",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "definit": true
        },
        "opts": {}
      },
      {
        "content": "def method_missing(meth, *args, &blk)\n\t${0}\nend",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "defmm": true
        },
        "opts": {}
      },
      {
        "content": "def_delegator :${1:@del_obj}, :${2:del_meth}, :${0:new_name}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "defd": true
        },
        "opts": {}
      },
      {
        "content": "def_delegators :${1:@del_obj}, :${0:del_methods}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "defds": true
        },
        "opts": {}
      },
      {
        "content": "alias_method :${1:new_name}, :${0:old_name}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "am": true
        },
        "opts": {}
      },
      {
        "content": "if __FILE__ == $PROGRAM_NAME\n\t${0}\nend",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "app": true
        },
        "opts": {}
      },
      {
        "content": "if ARGV.${1}\n\tabort \"Usage: #{$PROGRAM_NAME} ${2:ARGS_GO_HERE}\"${0}\nend",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "usai": true
        },
        "opts": {}
      },
      {
        "content": "unless ARGV.${1}\n\tabort \"Usage: #{$PROGRAM_NAME} ${2:ARGS_GO_HERE}\"${0}\nend",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "usau": true
        },
        "opts": {}
      },
      {
        "content": "Array.new(${1:10}) { |${2:i}| ${0} }",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "array": true
        },
        "opts": {}
      },
      {
        "content": "Hash.new { |${1:hash}, ${2:key}| $1[$2] = ${0} }",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "hash": true
        },
        "opts": {}
      },
      {
        "content": "File.foreach(${1:'path/to/file'}) { |${2:line}| ${0} }",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "file File.foreach() { |line| .. }": true
        },
        "opts": {}
      },
      {
        "content": "File.read(${1:'path/to/file'})",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "file File.read()": true
        },
        "opts": {}
      },
      {
        "content": "Dir.glob(${1:'dir/glob/*'}) { |${2:file}| ${0} }",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "Dir Dir.global() { |file| .. }": true
        },
        "opts": {}
      },
      {
        "content": "Dir[${1:'glob/**/*.rb'}]",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "Dir Dir[\"..\"]": true
        },
        "opts": {}
      },
      {
        "content": "Filename.dirname(__FILE__)",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "dir": true
        },
        "opts": {}
      },
      {
        "content": "delete_if { |${1:e}| ${0} }",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "deli": true
        },
        "opts": {}
      },
      {
        "content": "fill(${1:range}) { |${2:i}| ${0} }",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "fil": true
        },
        "opts": {}
      },
      {
        "content": "reduce(Array.new) { |${1:arr}, ${2:a}| $1.push(*$2) }",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "flao": true
        },
        "opts": {}
      },
      {
        "content": "zip(${1:enums}) { |${2:row}| ${0} }",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "zip": true
        },
        "opts": {}
      },
      {
        "content": "downto(${1:0}) { |${2:n}| ${0} }",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "dow": true
        },
        "opts": {}
      },
      {
        "content": "step(${1:2}) { |${2:n}| ${0} }",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ste": true
        },
        "opts": {}
      },
      {
        "content": "times { |${1:n}| ${0} }",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "tim": true
        },
        "opts": {}
      },
      {
        "content": "upto(${1:1.0/0.0}) { |${2:n}| ${0} }",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "upt": true
        },
        "opts": {}
      },
      {
        "content": "loop { ${0} }",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "loo": true
        },
        "opts": {}
      },
      {
        "content": "each { |${1:e}| ${0} }",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ea": true
        },
        "opts": {}
      },
      {
        "content": "each do |${1:e}|\n\t${0}\nend",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ead": true
        },
        "opts": {}
      },
      {
        "content": "each_byte { |${1:byte}| ${0} }",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "eab": true
        },
        "opts": {}
      },
      {
        "content": "each_char { |${1:chr}| ${0} }",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "eac- each_char { |chr| .. }": true
        },
        "opts": {}
      },
      {
        "content": "each_cons(${1:2}) { |${2:group}| ${0} }",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "eac- each_cons(..) { |group| .. }": true
        },
        "opts": {}
      },
      {
        "content": "each_index { |${1:i}| ${0} }",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "eai": true
        },
        "opts": {}
      },
      {
        "content": "each_index do |${1:i}|\n\t${0}\nend",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "eaid": true
        },
        "opts": {}
      },
      {
        "content": "each_key { |${1:key}| ${0} }",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "eak": true
        },
        "opts": {}
      },
      {
        "content": "each_key do |${1:key}|\n\t${0}\nend",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "eakd": true
        },
        "opts": {}
      },
      {
        "content": "each_line { |${1:line}| ${0} }",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "eal": true
        },
        "opts": {}
      },
      {
        "content": "each_line do |${1:line}|\n\t${0}\nend",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "eald": true
        },
        "opts": {}
      },
      {
        "content": "each_pair { |${1:name}, ${2:val}| ${0} }",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "eap": true
        },
        "opts": {}
      },
      {
        "content": "each_pair do |${1:name}, ${2:val}|\n\t${0}\nend",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "eapd": true
        },
        "opts": {}
      },
      {
        "content": "each_slice(${1:2}) { |${2:group}| ${0} }",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "eas-": true
        },
        "opts": {}
      },
      {
        "content": "each_slice(${1:2}) do |${2:group}|\n\t${0}\nend",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "easd-": true
        },
        "opts": {}
      },
      {
        "content": "each_value { |${1:val}| ${0} }",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "eav": true
        },
        "opts": {}
      },
      {
        "content": "each_value do |${1:val}|\n\t${0}\nend",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "eavd": true
        },
        "opts": {}
      },
      {
        "content": "each_with_index { |${1:e}, ${2:i}| ${0} }",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "eawi": true
        },
        "opts": {}
      },
      {
        "content": "each_with_index do |${1:e}, ${2:i}|\n\t${0}\nend",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "eawid": true
        },
        "opts": {}
      },
      {
        "content": "each_with_object(${1:init}) { |${2:e}, ${3:var}| ${0} }",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "eawo": true
        },
        "opts": {}
      },
      {
        "content": "each_with_object(${1:init}) do |${2:e}, ${3:var}|\n\t${0}\nend",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "eawod": true
        },
        "opts": {}
      },
      {
        "content": "reverse_each { |${1:e}| ${0} }",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "reve": true
        },
        "opts": {}
      },
      {
        "content": "reverse_each do |${1:e}|\n\t${0}\nend",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "reved": true
        },
        "opts": {}
      },
      {
        "content": "inject(${1:init}) { |${2:mem}, ${3:var}| ${0} }",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "inj": true
        },
        "opts": {}
      },
      {
        "content": "inject(${1:init}) do |${2:mem}, ${3:var}|\n\t${0}\nend",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "injd": true
        },
        "opts": {}
      },
      {
        "content": "reduce(${1:init}) { |${2:mem}, ${3:var}| ${0} }",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "red": true
        },
        "opts": {}
      },
      {
        "content": "reduce(${1:init}) do |${2:mem}, ${3:var}|\n\t${0}\nend",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "redd": true
        },
        "opts": {}
      },
      {
        "content": "map { |${1:e}| ${0} }",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "map": true
        },
        "opts": {}
      },
      {
        "content": "map do |${1:e}|\n\t${0}\nend",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "mapd": true
        },
        "opts": {}
      },
      {
        "content": "enum_with_index.map { |${1:e}, ${2:i}| ${0} }",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "mapwi-": true
        },
        "opts": {}
      },
      {
        "content": "sort { |a, b| ${0} }",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "sor": true
        },
        "opts": {}
      },
      {
        "content": "sort_by { |${1:e}| ${0} }",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "sorb": true
        },
        "opts": {}
      },
      {
        "content": "sort_by { rand }",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ran": true
        },
        "opts": {}
      },
      {
        "content": "all? { |${1:e}| ${0} }",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "all": true
        },
        "opts": {}
      },
      {
        "content": "any? { |${1:e}| ${0} }",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "any": true
        },
        "opts": {}
      },
      {
        "content": "classify { |${1:e}| ${0} }",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "cl": true
        },
        "opts": {}
      },
      {
        "content": "collect { |${1:e}| ${0} }",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "col": true
        },
        "opts": {}
      },
      {
        "content": "collect do |${1:e}|\n\t${0}\nend",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "cold": true
        },
        "opts": {}
      },
      {
        "content": "detect { |${1:e}| ${0} }",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "det": true
        },
        "opts": {}
      },
      {
        "content": "detect do |${1:e}|\n\t${0}\nend",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "detd": true
        },
        "opts": {}
      },
      {
        "content": "fetch(${1:name}) { |${2:key}| ${0} }",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "fet": true
        },
        "opts": {}
      },
      {
        "content": "find { |${1:e}| ${0} }",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "fin": true
        },
        "opts": {}
      },
      {
        "content": "find do |${1:e}|\n\t${0}\nend",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "find": true
        },
        "opts": {}
      },
      {
        "content": "find_all { |${1:e}| ${0} }",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "fina": true
        },
        "opts": {}
      },
      {
        "content": "find_all do |${1:e}|\n\t${0}\nend",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "finad": true
        },
        "opts": {}
      },
      {
        "content": "grep(${1:/pattern/}) { |${2:match}| ${0} }",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "gre": true
        },
        "opts": {}
      },
      {
        "content": "${1:g}sub(${2:/pattern/}) { |${3:match}| ${0} }",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "sub": true
        },
        "opts": {}
      },
      {
        "content": "scan(${1:/pattern/}) { |${2:match}| ${0} }",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "sca": true
        },
        "opts": {}
      },
      {
        "content": "scan(${1:/pattern/}) do |${2:match}|\n\t${0}\nend",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "scad": true
        },
        "opts": {}
      },
      {
        "content": "max { |a, b| ${0} }",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "max": true
        },
        "opts": {}
      },
      {
        "content": "min { |a, b| ${0} }",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "min": true
        },
        "opts": {}
      },
      {
        "content": "partition { |${1:e}| ${0} }",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "par": true
        },
        "opts": {}
      },
      {
        "content": "partition do |${1:e}|\n\t${0}\nend",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "pard": true
        },
        "opts": {}
      },
      {
        "content": "reject { |${1:e}| ${0} }",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "rej": true
        },
        "opts": {}
      },
      {
        "content": "reject do |${1:e}|\n\t${0}\nend",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "rejd": true
        },
        "opts": {}
      },
      {
        "content": "select { |${1:e}| ${0} }",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "sel": true
        },
        "opts": {}
      },
      {
        "content": "select do |${1:e}|\n\t${0}\nend",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "seld": true
        },
        "opts": {}
      },
      {
        "content": "lambda { |${1:args}| ${0} }",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "lam": true
        },
        "opts": {}
      },
      {
        "content": "-> { ${0} }",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "->": true
        },
        "opts": {}
      },
      {
        "content": "->(${1:args}) { ${0} }",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "->a": true
        },
        "opts": {}
      },
      {
        "content": "do\n\t${0}\nend",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "do": true
        },
        "opts": {}
      },
      {
        "content": "do |${1:v}|\n\t${2}\nend",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "dov": true
        },
        "opts": {}
      },
      {
        "content": "${1:key}: ${2:'value'}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          ":": true
        },
        "opts": {}
      },
      {
        "content": "open('${1:path/or/url/or/pipe}', '${2:w}') { |${3:io}| ${0} }",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ope": true
        },
        "opts": {}
      },
      {
        "content": "File.join(File.dirname(__FILE__), *['${1:rel path here}'])",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "fpath": true
        },
        "opts": {}
      },
      {
        "content": "ARGF.each_line${1} do |${2:line}|\n\t${0}\nend",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "unif": true
        },
        "opts": {}
      },
      {
        "content": "require 'optparse'\noptions = { ${0:default: 'args'} }\nARGV.options do |opts|\n\topts.banner = \"Usage: #{File.basename($PROGRAM_NAME)}\"\nend",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "optp": true
        },
        "opts": {}
      },
      {
        "content": "opts.on('-${1:o}', '--${2:long-option-name}', ${3:String}, '${4:Option description.}') do |${5:opt}|\n\t${0}\nend",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "opt": true
        },
        "opts": {}
      },
      {
        "content": "require 'test/unit'\nrequire '${1:library_file_name}'\nclass Test${2:$1} < Test::Unit::TestCase\n\tdef test_${3:case_name}\n\t\t${0}\n\tend\nend",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "tc": true
        },
        "opts": {}
      },
      {
        "content": "require 'test/unit'\nrequire 'tc_${1:test_case_file}'\nrequire 'tc_${2:test_case_file}'",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ts": true
        },
        "opts": {}
      },
      {
        "content": "assert ${1:test}, '${2:Failure message.}'",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "as": true
        },
        "opts": {}
      },
      {
        "content": "assert_equal ${1:expected}, ${2:actual}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ase": true
        },
        "opts": {}
      },
      {
        "content": "assert_not_equal ${1:unexpected}, ${2:actual}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "asne": true
        },
        "opts": {}
      },
      {
        "content": "assert_in_delta ${1:expected_float}, ${2:actual_float}, ${3:2**-20}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "asid": true
        },
        "opts": {}
      },
      {
        "content": "assert_includes ${1:collection}, ${2:object}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "asi": true
        },
        "opts": {}
      },
      {
        "content": "assert_instance_of ${1:ExpectedClass}, ${2:actual_instance}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "asio": true
        },
        "opts": {}
      },
      {
        "content": "assert_kind_of ${1:ExpectedKind}, ${2:actual_instance}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "asko": true
        },
        "opts": {}
      },
      {
        "content": "assert_nil ${1:instance}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "asn": true
        },
        "opts": {}
      },
      {
        "content": "assert_not_nil ${1:instance}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "asnn": true
        },
        "opts": {}
      },
      {
        "content": "assert_match(/${1:expected_pattern}/, ${2:actual_string})",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "asm": true
        },
        "opts": {}
      },
      {
        "content": "assert_no_match(/${1:unexpected_pattern}/, ${2:actual_string})",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "asnm": true
        },
        "opts": {}
      },
      {
        "content": "assert_operator ${1:left}, :${2:operator}, ${3:right}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "aso": true
        },
        "opts": {}
      },
      {
        "content": "assert_raises(${1:StandardError}) { ${0} }",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "asr": true
        },
        "opts": {}
      },
      {
        "content": "assert_raises ${1:StandardError} do\n\t${0}\nend",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "asrd": true
        },
        "opts": {}
      },
      {
        "content": "assert_nothing_raised(${1:StandardError}) { ${0} }",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "asnr": true
        },
        "opts": {}
      },
      {
        "content": "assert_nothing_raised ${1:StandardError} do\n\t${0}\nend",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "asnrd": true
        },
        "opts": {}
      },
      {
        "content": "assert_respond_to ${1:object}, :${2:method}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "asrt": true
        },
        "opts": {}
      },
      {
        "content": "assert_same ${1:expected}, ${2:actual}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ass assert_same(..)": true
        },
        "opts": {}
      },
      {
        "content": "assert_send [${1:object}, :${2:message}, ${3:args}]",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "asss assert_send(..)": true
        },
        "opts": {}
      },
      {
        "content": "assert_not_same ${1:unexpected}, ${2:actual}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "asns": true
        },
        "opts": {}
      },
      {
        "content": "assert_throws :${1:expected}, -> { ${0} }",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ast": true
        },
        "opts": {}
      },
      {
        "content": "assert_throws :${1:expected} do\n\t${0}\nend",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "astd": true
        },
        "opts": {}
      },
      {
        "content": "assert_nothing_thrown { ${0} }",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "asnt": true
        },
        "opts": {}
      },
      {
        "content": "assert_nothing_thrown do\n\t${0}\nend",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "asntd": true
        },
        "opts": {}
      },
      {
        "content": "flunk '${1:Failure message.}'",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "fl": true
        },
        "opts": {}
      },
      {
        "content": "refute ${1:test}, '${2:Failure message.}'",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "rf": true
        },
        "opts": {}
      },
      {
        "content": "refute_equal ${1:unexpected}, ${2:actual}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "rfe": true
        },
        "opts": {}
      },
      {
        "content": "refute_kind_of ${1:UnexpectedKind}, ${2:actual_instance}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "rfko": true
        },
        "opts": {}
      },
      {
        "content": "refute_nil ${1:instance}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "rfn": true
        },
        "opts": {}
      },
      {
        "content": "refute_operator ${1:left}, :${2:operator}, ${3:right}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "rfo": true
        },
        "opts": {}
      },
      {
        "content": "refute_includes ${1:collection}, ${2:object}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "rfi": true
        },
        "opts": {}
      },
      {
        "content": "refute_in_delta ${1:unexpected_float}, ${2:actual_float}, ${3:2**-20}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "rfid": true
        },
        "opts": {}
      },
      {
        "content": "refute_instance_of ${1:UnexpectedClass}, ${2:actual_instance}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "rfio": true
        },
        "opts": {}
      },
      {
        "content": "refute_same ${1:unexpected}, ${2:actual}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "rfs": true
        },
        "opts": {}
      },
      {
        "content": "TESTS = ${1:10_000}\nBenchmark.bmbm do |results|\n\t${0}\nend",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "bm-": true
        },
        "opts": {}
      },
      {
        "content": "results.report('${1:name}:') { TESTS.times { ${0} } }",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "rep": true
        },
        "opts": {}
      },
      {
        "content": "File.open('${1:path/to/file.dump}', 'wb') { |${2:file}| Marshal.dump(${3:obj}, $2) }",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "Md": true
        },
        "opts": {}
      },
      {
        "content": "File.open('${1:path/to/file.dump}', 'rb') { |${2:file}| Marshal.load($2) }",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "Ml": true
        },
        "opts": {}
      },
      {
        "content": "Marshal.load(Marshal.dump(${1:obj_to_copy}))",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "deec": true
        },
        "opts": {}
      },
      {
        "content": "PStore.new('${1:file_name.pstore}')",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "Pn-": true
        },
        "opts": {}
      },
      {
        "content": "transaction(${1:true}) { ${0} }",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "tra": true
        },
        "opts": {}
      },
      {
        "content": "REXML::Document.new(File.read('${1:path/to/file}'))",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "xml-": true
        },
        "opts": {}
      },
      {
        "content": "elements.each('${1://Xpath}') do |${2:node}|\n\t${0}\nend",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "xpa": true
        },
        "opts": {}
      },
      {
        "content": "split('::').inject(Object) { |par, const| par.const_get(const) }",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "clafn": true
        },
        "opts": {}
      },
      {
        "content": "class << self; self end",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "sinc": true
        },
        "opts": {}
      },
      {
        "content": "desc '${1:Task description}'\ntask ${2:task_name: [:dependent, :tasks]} do\n\t${0}\nend",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "tas": true
        },
        "opts": {}
      },
      {
        "content": "{ |${1:var}| ${0} }",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "b": true
        },
        "opts": {}
      },
      {
        "content": "begin\n\tfail 'A test exception.'\nrescue StandardError => e\n\tputs e.message\n\tputs e.backtrace.inspect\nelse\n\t# other exception\nensure\n\t# always executed\nend",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "begin": true
        },
        "opts": {}
      },
      {
        "content": "require 'byebug'; byebug",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "debug": true
        },
        "opts": {}
      },
      {
        "content": "require 'debugger'; debugger",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "debug19": true
        },
        "opts": {}
      },
      {
        "content": "require 'ruby-debug'; debugger",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "debug18": true
        },
        "opts": {}
      },
      {
        "content": "require 'pry'; binding.pry",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "pry": true
        },
        "opts": {}
      },
      {
        "content": "strftime('${1:%Y-%m-%d %H:%M:%S %z}')${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "strf": true
        },
        "opts": {}
      },
      {
        "content": "must_be ${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "mb": true
        },
        "opts": {}
      },
      {
        "content": "wont_be ${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "wb": true
        },
        "opts": {}
      },
      {
        "content": "must_be_empty",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "mbe": true
        },
        "opts": {}
      },
      {
        "content": "wont_be_empty",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "wbe": true
        },
        "opts": {}
      },
      {
        "content": "must_be_instance_of ${0:Class}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "mbio": true
        },
        "opts": {}
      },
      {
        "content": "wont_be_instance_of ${0:Class}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "wbio": true
        },
        "opts": {}
      },
      {
        "content": "must_be_kind_of ${0:Class}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "mbko": true
        },
        "opts": {}
      },
      {
        "content": "wont_be_kind_of ${0:Class}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "wbko": true
        },
        "opts": {}
      },
      {
        "content": "must_be_nil",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "mbn": true
        },
        "opts": {}
      },
      {
        "content": "wont_be_nil",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "wbn": true
        },
        "opts": {}
      },
      {
        "content": "must_be_same_as ${0:other}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "mbsa": true
        },
        "opts": {}
      },
      {
        "content": "wont_be_same_as ${0:other}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "wbsa": true
        },
        "opts": {}
      },
      {
        "content": "-> { ${0} }.must_be_silent",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "mbsi": true
        },
        "opts": {}
      },
      {
        "content": "must_be_within_delta ${1:0.1}, ${2:0.1}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "mbwd": true
        },
        "opts": {}
      },
      {
        "content": "wont_be_within_delta ${1:0.1}, ${2:0.1}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "wbwd": true
        },
        "opts": {}
      },
      {
        "content": "must_be_within_epsilon ${1:0.1}, ${2:0.1}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "mbwe": true
        },
        "opts": {}
      },
      {
        "content": "wont_be_within_epsilon ${1:0.1}, ${2:0.1}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "wbwe": true
        },
        "opts": {}
      },
      {
        "content": "must_equal ${0:other}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "me": true
        },
        "opts": {}
      },
      {
        "content": "wont_equal ${0:other}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "we": true
        },
        "opts": {}
      },
      {
        "content": "must_include ${0:what}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "mi": true
        },
        "opts": {}
      },
      {
        "content": "wont_include ${0:what}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "wi": true
        },
        "opts": {}
      },
      {
        "content": "must_match /${0:regex}/",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "mm": true
        },
        "opts": {}
      },
      {
        "content": "wont_match /${0:regex}/",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "wm": true
        },
        "opts": {}
      },
      {
        "content": "-> { ${1} }.must_output '${0}'",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "mout": true
        },
        "opts": {}
      },
      {
        "content": "-> { ${1} }.must_raise ${0:StandardError}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "mra": true
        },
        "opts": {}
      },
      {
        "content": "must_respond_to :${0:method}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "mrt": true
        },
        "opts": {}
      },
      {
        "content": "wont_respond_to :${0:method}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "wrt": true
        },
        "opts": {}
      },
      {
        "content": "must_send [ ${1:what}, :${2:method}, ${3:args} ]",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "msend": true
        },
        "opts": {}
      },
      {
        "content": "-> { throw :${1:error} }.must_throw :${2:error}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "mthrow": true
        },
        "opts": {}
      },
      {
        "content": "describe '${1:#method}' do\n\t${0:pending 'Not implemented'}\nend",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "descm": true
        },
        "opts": {}
      },
      {
        "content": "context '${1:message}' do\n\t${0}\nend",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "cont": true
        },
        "opts": {}
      },
      {
        "content": "before :${1:each} do\n\t${0}\nend",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "bef": true
        },
        "opts": {}
      },
      {
        "content": "after :${1:each} do\n\t${0}\nend",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "aft": true
        },
        "opts": {}
      },
      {
        "content": "let(:${1:object}) { ${0} }",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "let": true
        },
        "opts": {}
      },
      {
        "content": "let!(:${1:object}) { ${0} }",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "let!": true
        },
        "opts": {}
      },
      {
        "content": "subject { ${0} }",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "subj": true
        },
        "opts": {}
      },
      {
        "content": "subject.${0:method}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "s.": true
        },
        "opts": {}
      },
      {
        "content": "specify { subject.${0} }",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "spec": true
        },
        "opts": {}
      },
      {
        "content": "expect(${1:object}).to ${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "exp": true
        },
        "opts": {}
      },
      {
        "content": "expect { ${1:object} }.to ${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "expb": true
        },
        "opts": {}
      },
      {
        "content": "expect { ${1:object} }.to raise_error ${2:StandardError}, /${0:message_regex}/",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "experr": true
        },
        "opts": {}
      },
      {
        "content": "allow(${1:object}).to ${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "allow": true
        },
        "opts": {}
      },
      {
        "content": "shared_examples ${0:'shared examples name'}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "shared": true
        },
        "opts": {}
      },
      {
        "content": "it_behaves_like ${0:'shared examples name'}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ibl": true
        },
        "opts": {}
      },
      {
        "content": "it '${1:spec_name}' do\n\t${0}\nend",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "it": true
        },
        "opts": {}
      },
      {
        "content": "its(:${1:method}) { should ${0} }",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "its": true
        },
        "opts": {}
      },
      {
        "content": "it { should ${0} }",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "is": true
        },
        "opts": {}
      },
      {
        "content": "it { should_not ${0} }",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "isn": true
        },
        "opts": {}
      },
      {
        "content": "it { expect(${1:object}).${2} ${0} }",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "iexp": true
        },
        "opts": {}
      },
      {
        "content": "it { expect { ${1:object} }.${2} ${0} }",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "iexpb": true
        },
        "opts": {}
      },
      {
        "content": "it { is_expected.to ${0} }",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "iiexp": true
        },
        "opts": {}
      },
      {
        "content": "it { is_expected.not_to ${0} }",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "iiexpn": true
        },
        "opts": {}
      },
      {
        "content": "aggregate_failures '${1:message}' do\n\t${0}\nend",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "agg": true
        },
        "opts": {}
      }
    ],
    "rust": [
      {
        "content": "fn ${1:#:func_name}(${2:#:args}) {\n    ${0:TARGET}\n}",
        "doc": "",
        "grammar": "snu",
        "label": "fn () {}",
        "matches": {
          "fn": true
        },
        "opts": {
          "head": true
        }
      },
      {
        "content": "fn ${1:#:func_name}(${2:#:args}) -> ${3:#:()} {\n    ${0:TARGET}\n}",
        "doc": "",
        "grammar": "snu",
        "label": "fn () {}",
        "matches": {
          "fn-": true
        },
        "opts": {
          "head": true
        }
      },
      {
        "content": "pub fn ${1:#:func_name}(${2:#:args}) -> ${3:#:()} {\n    ${0:TARGET}\n}",
        "doc": "",
        "grammar": "snu",
        "label": "pubfn () {}",
        "matches": {
          "pubfn": true
        },
        "opts": {
          "head": true
        }
      },
      {
        "content": "#[test]\nfn ${1:#:test_function_name}() {\n    ${0:TARGET}\n}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "test": true
        },
        "opts": {
          "head": true
        }
      },
      {
        "content": "pub fn new(${1}) -> ${2:#:Name} {\n    ${0:TARGET}\n}",
        "doc": "",
        "grammar": "snu",
        "label": "pub fn new() {}",
        "matches": {
          "pubnew": true
        },
        "opts": {
          "head": true
        }
      },
      {
        "content": "impl ${1} {\n    ${0:TARGET}\n}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "impl": true
        },
        "opts": {
          "head": true
        }
      },
      {
        "content": "impl ${1} for ${2} {\n    ${0:TARGET}\n}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "implfor": true
        },
        "opts": {
          "head": true
        }
      },
      {
        "content": "trait ${1} {\n    ${0:TARGET}\n}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "trait": true
        },
        "opts": {
          "head": true
        }
      },
      {
        "content": "${1:#:macro_name}!(${2})${3}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "macro": true
        },
        "opts": {}
      },
      {
        "content": "bitflags! {\n    ${0:TARGET}\n}",
        "doc": "",
        "grammar": "snu",
        "label": "bitflags!",
        "matches": {
          "bfl": true
        },
        "opts": {}
      },
      {
        "content": "println!(${1:\"\\{\\}\"}, ${0:TARGET});",
        "doc": "",
        "grammar": "snu",
        "label": "println!",
        "matches": {
          "pln": true
        },
        "opts": {}
      },
      {
        "content": "format!(\"${1:\\{\\}}\", ${0:TARGET});",
        "doc": "",
        "grammar": "snu",
        "label": "format!",
        "matches": {
          "fm": true
        },
        "opts": {}
      },
      {
        "content": "extern crate ${0:TARGET};",
        "doc": "",
        "grammar": "snu",
        "label": "extern crate",
        "matches": {
          "ec": true
        },
        "opts": {
          "head": true
        }
      },
      {
        "content": "#![feature(phase)]\n#[phase(plugin, link)] extern crate log;",
        "doc": "",
        "grammar": "snu",
        "label": "extern crate log",
        "matches": {
          "ecl": true
        },
        "opts": {
          "head": true
        }
      },
      {
        "content": "#![crate_name=${1:#:crate_name}]",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "crate": true
        },
        "opts": {
          "head": true
        }
      },
      {
        "content": "#[derive(${1:TARGET})]${2}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "derive": true
        },
        "opts": {
          "head": true
        }
      },
      {
        "content": "mod ${1:#:mod_name} {\n    ${0:TARGET}\n}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "mod": true
        },
        "opts": {
          "head": true
        }
      },
      {
        "content": "let ${1:TARGET} = ${2};${3}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "let": true
        },
        "opts": {}
      },
      {
        "content": "if ${1:#:condition} {\n    ${0:TARGET}\n}",
        "doc": "",
        "grammar": "snu",
        "label": "if {}",
        "matches": {
          "if": true
        },
        "opts": {}
      },
      {
        "content": "else {\n    ${0:TARGET}\n}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "else": true
        },
        "opts": {}
      },
      {
        "content": "} else if (${1:#:condition}) {\n    ${0:TARGET}\n}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "elseif": true
        },
        "opts": {}
      },
      {
        "content": "if ${1:#:condition} {\n    ${2:TARGET}\n} else {\n    ${3}\n}",
        "doc": "",
        "grammar": "snu",
        "label": "if () {} else {}",
        "matches": {
          "ifelse": true
        },
        "opts": {}
      },
      {
        "content": "for ${1} in ${2} {\n    ${0:TARGET}\n}",
        "doc": "",
        "grammar": "snu",
        "label": "forin  {}",
        "matches": {
          "forin": true
        },
        "opts": {}
      },
      {
        "content": "match ${1:TARGET} {\n    ${2:#:pattern} => ${3:#expr},${4}\n}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "match": true
        },
        "opts": {}
      },
      {
        "content": "${1:TARGET} => ${2:#expr},${3}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "case": true,
          "mcase": true
        },
        "opts": {}
      },
      {
        "content": "struct ${1} {\n    ${0:TARGET}\n}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "struct": true
        },
        "opts": {
          "head": true
        }
      },
      {
        "content": "pub struct ${1} {\n    ${0:TARGET}\n}",
        "doc": "",
        "grammar": "snu",
        "label": "pub struct",
        "matches": {
          "pubstruct": true
        },
        "opts": {
          "head": true
        }
      },
      {
        "content": "enum ${1} {\n    ${0:TARGET}\n}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "enum": true
        },
        "opts": {
          "head": true
        }
      },
      {
        "content": "Option<${1:()}>${2}",
        "doc": "",
        "grammar": "snu",
        "label": "Option<A>",
        "matches": {
          "opt": true
        },
        "opts": {}
      },
      {
        "content": "Result<${1:#:~str}, ${2:#:()}>${3}",
        "doc": "",
        "grammar": "snu",
        "label": "Result<A, B>",
        "matches": {
          "res": true
        },
        "opts": {}
      },
      {
        "content": "fn ${1:function_name}(${2})${3} {\n\t${0}\n}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "fn \"Function definition\"": true
        },
        "opts": {}
      },
      {
        "content": "pub fn ${1:function_name}(${2})${3} {\n\t${0}\n}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "pfn \"Function definition\"": true
        },
        "opts": {}
      },
      {
        "content": "async fn ${1:function_name}(${2})${3} {\n\t${0}\n}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "afn \"Async function definition\"": true
        },
        "opts": {}
      },
      {
        "content": "pub async fn ${1:function_name}(${2})${3} {\n\t${0}\n}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "pafn \"Async function definition\"": true
        },
        "opts": {}
      },
      {
        "content": "#[bench]\nfn ${1:bench_function_name}(b: &mut test::Bencher) {\n\tb.iter(|| {\n\t\t${0}\n\t})\n}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "bench \"Bench function\" b": true
        },
        "opts": {}
      },
      {
        "content": "pub fn new(${2}) -> ${1:Self} {\n\t$1 { ${3} }\n}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "new \"Constructor function\"": true
        },
        "opts": {}
      },
      {
        "content": "pub fn main() {\n\t${0}\n}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "main \"Main function\"": true
        },
        "opts": {}
      },
      {
        "content": "let ${1} = ${2};",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "let \"let variable declaration with type inference\"": true
        },
        "opts": {}
      },
      {
        "content": "let ${1}: ${2} = ${3};",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "lett \"let variable declaration with explicit type annotation\"": true
        },
        "opts": {}
      },
      {
        "content": "let mut ${1} = ${2};",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "letm \"let mut variable declaration with type inference\"": true
        },
        "opts": {}
      },
      {
        "content": "let mut ${1}: ${2} = ${3};",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "lettm \"let mut variable declaration with explicit type annotation\"": true
        },
        "opts": {}
      },
      {
        "content": "print!(\"${1}\");",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "pri \"print!\"": true
        },
        "opts": {}
      },
      {
        "content": "print!(\"${1}{${2}}\", ${3});",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "pri, \"print! with format param\"": true
        },
        "opts": {}
      },
      {
        "content": "println!(\"${1}\");",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "pln \"println!\"": true
        },
        "opts": {}
      },
      {
        "content": "println!(\"${1}{${2}}\", ${3});",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "pln, \"println! with format param\"": true
        },
        "opts": {}
      },
      {
        "content": "format!(\"${1}{${2}}\", ${3});",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "fmt \"format!\"": true
        },
        "opts": {}
      },
      {
        "content": "dbg!(${0:${VISUAL}})",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "d \"dbg! debugging macro\"": true
        },
        "opts": {}
      },
      {
        "content": "dbg!(&${1});\n${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "d; \"dbg! debugging macro statement\"": true
        },
        "opts": {}
      },
      {
        "content": "extern crate ${1:sync};",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ec \"extern crate\"": true
        },
        "opts": {}
      },
      {
        "content": "#[macro_use]\nextern crate log;",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ecl \"extern crate log\"": true
        },
        "opts": {}
      },
      {
        "content": "assert!(${1:predicate});",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "as \"assert!\"": true
        },
        "opts": {}
      },
      {
        "content": "assert_eq!(${1:expected}, ${2:actual});",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ase \"assert_eq!\"": true
        },
        "opts": {}
      },
      {
        "content": "#[test]\nfn ${1:function_name}_test() {\n\t${0}\n}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "test \"Unit test function\"": true
        },
        "opts": {}
      },
      {
        "content": "#[cfg(test)]\nmod tests {\n\tuse super::${1:*};\n\ttest${0}\n}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "testmod \"Test module\" b": true
        },
        "opts": {}
      },
      {
        "content": "#[ignore]",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ig \"#[ignore]\"": true
        },
        "opts": {}
      },
      {
        "content": "#[allow(${1:unused_variables})]",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "allow \"allow lint attribute\" b": true
        },
        "opts": {}
      },
      {
        "content": "#[cfg(${1:target_os = \"linux\"})]",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "cfg \"cfg attribute\" b": true
        },
        "opts": {}
      },
      {
        "content": "#![feature(${1:plugin})]",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "feat \"feature attribute\" b": true
        },
        "opts": {}
      },
      {
        "content": "#[derive(${1:Debug})]",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "der \"#[derive(..)]\" b": true
        },
        "opts": {}
      },
      {
        "content": "#[${1:inline}]",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "attr \"#[..]\" b": true
        },
        "opts": {}
      },
      {
        "content": "// Crate name\n#![crate_name = \"${1:crate_name}\"]\n// Additional metadata attributes\n#![desc = \"${2:Description.}\"]\n#![license = \"${3:BSD}\"]\n#![comment = \"${4:Comment.}\"]\n// Specify the output type\n#![crate_type = \"${5:lib}\"]",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "crate \"Define create meta attributes\"": true
        },
        "opts": {}
      },
      {
        "content": "Option<${1:i32}>",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "opt \"Option<T>\"": true
        },
        "opts": {}
      },
      {
        "content": "Result<${1:&str}, ${2:()}>",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "res \"Result<T, E>\"": true
        },
        "opts": {}
      },
      {
        "content": "if ${1} {\n\t${0:${VISUAL}}\n}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "if": true
        },
        "opts": {}
      },
      {
        "content": "if ${1} {\n\t${2:${VISUAL}}\n} else {\n\t${0}\n}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ife \"if / else\"": true
        },
        "opts": {}
      },
      {
        "content": "if let ${1:Some($2)} = $3 {\n\t${0:${VISUAL}}\n}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ifl \"if let (...)\"": true
        },
        "opts": {}
      },
      {
        "content": "else {\n\t${0:${VISUAL}}\n}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "el \"else\"": true
        },
        "opts": {}
      },
      {
        "content": "else if ${1} {\n\t${0:${VISUAL}}\n}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "eli \"else if\"": true
        },
        "opts": {}
      },
      {
        "content": "match ${1} {\n\t${2} => ${3}\n}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "mat \"match pattern\"": true
        },
        "opts": {}
      },
      {
        "content": "${1:_} => ${2:expression}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "case \"Case clause of pattern match\"": true
        },
        "opts": {}
      },
      {
        "content": "=> $0",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "= \"=> \"": true
        },
        "opts": {}
      },
      {
        "content": "loop {\n\t${0:${VISUAL}}\n}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "loop \"loop {}\" b": true
        },
        "opts": {}
      },
      {
        "content": "while ${1:condition} {\n\t${0:${VISUAL}}\n}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "wh \"while loop\"": true
        },
        "opts": {}
      },
      {
        "content": "while let ${1:Some($2)} = $3 {\n\t${0:${VISUAL}}\n}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "whl \"while let (...)\"": true
        },
        "opts": {}
      },
      {
        "content": "for ${1:i} in ${2} {\n\t${0}\n}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "for \"for ... in ... loop\"": true
        },
        "opts": {}
      },
      {
        "content": "// TODO: $0",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "todo \"TODO comment\"": true
        },
        "opts": {}
      },
      {
        "content": "// FIXME: $0",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "fixme \"FIXME comment\"": true
        },
        "opts": {}
      },
      {
        "content": "impl ${1:Type/Trait}${2: for $3} {\n\t${0}\n}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "impl \"Struct/Trait implementation\"": true
        },
        "opts": {}
      },
      {
        "content": "type ${1:NewName} = $2;",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ty \"Type alias\"": true
        },
        "opts": {}
      },
      {
        "content": "enum ${1:Name} {\n\t${2},\n}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "enum \"enum definition\"": true
        },
        "opts": {}
      },
      {
        "content": "pub enum ${1:Name} {\n\t${2},\n}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "penum \"pub enum definition\"": true
        },
        "opts": {}
      },
      {
        "content": "trait ${1:Name} {\n\t${0}\n}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "trait \"Trait definition\"": true
        },
        "opts": {}
      },
      {
        "content": "impl Drop for $1 {\n\tfn drop(&mut self) {\n\t\t${0}\n\t}\n}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "drop \"Drop trait implementation (destructor)\"": true
        },
        "opts": {}
      },
      {
        "content": "static ${1}: &'static str = \"${0}\";",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ss \"static string declaration\"": true
        },
        "opts": {}
      },
      {
        "content": "static ${1}: ${2:usize} = ${0};",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "stat \"static item declaration\"": true
        },
        "opts": {}
      },
      {
        "content": "thread::spawn(${1:move }|| {\n\t${0}\n});",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "spawn \"spawn a thread\"": true
        },
        "opts": {}
      },
      {
        "content": "let (${1:tx}, ${2:rx}): (Sender<${3:i32}>, Receiver<${4:i32}>) = channel();",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "chan \"Declare (Sender, Receiver) pair of asynchronous channel()\"": true
        },
        "opts": {}
      },
      {
        "content": "impl AsRef<${1:Ref}> for ${2:Type} {\n\tfn as_ref(&self) -> &${3:$1} {\n\t\t&self.${0:field}\n\t}\n}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "asref \"AsRef trait implementation\"": true
        },
        "opts": {}
      },
      {
        "content": "impl AsMut<${1:Ref}> for ${2:Type} {\n\tfn as_mut(&mut self) -> &mut ${3:$1} {\n\t\t&mut self.${0:field}\n\t}\n}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "asmut \"AsMut trait implementation\"": true
        },
        "opts": {}
      },
      {
        "content": "${1:name}: ${2:Type},",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "fd \"Struct field definition\" w": true
        },
        "opts": {}
      },
      {
        "content": "${1:move }|$2| { $3 }",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "|| \"Closure, anonymous function (inline)\" i": true
        },
        "opts": {}
      },
      {
        "content": "${1:move }|$2| {\n\t$3\n}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "|} \"Closure, anonymous function (block)\" i": true
        },
        "opts": {}
      },
      {
        "content": "macro_rules! ${1:name} {\n\t(${2:matcher}) => (\n\t\t$3\n\t)\n}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "macro \"macro_rules!\" b": true
        },
        "opts": {}
      },
      {
        "content": "Box::new(${0:${VISUAL}})",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "boxp \"Box::new()\"": true
        },
        "opts": {}
      },
      {
        "content": "Rc::new(${0:${VISUAL}})",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "rc \"Rc::new()\"": true
        },
        "opts": {}
      },
      {
        "content": "unimplemented!()",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "unim \"unimplemented!()\"": true
        },
        "opts": {}
      },
      {
        "content": "use ${1:std::$2};",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "use \"use ...;\" b": true
        },
        "opts": {}
      },
      {
        "content": ".iter()$0",
        "doc": null,
        "grammar": "snu",
        "label": ".iter()",
        "matches": {
          ".it": true
        },
        "opts": {
          "i": true
        }
      },
      {
        "content": "impl$4 ${1:Type/Trait}${2: for ${3:Type}}${4:<${5:T}>} {\n\t${0}\n}",
        "doc": null,
        "grammar": "snu",
        "label": "Struct/Trait implementation",
        "matches": {
          "impl": true
        },
        "opts": {
          "b": true
        }
      }
    ],
    "sass": [
      {
        "content": "$${1:variable}: ${0:value}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "$": true
        },
        "opts": {}
      },
      {
        "content": "@import '${0}'",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "imp": true
        },
        "opts": {}
      },
      {
        "content": "=${1:name}(${2})\n\t${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "mix": true
        },
        "opts": {}
      },
      {
        "content": "+${1:mixin}(${2})",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "inc": true
        },
        "opts": {}
      },
      {
        "content": "@extend ${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ext": true
        },
        "opts": {}
      },
      {
        "content": "@function ${1:name}(${2:args})\n\t${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "fun": true
        },
        "opts": {}
      },
      {
        "content": "@if ${1:condition}\n\t${0:${VISUAL}}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "if": true
        },
        "opts": {}
      },
      {
        "content": "@if ${1:condition}\n\t${2:${VISUAL}}\n@else\n\t${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ife": true
        },
        "opts": {}
      },
      {
        "content": "@else if ${1:condition}\n\t${0:${VISUAL}}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "eif": true
        },
        "opts": {}
      },
      {
        "content": "@for ${1:$i} from ${2:1} through ${3:3}\n\t${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "for": true
        },
        "opts": {}
      },
      {
        "content": "@each ${1:$item} in ${2:items}\n\t${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "each": true
        },
        "opts": {}
      },
      {
        "content": "@while ${1:$i} ${2:>} ${3:0}\n\t${0:${VISUAL}}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "while": true
        },
        "opts": {}
      },
      {
        "content": "!important",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "!": true
        },
        "opts": {}
      },
      {
        "content": "align-content: ${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ac": true
        },
        "opts": {}
      },
      {
        "content": "align-content: start",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ac:s": true
        },
        "opts": {}
      },
      {
        "content": "align-content: end",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ac:e": true
        },
        "opts": {}
      },
      {
        "content": "align-content: center",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ac:c": true
        },
        "opts": {}
      },
      {
        "content": "align-content: flex-start",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ac:fs": true
        },
        "opts": {}
      },
      {
        "content": "align-content: flex-end",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ac:fe": true
        },
        "opts": {}
      },
      {
        "content": "align-content: space-between",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ac:sb": true
        },
        "opts": {}
      },
      {
        "content": "align-content: space-around",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ac:sa": true
        },
        "opts": {}
      },
      {
        "content": "align-content: space-evenly",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ac:se": true
        },
        "opts": {}
      },
      {
        "content": "align-content: stretch",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ac:st": true
        },
        "opts": {}
      },
      {
        "content": "align-content: baseline",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ac:b": true
        },
        "opts": {}
      },
      {
        "content": "align-content: first baseline",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ac:fb": true
        },
        "opts": {}
      },
      {
        "content": "align-content: last baseline",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ac:lb": true
        },
        "opts": {}
      },
      {
        "content": "align-items: ${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ai": true
        },
        "opts": {}
      },
      {
        "content": "align-items: start",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ai:s": true
        },
        "opts": {}
      },
      {
        "content": "align-items: end",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ai:e": true
        },
        "opts": {}
      },
      {
        "content": "align-items: center",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ai:c": true
        },
        "opts": {}
      },
      {
        "content": "align-items: flex-start",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ai:fs": true
        },
        "opts": {}
      },
      {
        "content": "align-items: flex-end",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ai:fe": true
        },
        "opts": {}
      },
      {
        "content": "align-items: stretch",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ai:st": true
        },
        "opts": {}
      },
      {
        "content": "align-items: baseline",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ai:b": true
        },
        "opts": {}
      },
      {
        "content": "align-items: first baseline",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ai:fb": true
        },
        "opts": {}
      },
      {
        "content": "align-items: last baseline",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ai:lb": true
        },
        "opts": {}
      },
      {
        "content": "align-self: ${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "as": true
        },
        "opts": {}
      },
      {
        "content": "align-self: start",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "as:s": true
        },
        "opts": {}
      },
      {
        "content": "align-self: end",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "as:e": true
        },
        "opts": {}
      },
      {
        "content": "align-self: center",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "as:c": true
        },
        "opts": {}
      },
      {
        "content": "align-self: stretch",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "as:st": true
        },
        "opts": {}
      },
      {
        "content": "align-self: flex-start",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "as:fs": true
        },
        "opts": {}
      },
      {
        "content": "align-self: flex-end",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "as:fe": true
        },
        "opts": {}
      },
      {
        "content": "align-self: baseline",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "as:b": true
        },
        "opts": {}
      },
      {
        "content": "align-self: first baseline",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "as:fb": true
        },
        "opts": {}
      },
      {
        "content": "align-self: last baseline",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "as:lb": true
        },
        "opts": {}
      },
      {
        "content": "-moz-border-image: url('${1}') ${2:0} ${3:0} ${4:0} ${5:0} ${6:stretch} ${0:stretch}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "bdi:m+": true
        },
        "opts": {}
      },
      {
        "content": "-moz-border-image: ${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "bdi:m": true
        },
        "opts": {}
      },
      {
        "content": "-moz-border-radius: ${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "bdrz:m": true
        },
        "opts": {}
      },
      {
        "content": "-moz-box-shadow: ${1:0} ${2:0} ${3:0} #${0:000}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "bxsh:m+": true
        },
        "opts": {}
      },
      {
        "content": "-moz-box-shadow: ${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "bxsh:m": true
        },
        "opts": {}
      },
      {
        "content": "-webkit-border-image: url('${1}') ${2:0} ${3:0} ${4:0} ${5:0} ${6:stretch} ${0:stretch}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "bdi:w+": true
        },
        "opts": {}
      },
      {
        "content": "-webkit-border-image: ${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "bdi:w": true
        },
        "opts": {}
      },
      {
        "content": "-webkit-border-radius: ${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "bdrz:w": true
        },
        "opts": {}
      },
      {
        "content": "-webkit-box-shadow: ${1:0} ${2:0} ${3:0} #${0:000}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "bxsh:w+": true
        },
        "opts": {}
      },
      {
        "content": "-webkit-box-shadow: ${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "bxsh:w": true
        },
        "opts": {}
      },
      {
        "content": "@font-face\n\tfont-family: ${1}\n\tsrc: url('${0}')",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "@f": true
        },
        "opts": {}
      },
      {
        "content": "@import url('${0}')",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "@i": true
        },
        "opts": {}
      },
      {
        "content": "@media ${1:print}\n\t${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "@m": true
        },
        "opts": {}
      },
      {
        "content": "background: #${1:fff} url('${2}') ${3:0} ${4:0} ${0:no-repeat}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "bg+": true
        },
        "opts": {}
      },
      {
        "content": "background-attachment: ${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "bga": true
        },
        "opts": {}
      },
      {
        "content": "background-attachment: fixed",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "bga:f": true
        },
        "opts": {}
      },
      {
        "content": "background-attachment: scroll",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "bga:s": true
        },
        "opts": {}
      },
      {
        "content": "background-break: ${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "bgbk": true
        },
        "opts": {}
      },
      {
        "content": "background-break: bounding-box",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "bgbk:bb": true
        },
        "opts": {}
      },
      {
        "content": "background-break: continuous",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "bgbk:c": true
        },
        "opts": {}
      },
      {
        "content": "background-break: each-box",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "bgbk:eb": true
        },
        "opts": {}
      },
      {
        "content": "background-clip: ${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "bgcp": true
        },
        "opts": {}
      },
      {
        "content": "background-clip: border-box",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "bgcp:bb": true
        },
        "opts": {}
      },
      {
        "content": "background-clip: content-box",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "bgcp:cb": true
        },
        "opts": {}
      },
      {
        "content": "background-clip: no-clip",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "bgcp:nc": true
        },
        "opts": {}
      },
      {
        "content": "background-clip: padding-box",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "bgcp:pb": true
        },
        "opts": {}
      },
      {
        "content": "background-color: #${0:fff}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "bgc": true
        },
        "opts": {}
      },
      {
        "content": "background-color: transparent",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "bgc:t": true
        },
        "opts": {}
      },
      {
        "content": "background-image: url('${0}')",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "bgi": true
        },
        "opts": {}
      },
      {
        "content": "background-image: none",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "bgi:n": true
        },
        "opts": {}
      },
      {
        "content": "background-origin: ${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "bgo": true
        },
        "opts": {}
      },
      {
        "content": "background-origin: border-box",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "bgo:bb": true
        },
        "opts": {}
      },
      {
        "content": "background-origin: content-box",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "bgo:cb": true
        },
        "opts": {}
      },
      {
        "content": "background-origin: padding-box",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "bgo:pb": true
        },
        "opts": {}
      },
      {
        "content": "background-position-x: ${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "bgpx": true
        },
        "opts": {}
      },
      {
        "content": "background-position-y: ${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "bgpy": true
        },
        "opts": {}
      },
      {
        "content": "background-position: ${1:0} ${0:0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "bgp": true
        },
        "opts": {}
      },
      {
        "content": "background-repeat: ${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "bgr": true
        },
        "opts": {}
      },
      {
        "content": "background-repeat: no-repeat",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "bgr:n": true
        },
        "opts": {}
      },
      {
        "content": "background-repeat: repeat-x",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "bgr:x": true
        },
        "opts": {}
      },
      {
        "content": "background-repeat: repeat-y",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "bgr:y": true
        },
        "opts": {}
      },
      {
        "content": "background-repeat: repeat",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "bgr:r": true
        },
        "opts": {}
      },
      {
        "content": "background-size: ${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "bgz": true
        },
        "opts": {}
      },
      {
        "content": "background-size: auto",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "bgz:a": true
        },
        "opts": {}
      },
      {
        "content": "background-size: contain",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "bgz:ct": true
        },
        "opts": {}
      },
      {
        "content": "background-size: cover",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "bgz:cv": true
        },
        "opts": {}
      },
      {
        "content": "background: ${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "bg": true
        },
        "opts": {}
      },
      {
        "content": "filter: progid:DXImageTransform.Microsoft.AlphaImageLoader(src='${1}',sizingMethod='${0:crop}')",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "bg:ie": true
        },
        "opts": {}
      },
      {
        "content": "background: none",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "bg:n": true
        },
        "opts": {}
      },
      {
        "content": "border: ${1:1px} ${2:solid} #${0:000}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "bd+": true
        },
        "opts": {}
      },
      {
        "content": "border-bottom: ${1:1px} ${2:solid} #${0:000}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "bdb+": true
        },
        "opts": {}
      },
      {
        "content": "border-bottom-color: #${0:000}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "bdbc": true
        },
        "opts": {}
      },
      {
        "content": "border-bottom-image: url('${0}')",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "bdbi": true
        },
        "opts": {}
      },
      {
        "content": "border-bottom-image: none",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "bdbi:n": true
        },
        "opts": {}
      },
      {
        "content": "border-bottom-left-image: url('${0}')",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "bdbli": true
        },
        "opts": {}
      },
      {
        "content": "border-bottom-left-image: continue",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "bdbli:c": true
        },
        "opts": {}
      },
      {
        "content": "border-bottom-left-image: none",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "bdbli:n": true
        },
        "opts": {}
      },
      {
        "content": "border-bottom-left-radius: ${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "bdblrz": true
        },
        "opts": {}
      },
      {
        "content": "border-bottom-right-image: url('${0}')",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "bdbri": true
        },
        "opts": {}
      },
      {
        "content": "border-bottom-right-image: continue",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "bdbri:c": true
        },
        "opts": {}
      },
      {
        "content": "border-bottom-right-image: none",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "bdbri:n": true
        },
        "opts": {}
      },
      {
        "content": "border-bottom-right-radius: ${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "bdbrrz": true
        },
        "opts": {}
      },
      {
        "content": "border-bottom-style: ${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "bdbs": true
        },
        "opts": {}
      },
      {
        "content": "border-bottom-style: none",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "bdbs:n": true
        },
        "opts": {}
      },
      {
        "content": "border-bottom-width: ${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "bdbw": true
        },
        "opts": {}
      },
      {
        "content": "border-bottom: ${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "bdb": true
        },
        "opts": {}
      },
      {
        "content": "border-bottom: none",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "bdb:n": true
        },
        "opts": {}
      },
      {
        "content": "border-break: ${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "bdbk": true
        },
        "opts": {}
      },
      {
        "content": "border-break: close",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "bdbk:c": true
        },
        "opts": {}
      },
      {
        "content": "border-collapse: ${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "bdcl": true
        },
        "opts": {}
      },
      {
        "content": "border-collapse: collapse",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "bdcl:c": true
        },
        "opts": {}
      },
      {
        "content": "border-collapse: separate",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "bdcl:s": true
        },
        "opts": {}
      },
      {
        "content": "border-color: #${0:000}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "bdc": true
        },
        "opts": {}
      },
      {
        "content": "border-corner-image: url('${0}')",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "bdci": true
        },
        "opts": {}
      },
      {
        "content": "border-corner-image: continue",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "bdci:c": true
        },
        "opts": {}
      },
      {
        "content": "border-corner-image: none",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "bdci:n": true
        },
        "opts": {}
      },
      {
        "content": "border-fit: ${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "bdf": true
        },
        "opts": {}
      },
      {
        "content": "border-fit: clip",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "bdf:c": true
        },
        "opts": {}
      },
      {
        "content": "border-fit: overwrite",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "bdf:of": true
        },
        "opts": {}
      },
      {
        "content": "border-fit: overwrite",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "bdf:ow": true
        },
        "opts": {}
      },
      {
        "content": "border-fit: repeat",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "bdf:r": true
        },
        "opts": {}
      },
      {
        "content": "border-fit: scale",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "bdf:sc": true
        },
        "opts": {}
      },
      {
        "content": "border-fit: space",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "bdf:sp": true
        },
        "opts": {}
      },
      {
        "content": "border-fit: stretch",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "bdf:st": true
        },
        "opts": {}
      },
      {
        "content": "border-image: url('${1}') ${2:0} ${3:0} ${4:0} ${5:0} ${6:stretch} ${0:stretch}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "bdi": true
        },
        "opts": {}
      },
      {
        "content": "border-image: none",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "bdi:n": true
        },
        "opts": {}
      },
      {
        "content": "border-left: ${1:1px} ${2:solid} #${0:000}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "bdl+": true
        },
        "opts": {}
      },
      {
        "content": "border-left-color: #${0:000}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "bdlc": true
        },
        "opts": {}
      },
      {
        "content": "border-left-image: url('${0}')",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "bdli": true
        },
        "opts": {}
      },
      {
        "content": "border-left-image: none",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "bdli:n": true
        },
        "opts": {}
      },
      {
        "content": "border-left-style: ${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "bdls": true
        },
        "opts": {}
      },
      {
        "content": "border-left-style: none",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "bdls:n": true
        },
        "opts": {}
      },
      {
        "content": "border-left-width: ${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "bdlw": true
        },
        "opts": {}
      },
      {
        "content": "border-left: ${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "bdl": true
        },
        "opts": {}
      },
      {
        "content": "border-left: none",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "bdl:n": true
        },
        "opts": {}
      },
      {
        "content": "border-length: ${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "bdlt": true
        },
        "opts": {}
      },
      {
        "content": "border-length: auto",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "bdlt:a": true
        },
        "opts": {}
      },
      {
        "content": "border-radius: ${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "bdrz": true
        },
        "opts": {}
      },
      {
        "content": "border-right: ${1:1px} ${2:solid} #${0:000}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "bdr+": true
        },
        "opts": {}
      },
      {
        "content": "border-right-color: #${0:000}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "bdrc": true
        },
        "opts": {}
      },
      {
        "content": "border-right-image: url('${0}')",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "bdri": true
        },
        "opts": {}
      },
      {
        "content": "border-right-image: none",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "bdri:n": true
        },
        "opts": {}
      },
      {
        "content": "border-right-style: ${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "bdrs": true
        },
        "opts": {}
      },
      {
        "content": "border-right-style: none",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "bdrs:n": true
        },
        "opts": {}
      },
      {
        "content": "border-right-width: ${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "bdrw": true
        },
        "opts": {}
      },
      {
        "content": "border-right: ${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "bdr": true
        },
        "opts": {}
      },
      {
        "content": "border-right: none",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "bdr:n": true
        },
        "opts": {}
      },
      {
        "content": "border-spacing: ${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "bdsp": true
        },
        "opts": {}
      },
      {
        "content": "border-style: ${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "bds": true
        },
        "opts": {}
      },
      {
        "content": "border-style: dashed",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "bds:ds": true
        },
        "opts": {}
      },
      {
        "content": "border-style: dot-dash",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "bds:dtds": true
        },
        "opts": {}
      },
      {
        "content": "border-style: dot-dot-dash",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "bds:dtdtds": true
        },
        "opts": {}
      },
      {
        "content": "border-style: dotted",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "bds:dt": true
        },
        "opts": {}
      },
      {
        "content": "border-style: double",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "bds:db": true
        },
        "opts": {}
      },
      {
        "content": "border-style: groove",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "bds:g": true
        },
        "opts": {}
      },
      {
        "content": "border-style: hidden",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "bds:h": true
        },
        "opts": {}
      },
      {
        "content": "border-style: inset",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "bds:i": true
        },
        "opts": {}
      },
      {
        "content": "border-style: none",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "bds:n": true
        },
        "opts": {}
      },
      {
        "content": "border-style: outset",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "bds:o": true
        },
        "opts": {}
      },
      {
        "content": "border-style: ridge",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "bds:r": true
        },
        "opts": {}
      },
      {
        "content": "border-style: solid",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "bds:s": true
        },
        "opts": {}
      },
      {
        "content": "border-style: wave",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "bds:w": true
        },
        "opts": {}
      },
      {
        "content": "border-top: ${1:1px} ${2:solid} #${0:000}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "bdt+": true
        },
        "opts": {}
      },
      {
        "content": "border-top-color: #${0:000}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "bdtc": true
        },
        "opts": {}
      },
      {
        "content": "border-top-image: url('${0}')",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "bdti": true
        },
        "opts": {}
      },
      {
        "content": "border-top-image: none",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "bdti:n": true
        },
        "opts": {}
      },
      {
        "content": "border-top-left-image: url('${0}')",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "bdtli": true
        },
        "opts": {}
      },
      {
        "content": "border-corner-image: continue",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "bdtli:c": true
        },
        "opts": {}
      },
      {
        "content": "border-corner-image: none",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "bdtli:n": true
        },
        "opts": {}
      },
      {
        "content": "border-top-left-radius: ${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "bdtlrz": true
        },
        "opts": {}
      },
      {
        "content": "border-top-right-image: url('${0}')",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "bdtri": true
        },
        "opts": {}
      },
      {
        "content": "border-top-right-image: continue",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "bdtri:c": true
        },
        "opts": {}
      },
      {
        "content": "border-top-right-image: none",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "bdtri:n": true
        },
        "opts": {}
      },
      {
        "content": "border-top-right-radius: ${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "bdtrrz": true
        },
        "opts": {}
      },
      {
        "content": "border-top-style: ${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "bdts": true
        },
        "opts": {}
      },
      {
        "content": "border-top-style: none",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "bdts:n": true
        },
        "opts": {}
      },
      {
        "content": "border-top-width: ${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "bdtw": true
        },
        "opts": {}
      },
      {
        "content": "border-top: ${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "bdt": true
        },
        "opts": {}
      },
      {
        "content": "border-top: none",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "bdt:n": true
        },
        "opts": {}
      },
      {
        "content": "border-width: ${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "bdw": true
        },
        "opts": {}
      },
      {
        "content": "border: ${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "bd": true
        },
        "opts": {}
      },
      {
        "content": "border: none",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "bd:n": true
        },
        "opts": {}
      },
      {
        "content": "bottom: ${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "b": true
        },
        "opts": {}
      },
      {
        "content": "bottom: auto",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "b:a": true
        },
        "opts": {}
      },
      {
        "content": "box-shadow: ${1:0} ${2:0} ${3:0} #${0:000}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "bxsh+": true
        },
        "opts": {}
      },
      {
        "content": "box-shadow: ${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "bxsh": true
        },
        "opts": {}
      },
      {
        "content": "box-shadow: none",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "bxsh:n": true
        },
        "opts": {}
      },
      {
        "content": "box-sizing: ${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "bxz": true
        },
        "opts": {}
      },
      {
        "content": "box-sizing: border-box",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "bxz:bb": true
        },
        "opts": {}
      },
      {
        "content": "box-sizing: content-box",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "bxz:cb": true
        },
        "opts": {}
      },
      {
        "content": "caption-side: ${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "cps": true
        },
        "opts": {}
      },
      {
        "content": "caption-side: bottom",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "cps:b": true
        },
        "opts": {}
      },
      {
        "content": "caption-side: top",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "cps:t": true
        },
        "opts": {}
      },
      {
        "content": "clear: ${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "cl": true
        },
        "opts": {}
      },
      {
        "content": "clear: both",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "cl:b": true
        },
        "opts": {}
      },
      {
        "content": "clear: left",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "cl:l": true
        },
        "opts": {}
      },
      {
        "content": "clear: none",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "cl:n": true
        },
        "opts": {}
      },
      {
        "content": "clear: right",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "cl:r": true
        },
        "opts": {}
      },
      {
        "content": "clip: ${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "cp": true
        },
        "opts": {}
      },
      {
        "content": "clip: auto",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "cp:a": true
        },
        "opts": {}
      },
      {
        "content": "clip: rect(${1:0} ${2:0} ${3:0} ${0:0})",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "cp:r": true
        },
        "opts": {}
      },
      {
        "content": "color: #${0:000}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "c": true
        },
        "opts": {}
      },
      {
        "content": "content: ${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ct": true
        },
        "opts": {}
      },
      {
        "content": "content: attr(${0})",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ct:a": true
        },
        "opts": {}
      },
      {
        "content": "content: close-quote",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ct:cq": true
        },
        "opts": {}
      },
      {
        "content": "content: counter(${0})",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ct:c": true
        },
        "opts": {}
      },
      {
        "content": "content: counters(${0})",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ct:cs": true
        },
        "opts": {}
      },
      {
        "content": "content: no-close-quote",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ct:ncq": true
        },
        "opts": {}
      },
      {
        "content": "content: no-open-quote",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ct:noq": true
        },
        "opts": {}
      },
      {
        "content": "content: normal",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ct:n": true
        },
        "opts": {}
      },
      {
        "content": "content: open-quote",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ct:oq": true
        },
        "opts": {}
      },
      {
        "content": "counter-increment: ${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "coi": true
        },
        "opts": {}
      },
      {
        "content": "counter-reset: ${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "cor": true
        },
        "opts": {}
      },
      {
        "content": "cursor: ${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "cur": true
        },
        "opts": {}
      },
      {
        "content": "cursor: auto",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "cur:a": true
        },
        "opts": {}
      },
      {
        "content": "cursor: crosshair",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "cur:c": true
        },
        "opts": {}
      },
      {
        "content": "cursor: default",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "cur:d": true
        },
        "opts": {}
      },
      {
        "content": "cursor: hand",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "cur:ha": true
        },
        "opts": {}
      },
      {
        "content": "cursor: help",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "cur:he": true
        },
        "opts": {}
      },
      {
        "content": "cursor: move",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "cur:m": true
        },
        "opts": {}
      },
      {
        "content": "cursor: pointer",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "cur:p": true
        },
        "opts": {}
      },
      {
        "content": "cursor: text",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "cur:t": true
        },
        "opts": {}
      },
      {
        "content": "display: ${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "d": true
        },
        "opts": {}
      },
      {
        "content": "display: -moz-inline-box",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "d:mib": true
        },
        "opts": {}
      },
      {
        "content": "display: -moz-inline-stack",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "d:mis": true
        },
        "opts": {}
      },
      {
        "content": "display: block",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "d:b": true
        },
        "opts": {}
      },
      {
        "content": "display: compact",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "d:cp": true
        },
        "opts": {}
      },
      {
        "content": "display: grid",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "d:g": true
        },
        "opts": {}
      },
      {
        "content": "display: flex",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "d:f": true
        },
        "opts": {}
      },
      {
        "content": "display: inline-block",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "d:ib": true
        },
        "opts": {}
      },
      {
        "content": "display: inline-table",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "d:itb": true
        },
        "opts": {}
      },
      {
        "content": "display: inline",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "d:i": true
        },
        "opts": {}
      },
      {
        "content": "display: list-item",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "d:li": true
        },
        "opts": {}
      },
      {
        "content": "display: none",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "d:n": true
        },
        "opts": {}
      },
      {
        "content": "display: run-in",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "d:ri": true
        },
        "opts": {}
      },
      {
        "content": "display: table-caption",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "d:tbcp": true
        },
        "opts": {}
      },
      {
        "content": "display: table-cell",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "d:tbc": true
        },
        "opts": {}
      },
      {
        "content": "display: table-column-group",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "d:tbclg": true
        },
        "opts": {}
      },
      {
        "content": "display: table-column",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "d:tbcl": true
        },
        "opts": {}
      },
      {
        "content": "display: table-footer-group",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "d:tbfg": true
        },
        "opts": {}
      },
      {
        "content": "display: table-header-group",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "d:tbhg": true
        },
        "opts": {}
      },
      {
        "content": "display: table-row-group",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "d:tbrg": true
        },
        "opts": {}
      },
      {
        "content": "display: table-row",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "d:tbr": true
        },
        "opts": {}
      },
      {
        "content": "display: table",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "d:tb": true
        },
        "opts": {}
      },
      {
        "content": "empty-cells: ${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ec": true
        },
        "opts": {}
      },
      {
        "content": "empty-cells: hide",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ec:h": true
        },
        "opts": {}
      },
      {
        "content": "empty-cells: show",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ec:s": true
        },
        "opts": {}
      },
      {
        "content": "expression()",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "exp": true
        },
        "opts": {}
      },
      {
        "content": "float: ${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "fl": true
        },
        "opts": {}
      },
      {
        "content": "float: left",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "fl:l": true
        },
        "opts": {}
      },
      {
        "content": "float: none",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "fl:n": true
        },
        "opts": {}
      },
      {
        "content": "float: right",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "fl:r": true
        },
        "opts": {}
      },
      {
        "content": "font: ${1:1em} ${2:Arial},${0:sans-serif}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "f+": true
        },
        "opts": {}
      },
      {
        "content": "font-effect: ${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "fef": true
        },
        "opts": {}
      },
      {
        "content": "font-effect: emboss",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "fef:eb": true
        },
        "opts": {}
      },
      {
        "content": "font-effect: engrave",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "fef:eg": true
        },
        "opts": {}
      },
      {
        "content": "font-effect: none",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "fef:n": true
        },
        "opts": {}
      },
      {
        "content": "font-effect: outline",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "fef:o": true
        },
        "opts": {}
      },
      {
        "content": "font-emphasize-position: ${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "femp": true
        },
        "opts": {}
      },
      {
        "content": "font-emphasize-position: after",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "femp:a": true
        },
        "opts": {}
      },
      {
        "content": "font-emphasize-position: before",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "femp:b": true
        },
        "opts": {}
      },
      {
        "content": "font-emphasize-style: ${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "fems": true
        },
        "opts": {}
      },
      {
        "content": "font-emphasize-style: accent",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "fems:ac": true
        },
        "opts": {}
      },
      {
        "content": "font-emphasize-style: circle",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "fems:c": true
        },
        "opts": {}
      },
      {
        "content": "font-emphasize-style: disc",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "fems:ds": true
        },
        "opts": {}
      },
      {
        "content": "font-emphasize-style: dot",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "fems:dt": true
        },
        "opts": {}
      },
      {
        "content": "font-emphasize-style: none",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "fems:n": true
        },
        "opts": {}
      },
      {
        "content": "font-emphasize: ${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "fem": true
        },
        "opts": {}
      },
      {
        "content": "font-family: ${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ff": true
        },
        "opts": {}
      },
      {
        "content": "font-family: ${0:'Monotype Corsiva','Comic Sans MS'},cursive",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ff:c": true
        },
        "opts": {}
      },
      {
        "content": "font-family: ${0:Capitals,Impact},fantasy",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ff:f": true
        },
        "opts": {}
      },
      {
        "content": "font-family: ${0:Monaco,'Courier New'},monospace",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ff:m": true
        },
        "opts": {}
      },
      {
        "content": "font-family: ${0:Helvetica,Arial},sans-serif",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ff:ss": true
        },
        "opts": {}
      },
      {
        "content": "font-family: ${0:Georgia,'Times New Roman'},serif",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ff:s": true
        },
        "opts": {}
      },
      {
        "content": "font-size-adjust: ${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "fza": true
        },
        "opts": {}
      },
      {
        "content": "font-size-adjust: none",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "fza:n": true
        },
        "opts": {}
      },
      {
        "content": "font-size: ${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "fz": true
        },
        "opts": {}
      },
      {
        "content": "font-smooth: ${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "fsm": true
        },
        "opts": {}
      },
      {
        "content": "font-smooth: always",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "fsm:aw": true
        },
        "opts": {}
      },
      {
        "content": "font-smooth: auto",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "fsm:a": true
        },
        "opts": {}
      },
      {
        "content": "font-smooth: never",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "fsm:n": true
        },
        "opts": {}
      },
      {
        "content": "font-stretch: ${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "fst": true
        },
        "opts": {}
      },
      {
        "content": "font-stretch: condensed",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "fst:c": true
        },
        "opts": {}
      },
      {
        "content": "font-stretch: expanded",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "fst:e": true
        },
        "opts": {}
      },
      {
        "content": "font-stretch: extra-condensed",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "fst:ec": true
        },
        "opts": {}
      },
      {
        "content": "font-stretch: extra-expanded",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "fst:ee": true
        },
        "opts": {}
      },
      {
        "content": "font-stretch: normal",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "fst:n": true
        },
        "opts": {}
      },
      {
        "content": "font-stretch: semi-condensed",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "fst:sc": true
        },
        "opts": {}
      },
      {
        "content": "font-stretch: semi-expanded",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "fst:se": true
        },
        "opts": {}
      },
      {
        "content": "font-stretch: ultra-condensed",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "fst:uc": true
        },
        "opts": {}
      },
      {
        "content": "font-stretch: ultra-expanded",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "fst:ue": true
        },
        "opts": {}
      },
      {
        "content": "font-style: ${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "fs": true
        },
        "opts": {}
      },
      {
        "content": "font-style: italic",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "fs:i": true
        },
        "opts": {}
      },
      {
        "content": "font-style: normal",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "fs:n": true
        },
        "opts": {}
      },
      {
        "content": "font-style: oblique",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "fs:o": true
        },
        "opts": {}
      },
      {
        "content": "font-variant: ${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "fv": true
        },
        "opts": {}
      },
      {
        "content": "font-variant: normal",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "fv:n": true
        },
        "opts": {}
      },
      {
        "content": "font-variant: small-caps",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "fv:sc": true
        },
        "opts": {}
      },
      {
        "content": "font-weight: ${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "fw": true
        },
        "opts": {}
      },
      {
        "content": "font-weight: bold",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "fw:b": true
        },
        "opts": {}
      },
      {
        "content": "font-weight: bolder",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "fw:br": true
        },
        "opts": {}
      },
      {
        "content": "font-weight: lighter",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "fw:lr": true
        },
        "opts": {}
      },
      {
        "content": "font-weight: normal",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "fw:n": true
        },
        "opts": {}
      },
      {
        "content": "font: ${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "f": true
        },
        "opts": {}
      },
      {
        "content": "grid: ${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "g": true
        },
        "opts": {}
      },
      {
        "content": "grid-auto-flow: ${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "gaf": true
        },
        "opts": {}
      },
      {
        "content": "grid-auto-flow: ${1:row} ${0:dense}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "gaf+": true
        },
        "opts": {}
      },
      {
        "content": "grid-auto-flow: row",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "gaf:r": true
        },
        "opts": {}
      },
      {
        "content": "grid-auto-flow: column",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "gaf:c": true
        },
        "opts": {}
      },
      {
        "content": "grid-auto-flow: dense",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "gaf:d": true
        },
        "opts": {}
      },
      {
        "content": "grid-auto-flow: row dense",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "gaf:rd": true
        },
        "opts": {}
      },
      {
        "content": "grid-auto-flow: column dense",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "gaf:cd": true
        },
        "opts": {}
      },
      {
        "content": "grid-auto-rows: ${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "gar": true
        },
        "opts": {}
      },
      {
        "content": "grid-auto-rows: auto",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "gar:a": true
        },
        "opts": {}
      },
      {
        "content": "grid-auto-rows: max-content",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "gar:mac": true
        },
        "opts": {}
      },
      {
        "content": "grid-auto-rows: min-content",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "gar:mic": true
        },
        "opts": {}
      },
      {
        "content": "grid-auto-columns: ${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "gac": true
        },
        "opts": {}
      },
      {
        "content": "grid-auto-columns: auto",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "gac:a": true
        },
        "opts": {}
      },
      {
        "content": "grid-auto-columns: max-content",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "gac:mac": true
        },
        "opts": {}
      },
      {
        "content": "grid-auto-columns: min-content",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "gac:mic": true
        },
        "opts": {}
      },
      {
        "content": "grid-template: ${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "gt": true
        },
        "opts": {}
      },
      {
        "content": "grid-template: ${1} / ${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "gt+": true
        },
        "opts": {}
      },
      {
        "content": "grid-template-rows: ${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "gtr": true
        },
        "opts": {}
      },
      {
        "content": "grid-template-columns: ${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "gtc": true
        },
        "opts": {}
      },
      {
        "content": "grid-template-areas: ${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "gta": true
        },
        "opts": {}
      },
      {
        "content": "grid-gap: ${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "gg": true
        },
        "opts": {}
      },
      {
        "content": "grid-gap: ${1} ${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "gg+": true
        },
        "opts": {}
      },
      {
        "content": "grid-gap: 0",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "gg:0": true
        },
        "opts": {}
      },
      {
        "content": "grid-row-gap: ${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "grg": true
        },
        "opts": {}
      },
      {
        "content": "grid-row-gap: 0",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "grg:0": true
        },
        "opts": {}
      },
      {
        "content": "grid-column-gap: ${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "gcg": true
        },
        "opts": {}
      },
      {
        "content": "grid-column-gap: 0",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "gcg:0": true
        },
        "opts": {}
      },
      {
        "content": "grid-row: ${1} / ${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "gr": true
        },
        "opts": {}
      },
      {
        "content": "grid-row-start: ${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "grs": true
        },
        "opts": {}
      },
      {
        "content": "grid-row-end: ${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "gre": true
        },
        "opts": {}
      },
      {
        "content": "grid-column: ${1} / ${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "gc": true
        },
        "opts": {}
      },
      {
        "content": "grid-column-start: ${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "gcs": true
        },
        "opts": {}
      },
      {
        "content": "grid-column-end: ${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "gce": true
        },
        "opts": {}
      },
      {
        "content": "height: ${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "h": true
        },
        "opts": {}
      },
      {
        "content": "height: auto",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "h:a": true
        },
        "opts": {}
      },
      {
        "content": "justify-content: ${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "jc": true
        },
        "opts": {}
      },
      {
        "content": "justify-content: start",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "jc:s": true
        },
        "opts": {}
      },
      {
        "content": "justify-content: end",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "jc:e": true
        },
        "opts": {}
      },
      {
        "content": "justify-content: center",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "jc:c": true
        },
        "opts": {}
      },
      {
        "content": "justify-content: flex-start",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "jc:fs": true
        },
        "opts": {}
      },
      {
        "content": "justify-content: flex-end",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "jc:fe": true
        },
        "opts": {}
      },
      {
        "content": "justify-content: space-between",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "jc:sb": true
        },
        "opts": {}
      },
      {
        "content": "justify-content: space-around",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "jc:sa": true
        },
        "opts": {}
      },
      {
        "content": "justify-content: space-evenly",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "jc:se": true
        },
        "opts": {}
      },
      {
        "content": "justify-content: stretch",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "jc:st": true
        },
        "opts": {}
      },
      {
        "content": "justify-content: left",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "jc:l": true
        },
        "opts": {}
      },
      {
        "content": "justify-content: right",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "jc:r": true
        },
        "opts": {}
      },
      {
        "content": "justify-items: ${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ji": true
        },
        "opts": {}
      },
      {
        "content": "justify-items: start",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ji:s": true
        },
        "opts": {}
      },
      {
        "content": "justify-items: end",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ji:e": true
        },
        "opts": {}
      },
      {
        "content": "justify-items: center",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ji:c": true
        },
        "opts": {}
      },
      {
        "content": "justify-items: stretch",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ji:st": true
        },
        "opts": {}
      },
      {
        "content": "justify-self: ${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "js": true
        },
        "opts": {}
      },
      {
        "content": "justify-self: start",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "js:s": true
        },
        "opts": {}
      },
      {
        "content": "justify-self: end",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "js:e": true
        },
        "opts": {}
      },
      {
        "content": "justify-self: center",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "js:c": true
        },
        "opts": {}
      },
      {
        "content": "justify-self: stretch",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "js:st": true
        },
        "opts": {}
      },
      {
        "content": "left: ${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "l": true
        },
        "opts": {}
      },
      {
        "content": "left: auto",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "l:a": true
        },
        "opts": {}
      },
      {
        "content": "letter-spacing: ${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "lts": true
        },
        "opts": {}
      },
      {
        "content": "line-height: ${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "lh": true
        },
        "opts": {}
      },
      {
        "content": "list-style-image: url('${0}')",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "lisi": true
        },
        "opts": {}
      },
      {
        "content": "list-style-image: none",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "lisi:n": true
        },
        "opts": {}
      },
      {
        "content": "list-style-position: ${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "lisp": true
        },
        "opts": {}
      },
      {
        "content": "list-style-position: inside",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "lisp:i": true
        },
        "opts": {}
      },
      {
        "content": "list-style-position: outside",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "lisp:o": true
        },
        "opts": {}
      },
      {
        "content": "list-style-type: ${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "list": true
        },
        "opts": {}
      },
      {
        "content": "list-style-type: circle",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "list:c": true
        },
        "opts": {}
      },
      {
        "content": "list-style-type: decimal-leading-zero",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "list:dclz": true
        },
        "opts": {}
      },
      {
        "content": "list-style-type: decimal",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "list:dc": true
        },
        "opts": {}
      },
      {
        "content": "list-style-type: disc",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "list:d": true
        },
        "opts": {}
      },
      {
        "content": "list-style-type: lower-roman",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "list:lr": true
        },
        "opts": {}
      },
      {
        "content": "list-style-type: none",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "list:n": true
        },
        "opts": {}
      },
      {
        "content": "list-style-type: square",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "list:s": true
        },
        "opts": {}
      },
      {
        "content": "list-style-type: upper-roman",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "list:ur": true
        },
        "opts": {}
      },
      {
        "content": "list-style: ${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "lis": true
        },
        "opts": {}
      },
      {
        "content": "list-style: none",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "lis:n": true
        },
        "opts": {}
      },
      {
        "content": "margin-bottom: ${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "mb": true
        },
        "opts": {}
      },
      {
        "content": "margin-bottom: auto",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "mb:a": true
        },
        "opts": {}
      },
      {
        "content": "margin-left: ${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ml": true
        },
        "opts": {}
      },
      {
        "content": "margin-left: auto",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ml:a": true
        },
        "opts": {}
      },
      {
        "content": "margin-right: ${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "mr": true
        },
        "opts": {}
      },
      {
        "content": "margin-right: auto",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "mr:a": true
        },
        "opts": {}
      },
      {
        "content": "margin-top: ${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "mt": true
        },
        "opts": {}
      },
      {
        "content": "margin-top: auto",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "mt:a": true
        },
        "opts": {}
      },
      {
        "content": "margin: ${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "m": true
        },
        "opts": {}
      },
      {
        "content": "margin: ${1:0} ${2:0} ${3:0} ${0:0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "m:4": true
        },
        "opts": {}
      },
      {
        "content": "margin: ${1:0} ${2:0} ${0:0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "m:3": true
        },
        "opts": {}
      },
      {
        "content": "margin: ${1:0} ${0:0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "m:2": true
        },
        "opts": {}
      },
      {
        "content": "margin: 0",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "m:0": true
        },
        "opts": {}
      },
      {
        "content": "margin: auto",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "m:a": true
        },
        "opts": {}
      },
      {
        "content": "max-height: ${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "mah": true
        },
        "opts": {}
      },
      {
        "content": "max-height: none",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "mah:n": true
        },
        "opts": {}
      },
      {
        "content": "max-width: ${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "maw": true
        },
        "opts": {}
      },
      {
        "content": "max-width: none",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "maw:n": true
        },
        "opts": {}
      },
      {
        "content": "min-height: ${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "mih": true
        },
        "opts": {}
      },
      {
        "content": "min-width: ${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "miw": true
        },
        "opts": {}
      },
      {
        "content": "opacity: ${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "op": true
        },
        "opts": {}
      },
      {
        "content": "filter: progid:DXImageTransform.Microsoft.Alpha(Opacity=${0:100})",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "op:ie": true
        },
        "opts": {}
      },
      {
        "content": "-ms-filter: 'progid:DXImageTransform.Microsoft.Alpha(Opacity=${0:100})'",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "op:ms": true
        },
        "opts": {}
      },
      {
        "content": "orphans: ${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "orp": true
        },
        "opts": {}
      },
      {
        "content": "outline: ${1:1px} ${2:solid} #${0:000}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "o+": true
        },
        "opts": {}
      },
      {
        "content": "outline-color: ${0:#000}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "oc": true
        },
        "opts": {}
      },
      {
        "content": "outline-color: invert",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "oc:i": true
        },
        "opts": {}
      },
      {
        "content": "outline-offset: ${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "oo": true
        },
        "opts": {}
      },
      {
        "content": "outline-style: ${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "os": true
        },
        "opts": {}
      },
      {
        "content": "outline-width: ${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ow": true
        },
        "opts": {}
      },
      {
        "content": "outline: ${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "o": true
        },
        "opts": {}
      },
      {
        "content": "outline: none",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "o:n": true
        },
        "opts": {}
      },
      {
        "content": "overflow-style: ${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ovs": true
        },
        "opts": {}
      },
      {
        "content": "overflow-style: auto",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ovs:a": true
        },
        "opts": {}
      },
      {
        "content": "overflow-style: marquee",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ovs:mq": true
        },
        "opts": {}
      },
      {
        "content": "overflow-style: move",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ovs:mv": true
        },
        "opts": {}
      },
      {
        "content": "overflow-style: panner",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ovs:p": true
        },
        "opts": {}
      },
      {
        "content": "overflow-style: scrollbar",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ovs:s": true
        },
        "opts": {}
      },
      {
        "content": "overflow-x: ${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ovx": true
        },
        "opts": {}
      },
      {
        "content": "overflow-x: auto",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ovx:a": true
        },
        "opts": {}
      },
      {
        "content": "overflow-x: hidden",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ovx:h": true
        },
        "opts": {}
      },
      {
        "content": "overflow-x: scroll",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ovx:s": true
        },
        "opts": {}
      },
      {
        "content": "overflow-x: visible",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ovx:v": true
        },
        "opts": {}
      },
      {
        "content": "overflow-y: ${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ovy": true
        },
        "opts": {}
      },
      {
        "content": "overflow-y: auto",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ovy:a": true
        },
        "opts": {}
      },
      {
        "content": "overflow-y: hidden",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ovy:h": true
        },
        "opts": {}
      },
      {
        "content": "overflow-y: scroll",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ovy:s": true
        },
        "opts": {}
      },
      {
        "content": "overflow-y: visible",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ovy:v": true
        },
        "opts": {}
      },
      {
        "content": "overflow: ${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ov": true
        },
        "opts": {}
      },
      {
        "content": "overflow: auto",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ov:a": true
        },
        "opts": {}
      },
      {
        "content": "overflow: hidden",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ov:h": true
        },
        "opts": {}
      },
      {
        "content": "overflow: scroll",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ov:s": true
        },
        "opts": {}
      },
      {
        "content": "overflow: visible",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ov:v": true
        },
        "opts": {}
      },
      {
        "content": "padding-bottom: ${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "pb": true
        },
        "opts": {}
      },
      {
        "content": "padding-left: ${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "pl": true
        },
        "opts": {}
      },
      {
        "content": "padding-right: ${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "pr": true
        },
        "opts": {}
      },
      {
        "content": "padding-top: ${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "pt": true
        },
        "opts": {}
      },
      {
        "content": "padding: ${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "p": true
        },
        "opts": {}
      },
      {
        "content": "padding: ${1:0} ${2:0} ${3:0} ${0:0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "p:4": true
        },
        "opts": {}
      },
      {
        "content": "padding: ${1:0} ${2:0} ${0:0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "p:3": true
        },
        "opts": {}
      },
      {
        "content": "padding: ${1:0} ${0:0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "p:2": true
        },
        "opts": {}
      },
      {
        "content": "padding: 0",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "p:0": true
        },
        "opts": {}
      },
      {
        "content": "place-content: ${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "pc": true
        },
        "opts": {}
      },
      {
        "content": "place-content: ${1} ${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "pc+": true
        },
        "opts": {}
      },
      {
        "content": "place-content: start",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "pc:s": true
        },
        "opts": {}
      },
      {
        "content": "place-content: end",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "pc:e": true
        },
        "opts": {}
      },
      {
        "content": "place-content: center",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "pc:c": true
        },
        "opts": {}
      },
      {
        "content": "place-content: flex-start",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "pc:fs": true
        },
        "opts": {}
      },
      {
        "content": "place-content: flex-end",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "pc:fe": true
        },
        "opts": {}
      },
      {
        "content": "place-content: space-between",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "pc:sb": true
        },
        "opts": {}
      },
      {
        "content": "place-content: space-around",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "pc:sa": true
        },
        "opts": {}
      },
      {
        "content": "place-content: space-evenly",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "pc:se": true
        },
        "opts": {}
      },
      {
        "content": "place-content: stretch",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "pc:st": true
        },
        "opts": {}
      },
      {
        "content": "page-break-after: ${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "pgba": true
        },
        "opts": {}
      },
      {
        "content": "page-break-after: always",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "pgba:aw": true
        },
        "opts": {}
      },
      {
        "content": "page-break-after: auto",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "pgba:a": true
        },
        "opts": {}
      },
      {
        "content": "page-break-after: left",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "pgba:l": true
        },
        "opts": {}
      },
      {
        "content": "page-break-after: right",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "pgba:r": true
        },
        "opts": {}
      },
      {
        "content": "page-break-before: ${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "pgbb": true
        },
        "opts": {}
      },
      {
        "content": "page-break-before: always",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "pgbb:aw": true
        },
        "opts": {}
      },
      {
        "content": "page-break-before: auto",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "pgbb:a": true
        },
        "opts": {}
      },
      {
        "content": "page-break-before: left",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "pgbb:l": true
        },
        "opts": {}
      },
      {
        "content": "page-break-before: right",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "pgbb:r": true
        },
        "opts": {}
      },
      {
        "content": "page-break-inside: ${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "pgbi": true
        },
        "opts": {}
      },
      {
        "content": "page-break-inside: auto",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "pgbi:a": true
        },
        "opts": {}
      },
      {
        "content": "page-break-inside: avoid",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "pgbi:av": true
        },
        "opts": {}
      },
      {
        "content": "place-items: ${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "pi": true
        },
        "opts": {}
      },
      {
        "content": "place-items: ${1:stretch} ${0:stretch}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "pi+": true
        },
        "opts": {}
      },
      {
        "content": "place-items: start",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "pi:s": true
        },
        "opts": {}
      },
      {
        "content": "place-items: end",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "pi:e": true
        },
        "opts": {}
      },
      {
        "content": "place-items: center",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "pi:c": true
        },
        "opts": {}
      },
      {
        "content": "place-items: stretch",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "pi:st": true
        },
        "opts": {}
      },
      {
        "content": "position: ${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "pos": true
        },
        "opts": {}
      },
      {
        "content": "position: absolute",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "pos:a": true
        },
        "opts": {}
      },
      {
        "content": "position: fixed",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "pos:f": true
        },
        "opts": {}
      },
      {
        "content": "position: relative",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "pos:r": true
        },
        "opts": {}
      },
      {
        "content": "position: static",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "pos:s": true
        },
        "opts": {}
      },
      {
        "content": "place-self: ${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ps": true
        },
        "opts": {}
      },
      {
        "content": "place-self: ${1:stretch} ${0:stretch}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ps+": true
        },
        "opts": {}
      },
      {
        "content": "place-self: start",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ps:s": true
        },
        "opts": {}
      },
      {
        "content": "place-self: end",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ps:e": true
        },
        "opts": {}
      },
      {
        "content": "place-self: center",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ps:c": true
        },
        "opts": {}
      },
      {
        "content": "place-self: stretch",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ps:st": true
        },
        "opts": {}
      },
      {
        "content": "quotes: ${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "q": true
        },
        "opts": {}
      },
      {
        "content": "quotes: '\\201C' '\\201D' '\\2018' '\\2019'",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "q:en": true
        },
        "opts": {}
      },
      {
        "content": "quotes: none",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "q:n": true
        },
        "opts": {}
      },
      {
        "content": "quotes: '\\00AB' '\\00BB' '\\201E' '\\201C'",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "q:ru": true
        },
        "opts": {}
      },
      {
        "content": "resize: ${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "rz": true
        },
        "opts": {}
      },
      {
        "content": "resize: both",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "rz:b": true
        },
        "opts": {}
      },
      {
        "content": "resize: horizontal",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "rz:h": true
        },
        "opts": {}
      },
      {
        "content": "resize: none",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "rz:n": true
        },
        "opts": {}
      },
      {
        "content": "resize: vertical",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "rz:v": true
        },
        "opts": {}
      },
      {
        "content": "right: ${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "r": true
        },
        "opts": {}
      },
      {
        "content": "right: auto",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "r:a": true
        },
        "opts": {}
      },
      {
        "content": "table-layout: ${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "tbl": true
        },
        "opts": {}
      },
      {
        "content": "table-layout: auto",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "tbl:a": true
        },
        "opts": {}
      },
      {
        "content": "table-layout: fixed",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "tbl:f": true
        },
        "opts": {}
      },
      {
        "content": "text-align-last: ${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "tal": true
        },
        "opts": {}
      },
      {
        "content": "text-align-last: auto",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "tal:a": true
        },
        "opts": {}
      },
      {
        "content": "text-align-last: center",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "tal:c": true
        },
        "opts": {}
      },
      {
        "content": "text-align-last: left",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "tal:l": true
        },
        "opts": {}
      },
      {
        "content": "text-align-last: right",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "tal:r": true
        },
        "opts": {}
      },
      {
        "content": "text-align: ${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ta": true
        },
        "opts": {}
      },
      {
        "content": "text-align: center",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ta:c": true
        },
        "opts": {}
      },
      {
        "content": "text-align: left",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ta:l": true
        },
        "opts": {}
      },
      {
        "content": "text-align: right",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ta:r": true
        },
        "opts": {}
      },
      {
        "content": "text-decoration: ${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "td": true
        },
        "opts": {}
      },
      {
        "content": "text-decoration: line-through",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "td:l": true
        },
        "opts": {}
      },
      {
        "content": "text-decoration: none",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "td:n": true
        },
        "opts": {}
      },
      {
        "content": "text-decoration: overline",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "td:o": true
        },
        "opts": {}
      },
      {
        "content": "text-decoration: underline",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "td:u": true
        },
        "opts": {}
      },
      {
        "content": "text-emphasis: ${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "te": true
        },
        "opts": {}
      },
      {
        "content": "text-emphasis: accent",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "te:ac": true
        },
        "opts": {}
      },
      {
        "content": "text-emphasis: after",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "te:a": true
        },
        "opts": {}
      },
      {
        "content": "text-emphasis: before",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "te:b": true
        },
        "opts": {}
      },
      {
        "content": "text-emphasis: circle",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "te:c": true
        },
        "opts": {}
      },
      {
        "content": "text-emphasis: disc",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "te:ds": true
        },
        "opts": {}
      },
      {
        "content": "text-emphasis: dot",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "te:dt": true
        },
        "opts": {}
      },
      {
        "content": "text-emphasis: none",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "te:n": true
        },
        "opts": {}
      },
      {
        "content": "text-height: ${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "th": true
        },
        "opts": {}
      },
      {
        "content": "text-height: auto",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "th:a": true
        },
        "opts": {}
      },
      {
        "content": "text-height: font-size",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "th:f": true
        },
        "opts": {}
      },
      {
        "content": "text-height: max-size",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "th:m": true
        },
        "opts": {}
      },
      {
        "content": "text-height: text-size",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "th:t": true
        },
        "opts": {}
      },
      {
        "content": "text-indent: ${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ti": true
        },
        "opts": {}
      },
      {
        "content": "text-indent: -9999px",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ti:-": true
        },
        "opts": {}
      },
      {
        "content": "text-justify: ${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "tj": true
        },
        "opts": {}
      },
      {
        "content": "text-justify: auto",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "tj:a": true
        },
        "opts": {}
      },
      {
        "content": "text-justify: distribute",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "tj:d": true
        },
        "opts": {}
      },
      {
        "content": "text-justify: inter-cluster",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "tj:ic": true
        },
        "opts": {}
      },
      {
        "content": "text-justify: inter-ideograph",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "tj:ii": true
        },
        "opts": {}
      },
      {
        "content": "text-justify: inter-word",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "tj:iw": true
        },
        "opts": {}
      },
      {
        "content": "text-justify: kashida",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "tj:k": true
        },
        "opts": {}
      },
      {
        "content": "text-justify: tibetan",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "tj:t": true
        },
        "opts": {}
      },
      {
        "content": "text-outline: ${1:0} ${2:0} #${0:000}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "to+": true
        },
        "opts": {}
      },
      {
        "content": "text-outline: ${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "to": true
        },
        "opts": {}
      },
      {
        "content": "text-outline: none",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "to:n": true
        },
        "opts": {}
      },
      {
        "content": "text-replace: ${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "tr": true
        },
        "opts": {}
      },
      {
        "content": "text-replace: none",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "tr:n": true
        },
        "opts": {}
      },
      {
        "content": "text-shadow: ${1:0} ${2:0} ${3:0} #${0:000}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "tsh+": true
        },
        "opts": {}
      },
      {
        "content": "text-shadow: ${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "tsh": true
        },
        "opts": {}
      },
      {
        "content": "text-shadow: none",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "tsh:n": true
        },
        "opts": {}
      },
      {
        "content": "text-transform: ${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "tt": true
        },
        "opts": {}
      },
      {
        "content": "text-transform: capitalize",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "tt:c": true
        },
        "opts": {}
      },
      {
        "content": "text-transform: lowercase",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "tt:l": true
        },
        "opts": {}
      },
      {
        "content": "text-transform: none",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "tt:n": true
        },
        "opts": {}
      },
      {
        "content": "text-transform: uppercase",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "tt:u": true
        },
        "opts": {}
      },
      {
        "content": "text-wrap: ${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "tw": true
        },
        "opts": {}
      },
      {
        "content": "text-wrap: none",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "tw:no": true
        },
        "opts": {}
      },
      {
        "content": "text-wrap: normal",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "tw:n": true
        },
        "opts": {}
      },
      {
        "content": "text-wrap: suppress",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "tw:s": true
        },
        "opts": {}
      },
      {
        "content": "text-wrap: unrestricted",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "tw:u": true
        },
        "opts": {}
      },
      {
        "content": "top: ${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "t": true
        },
        "opts": {}
      },
      {
        "content": "top: auto",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "t:a": true
        },
        "opts": {}
      },
      {
        "content": "vertical-align: ${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "va": true
        },
        "opts": {}
      },
      {
        "content": "vertical-align: baseline",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "va:bl": true
        },
        "opts": {}
      },
      {
        "content": "vertical-align: bottom",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "va:b": true
        },
        "opts": {}
      },
      {
        "content": "vertical-align: middle",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "va:m": true
        },
        "opts": {}
      },
      {
        "content": "vertical-align: sub",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "va:sub": true
        },
        "opts": {}
      },
      {
        "content": "vertical-align: super",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "va:sup": true
        },
        "opts": {}
      },
      {
        "content": "vertical-align: text-bottom",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "va:tb": true
        },
        "opts": {}
      },
      {
        "content": "vertical-align: text-top",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "va:tt": true
        },
        "opts": {}
      },
      {
        "content": "vertical-align: top",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "va:t": true
        },
        "opts": {}
      },
      {
        "content": "visibility: ${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "v": true
        },
        "opts": {}
      },
      {
        "content": "visibility: collapse",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "v:c": true
        },
        "opts": {}
      },
      {
        "content": "visibility: hidden",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "v:h": true
        },
        "opts": {}
      },
      {
        "content": "visibility: visible",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "v:v": true
        },
        "opts": {}
      },
      {
        "content": "white-space-collapse: ${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "whsc": true
        },
        "opts": {}
      },
      {
        "content": "white-space-collapse: break-all",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "whsc:ba": true
        },
        "opts": {}
      },
      {
        "content": "white-space-collapse: break-strict",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "whsc:bs": true
        },
        "opts": {}
      },
      {
        "content": "white-space-collapse: keep-all",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "whsc:k": true
        },
        "opts": {}
      },
      {
        "content": "white-space-collapse: loose",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "whsc:l": true
        },
        "opts": {}
      },
      {
        "content": "white-space-collapse: normal",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "whsc:n": true
        },
        "opts": {}
      },
      {
        "content": "white-space: ${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "whs": true
        },
        "opts": {}
      },
      {
        "content": "white-space: normal",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "whs:n": true
        },
        "opts": {}
      },
      {
        "content": "white-space: nowrap",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "whs:nw": true
        },
        "opts": {}
      },
      {
        "content": "white-space: pre-line",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "whs:pl": true
        },
        "opts": {}
      },
      {
        "content": "white-space: pre-wrap",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "whs:pw": true
        },
        "opts": {}
      },
      {
        "content": "white-space: pre",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "whs:p": true
        },
        "opts": {}
      },
      {
        "content": "widows: ${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "wid": true
        },
        "opts": {}
      },
      {
        "content": "width: ${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "w": true
        },
        "opts": {}
      },
      {
        "content": "width: auto",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "w:a": true
        },
        "opts": {}
      },
      {
        "content": "word-break: ${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "wob": true
        },
        "opts": {}
      },
      {
        "content": "word-break: break-all",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "wob:ba": true
        },
        "opts": {}
      },
      {
        "content": "word-break: break-strict",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "wob:bs": true
        },
        "opts": {}
      },
      {
        "content": "word-break: keep-all",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "wob:k": true
        },
        "opts": {}
      },
      {
        "content": "word-break: loose",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "wob:l": true
        },
        "opts": {}
      },
      {
        "content": "word-break: normal",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "wob:n": true
        },
        "opts": {}
      },
      {
        "content": "word-spacing: ${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "wos": true
        },
        "opts": {}
      },
      {
        "content": "word-wrap: ${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "wow": true
        },
        "opts": {}
      },
      {
        "content": "word-wrap: none",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "wow:no": true
        },
        "opts": {}
      },
      {
        "content": "word-wrap: normal",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "wow:n": true
        },
        "opts": {}
      },
      {
        "content": "word-wrap: suppress",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "wow:s": true
        },
        "opts": {}
      },
      {
        "content": "word-wrap: unrestricted",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "wow:u": true
        },
        "opts": {}
      },
      {
        "content": "z-index: ${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "z": true
        },
        "opts": {}
      },
      {
        "content": "z-index: auto",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "z:a": true
        },
        "opts": {}
      },
      {
        "content": "zoom: 1",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "zoo": true
        },
        "opts": {}
      },
      {
        "content": ":hover",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          ":h": true
        },
        "opts": {}
      },
      {
        "content": ":first-child",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          ":fc": true
        },
        "opts": {}
      },
      {
        "content": ":last-child",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          ":lc": true
        },
        "opts": {}
      },
      {
        "content": ":nth-child(${0})",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          ":nc": true
        },
        "opts": {}
      },
      {
        "content": ":nth-last-child(${0})",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          ":nlc": true
        },
        "opts": {}
      },
      {
        "content": ":only-child",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          ":oc": true
        },
        "opts": {}
      },
      {
        "content": ":after",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          ":a": true
        },
        "opts": {}
      },
      {
        "content": ":before",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          ":b": true
        },
        "opts": {}
      },
      {
        "content": "::after",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "::a": true
        },
        "opts": {}
      },
      {
        "content": "::before",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "::b": true
        },
        "opts": {}
      }
    ],
    "scala": [
      {
        "content": "match {\n\tcase ${1} => ${0}\n}",
        "doc": "",
        "grammar": "snu",
        "label": "match {\\n  case .. => ..",
        "matches": {
          "match": true
        },
        "opts": {}
      },
      {
        "content": "case ${1} => ${0}",
        "doc": "",
        "grammar": "snu",
        "label": "case .. => ..",
        "matches": {
          "case": true
        },
        "opts": {}
      },
      {
        "content": "try {\n\t${1:TARGET}\n} catch {\n\tcase e${2:: Exception} => ${0}\n}",
        "doc": "",
        "grammar": "snu",
        "label": "try {} catch { case ... }",
        "matches": {
          "try": true
        },
        "opts": {
          "head": true
        }
      },
      {
        "content": "for {\n\t${1}\n} yield ${2}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "for": true
        },
        "opts": {}
      },
      {
        "content": "if (${1}) {\n\t${2}\n}${3: else}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "if": true
        },
        "opts": {}
      },
      {
        "content": "println(${1})",
        "doc": "",
        "grammar": "snu",
        "label": "println()",
        "matches": {
          "p": true
        },
        "opts": {}
      },
      {
        "content": "println('${1:#:name}, $1)",
        "doc": "",
        "grammar": "snu",
        "label": "println('name, name)",
        "matches": {
          "pn": true
        },
        "opts": {}
      },
      {
        "content": "_ = println(${1})",
        "doc": "",
        "grammar": "snu",
        "label": "p in for",
        "matches": {
          "pf": true
        },
        "opts": {}
      },
      {
        "content": "object ${1:X} {\n\t${0:TARGET}\n}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "object": true
        },
        "opts": {
          "head": true
        }
      },
      {
        "content": "class ${1:X()} {\n\t${0:TARGET}\n}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "class": true
        },
        "opts": {
          "head": true
        }
      },
      {
        "content": "should \"${1}\" in {\n\t${0:TARGET}\n}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "should-scalatest": true
        },
        "opts": {
          "word": true
        }
      },
      {
        "content": "import akka.actor.{ActorSystem, Actor, ActorLogging, Props}\nobject ${1:X} {\n\tdef props(${2}) = Props(new X($2))\n}\nclass $1($2) extends Actor with ActorLogging {\n\tdef receive = {\n\t\tcase e =>\n\t\t\t${0:TARGET:println(e)}\n\t}\n}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "akka-actor": true
        },
        "opts": {
          "head": true
        }
      },
      {
        "content": "case class ${1}(${2}: ${0})",
        "doc": "",
        "grammar": "snu",
        "label": "case class ..(..: ..)",
        "matches": {
          "cclass": true
        },
        "opts": {
          "head": true
        }
      },
      {
        "content": "if (${1})\n\t${0:${VISUAL}}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "if": true
        },
        "opts": {}
      },
      {
        "content": "if (!${1})\n\t${0:${VISUAL}}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ifn": true
        },
        "opts": {}
      },
      {
        "content": "if (${1})\n\t${2:${VISUAL}}\nelse\n\t${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ife": true
        },
        "opts": {}
      },
      {
        "content": "if (${1})\n\t${2:${VISUAL}}\nelse if (${3})\n\t${0:${VISUAL}}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ifelif": true
        },
        "opts": {}
      },
      {
        "content": "else if (${3})\n\t${0:${VISUAL}}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "eif": true
        },
        "opts": {}
      },
      {
        "content": "while (${1:obj}) {\n\t${0:${VISUAL}}\n}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "wh": true
        },
        "opts": {}
      },
      {
        "content": "for (${1:item} <- ${2:obj}) {\n\t${0}\n}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "for": true
        },
        "opts": {}
      },
      {
        "content": "for (${1:i} <- ${2:0} to ${3:obj}.length) {\n\t${0}\n}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "fori": true
        },
        "opts": {}
      },
      {
        "content": "for {\n\t${1:item} <- ${2:obj}\n} yield ${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "fory": true
        },
        "opts": {}
      },
      {
        "content": "try {\n\t${1:${VISUAL}}\n} catch {\n\tcase e: FileNotFoundException => ${2}\n\tcase e: IOException => ${3}\n} finally {\n\t${0}\n}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "try": true
        },
        "opts": {}
      },
      {
        "content": "${1:${VISUAL}} match {\n\tcase ${2} => ${0}\n}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "mat": true
        },
        "opts": {}
      },
      {
        "content": "${1: obj} match {\n\tcase ${2:e} => ${3}\n\tcase _ => ${0}\n}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "match": true
        },
        "opts": {}
      },
      {
        "content": "case ${1:${VISUAL}} => ${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "case": true
        },
        "opts": {}
      },
      {
        "content": "${1:a}: ${2:T}${0:, arg}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "arg": true
        },
        "opts": {}
      },
      {
        "content": "${1:args}: ${0:T}*",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "args": true
        },
        "opts": {}
      },
      {
        "content": "def ${1:name}(${2:arg}) = ${0:}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "def": true
        },
        "opts": {}
      },
      {
        "content": "private def ${1:name}(${2:arg}) = ${0:}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "prdef": true
        },
        "opts": {}
      },
      {
        "content": "override def ${1:name}(${2:arg}) = ${0:}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ovdef": true
        },
        "opts": {}
      },
      {
        "content": "(${1:a}: ${2:T}) => $1 ${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "fcf": true
        },
        "opts": {}
      },
      {
        "content": "${1:name} => ${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "=>": true
        },
        "opts": {}
      },
      {
        "content": "def ${1:name}(${0:arg}) =\n\tif($2) $2\n\telse $1($2)",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "rec": true
        },
        "opts": {}
      },
      {
        "content": "def ${1:name}(${2:arg})(${3:arg}) = ${0:}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "crdef": true
        },
        "opts": {}
      },
      {
        "content": "def main(args: Array[String]):${1:T} = ${0:}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "main": true
        },
        "opts": {}
      },
      {
        "content": "dbl",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "T Double": true
        },
        "opts": {}
      },
      {
        "content": "int",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "T Int": true
        },
        "opts": {}
      },
      {
        "content": "lng",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "T Long": true
        },
        "opts": {}
      },
      {
        "content": "chr",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "T Char": true
        },
        "opts": {}
      },
      {
        "content": "str",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "T String": true
        },
        "opts": {}
      },
      {
        "content": "arr",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "T Array": true
        },
        "opts": {}
      },
      {
        "content": "buf",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "T Buffer": true
        },
        "opts": {}
      },
      {
        "content": "list",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "T List": true
        },
        "opts": {}
      },
      {
        "content": "tpl",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "T Tuple": true
        },
        "opts": {}
      },
      {
        "content": "set",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "T Set": true
        },
        "opts": {}
      },
      {
        "content": "map",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "T Map": true
        },
        "opts": {}
      },
      {
        "content": "hset",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "T HashSet": true
        },
        "opts": {}
      },
      {
        "content": "hmap",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "T HashMap": true
        },
        "opts": {}
      },
      {
        "content": "bool",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "T Boolean": true
        },
        "opts": {}
      },
      {
        "content": "Boolean",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "bool": true
        },
        "opts": {}
      },
      {
        "content": "AnyRef",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "anyr": true
        },
        "opts": {}
      },
      {
        "content": "Double",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "dbl": true
        },
        "opts": {}
      },
      {
        "content": "Int",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "int": true
        },
        "opts": {}
      },
      {
        "content": "String",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "str": true
        },
        "opts": {}
      },
      {
        "content": "Char",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "chr": true
        },
        "opts": {}
      },
      {
        "content": "Long",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "lng": true
        },
        "opts": {}
      },
      {
        "content": "Array${1:[T]}${0:()}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "arr": true
        },
        "opts": {}
      },
      {
        "content": "Buffer${1:[T]}${0:()}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "buf": true
        },
        "opts": {}
      },
      {
        "content": "List${1:[T]}${0:()}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "list": true
        },
        "opts": {}
      },
      {
        "content": "Tuple${1:2}[${2:T},${0:T}]",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "tpl": true
        },
        "opts": {}
      },
      {
        "content": "Set${1:[T]}${0:()}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "set": true
        },
        "opts": {}
      },
      {
        "content": "HashSet${1:[T]}${0:()}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "hset": true
        },
        "opts": {}
      },
      {
        "content": "mutable.HashSet${1:[T]}${0:()}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "mhset": true
        },
        "opts": {}
      },
      {
        "content": "${1:key}->${2:val}${0:, keyval}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "keyval": true
        },
        "opts": {}
      },
      {
        "content": "Map[${1:T},${2:T}]${0:(keyval)}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "map": true
        },
        "opts": {}
      },
      {
        "content": "HashMap[${1:T},${2:T}]${0:(keyval)}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "hmap": true
        },
        "opts": {}
      },
      {
        "content": "mutable.Map[${1:T},${2:T}]${0:(keyval)}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "mmap": true
        },
        "opts": {}
      },
      {
        "content": "mutable.HashMap[${1:T},${2:T}]${0:(keyval)}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "mhmap": true
        },
        "opts": {}
      },
      {
        "content": "${1:name}.asInstanceOf[${2:T}]",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "as": true
        },
        "opts": {}
      },
      {
        "content": "${1:name}.isInstanceOf[${2:T}]",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "is": true
        },
        "opts": {}
      },
      {
        "content": "(${1:a} => ${0})",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "(a": true
        },
        "opts": {}
      },
      {
        "content": "{(${1:a},${2:b}) =>\n\t${0}\n}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "{(": true
        },
        "opts": {}
      },
      {
        "content": "${0:name}.filter (a",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "filter": true
        },
        "opts": {}
      },
      {
        "content": "${0:name}.map (a",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "mapf": true
        },
        "opts": {}
      },
      {
        "content": "${1:name}.flatMap${0:[T]}(a",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "flatmap": true
        },
        "opts": {}
      },
      {
        "content": "${1:name}.foldLeft(${0:first}) {(",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "fldl": true
        },
        "opts": {}
      },
      {
        "content": "${1:name}.foldRight(${0:first}) {(",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "fldr": true
        },
        "opts": {}
      },
      {
        "content": "(${1:first}/:${2:name})(${0})",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "/:": true
        },
        "opts": {}
      },
      {
        "content": "(${1:first}:\\${2:name})(${0})",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          ":\\": true
        },
        "opts": {}
      },
      {
        "content": "${1:name}.reduceLeft[${0:T}] {(",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "redl": true
        },
        "opts": {}
      },
      {
        "content": "${1:name}.reduceRight[${0:T}] {(",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "redr": true
        },
        "opts": {}
      },
      {
        "content": "${0:name}.view.zipWithIndex",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "zipwi": true
        },
        "opts": {}
      },
      {
        "content": "${1:name}.split(\"${0:,}\")",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "spl": true
        },
        "opts": {}
      },
      {
        "content": "val ${1:name}${2:: T} = ${0:value}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "val": true
        },
        "opts": {}
      },
      {
        "content": "var ${1:name}${2:: T} = ${0:value}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "var": true
        },
        "opts": {}
      },
      {
        "content": "extends ${0:what}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "extends": true
        },
        "opts": {}
      },
      {
        "content": "with ${1:what}${0: with}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "with": true
        },
        "opts": {}
      },
      {
        "content": "def this(arg) = this(arg)",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "athis": true
        },
        "opts": {}
      },
      {
        "content": "abstract class ${1:name}${2:(arg)}${3: extends }${4: with} {\n\t${5:override def toString = \"$1\"}\n\t${0}\n}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "abstract": true
        },
        "opts": {}
      },
      {
        "content": "class ${1:name}${2:(arg)}${3: extends }${4: with} {\n\t${5:override def toString = \"$1\"}\n\t${0}\n}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "class": true
        },
        "opts": {}
      },
      {
        "content": "object ${1:name}${2:(arg)}${3: extends }${4: with} ${0:}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "object": true
        },
        "opts": {}
      },
      {
        "content": "trait ${1:name}${2: extends }${3: with} {\n\t${0:}\n}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "trait": true
        },
        "opts": {}
      },
      {
        "content": "class ${1:name}${2:(arg)} extends Ordered[$1] ${3: with} {\n\t${4:override def toString = \"$1\"}\n\tdef compare(that: $1) = ${5:this - that}\n\t${0}\n}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ordered": true
        },
        "opts": {}
      },
      {
        "content": "case class ${1:name}${2:(arg)}${3: extends }${4: with} ${0:}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "casecl": true
        },
        "opts": {}
      },
      {
        "content": "${1:import org.scalatest.Suite}\n${0:import org.scalatest.FunSuite}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "scalatest": true
        },
        "opts": {}
      },
      {
        "content": "assert(${1:a} === ${0:b})",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "assert": true
        },
        "opts": {}
      },
      {
        "content": "ifel ensuring(${1:a}==${0:b})",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ensuring": true
        },
        "opts": {}
      },
      {
        "content": "expect(${1:what}) {\n\t${0}\n}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "expect": true
        },
        "opts": {}
      },
      {
        "content": "intercept[${1:IllegalArgumentException}] {\n\t${0}\n}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "intercept": true
        },
        "opts": {}
      },
      {
        "content": "test(\"${1:description}\") {\n\t${0}\n}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "test": true
        },
        "opts": {}
      },
      {
        "content": "class ${0:name} extends Suite {\n\tdef test() {\n}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "suite": true
        },
        "opts": {}
      },
      {
        "content": "class ${1:name} extends FunSuite {\n\ttest(\"${0:description}\") {\n}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "fsuite": true
        },
        "opts": {}
      },
      {
        "content": "import sbt._\nclass ${1:Name}(info: ProjectInfo) extends DefaultWebProject(info) {\n\tval liftVersion = \"${0:2.3}\"\n\toverride def libraryDependencies = Set(\n\t) ++ super.libraryDependencies\n\tval snapshots = ScalaToolsSnapshots\n}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "webproject": true
        },
        "opts": {}
      },
      {
        "content": "\"net.liftweb\" %% \"${0:lib}\" % liftVersion % \"compile->default\",",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "liftjar": true
        },
        "opts": {}
      },
      {
        "content": "\"org.mortbay.jetty\" % \"jetty\" % \"${0:version}\" % \"test->default\",",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "jettyjar": true
        },
        "opts": {}
      },
      {
        "content": "import _root_.net.liftweb.http._\nimport S._\nimport _root_.net.liftweb.util._\nimport Helpers._\nimport _root_.scala.xml._",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "liftimports": true
        },
        "opts": {}
      }
    ],
    "scheme": [
      {
        "content": "(cond\n  ((${1}) ${2})\n  (${0:else}))",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "cond": true
        },
        "opts": {}
      },
      {
        "content": "(case ${1}\n  ((${2}) ${3})\n  (${0:else}))",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "case": true
        },
        "opts": {}
      },
      {
        "content": "(use gauche.test)\n(test-start \"${1}.scm\")\n(load \"$1.scm\")\n(test* \"${2}\" ${3:expected} ${4:actual})",
        "doc": "",
        "grammar": "snu",
        "label": "(use gauche.test)(test-start ...",
        "matches": {
          "gauche-testsuite": true
        },
        "opts": {
          "head": true
        }
      },
      {
        "content": "(+ ${1}\n\t${0})",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "+": true
        },
        "opts": {}
      },
      {
        "content": "(- ${1}\n\t${0})",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "-": true
        },
        "opts": {}
      },
      {
        "content": "(/ ${1}\n\t${0})",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "/": true
        },
        "opts": {}
      },
      {
        "content": "(* ${1}\n\t${0})",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "*": true
        },
        "opts": {}
      },
      {
        "content": "(define (${1:name})\n\t\t(${0:definition}))",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "def": true
        },
        "opts": {}
      },
      {
        "content": "(define ${1:name}\n\t(lambda (x)(${0:definition})))",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "defl": true
        },
        "opts": {}
      },
      {
        "content": "(cond ((${1:predicate}) (${2:action}))\n\t((${3:predicate}) (${0:action})))",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "cond": true
        },
        "opts": {}
      },
      {
        "content": "(if (${1:predicate})\n\t(${2:true-action})\n\t(${0:false-action}))",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "if": true
        },
        "opts": {}
      }
    ],
    "scss": [
      {
        "content": "@mixin ${1:NAME}(${2:#:ARGS}) {\n  ${0:TARGET}\n}",
        "doc": "",
        "grammar": "snu",
        "label": "@mixin(...){...}",
        "matches": {
          "mixin": true
        },
        "opts": {
          "head": true
        }
      },
      {
        "content": "@include ${1:NAME}(${2:#:ARGS});",
        "doc": "",
        "grammar": "snu",
        "label": "@include ...",
        "matches": {
          "include": true
        },
        "opts": {}
      },
      {
        "content": "@import '${0:TARGET}';",
        "doc": "",
        "grammar": "snu",
        "label": "@import '...';",
        "matches": {
          "import": true
        },
        "opts": {
          "head": true
        }
      },
      {
        "content": "@extend ${0:TARGET};",
        "doc": "",
        "grammar": "snu",
        "label": "@extend ...;",
        "matches": {
          "extend": true
        },
        "opts": {
          "head": true
        }
      },
      {
        "content": "$${1:variable}: ${0:value};",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "$": true
        },
        "opts": {}
      },
      {
        "content": "@import '${0}';",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "imp": true
        },
        "opts": {}
      },
      {
        "content": "@mixin ${1:name}(${2}) {\n\t${0}\n}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "mix": true
        },
        "opts": {}
      },
      {
        "content": "@include ${1:mixin}(${2});",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "inc": true
        },
        "opts": {}
      },
      {
        "content": "@extend ${0};",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ext": true
        },
        "opts": {}
      },
      {
        "content": "@function ${1:name}(${2:args}) {\n\t${0}\n}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "fun": true
        },
        "opts": {}
      },
      {
        "content": "@if ${1:condition} {\n\t${0}\n}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "if": true
        },
        "opts": {}
      },
      {
        "content": "@if ${1:condition} {\n\t${2}\n} @else {\n\t${0}\n}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ife": true
        },
        "opts": {}
      },
      {
        "content": "@else if ${1:condition} {\n\t${0}\n}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "eif": true
        },
        "opts": {}
      },
      {
        "content": "@for ${1:$i} from ${2:1} through ${3:3} {\n\t${0}\n}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "for": true
        },
        "opts": {}
      },
      {
        "content": "@each ${1:$item} in ${2:items} {\n\t${0}\n}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "each": true
        },
        "opts": {}
      },
      {
        "content": "@while ${1:$i} ${2:>} ${3:0} {\n\t${0}\n}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "while": true
        },
        "opts": {}
      }
    ],
    "sh": [
      {
        "content": "#!/bin/${1:sh}\n${0}",
        "doc": "",
        "grammar": "snu",
        "label": "#!/bin/sh",
        "matches": {
          "#!": true,
          "shebang": true
        },
        "opts": {
          "head": true
        }
      },
      {
        "content": "if [ ${1:#:condition} ]; then\n\t${0:TARGET}\nfi",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "if": true
        },
        "opts": {}
      },
      {
        "content": "else\n\t${0:TARGET}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "el": true
        },
        "opts": {}
      },
      {
        "content": "elif [ ${1:#:condition} ]; then\n\t${0:TARGET}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "elif": true
        },
        "opts": {}
      },
      {
        "content": "for ${1:i} in ${2:#:words}; do\n\t${0:TARGET}\ndone",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "for": true
        },
        "opts": {}
      },
      {
        "content": "while ${1:#:condition} ; do\n\t${0:TARGET}\ndone",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "wh": true,
          "while": true
        },
        "opts": {}
      },
      {
        "content": "until ${1:#:condition} ; do\n\t${0:TARGET}\ndone",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "until": true
        },
        "opts": {}
      },
      {
        "content": "<< ${1:EOF}\n\t${0:#:TARGET}\n$1",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "h <<": true,
          "heredoc": true
        },
        "opts": {}
      },
      {
        "content": "#!/usr/bin/env ${1}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "env": true
        },
        "opts": {}
      },
      {
        "content": "${1:TMPFILE}=$(mktemp ${2:XXX})\ntrap \"rm -f '${$1}'\" 0               # EXIT\ntrap \"rm -f '${$1}'; exit 1\" 2       # INT\ntrap \"rm -f '${$1}'; exit 1\" 1 15    # HUP TERM\n${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "tmp": true
        },
        "opts": {}
      },
      {
        "content": "${1:#:name}()\n{\n\t${0:TARGET}\n}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "func": true,
          "function": true
        },
        "opts": {}
      },
      {
        "content": "if [[ $${1:string} =~ ${2:^regexp.*} ]]; then\n\t${0}\nfi",
        "doc": "",
        "grammar": "snu",
        "label": "=~",
        "matches": {
          "match-regexp": true
        },
        "opts": {
          "head": true
        }
      },
      {
        "content": "${1:name}=\"${2:something}\"",
        "doc": "",
        "grammar": "snu",
        "label": "var-assign",
        "matches": {
          "assign": true
        },
        "opts": {
          "head": true
        }
      },
      {
        "content": "case \"$${1:{name\\}}\" in\n\t${2:pattern*})\n\t\t${0}\n\t\t;;\n\t*)\n\t\t${3:echo \"$$1 Didn't match anything\"}\nesac",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "case": true
        },
        "opts": {
          "head": true
        }
      },
      {
        "content": "echo \"${0:TARGET}\" 1>&2",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "warn": true
        },
        "opts": {
          "head": true
        }
      },
      {
        "content": "echo \"${0:TARGET}\" 1>&2\nexit 1",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "abort": true
        },
        "opts": {
          "head": true
        }
      },
      {
        "content": "#!/usr/bin/env sh",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "#!": true
        },
        "opts": {}
      },
      {
        "content": "#!/usr/bin/env sh\nset -eu",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "s#!": true
        },
        "opts": {}
      },
      {
        "content": "set -eu",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "safe": true
        },
        "opts": {}
      },
      {
        "content": "#!/usr/bin/env bash",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "bash": true
        },
        "opts": {}
      },
      {
        "content": "#!/usr/bin/env bash\nset -euo pipefail\nIFS=$'\\n\\t'",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "sbash": true
        },
        "opts": {}
      },
      {
        "content": "if [[ ${1:condition} ]]; then\n\t${0:${VISUAL}}\nfi",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "if": true
        },
        "opts": {}
      },
      {
        "content": "elif [[ ${1:condition} ]]; then\n\t${0:${VISUAL}}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "elif": true
        },
        "opts": {}
      },
      {
        "content": "for (( ${2:i} = 0; $2 < ${1:count}; $2++ )); do\n\t${0:${VISUAL}}\ndone",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "for": true
        },
        "opts": {}
      },
      {
        "content": "for ${1:needle} in ${2:haystack} ; do\n\t${0:${VISUAL}}\ndone",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "fori": true
        },
        "opts": {}
      },
      {
        "content": "while [[ ${1:condition} ]]; do\n\t${0:${VISUAL}}\ndone",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "wh": true
        },
        "opts": {}
      },
      {
        "content": "until [[ ${1:condition} ]]; do\n\t${0:${VISUAL}}\ndone",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "until": true
        },
        "opts": {}
      },
      {
        "content": "case ${1:word} in\n\t${2:pattern})\n\t\t${0};;\nesac",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "case": true
        },
        "opts": {}
      },
      {
        "content": "while getopts '${1:o}' ${2:opts}\ndo\n\tcase $$2 in\n\t${3:o0})\n\t\t${0:#staments};;\n\tesac\ndone",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "go": true
        },
        "opts": {}
      },
      {
        "content": "SCRIPT_DIR=\"$( cd \"$( dirname \"${BASH_SOURCE[0]}\" )\" && pwd )\"",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "sdir": true
        },
        "opts": {}
      },
      {
        "content": "__ScriptVersion=\"${1:version}\"\n#===  FUNCTION  ================================================================\n#         NAME:  usage\n#  DESCRIPTION:  Display usage information.\n#===============================================================================\nfunction usage ()\n{\n\techo \"Usage :  $${0:0} [options] [--]\n    Options:\n    -h|help       Display this message\n    -v|version    Display script version\"\n}    # ----------  end of function usage  ----------\n#-----------------------------------------------------------------------\n#  Handle command line arguments\n#-----------------------------------------------------------------------\nwhile getopts \":hv\" opt\ndo\n  case $opt in\n\th|help     )  usage; exit 0   ;;\n\tv|version  )  echo \"$${0:0} -- Version $__ScriptVersion\"; exit 0   ;;\n\t* )  echo -e \"\\n  Option does not exist : $OPTARG\\n\"\n\t\t  usage; exit 1   ;;\n  esac    # --- end of case ---\ndone\nshift $(($OPTIND-1))",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "getopt": true
        },
        "opts": {}
      },
      {
        "content": "if [ \\$(id -u) -ne 0 ]; then exec sudo \\$0; fi",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "root": true
        },
        "opts": {}
      },
      {
        "content": "${1:function_name}() {\n\t${0:#function_body}\n}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "fun-sh": true
        },
        "opts": {}
      },
      {
        "content": "function ${1:function_name}() {\n\t${0:#function_body}\n}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "fun": true
        },
        "opts": {}
      }
    ],
    "simplemvcf": [
      {
        "content": "<?php\n\tnamespace Controllers;\n\tuse Core\\View;\n\tuse Core\\Controller;\n\tclass ${1:class_name} extends Controller\n\t{\n\t\tpublic function __construct()\n\t\t{\n\t\t\tparent::__construct();\n\t\t}\n\t\tpublic function index()\n\t\t{\n\t\t\t${2:}\n\t\t}\n\t}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "sm_controller": true
        },
        "opts": {}
      },
      {
        "content": "<?php \n\tnamespace Models;\n\tuse Core\\Model;\n\tclass ${1:class_name} extends Model \n\t{    \n\t\tfunction __construct()\n\t\t{\n\t\t\tparent::__construct();\n\t\t}  \n\t}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "sm_model": true
        },
        "opts": {}
      },
      {
        "content": "<?php \n\tnamespace Models;\n\tuse Core\\Model;\n\tclass ${1:class_name} extends Model \n\t{    \n\t\tprivate $${2:table};\n\t\tfunction __construct()\n\t\t{\n\t\t\tparent::__construct();\n\t\t}  \n\t\tpublic function getRow($where)\n\t\t{\n\t\t\treturn $this->db->select('SELECT * FROM '.$table.' WHERE ${3:where}', $data);\n\t\t}\n\t\tpublic function getRows($where)\n\t\t{\n\t\t\treturn $this->db->select('SELECT * FROM '.$table.');\n\t\t}\n\t\tpublic function insert($data)\n\t\t{\n\t\t\t$this->db->insert($table, $data);\n\t\t}\n\t\tpublic function update($data, $where)\n\t\t{\n\t\t\t$this->db->update($table ,$data, $where);\n\t\t}\n\t\tpublic function delete($where)\n\t\t{\n\t\t\t$this->db->delete($table, $where);\n\t\t}\n\t}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "sm_model_crud": true
        },
        "opts": {}
      },
      {
        "content": "View::render('${1:view}', $${2:array});",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "sm_render": true
        },
        "opts": {}
      },
      {
        "content": "View::renderTemplate('${1:part}', $${2:array});",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "sm_render_template": true
        },
        "opts": {}
      },
      {
        "content": "$this->db->select(${1:sql}, ${2:where});",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "sm_db_select": true
        },
        "opts": {}
      },
      {
        "content": "$this->db->insert(${1:table}, ${2:data});",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "sm_db_insert": true
        },
        "opts": {}
      },
      {
        "content": "$this->db->update(${1:table}, ${2:data}, ${3:where});",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "sm_db_update": true
        },
        "opts": {}
      },
      {
        "content": "$this->db->delete(${1:table}, ${2:where});",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "sm_db_delete": true
        },
        "opts": {}
      },
      {
        "content": "$this->db->delete(${1:table});",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "sm_db_truncate": true
        },
        "opts": {}
      },
      {
        "content": "Session::set(${1:key}, ${2:value});",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "sm_session_set": true
        },
        "opts": {}
      },
      {
        "content": "Session::get(${1:key});",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "sm_session_get": true
        },
        "opts": {}
      },
      {
        "content": "Session::pull(${1:key});",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "sm_session_pull": true
        },
        "opts": {}
      },
      {
        "content": "Session::id();",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "sm_session_id": true
        },
        "opts": {}
      },
      {
        "content": "Session::set(${1:key});",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "sm_session_destroy": true
        },
        "opts": {}
      },
      {
        "content": "Session::display();",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "sm_session_display": true
        },
        "opts": {}
      },
      {
        "content": "Url:redirect('${1:path}');",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "sm_url_redirect": true
        },
        "opts": {}
      },
      {
        "content": "Url:previous();",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "sm_url_previous": true
        },
        "opts": {}
      },
      {
        "content": "Url:templatePath();",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "sm_url_templatepath": true
        },
        "opts": {}
      },
      {
        "content": "Url:autolink('${1:string}');",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "sm_url_autolink": true
        },
        "opts": {}
      }
    ],
    "slim": [
      {
        "content": "- binding.pry",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "pry": true
        },
        "opts": {}
      },
      {
        "content": "= render partial: '${0}'",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "renp": true
        },
        "opts": {}
      },
      {
        "content": "fieldset\n\tlegend ${1}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "fieldset": true
        },
        "opts": {}
      },
      {
        "content": "link rel=\"stylesheet\" href=\"${1:style.css}\" type=\"text/css\" media=\"${2:all}\"",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "css": true
        },
        "opts": {}
      },
      {
        "content": "script src=\"${1:script.js}\" type=\"text/javascript\"",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "script": true
        },
        "opts": {}
      },
      {
        "content": "&nbsp;",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "nbs": true
        },
        "opts": {}
      },
      {
        "content": "&#x2190;",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "left": true
        },
        "opts": {}
      },
      {
        "content": "&#x2192;",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "right": true
        },
        "opts": {}
      },
      {
        "content": "&#x2191;",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "up": true
        },
        "opts": {}
      },
      {
        "content": "&#x2193;",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "down": true
        },
        "opts": {}
      },
      {
        "content": "&#x21A9;",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "return": true
        },
        "opts": {}
      },
      {
        "content": "&#x21E4;",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "backtab": true
        },
        "opts": {}
      },
      {
        "content": "&#x21E5;",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "tab": true
        },
        "opts": {}
      },
      {
        "content": "&#x21E7;",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "shift": true
        },
        "opts": {}
      },
      {
        "content": "&#x2303;",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ctrl": true
        },
        "opts": {}
      },
      {
        "content": "&#x2305;",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "enter": true
        },
        "opts": {}
      },
      {
        "content": "&#x2318;",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "cmd": true
        },
        "opts": {}
      },
      {
        "content": "&#x2325;",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "option": true
        },
        "opts": {}
      },
      {
        "content": "&#x2326;",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "delete": true
        },
        "opts": {}
      },
      {
        "content": "&#x232B;",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "backspace": true
        },
        "opts": {}
      },
      {
        "content": "&#x238B;",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "esc": true
        },
        "opts": {}
      }
    ],
    "snippets": [
      {
        "content": "import styled from 'styled-components/native';\n\nexport const ${1:Container} = styled.${2:View}`\n  ${3}\n`;\n",
        "doc": "Create React Native Styled Components file",
        "grammar": "lsp",
        "label": "styles",
        "matches": {
          "styled-react-native": true
        },
        "opts": {}
      },
      {
        "content": "import ${2:moduleName} from '${1:module}'$0",
        "doc": null,
        "grammar": "lsp",
        "label": "import",
        "matches": {
          "imp": true
        },
        "opts": {}
      },
      {
        "content": "import '${1:module}'$0",
        "doc": null,
        "grammar": "lsp",
        "label": "importNoModuleName",
        "matches": {
          "imn": true
        },
        "opts": {}
      },
      {
        "content": "import { $2 } from '${1:module}'$0",
        "doc": null,
        "grammar": "lsp",
        "label": "importDestructing",
        "matches": {
          "imd": true
        },
        "opts": {}
      },
      {
        "content": "import * as ${2:alias} from '${1:module}'$0",
        "doc": null,
        "grammar": "lsp",
        "label": "importEverything",
        "matches": {
          "ime": true
        },
        "opts": {}
      },
      {
        "content": "import { ${2:originalName} as ${3:alias} } from '${1:module}'$0",
        "doc": null,
        "grammar": "lsp",
        "label": "importAs",
        "matches": {
          "ima": true
        },
        "opts": {}
      },
      {
        "content": "export default $1$0",
        "doc": null,
        "grammar": "lsp",
        "label": "exportDefault",
        "matches": {
          "exp": true
        },
        "opts": {}
      },
      {
        "content": "export { $2 } from '${1:module}'$0",
        "doc": null,
        "grammar": "lsp",
        "label": "exportDestructing",
        "matches": {
          "exd": true
        },
        "opts": {}
      },
      {
        "content": "export { ${2:originalName} as ${3:alias} } from '${1:module}'$0",
        "doc": null,
        "grammar": "lsp",
        "label": "exportAs",
        "matches": {
          "exa": true
        },
        "opts": {}
      },
      {
        "content": "export const ${1:functionName} = (${2:params}) => {\n\t$0\n}\n",
        "doc": "Export named function in ES7 syntax",
        "grammar": "lsp",
        "label": "exportNamedFunction",
        "matches": {
          "enf": true
        },
        "opts": {}
      },
      {
        "content": "export default (${1:params}) => {\n\t$0\n}\n",
        "doc": "Export default function in ES7 syntax",
        "grammar": "lsp",
        "label": "exportDefaultFunction",
        "matches": {
          "edf": true
        },
        "opts": {}
      },
      {
        "content": "${1:methodName} = (${2:params}) => {\n\t${0}\n}\n",
        "doc": "Creates a method inside a class in ES7 syntax",
        "grammar": "lsp",
        "label": "method",
        "matches": {
          "met": true
        },
        "opts": {}
      },
      {
        "content": "get ${1:propertyName}() {\n\treturn this.${0}\n}\n",
        "doc": "Creates a getter property inside a class in ES7 syntax",
        "grammar": "lsp",
        "label": "propertyGet",
        "matches": {
          "pge": true
        },
        "opts": {}
      },
      {
        "content": "set ${1:propertyName}(${2:value}) {\n\t${0}\n}\n",
        "doc": "Creates a setter property inside a class in ES7 syntax",
        "grammar": "lsp",
        "label": "propertySet",
        "matches": {
          "pse": true
        },
        "opts": {}
      },
      {
        "content": "${1:array}.forEach(${2:currentItem} => {\n\t${0}\n})\n",
        "doc": "Creates a forEach statement in ES7 syntax",
        "grammar": "lsp",
        "label": "forEach",
        "matches": {
          "fre": true
        },
        "opts": {}
      },
      {
        "content": "for(let ${1:item} of ${2:object}) {\n\t${0}\n}\n",
        "doc": "Iterating over property names of iterable objects",
        "grammar": "lsp",
        "label": "forOf",
        "matches": {
          "fof": true
        },
        "opts": {}
      },
      {
        "content": "for(let ${1:item} in ${2:object}) {\n\t${0}\n}\n",
        "doc": "Iterating over property values of iterable objects",
        "grammar": "lsp",
        "label": "forIn",
        "matches": {
          "fin": true
        },
        "opts": {}
      },
      {
        "content": "(${1:params}) => {\n\t${2}\n}",
        "doc": "Creates an anonymous function in ES7 syntax",
        "grammar": "lsp",
        "label": "anonymousFunction",
        "matches": {
          "anfn": true
        },
        "opts": {}
      },
      {
        "content": "const ${1:name} = (${2:params}) => {\n\t${3}\n}\n",
        "doc": "Creates a named function in ES7 syntax",
        "grammar": "lsp",
        "label": "namedFunction",
        "matches": {
          "nfn": true
        },
        "opts": {}
      },
      {
        "content": "const {${1:propertyName}} = ${2:objectToDestruct}",
        "doc": "Creates and assigns a local variable using object destructing",
        "grammar": "lsp",
        "label": "destructingObject",
        "matches": {
          "dob": true
        },
        "opts": {}
      },
      {
        "content": "const [${1:propertyName}] = ${2:arrayToDestruct}",
        "doc": "Creates and assigns a local variable using array destructing",
        "grammar": "lsp",
        "label": "destructingArray",
        "matches": {
          "dar": true
        },
        "opts": {}
      },
      {
        "content": "setInterval(() => {\n\t${2}\n}, ${0:intervalInms})\n",
        "doc": "Executes the given function at specified intervals in ES7 syntax",
        "grammar": "lsp",
        "label": "setInterval",
        "matches": {
          "sti": true
        },
        "opts": {}
      },
      {
        "content": "setTimeout(() => {\n\t${2}\n}, ${1:delayInms})\n",
        "doc": "Executes the given function after the specified delay in ES7 syntax",
        "grammar": "lsp",
        "label": "setTimeOut",
        "matches": {
          "sto": true
        },
        "opts": {}
      },
      {
        "content": "return new Promise((resolve, reject) => {\n\t${1}\n})\n",
        "doc": "Creates and returns a new Promise in the standard ES7 syntax",
        "grammar": "lsp",
        "label": "promise",
        "matches": {
          "prom": true
        },
        "opts": {}
      },
      {
        "content": "console.assert(${1:expression}, ${2:object})",
        "doc": "If the specified expression is false, the message is written to the console along with a stack trace",
        "grammar": "lsp",
        "label": "consoleAssert",
        "matches": {
          "cas": true
        },
        "opts": {}
      },
      {
        "content": "console.clear()",
        "doc": "Clears the console",
        "grammar": "lsp",
        "label": "consoleClear",
        "matches": {
          "ccl": true
        },
        "opts": {}
      },
      {
        "content": "console.count(${1:label})",
        "doc": "Writes the the number of times that count() has been invoked at the same line and with the same label",
        "grammar": "lsp",
        "label": "consoleCount",
        "matches": {
          "cco": true
        },
        "opts": {}
      },
      {
        "content": "console.dir(${1:object})",
        "doc": "Prints a JavaScript representation of the specified object",
        "grammar": "lsp",
        "label": "consoleDir",
        "matches": {
          "cdi": true
        },
        "opts": {}
      },
      {
        "content": "console.error(${1:object})",
        "doc": "Displays a message in the console and also includes a stack trace from where the method was called",
        "grammar": "lsp",
        "label": "consoleError",
        "matches": {
          "cer": true
        },
        "opts": {}
      },
      {
        "content": "console.group(\"${1:label}\")",
        "doc": "Groups and indents all following output by an additional level, until console.groupEnd() is called.",
        "grammar": "lsp",
        "label": "consoleGroup",
        "matches": {
          "cgr": true
        },
        "opts": {}
      },
      {
        "content": "console.groupEnd()",
        "doc": "Closes out the corresponding console.group().",
        "grammar": "lsp",
        "label": "consoleGroupEnd",
        "matches": {
          "cge": true
        },
        "opts": {}
      },
      {
        "content": "console.log(${1:object})",
        "doc": "Displays a message in the console",
        "grammar": "lsp",
        "label": "consoleLog",
        "matches": {
          "clg": true
        },
        "opts": {}
      },
      {
        "content": "console.trace(${1:object})",
        "doc": "Prints a stack trace from the point where the method was called",
        "grammar": "lsp",
        "label": "consoleTrace",
        "matches": {
          "ctr": true
        },
        "opts": {}
      },
      {
        "content": "console.log(`${1:object}`, ${1:object})",
        "doc": "Logs property with name.",
        "grammar": "lsp",
        "label": "consoleLogObject",
        "matches": {
          "clo": true
        },
        "opts": {}
      },
      {
        "content": "console.time(`${1:object}`)",
        "doc": "Console time wrapper",
        "grammar": "lsp",
        "label": "consoleTime",
        "matches": {
          "ctm": true
        },
        "opts": {}
      },
      {
        "content": "console.timeEnd(`${1:object}`)",
        "doc": "Console time end wrapper",
        "grammar": "lsp",
        "label": "consoleTimeEnd",
        "matches": {
          "cte": true
        },
        "opts": {}
      },
      {
        "content": "console.warn(${1:object})",
        "doc": "Displays a message in the console but also displays a yellow warning icon along with the logged message",
        "grammar": "lsp",
        "label": "consoleWarn",
        "matches": {
          "cwa": true
        },
        "opts": {}
      },
      {
        "content": "console.info(${1:object})",
        "doc": "Displays a message in the console but also displays a blue information icon along with the logged message",
        "grammar": "lsp",
        "label": "consoleInfo",
        "matches": {
          "cin": true
        },
        "opts": {}
      },
      {
        "content": "const { $1 } = this.props",
        "doc": "Creates and assigns a local variable using props destructing",
        "grammar": "lsp",
        "label": "destructProps",
        "matches": {
          "cp": true
        },
        "opts": {}
      },
      {
        "content": "const { $1 } = this.state",
        "doc": "Creates and assigns a local variable using state destructing",
        "grammar": "lsp",
        "label": "destructState",
        "matches": {
          "cs": true
        },
        "opts": {}
      },
      {
        "content": "import React from 'react'\n",
        "doc": null,
        "grammar": "lsp",
        "label": "import React",
        "matches": {
          "imr": true
        },
        "opts": {}
      },
      {
        "content": "import ReactDOM from 'react-dom'\n",
        "doc": null,
        "grammar": "lsp",
        "label": "import ReactDOM",
        "matches": {
          "imrd": true
        },
        "opts": {}
      },
      {
        "content": "import React, { Component } from 'react'\n",
        "doc": null,
        "grammar": "lsp",
        "label": "import React, { Component }",
        "matches": {
          "imrc": true
        },
        "opts": {}
      },
      {
        "content": "import React, { Component } from 'react'\nimport PropTypes from 'prop-types'\n",
        "doc": null,
        "grammar": "lsp",
        "label": "import React, { Component } & PropTypes",
        "matches": {
          "imrcp": true
        },
        "opts": {}
      },
      {
        "content": "import React, { PureComponent } from 'react'\n",
        "doc": null,
        "grammar": "lsp",
        "label": "import React, { PureComponent }",
        "matches": {
          "imrpc": true
        },
        "opts": {}
      },
      {
        "content": "import React, { PureComponent } from 'react'\nimport PropTypes from 'prop-types'\n",
        "doc": null,
        "grammar": "lsp",
        "label": "import React, { PureComponent } & PropTypes",
        "matches": {
          "imrpcp": true
        },
        "opts": {}
      },
      {
        "content": "import React, { memo } from 'react'\n",
        "doc": null,
        "grammar": "lsp",
        "label": "import React, { memo }",
        "matches": {
          "imrm": true
        },
        "opts": {}
      },
      {
        "content": "import React, { memo } from 'react'\nimport PropTypes from 'prop-types'\n",
        "doc": null,
        "grammar": "lsp",
        "label": "import React, { memo } & PropTypes",
        "matches": {
          "imrmp": true
        },
        "opts": {}
      },
      {
        "content": "import React, { useState } from 'react'\n",
        "doc": null,
        "grammar": "lsp",
        "label": "import React, {useState}",
        "matches": {
          "imrs": true
        },
        "opts": {}
      },
      {
        "content": "import React, { useEffect } from 'react'\n",
        "doc": null,
        "grammar": "lsp",
        "label": "import React, {useEffect}",
        "matches": {
          "imre": true
        },
        "opts": {}
      },
      {
        "content": "import React, { useRef } from 'react'\n",
        "doc": null,
        "grammar": "lsp",
        "label": "import React, {useRef}",
        "matches": {
          "imrr": true
        },
        "opts": {}
      },
      {
        "content": "import React, { useState, useEffect } from 'react'\n",
        "doc": null,
        "grammar": "lsp",
        "label": "import React, {useState, useEffect}",
        "matches": {
          "imrse": true
        },
        "opts": {}
      },
      {
        "content": "import PropTypes from 'prop-types'\n",
        "doc": null,
        "grammar": "lsp",
        "label": "import PropTypes",
        "matches": {
          "impt": true
        },
        "opts": {}
      },
      {
        "content": "import { BrowserRouter as Router, Route, NavLink } from 'react-router-dom'\n",
        "doc": null,
        "grammar": "lsp",
        "label": "import React Router",
        "matches": {
          "imrr": true
        },
        "opts": {}
      },
      {
        "content": "import { BrowserRouter as Router } from 'react-router-dom'\n",
        "doc": null,
        "grammar": "lsp",
        "label": "import React Browser Router",
        "matches": {
          "imbr": true
        },
        "opts": {}
      },
      {
        "content": "import { Route } from 'react-router-dom'\n",
        "doc": null,
        "grammar": "lsp",
        "label": "import React Browser Router - Route",
        "matches": {
          "imbrr": true
        },
        "opts": {}
      },
      {
        "content": "import { Route, Switch, NavLink, Link } from 'react-router-dom'\n",
        "doc": null,
        "grammar": "lsp",
        "label": "import React Browser Router - Route Combo",
        "matches": {
          "imbrc": true
        },
        "opts": {}
      },
      {
        "content": "import { Switch } from 'react-router-dom'\n",
        "doc": null,
        "grammar": "lsp",
        "label": "import React Browser Router - Switch",
        "matches": {
          "imbrs": true
        },
        "opts": {}
      },
      {
        "content": "import { Link } from 'react-router-dom'\n",
        "doc": null,
        "grammar": "lsp",
        "label": "import React Browser Router - Link",
        "matches": {
          "imbrl": true
        },
        "opts": {}
      },
      {
        "content": "import { NavLink } from 'react-router-dom'\n",
        "doc": null,
        "grammar": "lsp",
        "label": "import React Browser Router - NavLink",
        "matches": {
          "imbrnl": true
        },
        "opts": {}
      },
      {
        "content": "import { connect } from 'react-redux'\n",
        "doc": null,
        "grammar": "lsp",
        "label": "import redux statement",
        "matches": {
          "redux": true
        },
        "opts": {}
      },
      {
        "content": "import React, { Component } from 'react'\n\nexport default class ${1:${TM_FILENAME_BASE}} extends Component {\n\trender() {\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t$0\n\t\t\t</div>\n\t\t)\n\t}\n}\n",
        "doc": "Creates a React component class with ES7 module system",
        "grammar": "lsp",
        "label": "reactClassComponent",
        "matches": {
          "rcc": true
        },
        "opts": {}
      },
      {
        "content": "import React, { Component } from 'react'\n\nexport class ${1:${TM_FILENAME_BASE}} extends Component {\n\trender() {\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t$0\n\t\t\t</div>\n\t\t)\n\t}\n}\n\nexport default ${1:${TM_FILENAME_BASE}}\n",
        "doc": "Creates a React component class with ES7 module system",
        "grammar": "lsp",
        "label": "reactClassExportComponent",
        "matches": {
          "rce": true
        },
        "opts": {}
      },
      {
        "content": "import React from 'react'\n\nfunction ${1:${TM_FILENAME_BASE}}() {\n\treturn (\n\t\t<div>\n\t\t\t$0\n\t\t</div>\n\t)\n}\n\nexport default ${1:${TM_FILENAME_BASE}}\n",
        "doc": "Creates a React Functional Component with ES7 module system",
        "grammar": "lsp",
        "label": "reactFunctionalExportComponent",
        "matches": {
          "rfce": true
        },
        "opts": {}
      },
      {
        "content": "import React from 'react'\n\nexport default function ${1:${TM_FILENAME_BASE}}() {\n\treturn (\n\t\t<div>\n\t\t\t$0\n\t\t</div>\n\t)\n}\n",
        "doc": "Creates a React Functional Component with ES7 module system",
        "grammar": "lsp",
        "label": "reactFunctionalComponent",
        "matches": {
          "rfc": true
        },
        "opts": {}
      },
      {
        "content": "import React from 'react'\nimport PropTypes from 'prop-types'\n\nfunction ${1:${TM_FILENAME_BASE}}(props) {\n\treturn (\n\t\t<div>\n\t\t\t$0\n\t\t</div>\n\t)\n}\n\n${1:${TM_FILENAME_BASE}}.propTypes = {\n\n}\n\nexport default ${1:${TM_FILENAME_BASE}}\n\n",
        "doc": "Creates a React Functional Component with ES7 module system with PropTypes",
        "grammar": "lsp",
        "label": "reactFunctionalComponentWithPropTypes",
        "matches": {
          "rfcp": true
        },
        "opts": {}
      },
      {
        "content": "import React from 'react'\n\nconst ${1:${TM_FILENAME_BASE}} = () => {\n\treturn (\n\t\t<div>\n\t\t\t$0\n\t\t</div>\n\t)\n}\n\nexport default ${1:${TM_FILENAME_BASE}}\n",
        "doc": "Creates a React Arrow Function Component with ES7 module system",
        "grammar": "lsp",
        "label": "reactArrowFunctionExportComponent",
        "matches": {
          "rafce": true
        },
        "opts": {}
      },
      {
        "content": "import React from 'react'\n\nexport const ${1:${TM_FILENAME_BASE}} = () => {\n\treturn (\n\t\t<div>\n\t\t\t$0\n\t\t</div>\n\t)\n}\n",
        "doc": "Creates a React Arrow Function Component with ES7 module system",
        "grammar": "lsp",
        "label": "reactArrowFunctionComponent",
        "matches": {
          "rafc": true
        },
        "opts": {}
      },
      {
        "content": "import React from 'react'\nimport PropTypes from 'prop-types'\n\nconst ${1:${TM_FILENAME_BASE}} = props => {\n\treturn (\n\t\t<div>\n\t\t\t$0\n\t\t</div>\n\t)\n}\n\n${1:${TM_FILENAME_BASE}}.propTypes = {\n\n}\n\nexport default ${1:${TM_FILENAME_BASE}}\n",
        "doc": "Creates a React Arrow Function Component with ES7 module system with PropTypes",
        "grammar": "lsp",
        "label": "reactArrowFunctionComponentWithPropTypes",
        "matches": {
          "rafcp": true
        },
        "opts": {}
      },
      {
        "content": "import React, { Component } from 'react'\nimport PropTypes from 'prop-types'\n\nexport class ${1:${TM_FILENAME_BASE}} extends Component {\n\tstatic propTypes = {\n\n\t}\n\n\trender() {\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t$0\n\t\t\t</div>\n\t\t)\n\t}\n}\n\nexport default ${1:${TM_FILENAME_BASE}}\n",
        "doc": "Creates a React component class with ES7 module system",
        "grammar": "lsp",
        "label": "reactClassExportComponentWithPropTypes",
        "matches": {
          "rcep": true
        },
        "opts": {}
      },
      {
        "content": "import React, { PureComponent } from 'react'\n\nexport default class ${1:${TM_FILENAME_BASE}} extends PureComponent {\n\trender() {\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t$0\n\t\t\t</div>\n\t\t)\n\t}\n}\n",
        "doc": "Creates a React pure component class with ES7 module system",
        "grammar": "lsp",
        "label": "reactClassPureComponent",
        "matches": {
          "rpc": true
        },
        "opts": {}
      },
      {
        "content": "import React, { PureComponent } from 'react'\n\nexport class ${1:${TM_FILENAME_BASE}} extends PureComponent {\n\trender() {\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t$0\n\t\t\t</div>\n\t\t)\n\t}\n}\n\nexport default ${1:$TM_FILENAME_BASE}\n",
        "doc": "Creates a React pure component class with ES7 module system export",
        "grammar": "lsp",
        "label": "reactClassExportPureComponent",
        "matches": {
          "rpce": true
        },
        "opts": {}
      },
      {
        "content": "import React, { PureComponent } from 'react'\nimport PropTypes from 'prop-types'\n\nexport default class ${1:${TM_FILENAME_BASE}} extends PureComponent {\n\tstatic propTypes = {\n\n\t}\n\n\trender() {\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t$0\n\t\t\t</div>\n\t\t)\n\t}\n}\n",
        "doc": "Creates a React component class with ES7 module system",
        "grammar": "lsp",
        "label": "reactClassPureComponentWithPropTypes",
        "matches": {
          "rpcp": true
        },
        "opts": {}
      },
      {
        "content": "import React, { memo } from 'react'\n\nexport default memo(function ${1:${TM_FILENAME_BASE}}() {\n\treturn (\n\t\t<div>\n\t\t\t$0\n\t\t</div>\n\t)\n})\n",
        "doc": "Creates a React Memo Function Component with ES7 module system",
        "grammar": "lsp",
        "label": "reactFunctionMemoComponent",
        "matches": {
          "rmc": true
        },
        "opts": {}
      },
      {
        "content": "import React, { memo } from 'react'\nimport PropTypes from 'prop-types'\n\nconst ${1:${TM_FILENAME_BASE}} = memo(function ${1:${TM_FILENAME_BASE}}(props) {\n\treturn (\n\t\t<div>\n\t\t\t$0\n\t\t</div>\n\t)\n})\n\n${1:${TM_FILENAME_BASE}}.propTypes = {\n\n}\n\nexport default ${1:${TM_FILENAME_BASE}}\n",
        "doc": "Creates a React Memo Function Component with ES7 module system with PropTypes",
        "grammar": "lsp",
        "label": "reactFunctionMemoComponentWithPropTypes",
        "matches": {
          "rmcp": true
        },
        "opts": {}
      },
      {
        "content": "import React, { Component } from 'react'\nimport PropTypes from 'prop-types'\n\nexport default class ${1:${TM_FILENAME_BASE}} extends Component {\n\tstatic propTypes = {\n\t\t${2:prop}: ${3:PropTypes}\n\t}\n\n\trender() {\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t$0\n\t\t\t</div>\n\t\t)\n\t}\n}\n",
        "doc": "Creates a React component class with PropTypes and ES7 module system",
        "grammar": "lsp",
        "label": "reactClassCompomentPropTypes",
        "matches": {
          "rccp": true
        },
        "opts": {}
      },
      {
        "content": "import React, { Component } from 'react'\nimport { connect } from 'react-redux'\n\nexport class ${1:${TM_FILENAME_BASE}} extends Component {\n\trender() {\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t$0\n\t\t\t</div>\n\t\t)\n\t}\n}\n\nconst mapStateToProps = (state) => ({\n\t\n})\n\nconst mapDispatchToProps = {\n\t\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(${1:${TM_FILENAME_BASE}})\n",
        "doc": "Creates a React component class with connected redux and ES7 module system",
        "grammar": "lsp",
        "label": "reactClassCompomentRedux",
        "matches": {
          "rcredux": true
        },
        "opts": {}
      },
      {
        "content": "import React, { Component } from 'react'\nimport PropTypes from 'prop-types'\nimport { connect } from 'react-redux'\n\nexport class ${1:${TM_FILENAME_BASE}} extends Component {\n\tstatic propTypes = {\n\t\t${2:prop}: ${3:PropTypes}\n\t}\n\n\trender() {\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t$0\n\t\t\t</div>\n\t\t)\n\t}\n}\n\nconst mapStateToProps = (state) => ({\n\t\n})\n\nconst mapDispatchToProps = {\n\t\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(${1:${TM_FILENAME_BASE}})\n",
        "doc": "Creates a React component class with PropTypes with connected redux and ES7 module system",
        "grammar": "lsp",
        "label": "reactClassCompomentReduxPropTypes",
        "matches": {
          "rcreduxp": true
        },
        "opts": {}
      },
      {
        "content": "import React from 'react'\nimport { connect } from 'react-redux'\n\nexport const ${1:${TM_FILENAME_BASE}} = (props) => {\n\treturn (\n\t\t<div>\n\t\t\t$0\n\t\t</div>\n\t)\n}\n\nconst mapStateToProps = (state) => ({\n\t\n})\n\nconst mapDispatchToProps = {\n\t\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(${1:${TM_FILENAME_BASE}})\n",
        "doc": "Creates a React functional component with connected redux and ES7 module system",
        "grammar": "lsp",
        "label": "reactFunctionalCompomentRedux",
        "matches": {
          "rfcredux": true
        },
        "opts": {}
      },
      {
        "content": "import React from 'react'\nimport PropTypes from 'prop-types'\nimport { connect } from 'react-redux'\n\nexport const ${1:${TM_FILENAME_BASE}} = (props) => {\n\treturn (\n\t\t<div>\n\t\t\t$0\n\t\t</div>\n\t)\n}\n\n${1:${TM_FILENAME_BASE}}.propTypes = {\n\t${2:props}: ${3:PropTypes}\n}\n\nconst mapStateToProps = (state) => ({\n\t\n})\n\nconst mapDispatchToProps = {\n\t\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(${1:${TM_FILENAME_BASE}})\n",
        "doc": "Creates a React functional component with PropTypes with connected redux and ES7 module system",
        "grammar": "lsp",
        "label": "reactFunctionalCompomentReduxPropTypes",
        "matches": {
          "rfcreduxp": true
        },
        "opts": {}
      },
      {
        "content": "const mapStateToProps = (state) => ({\n\t${1}\n})\n\nconst mapDispatchToProps = {\n\t\n}\n",
        "doc": null,
        "grammar": "lsp",
        "label": "mappingToProps",
        "matches": {
          "reduxmap": true
        },
        "opts": {}
      },
      {
        "content": "constructor(props) {\n\tsuper(props)\n\n\tthis.state = {\n\t\t $0\n\t}\n}\n",
        "doc": "Adds a default constructor for it('', () => {})the class that contains props as arguments",
        "grammar": "lsp",
        "label": "classConstructor",
        "matches": {
          "rconst": true
        },
        "opts": {}
      },
      {
        "content": "state = {\n\t$1\n}\n",
        "doc": "Creates empty state object. To be used in a constructor.",
        "grammar": "lsp",
        "label": "emptyState",
        "matches": {
          "est": true
        },
        "opts": {}
      },
      {
        "content": "componentWillMount() {\n\t$0\n}\n",
        "doc": "DEPRECATED!!!. Invoked once, both on the client and server, immediately before the initial rendering occurs",
        "grammar": "lsp",
        "label": "componentWillMount",
        "matches": {
          "cwm": true
        },
        "opts": {}
      },
      {
        "content": "componentDidMount() {\n\t$0\n}\n",
        "doc": "Invoked once, only on the client (not on the server), immediately after the initial rendering occurs.",
        "grammar": "lsp",
        "label": "componentDidMount",
        "matches": {
          "cdm": true
        },
        "opts": {}
      },
      {
        "content": "componentWillReceiveProps(nextProps) {\n\t$0\n}\n",
        "doc": "DEPRECATED!!!. Invoked when a component is receiving new props. This method is not called for the initial render.",
        "grammar": "lsp",
        "label": "componentWillReceiveProps",
        "matches": {
          "cwr": true
        },
        "opts": {}
      },
      {
        "content": "shouldComponentUpdate(nextProps, nextState) {\n\t$0\n}\n",
        "doc": "Invoked before rendering when new props or state are being received. ",
        "grammar": "lsp",
        "label": "shouldComponentUpdate",
        "matches": {
          "scu": true
        },
        "opts": {}
      },
      {
        "content": "componentWillUpdate(nextProps, nextState) {\n\t$0\n}\n",
        "doc": "DEPRECATED!!!. Invoked immediately before rendering when new props or state are being received.",
        "grammar": "lsp",
        "label": "componentWillUpdate",
        "matches": {
          "cwup": true
        },
        "opts": {}
      },
      {
        "content": "componentDidUpdate(prevProps, prevState) {\n\t$0\n}\n",
        "doc": "Invoked immediately after the component's updates are flushed to the DOM.",
        "grammar": "lsp",
        "label": "componentDidUpdate",
        "matches": {
          "cdup": true
        },
        "opts": {}
      },
      {
        "content": "componentWillUnmount() {\n\t$0\n}\n",
        "doc": "Invoked immediately before a component is unmounted from the DOM.",
        "grammar": "lsp",
        "label": "componentWillUnmount",
        "matches": {
          "cwun": true
        },
        "opts": {}
      },
      {
        "content": "static getDerivedStateFromProps(props, state) {\n\t${1}\n}",
        "doc": "Invoked right before calling the render method, both on the initial mount and on subsequent updates.",
        "grammar": "lsp",
        "label": "getDerivedStateFromProps",
        "matches": {
          "gdsfp": true
        },
        "opts": {}
      },
      {
        "content": "getSnapshotBeforeUpdate = (prevProps, prevState) => {\n\t$0\n}\n",
        "doc": "Called right before mutations are made (e.g. before the DOM is updated)",
        "grammar": "lsp",
        "label": "getSnapshotBeforeUpdate",
        "matches": {
          "gsbu": true
        },
        "opts": {}
      },
      {
        "content": "render() {\n\treturn (\n\t\t<div>\n\t\t\t$0\n\t\t</div>\n\t)\n}",
        "doc": "Basic render.",
        "grammar": "lsp",
        "label": "componentRender",
        "matches": {
          "ren": true
        },
        "opts": {}
      },
      {
        "content": "const ${1:contextName} = React.createContext()\n",
        "doc": "Create React context",
        "grammar": "lsp",
        "label": "createContext",
        "matches": {
          "rcontext": true
        },
        "opts": {}
      },
      {
        "content": "this.${1:refName}Ref = React.createRef()\n",
        "doc": "Create ref statement used inside constructor",
        "grammar": "lsp",
        "label": "createRef",
        "matches": {
          "cref": true
        },
        "opts": {}
      },
      {
        "content": "const ref = React.createRef()\n",
        "doc": "Forward ref statement used inside component",
        "grammar": "lsp",
        "label": "forwardRef",
        "matches": {
          "fref": true
        },
        "opts": {}
      },
      {
        "content": "this.setState({$0})",
        "doc": "Performs a shallow merge of nextState into current state",
        "grammar": "lsp",
        "label": "componentSetStateObject",
        "matches": {
          "sst": true
        },
        "opts": {}
      },
      {
        "content": "this.setState((state, props) => { return { $0 }})\n",
        "doc": "Performs a shallow merge of nextState into current state",
        "grammar": "lsp",
        "label": "componentSetStateFunc",
        "matches": {
          "ssf": true
        },
        "opts": {}
      },
      {
        "content": "this.props.$0",
        "doc": "Access component's props",
        "grammar": "lsp",
        "label": "componentProps",
        "matches": {
          "props": true
        },
        "opts": {}
      },
      {
        "content": "this.state.$0",
        "doc": null,
        "grammar": "lsp",
        "label": "componentState",
        "matches": {
          "state": true
        },
        "opts": {}
      },
      {
        "content": "this.${1:methodName} = this.${1:methodName}.bind(this)$0",
        "doc": "Binds this to a method",
        "grammar": "lsp",
        "label": "bindThis",
        "matches": {
          "bnd": true
        },
        "opts": {}
      },
      {
        "content": "export const ${1:actionName} = (payload) => ({\n\ttype: ${3:type},\n\tpayload\n})\n",
        "doc": null,
        "grammar": "lsp",
        "label": "reduxAction",
        "matches": {
          "rxaction": true
        },
        "opts": {}
      },
      {
        "content": "export const ${1:constantName} = '${1:constantName}'",
        "doc": null,
        "grammar": "lsp",
        "label": "reduxConst",
        "matches": {
          "rxconst": true
        },
        "opts": {}
      },
      {
        "content": "const initialState = {\n\n}\n\nexport default (state = initialState, { type, payload }) => {\n\tswitch (type) {\n\n\tcase ${1:typeName}:\n\t\treturn { ...state, ...payload }\n\n\tdefault:\n\t\treturn state\n\t}\n}\n",
        "doc": null,
        "grammar": "lsp",
        "label": "reduxReducer",
        "matches": {
          "rxreducer": true
        },
        "opts": {}
      },
      {
        "content": "import { createSelector } from 'reselect'\n\nexport const ${1:selectorName} = state => state.${2:selector}\n",
        "doc": null,
        "grammar": "lsp",
        "label": "reduxSelector",
        "matches": {
          "rxselect": true
        },
        "opts": {}
      },
      {
        "content": "import { createSlice } from '@reduxjs/toolkit'\n\nconst initialState = {\n\n}\n\nconst ${1:${TM_FILENAME_BASE}} = createSlice({\n\tname: ${2:sliceName},\n\tinitialState,\n\treducers: {\n\t\n\t}\n});\n\nexport const {\n\n} = ${1:${TM_FILENAME_BASE}}.actions\nexport default ${1:${TM_FILENAME_BASE}}.reducer",
        "doc": null,
        "grammar": "lsp",
        "label": "reduxSlice",
        "matches": {
          "rxslice": true
        },
        "opts": {}
      },
      {
        "content": "import React, { Component } from 'react'\nimport { Text, View } from 'react-native'\n\nexport default class ${1:${TM_FILENAME_BASE}} extends Component {\n\trender() {\n\t\treturn (\n\t\t\t<View>\n\t\t\t\t<Text> ${2:textInComponent} </Text>\n\t\t\t</View>\n\t\t)\n\t}\n}\n",
        "doc": null,
        "grammar": "lsp",
        "label": "reactNativeComponent",
        "matches": {
          "rnc": true
        },
        "opts": {}
      },
      {
        "content": "import React, { Component } from 'react'\nimport { Text, StyleSheet, View } from 'react-native'\n\nexport default class ${1:${TM_FILENAME_BASE}} extends Component {\n\trender() {\n\t\treturn (\n\t\t\t<View>\n\t\t\t\t<Text> ${2:textInComponent} </Text>\n\t\t\t</View>\n\t\t)\n\t}\n}\n\nconst styles = StyleSheet.create({})\n",
        "doc": null,
        "grammar": "lsp",
        "label": "reactNativeComponentWithStyles",
        "matches": {
          "rncs": true
        },
        "opts": {}
      },
      {
        "content": "import React, { Component } from 'react'\nimport { Text, View } from 'react-native'\n\nexport class ${1:${TM_FILENAME_BASE}} extends Component {\n\trender() {\n\t\treturn (\n\t\t\t<View>\n\t\t\t\t<Text> ${2:textInComponent} </Text>\n\t\t\t</View>\n\t\t)\n\t}\n}\n\nexport default ${1:${TM_FILENAME_BASE}}\n",
        "doc": null,
        "grammar": "lsp",
        "label": "reactNativeComponentExport",
        "matches": {
          "rnce": true
        },
        "opts": {}
      },
      {
        "content": "import React, { PureComponent } from 'react'\nimport { Text, View } from 'react-native'\n\nexport default class ${1:${TM_FILENAME_BASE}} extends PureComponent {\n\trender() {\n\t\treturn (\n\t\t\t<View>\n\t\t\t\t<Text> ${2:textInComponent} </Text>\n\t\t\t</View>\n\t\t)\n\t}\n}\n",
        "doc": null,
        "grammar": "lsp",
        "label": "reactNativePureComponent",
        "matches": {
          "rnpc": true
        },
        "opts": {}
      },
      {
        "content": "import React, { PureComponent } from 'react'\nimport { Text, View } from 'react-native'\n\nexport class ${1:${TM_FILENAME_BASE}} extends PureComponent {\n\trender() {\n\t\treturn (\n\t\t\t<View>\n\t\t\t\t<Text> ${2:textInComponent} </Text>\n\t\t\t</View>\n\t\t)\n\t}\n}\n\nexport default ${1:${TM_FILENAME_BASE}}\n",
        "doc": null,
        "grammar": "lsp",
        "label": "reactNativePureComponentExport",
        "matches": {
          "rnpce": true
        },
        "opts": {}
      },
      {
        "content": "import React, { Component } from 'react'\nimport { View, Text } from 'react-native'\nimport PropTypes from 'prop-types'\nimport { connect } from 'react-redux'\n\nexport class ${1:${TM_FILENAME_BASE}} extends Component {\n\tstatic propTypes = {\n\t\t${2:prop}: ${3:PropTypes}\n\t}\n\n\trender() {\n\t\treturn (\n\t\t\t<View>\n\t\t\t\t<Text> ${2:textInComponent} </Text>\n\t\t\t</View>\n\t\t)\n\t}\n}\n\nconst mapStateToProps = (state) => ({\n\t\n})\n\nconst mapDispatchToProps = {\n\t\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(${1:${TM_FILENAME_BASE}})\n",
        "doc": "Creates a React Native component class with PropTypes with connected redux and ES7 module system",
        "grammar": "lsp",
        "label": "reactNativeClassComponentRedux",
        "matches": {
          "rncredux": true
        },
        "opts": {}
      },
      {
        "content": "import React from 'react'\nimport { View, Text } from 'react-native'\n\nconst ${1:${TM_FILENAME_BASE}} = () => {\n\treturn (\n\t\t<View>\n\t\t\t<Text>$0</Text>\n\t\t</View>\n\t)\n}\n\nexport default ${1:${TM_FILENAME_BASE}}\n",
        "doc": null,
        "grammar": "lsp",
        "label": "reactNativeFunctionalExportComponent",
        "matches": {
          "rnfe": true
        },
        "opts": {}
      },
      {
        "content": "import React from 'react'\nimport { StyleSheet, Text, View } from 'react-native'\n\nconst ${1:${TM_FILENAME_BASE}} = () => {\n\treturn (\n\t\t<View>\n\t\t\t<Text>$0</Text>\n\t\t</View>\n\t)\n}\n\nexport default ${1:${TM_FILENAME_BASE}}\n\nconst styles = StyleSheet.create({})\n",
        "doc": null,
        "grammar": "lsp",
        "label": "reactNativeFunctionalExportComponentWithStyles",
        "matches": {
          "rnfes": true
        },
        "opts": {}
      },
      {
        "content": "import React from 'react'\nimport { View, Text } from 'react-native'\n\nexport default function ${1:${TM_FILENAME_BASE}}() {\n\treturn (\n\t\t<View>\n\t\t\t<Text>$0</Text>\n\t\t</View>\n\t)\n}\n",
        "doc": null,
        "grammar": "lsp",
        "label": "reactNativeFunctionalComponent",
        "matches": {
          "rnf": true
        },
        "opts": {}
      },
      {
        "content": "import React from 'react'\nimport { StyleSheet, Text, View } from 'react-native'\n\nexport default function ${1:${TM_FILENAME_BASE}}() {\n\treturn (\n\t\t<View>\n\t\t\t<Text>$0</Text>\n\t\t</View>\n\t)\n}\n\nconst styles = StyleSheet.create({})\n",
        "doc": null,
        "grammar": "lsp",
        "label": "reactNativeFunctionalComponentWithStyles",
        "matches": {
          "rnfs": true
        },
        "opts": {}
      },
      {
        "content": "import { ${1:moduleName} } from 'react-native'",
        "doc": null,
        "grammar": "lsp",
        "label": "reactNativeImport",
        "matches": {
          "imrn": true
        },
        "opts": {}
      },
      {
        "content": "const styles = StyleSheet.create({\n\t${1:style}\n})\n",
        "doc": null,
        "grammar": "lsp",
        "label": "reactNativeStyles",
        "matches": {
          "rnstyle": true
        },
        "opts": {}
      },
      {
        "content": "PropTypes.array,",
        "doc": "Array prop type",
        "grammar": "lsp",
        "label": "propTypeArray",
        "matches": {
          "pta": true
        },
        "opts": {}
      },
      {
        "content": "PropTypes.array.isRequired,",
        "doc": "Array prop type required",
        "grammar": "lsp",
        "label": "propTypeArrayRequired",
        "matches": {
          "ptar": true
        },
        "opts": {}
      },
      {
        "content": "PropTypes.bool,",
        "doc": "Bool prop type",
        "grammar": "lsp",
        "label": "propTypeBool",
        "matches": {
          "ptb": true
        },
        "opts": {}
      },
      {
        "content": "PropTypes.bool.isRequired,",
        "doc": "Bool prop type required",
        "grammar": "lsp",
        "label": "propTypeBoolRequired",
        "matches": {
          "ptbr": true
        },
        "opts": {}
      },
      {
        "content": "PropTypes.func,",
        "doc": "Func prop type",
        "grammar": "lsp",
        "label": "propTypeFunc",
        "matches": {
          "ptf": true
        },
        "opts": {}
      },
      {
        "content": "PropTypes.func.isRequired,",
        "doc": "Func prop type required",
        "grammar": "lsp",
        "label": "propTypeFuncRequired",
        "matches": {
          "ptfr": true
        },
        "opts": {}
      },
      {
        "content": "PropTypes.number,",
        "doc": "Number prop type",
        "grammar": "lsp",
        "label": "propTypeNumber",
        "matches": {
          "ptn": true
        },
        "opts": {}
      },
      {
        "content": "PropTypes.number.isRequired,",
        "doc": "Number prop type required",
        "grammar": "lsp",
        "label": "propTypeNumberRequired",
        "matches": {
          "ptnr": true
        },
        "opts": {}
      },
      {
        "content": "PropTypes.object,",
        "doc": "Object prop type",
        "grammar": "lsp",
        "label": "propTypeObject",
        "matches": {
          "pto": true
        },
        "opts": {}
      },
      {
        "content": "PropTypes.object.isRequired,",
        "doc": "Object prop type required",
        "grammar": "lsp",
        "label": "propTypeObjectRequired",
        "matches": {
          "ptor": true
        },
        "opts": {}
      },
      {
        "content": "PropTypes.string,",
        "doc": "String prop type",
        "grammar": "lsp",
        "label": "propTypeString",
        "matches": {
          "pts": true
        },
        "opts": {}
      },
      {
        "content": "PropTypes.string.isRequired,",
        "doc": "String prop type required",
        "grammar": "lsp",
        "label": "propTypeStringRequired",
        "matches": {
          "ptsr": true
        },
        "opts": {}
      },
      {
        "content": "PropTypes.node,",
        "doc": "Anything that can be rendered: numbers, strings, elements or an array",
        "grammar": "lsp",
        "label": "propTypeNode",
        "matches": {
          "ptnd": true
        },
        "opts": {}
      },
      {
        "content": "PropTypes.node.isRequired,",
        "doc": "Anything that can be rendered: numbers, strings, elements or an array required",
        "grammar": "lsp",
        "label": "propTypeNodeRequired",
        "matches": {
          "ptndr": true
        },
        "opts": {}
      },
      {
        "content": "PropTypes.element,",
        "doc": "React element prop type",
        "grammar": "lsp",
        "label": "propTypeElement",
        "matches": {
          "ptel": true
        },
        "opts": {}
      },
      {
        "content": "PropTypes.element.isRequired,",
        "doc": "React element prop type required",
        "grammar": "lsp",
        "label": "propTypeElementRequired",
        "matches": {
          "ptelr": true
        },
        "opts": {}
      },
      {
        "content": "PropTypes.instanceOf($0),",
        "doc": "Is an instance of a class prop type",
        "grammar": "lsp",
        "label": "propTypeInstanceOf",
        "matches": {
          "pti": true
        },
        "opts": {}
      },
      {
        "content": "PropTypes.instanceOf($0).isRequired,",
        "doc": "Is an instance of a class prop type required",
        "grammar": "lsp",
        "label": "propTypeInstanceOfRequired",
        "matches": {
          "ptir": true
        },
        "opts": {}
      },
      {
        "content": "PropTypes.oneOf(['$0']),",
        "doc": "Prop type limited to specific values by treating it as an enum",
        "grammar": "lsp",
        "label": "propTypeEnum",
        "matches": {
          "pte": true
        },
        "opts": {}
      },
      {
        "content": "PropTypes.oneOf(['$0']).isRequired,",
        "doc": "Prop type limited to specific values by treating it as an enum required",
        "grammar": "lsp",
        "label": "propTypeEnumRequired",
        "matches": {
          "pter": true
        },
        "opts": {}
      },
      {
        "content": "PropTypes.oneOfType([\n\t$0\n]),",
        "doc": "An object that could be one of many types",
        "grammar": "lsp",
        "label": "propTypeOneOfType",
        "matches": {
          "ptet": true
        },
        "opts": {}
      },
      {
        "content": "PropTypes.oneOfType([\n\t$0\n]).isRequired,",
        "doc": "An object that could be one of many types required",
        "grammar": "lsp",
        "label": "propTypeOneOfTypeRequired",
        "matches": {
          "ptetr": true
        },
        "opts": {}
      },
      {
        "content": "PropTypes.arrayOf($0),",
        "doc": "An array of a certain type",
        "grammar": "lsp",
        "label": "propTypeArrayOf",
        "matches": {
          "ptao": true
        },
        "opts": {}
      },
      {
        "content": "PropTypes.arrayOf($0).isRequired,",
        "doc": "An array of a certain type required",
        "grammar": "lsp",
        "label": "propTypeArrayOfRequired",
        "matches": {
          "ptaor": true
        },
        "opts": {}
      },
      {
        "content": "PropTypes.objectOf($0),",
        "doc": "An object with property values of a certain type",
        "grammar": "lsp",
        "label": "propTypeObjectOf",
        "matches": {
          "ptoo": true
        },
        "opts": {}
      },
      {
        "content": "PropTypes.objectOf($0).isRequired,",
        "doc": "An object with property values of a certain type required",
        "grammar": "lsp",
        "label": "propTypeObjectOfRequired",
        "matches": {
          "ptoor": true
        },
        "opts": {}
      },
      {
        "content": "PropTypes.shape({\n\t$0\n}),",
        "doc": "An object taking on a particular shape",
        "grammar": "lsp",
        "label": "propTypeShape",
        "matches": {
          "ptsh": true
        },
        "opts": {}
      },
      {
        "content": "PropTypes.shape({\n\t$0\n}).isRequired,",
        "doc": "An object taking on a particular shape required",
        "grammar": "lsp",
        "label": "propTypeShapeRequired",
        "matches": {
          "ptshr": true
        },
        "opts": {}
      },
      {
        "content": "PropTypes.exact({\n\t$0\n}),",
        "doc": "An object with warnings on extra properties",
        "grammar": "lsp",
        "label": "propTypeExact",
        "matches": {
          "ptex": true
        },
        "opts": {}
      },
      {
        "content": "PropTypes.exact({\n\t$0\n}).isRequired,",
        "doc": "An object with warnings on extra properties required",
        "grammar": "lsp",
        "label": "propTypeExactRequired",
        "matches": {
          "ptexr": true
        },
        "opts": {}
      },
      {
        "content": "static propTypes = {\n$0\n}\n",
        "doc": null,
        "grammar": "lsp",
        "label": "staticPropTpyes",
        "matches": {
          "ptypes": true
        },
        "opts": {}
      },
      {
        "content": "PropTypes.any,",
        "doc": "Any prop type",
        "grammar": "lsp",
        "label": "propTypeAny",
        "matches": {
          "ptany": true
        },
        "opts": {}
      },
      {
        "content": "/**\n * ${0}\n */",
        "doc": null,
        "grammar": "lsp",
        "label": "Comment Big Block",
        "matches": {
          "cmmb": true
        },
        "opts": {}
      },
      {
        "content": "describe('$1', () => {\n\t$0\n})\n",
        "doc": "Testing `describe` block",
        "grammar": "lsp",
        "label": "describeBlock",
        "matches": {
          "desc": true
        },
        "opts": {}
      },
      {
        "content": "test('should $1', () => {\n\t$0\n})\n",
        "doc": "Testing `test` block",
        "grammar": "lsp",
        "label": "testBlock",
        "matches": {
          "test": true
        },
        "opts": {}
      },
      {
        "content": "test('should $1', async () => {\n\t$0\n})\n",
        "doc": "Testing `asynchronous test` block",
        "grammar": "lsp",
        "label": "testAsyncBlock",
        "matches": {
          "testa": true
        },
        "opts": {}
      },
      {
        "content": "it('should $1', () => {\n\t$0\n})\n",
        "doc": "Testing `it` block",
        "grammar": "lsp",
        "label": "itBlock",
        "matches": {
          "tit": true
        },
        "opts": {}
      },
      {
        "content": "it('should $1', async () => {\n\t$0\n})\n",
        "doc": "Testing asynchronous `it` block",
        "grammar": "lsp",
        "label": "itAsyncBlock",
        "matches": {
          "tita": true
        },
        "opts": {}
      },
      {
        "content": "import React from 'react'\nimport renderer from 'react-test-renderer'\n\nimport { ${1:${TM_FILENAME_BASE}} } from '../${1:${TM_FILENAME_BASE}}'\n\ndescribe('<${1:${TM_FILENAME_BASE}} />', () => {\n\tconst defaultProps = {}\n\tconst wrapper = renderer.create(<${1:${TM_FILENAME_BASE}} {...defaultProps} />)\n\n\ttest('render', () => {\n\t\texpect(wrapper).toMatchSnapshot()\n\t})\n})\n",
        "doc": null,
        "grammar": "lsp",
        "label": "setupReactTest",
        "matches": {
          "stest": true
        },
        "opts": {}
      },
      {
        "content": "import 'react-native'\nimport React from 'react'\nimport renderer from 'react-test-renderer'\n\nimport ${1:${TM_FILENAME_BASE}} from '../${1:${TM_FILENAME_BASE}}'\n\ndescribe('<${1:${TM_FILENAME_BASE}} />', () => {\n\tconst defaultProps = {}\n\tconst wrapper = renderer.create(<${1:${TM_FILENAME_BASE}} {...defaultProps} />)\n\n\ttest('render', () => {\n\t\texpect(wrapper).toMatchSnapshot()\n\t})\n})\n",
        "doc": null,
        "grammar": "lsp",
        "label": "setupReactNativeTest",
        "matches": {
          "sntest": true
        },
        "opts": {}
      },
      {
        "content": "import React from 'react'\nimport renderer from 'react-test-renderer'\nimport { Provider } from 'react-redux'\n\nimport store from 'src/store'\nimport { ${1:${TM_FILENAME_BASE}} } from '../${1:${TM_FILENAME_BASE}}'\n\ndescribe('<${1:${TM_FILENAME_BASE}} />', () => {\n\tconst defaultProps = {}\n\tconst wrapper = renderer.create(\n\t\t<Provider store={store}>\n\t\t <${1:${TM_FILENAME_BASE}} {...defaultProps} />\n\t\t</Provider>,\n\t)\n\n\ttest('render', () => {\n\t\texpect(wrapper).toMatchSnapshot()\n\t})\n})\n",
        "doc": "Create test component",
        "grammar": "lsp",
        "label": "setupReactComponentTestWithRedux",
        "matches": {
          "srtest": true
        },
        "opts": {}
      },
      {
        "content": "import 'react-native'\nimport React from 'react'\nimport renderer from 'react-test-renderer'\nimport { Provider } from 'react-redux'\n\nimport store from 'src/store'\nimport ${1:${TM_FILENAME_BASE}} from '../${1:${TM_FILENAME_BASE}}'\n\ndescribe('<${1:${TM_FILENAME_BASE}} />', () => {\n\tconst defaultProps = {}\n\tconst wrapper = renderer.create(\n\t\t<Provider store={store}>\n\t\t\t<${1:${TM_FILENAME_BASE}} {...defaultProps} />\n\t\t</Provider>,\n\t)\n\n\ttest('render', () => {\n\t\texpect(wrapper).toMatchSnapshot()\n\t})\n})\n",
        "doc": null,
        "grammar": "lsp",
        "label": "setupReactNativeTestWithRedux",
        "matches": {
          "snrtest": true
        },
        "opts": {}
      },
      {
        "content": "import { compose, graphql } from 'react-apollo'\n",
        "doc": null,
        "grammar": "lsp",
        "label": "graphQLForComponent",
        "matches": {
          "graphql": true
        },
        "opts": {}
      },
      {
        "content": "export default compose(\n\tgraphql(${1:queryOrMutation}, { name: ${2:name} }),\n)(${1:${TM_FILENAME_BASE}})",
        "doc": null,
        "grammar": "lsp",
        "label": "exportGraphQL",
        "matches": {
          "expgql": true
        },
        "opts": {}
      },
      {
        "content": "import React from 'react'\nimport PropTypes from 'prop-types'\nimport { connect } from 'react-redux'\n\nexport const mapStateToProps = state => ({\n\n})\n\nexport const mapDispatchToProps = {\n \n}\n\nexport const ${1:hocComponentName} = (WrappedComponent) => {\n\tconst hocComponent = ({ ...props }) => <WrappedComponent {...props} />\n\n\thocComponent.propTypes = {\n\t}\n\n\treturn hocComponent\n}\n\nexport default WrapperComponent => connect(mapStateToProps, mapDispatchToProps)(${1:hocComponentName}(WrapperComponent))\n",
        "doc": null,
        "grammar": "lsp",
        "label": "hocComponentWithRedux",
        "matches": {
          "hocredux": true
        },
        "opts": {}
      },
      {
        "content": "import React from 'react'\nimport PropTypes from 'prop-types'\n\nexport default (WrappedComponent) => {\n\tconst hocComponent = ({ ...props }) => <WrappedComponent {...props} />\n\n\thocComponent.propTypes = {\n\t}\n\n\treturn hocComponent\n}\n",
        "doc": null,
        "grammar": "lsp",
        "label": "hocComponent",
        "matches": {
          "hoc": true
        },
        "opts": {}
      },
      {
        "content": "useEffect(() => {\n\t${1:effect}\n\treturn () => {\n\t\t${2:cleanup}\n\t}\n}, [${3:input}])",
        "doc": null,
        "grammar": "lsp",
        "label": "useEffect",
        "matches": {
          "useEffect": true
        },
        "opts": {}
      },
      {
        "content": "const ${1:context} = useContext(${2:contextValue})",
        "doc": null,
        "grammar": "lsp",
        "label": "useContext",
        "matches": {
          "useContext": true
        },
        "opts": {}
      },
      {
        "content": "const [state, dispatch] = useReducer(${1:reducer}, ${2:initialState}, ${3:init})",
        "doc": null,
        "grammar": "lsp",
        "label": "useReducer",
        "matches": {
          "useReducer": true
        },
        "opts": {}
      },
      {
        "content": "useCallback(\n\t() => {\n\t\t${1:callback}\n\t},\n\t[${2:input}],\n)",
        "doc": null,
        "grammar": "lsp",
        "label": "useCallback",
        "matches": {
          "useCallback": true
        },
        "opts": {}
      },
      {
        "content": "useMemo(() => ${1:function}, ${2:input})",
        "doc": null,
        "grammar": "lsp",
        "label": "useMemo",
        "matches": {
          "useMemo": true
        },
        "opts": {}
      },
      {
        "content": "const ${1:ref} = useRef(${2:initialValue})",
        "doc": null,
        "grammar": "lsp",
        "label": "useRef",
        "matches": {
          "useRef": true
        },
        "opts": {}
      },
      {
        "content": "useImperativeHandle(\n\t${1:ref},\n\t() => {\n\t\t${2:handler}\n\t},\n\t[${3:input}],\n)",
        "doc": null,
        "grammar": "lsp",
        "label": "useImperativeHandle",
        "matches": {
          "useImperativeHandle": true
        },
        "opts": {}
      },
      {
        "content": "useDebugValue(${1:value})",
        "doc": null,
        "grammar": "lsp",
        "label": "useDebugValue",
        "matches": {
          "useDebugValue": true
        },
        "opts": {}
      },
      {
        "content": "useLayoutEffect(() => {\n\t${1:effect}\n\treturn () => {\n\t\t${2:cleanup}\n\t};\n}, [${3:input}])",
        "doc": null,
        "grammar": "lsp",
        "label": "useLayoutEffect",
        "matches": {
          "useLayoutEffect": true
        },
        "opts": {}
      },
      {
        "content": "const ${1:state} = useSelector(state => state.${1:state})",
        "doc": null,
        "grammar": "lsp",
        "label": "useSelector",
        "matches": {
          "useSelector": true
        },
        "opts": {}
      },
      {
        "content": "const dispatch = useDispatch(${1:function})",
        "doc": null,
        "grammar": "lsp",
        "label": "useDispatch",
        "matches": {
          "useDispatch": true
        },
        "opts": {}
      },
      {
        "content": "typeof ${0}",
        "doc": null,
        "grammar": "lsp",
        "label": "typeof",
        "matches": {
          "tpf": true
        },
        "opts": {}
      },
      {
        "content": "function ${1:${TM_FILENAME_BASE}}() {\n\treturn (\n\t\t<div>\n\t\t\t$0\n\t\t</div>\n\t)\n}\n\nexport default ${1:${TM_FILENAME_BASE}}\n",
        "doc": "Creates a React 17 Functional Component with ES7 module system",
        "grammar": "lsp",
        "label": "_reactFunctionalExportComponent",
        "matches": {
          "_rfce": true
        },
        "opts": {}
      },
      {
        "content": "export default function ${1:${TM_FILENAME_BASE}}() {\n\treturn (\n\t\t<div>\n\t\t\t$0\n\t\t</div>\n\t)\n}\n",
        "doc": "Creates a React 17 Functional Component with ES7 module system",
        "grammar": "lsp",
        "label": "_reactFunctionalComponent",
        "matches": {
          "_rfc": true
        },
        "opts": {}
      },
      {
        "content": "import PropTypes from 'prop-types'\n\nfunction ${1:${TM_FILENAME_BASE}}(props) {\n\treturn (\n\t\t<div>\n\t\t\t$0\n\t\t</div>\n\t)\n}\n\n${1:${TM_FILENAME_BASE}}.propTypes = {\n\n}\n\nexport default ${1:${TM_FILENAME_BASE}}\n\n",
        "doc": "Creates a React 17 Functional Component with ES7 module system with PropTypes",
        "grammar": "lsp",
        "label": "_reactFunctionalComponentWithPropTypes",
        "matches": {
          "_rfcp": true
        },
        "opts": {}
      },
      {
        "content": "const ${1:${TM_FILENAME_BASE}} = () => {\n\treturn (\n\t\t<div>\n\t\t\t$0\n\t\t</div>\n\t)\n}\n\nexport default ${1:${TM_FILENAME_BASE}}\n",
        "doc": "Creates a React 17 Arrow Function Component with ES7 module system",
        "grammar": "lsp",
        "label": "_reactArrowFunctionExportComponent",
        "matches": {
          "_rafce": true
        },
        "opts": {}
      },
      {
        "content": "export const ${1:${TM_FILENAME_BASE}} = () => {\n\treturn (\n\t\t<div>\n\t\t\t$0\n\t\t</div>\n\t)\n}\n",
        "doc": "Creates a React 17 Arrow Function Component with ES7 module system",
        "grammar": "lsp",
        "label": "_reactArrowFunctionComponent",
        "matches": {
          "_rafc": true
        },
        "opts": {}
      },
      {
        "content": "import PropTypes from 'prop-types'\n\nconst ${1:${TM_FILENAME_BASE}} = props => {\n\treturn (\n\t\t<div>\n\t\t\t$0\n\t\t</div>\n\t)\n}\n\n${1:${TM_FILENAME_BASE}}.propTypes = {\n\n}\n\nexport default ${1:${TM_FILENAME_BASE}}\n",
        "doc": "Creates a React 17 Arrow Function Component with ES7 module system with PropTypes",
        "grammar": "lsp",
        "label": "_reactArrowFunctionComponentWithPropTypes",
        "matches": {
          "_rafcp": true
        },
        "opts": {}
      },
      {
        "content": "import { View, Text } from 'react-native'\n\nconst ${1:${TM_FILENAME_BASE}} = () => {\n\treturn (\n\t\t<View>\n\t\t\t<Text>$0</Text>\n\t\t</View>\n\t)\n}\n\nexport default ${1:${TM_FILENAME_BASE}}\n",
        "doc": null,
        "grammar": "lsp",
        "label": "_reactNativeFunctionalExportComponent",
        "matches": {
          "_rnfe": true
        },
        "opts": {}
      },
      {
        "content": "import { StyleSheet, Text, View } from 'react-native'\n\nconst ${1:${TM_FILENAME_BASE}} = () => {\n\treturn (\n\t\t<View>\n\t\t\t<Text>$0</Text>\n\t\t</View>\n\t)\n}\n\nexport default ${1:${TM_FILENAME_BASE}}\n\nconst styles = StyleSheet.create({})\n",
        "doc": null,
        "grammar": "lsp",
        "label": "_reactNativeFunctionalExportComponentWithStyles",
        "matches": {
          "_rnfes": true
        },
        "opts": {}
      },
      {
        "content": "import { View, Text } from 'react-native'\n\nexport default function ${1:${TM_FILENAME_BASE}}() {\n\treturn (\n\t\t<View>\n\t\t\t<Text>$0</Text>\n\t\t</View>\n\t)\n}\n",
        "doc": null,
        "grammar": "lsp",
        "label": "_reactNativeFunctionalComponent",
        "matches": {
          "_rnf": true
        },
        "opts": {}
      },
      {
        "content": "import { StyleSheet, Text, View } from 'react-native'\n\nexport default function ${1:${TM_FILENAME_BASE}}() {\n\treturn (\n\t\t<View>\n\t\t\t<Text>$0</Text>\n\t\t</View>\n\t)\n}\n\nconst styles = StyleSheet.create({})\n",
        "doc": null,
        "grammar": "lsp",
        "label": "_reactNativeFunctionalComponentWithStyles",
        "matches": {
          "_rnfs": true
        },
        "opts": {}
      },
      {
        "content": "import renderer from 'react-test-renderer'\n\nimport { ${1:${TM_FILENAME_BASE}} } from '../${1:${TM_FILENAME_BASE}}'\n\ndescribe('<${1:${TM_FILENAME_BASE}} />', () => {\n\tconst defaultProps = {}\n\tconst wrapper = renderer.create(<${1:${TM_FILENAME_BASE}} {...defaultProps} />)\n\n\ttest('render', () => {\n\t\texpect(wrapper).toMatchSnapshot()\n\t})\n})\n",
        "doc": null,
        "grammar": "lsp",
        "label": "_setupReactTest",
        "matches": {
          "_stest": true
        },
        "opts": {}
      },
      {
        "content": "import 'react-native'\nimport renderer from 'react-test-renderer'\n\nimport ${1:${TM_FILENAME_BASE}} from '../${1:${TM_FILENAME_BASE}}'\n\ndescribe('<${1:${TM_FILENAME_BASE}} />', () => {\n\tconst defaultProps = {}\n\tconst wrapper = renderer.create(<${1:${TM_FILENAME_BASE}} {...defaultProps} />)\n\n\ttest('render', () => {\n\t\texpect(wrapper).toMatchSnapshot()\n\t})\n})\n",
        "doc": null,
        "grammar": "lsp",
        "label": "_setupReactNativeTest",
        "matches": {
          "_sntest": true
        },
        "opts": {}
      },
      {
        "content": "import renderer from 'react-test-renderer'\nimport { Provider } from 'react-redux'\n\nimport store from 'src/store'\nimport { ${1:${TM_FILENAME_BASE}} } from '../${1:${TM_FILENAME_BASE}}'\n\ndescribe('<${1:${TM_FILENAME_BASE}} />', () => {\n\tconst defaultProps = {}\n\tconst wrapper = renderer.create(\n\t\t<Provider store={store}>\n\t\t <${1:${TM_FILENAME_BASE}} {...defaultProps} />\n\t\t</Provider>,\n\t)\n\n\ttest('render', () => {\n\t\texpect(wrapper).toMatchSnapshot()\n\t})\n})\n",
        "doc": "Create test component",
        "grammar": "lsp",
        "label": "_setupReactComponentTestWithRedux",
        "matches": {
          "_srtest": true
        },
        "opts": {}
      },
      {
        "content": "import 'react-native'\nimport renderer from 'react-test-renderer'\nimport { Provider } from 'react-redux'\n\nimport store from 'src/store'\nimport ${1:${TM_FILENAME_BASE}} from '../${1:${TM_FILENAME_BASE}}'\n\ndescribe('<${1:${TM_FILENAME_BASE}} />', () => {\n\tconst defaultProps = {}\n\tconst wrapper = renderer.create(\n\t\t<Provider store={store}>\n\t\t\t<${1:${TM_FILENAME_BASE}} {...defaultProps} />\n\t\t</Provider>,\n\t)\n\n\ttest('render', () => {\n\t\texpect(wrapper).toMatchSnapshot()\n\t})\n})\n",
        "doc": null,
        "grammar": "lsp",
        "label": "_setupReactNativeTestWithRedux",
        "matches": {
          "_snrtest": true
        },
        "opts": {}
      },
      {
        "content": "import PropTypes from 'prop-types'\nimport { connect } from 'react-redux'\n\nexport const mapStateToProps = state => ({\n\n})\n\nexport const mapDispatchToProps = {\n \n}\n\nexport const ${1:hocComponentName} = (WrappedComponent) => {\n\tconst hocComponent = ({ ...props }) => <WrappedComponent {...props} />\n\n\thocComponent.propTypes = {\n\t}\n\n\treturn hocComponent\n}\n\nexport default WrapperComponent => connect(mapStateToProps, mapDispatchToProps)(${1:hocComponentName}(WrapperComponent))\n",
        "doc": null,
        "grammar": "lsp",
        "label": "_hocComponentWithRedux",
        "matches": {
          "_hocredux": true
        },
        "opts": {}
      },
      {
        "content": "import PropTypes from 'prop-types'\n\nexport default (WrappedComponent) => {\n\tconst hocComponent = ({ ...props }) => <WrappedComponent {...props} />\n\n\thocComponent.propTypes = {\n\t}\n\n\treturn hocComponent\n}\n",
        "doc": null,
        "grammar": "lsp",
        "label": "_hocComponent",
        "matches": {
          "_hoc": true
        },
        "opts": {}
      },
      {
        "content": "const ${1:${TM_FILENAME_BASE}} = () => {\n\t$2\n}\n\nexport default ${1:${TM_FILENAME_BASE}}",
        "doc": "Creates a React Custom Hook with ES7 module system",
        "grammar": "lsp",
        "label": "reactCustomHook",
        "matches": {
          "rch": true
        },
        "opts": {}
      },
      {
        "content": "import ${2:moduleName} from '${1:module}';$0",
        "doc": "Imports entire module statement in ES6 syntax",
        "grammar": "lsp",
        "label": "import",
        "matches": {
          "imp": true
        },
        "opts": {}
      },
      {
        "content": "import '${1:module}';$0",
        "doc": "Imports entire module in ES6 syntax without module name",
        "grammar": "lsp",
        "label": "importNoModuleName",
        "matches": {
          "imn": true
        },
        "opts": {}
      },
      {
        "content": "import { $2 } from '${1:module}';$0",
        "doc": "Imports only a portion of the module in ES6 syntax",
        "grammar": "lsp",
        "label": "importDestructing",
        "matches": {
          "imd": true
        },
        "opts": {}
      },
      {
        "content": "import * as ${2:alias} from '${1:module}';$0",
        "doc": "Imports everything as alias from the module in ES6 syntax",
        "grammar": "lsp",
        "label": "importEverything",
        "matches": {
          "ime": true
        },
        "opts": {}
      },
      {
        "content": "import { ${2:originalName} as ${3:alias} } from '${1:module}';$0",
        "doc": "Imports a specific portion of the module by assigning a local alias in ES6 syntax",
        "grammar": "lsp",
        "label": "importAs",
        "matches": {
          "ima": true
        },
        "opts": {}
      },
      {
        "content": "require('${1:package}');",
        "doc": "Require a package",
        "grammar": "lsp",
        "label": "require",
        "matches": {
          "rqr": true
        },
        "opts": {}
      },
      {
        "content": "const ${1:packageName} = require('${1:package}');$0",
        "doc": "Require a package to const",
        "grammar": "lsp",
        "label": "requireToConst",
        "matches": {
          "req": true
        },
        "opts": {}
      },
      {
        "content": "module.exports = {\n\t$0\n};\n",
        "doc": "Module exports from Common JS, node syntax at ES6",
        "grammar": "lsp",
        "label": "moduleExports",
        "matches": {
          "mde": true
        },
        "opts": {}
      },
      {
        "content": "export const ${1:exportVariable} = ${2:localVariable};\n",
        "doc": "Export named variable in ES6 syntax",
        "grammar": "lsp",
        "label": "exportNamedVariable",
        "matches": {
          "env": true
        },
        "opts": {}
      },
      {
        "content": "export const ${1:functionName} = (${2:params}) => {\n\t$0\n};\n",
        "doc": "Export named function in ES6 syntax",
        "grammar": "lsp",
        "label": "exportNamedFunction",
        "matches": {
          "enf": true
        },
        "opts": {}
      },
      {
        "content": "export default function ${1:${TM_FILENAME_BASE}}(${2:params}) {\n\t$0\n};\n",
        "doc": "Export default function in ES6 syntax",
        "grammar": "lsp",
        "label": "exportDefaultFunction",
        "matches": {
          "edf": true
        },
        "opts": {}
      },
      {
        "content": "export default class ${1:className} {\n\t$0\n};\n",
        "doc": "Export default class in ES6 syntax",
        "grammar": "lsp",
        "label": "exportClass",
        "matches": {
          "ecl": true
        },
        "opts": {}
      },
      {
        "content": "export default class ${1:className} extends ${2:baseclassName} {\n\t$0\n};\n",
        "doc": "Export default class which extends a base one in ES6 syntax",
        "grammar": "lsp",
        "label": "exportClassExtends",
        "matches": {
          "ece": true
        },
        "opts": {}
      },
      {
        "content": "constructor(${1:params}) {\n\t${0}\n}",
        "doc": "Add default constructor in a class in ES6 syntax",
        "grammar": "lsp",
        "label": "constructor",
        "matches": {
          "con": true
        },
        "opts": {}
      },
      {
        "content": "${1:methodName}(${2:params}) {\n\t${0}\n}",
        "doc": "Creates a method inside a class in ES6 syntax",
        "grammar": "lsp",
        "label": "method",
        "matches": {
          "met": true
        },
        "opts": {}
      },
      {
        "content": "get ${1:propertyName}() {\n\treturn this.${0};\n}",
        "doc": "Creates a getter property inside a class in ES6 syntax",
        "grammar": "lsp",
        "label": "propertyGet",
        "matches": {
          "pge": true
        },
        "opts": {}
      },
      {
        "content": "set ${1:propertyName}(${2:value}) {\n\t${0};\n}",
        "doc": "Creates a setter property inside a class in ES6 syntax",
        "grammar": "lsp",
        "label": "propertyset",
        "matches": {
          "pse": true
        },
        "opts": {}
      },
      {
        "content": "${1:array}.forEach(${2:currentItem} => {\n\t${0}\n});",
        "doc": "Creates a forEach statement in ES6 syntax",
        "grammar": "lsp",
        "label": "forEach",
        "matches": {
          "fre": true
        },
        "opts": {}
      },
      {
        "content": "for (const ${1:item} of ${2:object}) {\n\t${0}\n}",
        "doc": "Iterating over property names of iterable objects",
        "grammar": "lsp",
        "label": "forOf",
        "matches": {
          "fof": true
        },
        "opts": {}
      },
      {
        "content": "for (const ${1:item} in ${2:object}) {\n\t${0}\n}",
        "doc": "Iterating over property values of iterable objects",
        "grammar": "lsp",
        "label": "forIn",
        "matches": {
          "fin": true
        },
        "opts": {}
      },
      {
        "content": "(${1:params}) => {\n\t${2}\n}",
        "doc": "Creates an anonymous function in ES6 syntax",
        "grammar": "lsp",
        "label": "anonymousFunction",
        "matches": {
          "anfn": true
        },
        "opts": {}
      },
      {
        "content": "const ${1:name} = (${2:params}) => {\n\t${3}\n}",
        "doc": "Creates a named function in ES6 syntax",
        "grammar": "lsp",
        "label": "namedFunction",
        "matches": {
          "nfn": true
        },
        "opts": {}
      },
      {
        "content": "const {${2:propertyName}} = ${1:objectToDestruct};",
        "doc": "Creates and assigns a local variable using object destructing",
        "grammar": "lsp",
        "label": "destructingObject",
        "matches": {
          "dob": true
        },
        "opts": {}
      },
      {
        "content": "const [${2:propertyName}] = ${1:arrayToDestruct};",
        "doc": "Creates and assigns a local variable using array destructing",
        "grammar": "lsp",
        "label": "destructingArray",
        "matches": {
          "dar": true
        },
        "opts": {}
      },
      {
        "content": "setInterval(() => {\n\t${2}\n}, ${0:intervalInms});",
        "doc": "Executes the given function at specified intervals in ES6 syntax",
        "grammar": "lsp",
        "label": "setInterval",
        "matches": {
          "sti": true
        },
        "opts": {}
      },
      {
        "content": "setTimeout(() => {\n\t${2}\n}, ${1:delayInms});",
        "doc": "Executes the given function after the specified delay in ES6 syntax",
        "grammar": "lsp",
        "label": "setTimeOut",
        "matches": {
          "sto": true
        },
        "opts": {}
      },
      {
        "content": "return new Promise((resolve, reject) => {\n\t${1}\n});",
        "doc": "Creates and returns a new Promise in the standard ES6 syntax",
        "grammar": "lsp",
        "label": "promise",
        "matches": {
          "prom": true
        },
        "opts": {}
      },
      {
        "content": ".then((${1:result}) => {\n\t${2}\n}).catch((${3:err}) => {\n\t${4}\n});",
        "doc": "Add the .then and .catch methods to handle promises",
        "grammar": "lsp",
        "label": "thenCatch",
        "matches": {
          "thenc": true
        },
        "opts": {}
      },
      {
        "content": "console.assert(${1:expression}, ${2:object});",
        "doc": "If the specified expression is false, the message is written to the console along with a stack trace",
        "grammar": "lsp",
        "label": "consoleAssert",
        "matches": {
          "cas": true
        },
        "opts": {}
      },
      {
        "content": "console.clear();",
        "doc": "Clears the console",
        "grammar": "lsp",
        "label": "consoleClear",
        "matches": {
          "ccl": true
        },
        "opts": {}
      },
      {
        "content": "console.count(${1:label});",
        "doc": "Writes the the number of times that count() has been invoked at the same line and with the same label",
        "grammar": "lsp",
        "label": "consoleCount",
        "matches": {
          "cco": true
        },
        "opts": {}
      },
      {
        "content": "console.debug(${1:object});",
        "doc": "Displays a message in the console. Also display a blue right arrow icon along with the logged message in Safari",
        "grammar": "lsp",
        "label": "consoleDebug",
        "matches": {
          "cdb": true
        },
        "opts": {}
      },
      {
        "content": "console.dir(${1:object});",
        "doc": "Prints a JavaScript representation of the specified object",
        "grammar": "lsp",
        "label": "consoleDir",
        "matches": {
          "cdi": true
        },
        "opts": {}
      },
      {
        "content": "console.error(${1:object});",
        "doc": "Displays a message in the console and also includes a stack trace from where the method was called",
        "grammar": "lsp",
        "label": "consoleError",
        "matches": {
          "cer": true
        },
        "opts": {}
      },
      {
        "content": "console.group('${1:label}');",
        "doc": "Groups and indents all following output by an additional level, until console.groupEnd() is called.",
        "grammar": "lsp",
        "label": "consoleGroup",
        "matches": {
          "cgr": true
        },
        "opts": {}
      },
      {
        "content": "console.groupEnd();",
        "doc": "Closes out the corresponding console.group().",
        "grammar": "lsp",
        "label": "consoleGroupEnd",
        "matches": {
          "cge": true
        },
        "opts": {}
      },
      {
        "content": "console.log(${1:object});",
        "doc": "Displays a message in the console",
        "grammar": "lsp",
        "label": "consoleLog",
        "matches": {
          "clg": true
        },
        "opts": {}
      },
      {
        "content": "console.log('${1:object} :>> ', ${1:object});",
        "doc": "Displays an object in the console with its name",
        "grammar": "lsp",
        "label": "consoleLogObject",
        "matches": {
          "clo": true
        },
        "opts": {}
      },
      {
        "content": "console.trace(${1:object});",
        "doc": "Prints a stack trace from the point where the method was called",
        "grammar": "lsp",
        "label": "consoleTrace",
        "matches": {
          "ctr": true
        },
        "opts": {}
      },
      {
        "content": "console.warn(${1:object});",
        "doc": "Displays a message in the console but also displays a yellow warning icon along with the logged message",
        "grammar": "lsp",
        "label": "consoleWarn",
        "matches": {
          "cwa": true
        },
        "opts": {}
      },
      {
        "content": "console.info(${1:object});",
        "doc": "Displays a message in the console but also displays a blue information icon along with the logged message",
        "grammar": "lsp",
        "label": "consoleInfo",
        "matches": {
          "cin": true
        },
        "opts": {}
      },
      {
        "content": "console.table(${1:object});",
        "doc": "Displays tabular data as a table.",
        "grammar": "lsp",
        "label": "consoleTable",
        "matches": {
          "clt": true
        },
        "opts": {}
      },
      {
        "content": "console.time(${1:object});",
        "doc": "Sets starting point for execution time measurement",
        "grammar": "lsp",
        "label": "consoleTime",
        "matches": {
          "cti": true
        },
        "opts": {}
      },
      {
        "content": "console.timeEnd(${1:object});",
        "doc": "Sets end point for execution time measurement",
        "grammar": "lsp",
        "label": "consoleTimeEnd",
        "matches": {
          "cte": true
        },
        "opts": {}
      },
      {
        "content": "import React, { Component } from 'react';\n\nclass ${1:${TM_FILENAME_BASE}} extends Component {\n\trender() {\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t$0\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default ${1:${TM_FILENAME_BASE}};",
        "doc": "Creates a React component class with ES6 module system",
        "grammar": "lsp",
        "label": "reactClassComponent",
        "matches": {
          "rcc": true
        },
        "opts": {}
      },
      {
        "content": "import React, { Component } from 'react';\nimport { connect } from 'react-redux';\n\nfunction mapStateToProps(state) {\n\treturn {\n\n\t};\n}\n\nclass ${1:${TM_FILENAME_BASE}} extends Component {\n\trender() {\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t$0\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default connect(\n\tmapStateToProps,\n)(${1:${TM_FILENAME_BASE}});",
        "doc": "Creates a React component class connected to redux",
        "grammar": "lsp",
        "label": "reactReduxComponent",
        "matches": {
          "rrc": true
        },
        "opts": {}
      },
      {
        "content": "import React, { Component } from 'react';\nimport { connect } from 'react-redux';\n\nfunction mapStateToProps(state) {\n\treturn {\n\n\t};\n}\n\nfunction mapDispatchToProps(dispatch) {\n\treturn {\n\n\t};\n}\n\nclass ${1:${TM_FILENAME_BASE}} extends Component {\n\trender() {\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t$0\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default connect(\n\tmapStateToProps,\n)(${1:${TM_FILENAME_BASE}});",
        "doc": "Creates a React component class connected to redux with dispatch",
        "grammar": "lsp",
        "label": "reactReduxDispatchComponent",
        "matches": {
          "rrdc": true
        },
        "opts": {}
      },
      {
        "content": "class ${1:${TM_FILENAME_BASE}} extends Component {\n\trender() {\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t$0\n\t\t\t</div>\n\t\t);\n\t}\n}\n",
        "doc": "Creates a React component class with ES6 module system",
        "grammar": "lsp",
        "label": "reactJustClassComponent",
        "matches": {
          "rcjc": true
        },
        "opts": {}
      },
      {
        "content": "import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nclass ${1:${TM_FILENAME_BASE}} extends Component {\n\trender() {\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t$0\n\t\t\t</div>\n\t\t);\n\t}\n}\n\n${1:${TM_FILENAME_BASE}}.propTypes = {\n\n};\n\nexport default ${1:${TM_FILENAME_BASE}};",
        "doc": "Creates a React component class with PropTypes and ES6 module system",
        "grammar": "lsp",
        "label": "reactClassComponentPropTypes",
        "matches": {
          "rccp": true
        },
        "opts": {}
      },
      {
        "content": "import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nclass ${1:${TM_FILENAME_BASE}} extends Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.state = {\n\t\t\t\n\t\t}\n\t}\n\n\tstatic getDerivedStateFromProps() {\n\t\treturn null\n\t}\n\n\tcomponentDidMount() {\n\t\t\n\t}\n\n\t// shouldComponentUpdate(nextProps, nextState) {}\n\n\tgetSnapshotBeforeUpdate(prevProps, prevState) {\n\t\treturn null\n\t}\n\n\tcomponentDidUpdate(prevProps, prevState, snapshot) {\n\t\t\n\t}\n\n\tcomponentWillUnmount() {\n\t\t\n\t}\n\n\trender() {\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t\n\t\t\t</div>\n\t\t);\n\t}\n}\n\n${1:${TM_FILENAME_BASE}}.propTypes = {\n\t\n};\n\nexport default ${1:${TM_FILENAME_BASE}};",
        "doc": "Creates a React component class with PropTypes and all lifecycle methods and ES6 module system",
        "grammar": "lsp",
        "label": "reactClassComponentWithMethods",
        "matches": {
          "rcfc": true
        },
        "opts": {}
      },
      {
        "content": "class ${1:${TM_FILENAME_BASE}} extends React.Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\n\t\tthis.state = {};\n\n\t}\n\n\trender() {\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t$0\n\t\t\t</div>\n\t\t);\n\t}\n}\n\n${1:${TM_FILENAME_BASE}}.propTypes = {\n\n};\n\nexport default ${1:${TM_FILENAME_BASE}};",
        "doc": "Creates a React component class with constructor, empty state, proptypes and export in ES6 module system without imports. (Mostly used when React, Proptypes are provided by webpack provide plugin)",
        "grammar": "lsp",
        "label": "reactWithWebpackDefaults",
        "matches": {
          "rwwd": true
        },
        "opts": {}
      },
      {
        "content": "import React, { PureComponent } from 'react';\nimport PropTypes from 'prop-types';\n\nclass ${1:${TM_FILENAME_BASE}} extends PureComponent {\n\trender() {\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t$0\n\t\t\t</div>\n\t\t);\n\t}\n}\n\n${1:${TM_FILENAME_BASE}}.propTypes = {\n\n};\n\nexport default ${1:${TM_FILENAME_BASE}};",
        "doc": "Creates a React pure component class with PropTypes and ES6 module system",
        "grammar": "lsp",
        "label": "reactPureComponent",
        "matches": {
          "rpc": true
        },
        "opts": {}
      },
      {
        "content": "import React from 'react';\n\nconst ${1:${TM_FILENAME_BASE}} = () => {\n\treturn (\n\t\t<div>\n\t\t\t$0\n\t\t</div>\n\t);\n};\n\nexport default ${1:${TM_FILENAME_BASE}};",
        "doc": "Creates a stateless React component without PropTypes and ES6 module system",
        "grammar": "lsp",
        "label": "reactStateless",
        "matches": {
          "rsc": true
        },
        "opts": {}
      },
      {
        "content": "import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst ${1:${TM_FILENAME_BASE}} = props => {\n\treturn (\n\t\t<div>\n\t\t\t\n\t\t</div>\n\t);\n};\n\n${1:${TM_FILENAME_BASE}}.propTypes = {\n\t$0\n};\n\nexport default ${1:${TM_FILENAME_BASE}};",
        "doc": "Creates a stateless React component with PropTypes and ES6 module system",
        "grammar": "lsp",
        "label": "reactStatelessProps",
        "matches": {
          "rscp": true
        },
        "opts": {}
      },
      {
        "content": "import React,{ useState } from 'react';\nimport PropTypes from 'prop-types';\n\nconst ${1:${TM_FILENAME_BASE}} = props => {\n\treturn (\n\t\t<div>\n\t\t\t\n\t\t</div>\n\t);\n};\n\n${1:${TM_FILENAME_BASE}}.propTypes = {\n\t$0\n};\n\nexport default ${1:${TM_FILENAME_BASE}};",
        "doc": "Creates a stateless React component with PropTypes and ES6 module system",
        "grammar": "lsp",
        "label": "reactHookProps",
        "matches": {
          "rhc": true
        },
        "opts": {}
      },
      {
        "content": "import React, { memo } from 'react';\n\nconst ${1:${TM_FILENAME_BASE}} = memo(() => {\n\treturn (\n\t\t<div>\n\t\t\t$0\n\t\t</div>\n\t);\n});\n\nexport default ${1:${TM_FILENAME_BASE}};",
        "doc": "Creates a memoized stateless React component without PropTypes and ES6 module system",
        "grammar": "lsp",
        "label": "reactMemo",
        "matches": {
          "rscm": true
        },
        "opts": {}
      },
      {
        "content": "import React, { memo } from 'react';\nimport PropTypes from 'prop-types';\n\nconst ${1:${TM_FILENAME_BASE}} = memo((props) => {\n\treturn (\n\t\t<div>\n\t\t\t\n\t\t</div>\n\t);\n});\n\n${1:${TM_FILENAME_BASE}}.propTypes = {\n\t$0\n};\n\nexport default ${1:${TM_FILENAME_BASE}};",
        "doc": "Creates a memoized stateless React component with PropTypes and ES6 module system",
        "grammar": "lsp",
        "label": "reactMemoProps",
        "matches": {
          "rscpm": true
        },
        "opts": {}
      },
      {
        "content": "// @flow \nimport * as React from 'react';\ntype Props = {\n\t$0\n};\nexport const ${1:${TM_FILENAME_BASE}} = (props: Props) => {\n\treturn (\n\t\t<div>\n\t\t\t\n\t\t</div>\n\t);\n};",
        "doc": "Creates a stateless React component with FlowTypes and ES6 module system",
        "grammar": "lsp",
        "label": "flowStatelessComponent",
        "matches": {
          "fsc": true
        },
        "opts": {}
      },
      {
        "content": "// @flow\nimport * as React from 'react';\ntype Props = {\n  $0\n};\nexport function ${1:${TM_FILENAME_BASE}}(props: Props) {\n  return (\n    <div>\n      \n    </div>\n  );\n};",
        "doc": "Creates a stateless React component as a named function with FlowTypes",
        "grammar": "lsp",
        "label": "flowStatelessFunction",
        "matches": {
          "fsf": true
        },
        "opts": {}
      },
      {
        "content": "// @flow\nimport * as React from 'react';\ntype Props = {\n  $0\n};\ntype State = {\n  $1\n};\nexport class ${2:${TM_FILENAME_BASE}} extends React.Component<Props, State>{\n  render() {\n    return (\n      <div>\n        \n      </div>\n    );\n  };\n};",
        "doc": "Creates a React component class with FlowTypes",
        "grammar": "lsp",
        "label": "flowClassComponent",
        "matches": {
          "fcc": true
        },
        "opts": {}
      },
      {
        "content": "import React from 'react';\n\nfunction ${1:${TM_FILENAME_BASE}}(props) {\n\treturn (\n\t\t<div>\n\t\t\t\n\t\t</div>\n\t);\n}\n\nexport default ${1:${TM_FILENAME_BASE}};",
        "doc": "Creates a stateless React component as a named function without PropTypes",
        "grammar": "lsp",
        "label": "reactStatelessFunction",
        "matches": {
          "rsf": true
        },
        "opts": {}
      },
      {
        "content": "import React from 'react';\nimport PropTypes from 'prop-types';\n\n${1:${TM_FILENAME_BASE}}.propTypes = {\n\t$0\n};\n\nfunction ${1:${TM_FILENAME_BASE}}(props) {\n\treturn (\n\t\t<div>\n\t\t\t\n\t\t</div>\n\t);\n}\n\nexport default ${1:${TM_FILENAME_BASE}};",
        "doc": "Creates a stateless React component as a named function with PropTypes",
        "grammar": "lsp",
        "label": "reactStatelessFunctionProps",
        "matches": {
          "rsfp": true
        },
        "opts": {}
      },
      {
        "content": "import React from 'react';\n\nconst ${1:${TM_FILENAME_BASE}} = (props) => (\n\t\t\t$0\n\t);\n\nexport default ${1:${TM_FILENAME_BASE}};",
        "doc": "Creates a stateless React component without PropTypes and ES6 module system but with Implicit Return and props",
        "grammar": "lsp",
        "label": "reactStatelessImplicitReturn",
        "matches": {
          "rsi": true
        },
        "opts": {}
      },
      {
        "content": "constructor(props) {\n\tsuper(props);\n\t$0\n}\n",
        "doc": "Adds a default constructor for the class that contains props as arguments",
        "grammar": "lsp",
        "label": "classConstructor",
        "matches": {
          "con": true
        },
        "opts": {}
      },
      {
        "content": "constructor(props, context) {\n\tsuper(props, context);\n\t$0\n}\n",
        "doc": "Adds a default constructor for the class that contains props and context as arguments",
        "grammar": "lsp",
        "label": "classConstructorContext",
        "matches": {
          "conc": true
        },
        "opts": {}
      },
      {
        "content": "this.state = {\n\t$1\n};",
        "doc": "Creates empty state object. To be used in a constructor.",
        "grammar": "lsp",
        "label": "emptyState",
        "matches": {
          "est": true
        },
        "opts": {}
      },
      {
        "content": "\ncomponentWillMount() {\n\t$0\n}\n",
        "doc": "Invoked once, both on the client and server, immediately before the initial rendering occurs",
        "grammar": "lsp",
        "label": "componentWillMount",
        "matches": {
          "cwm": true
        },
        "opts": {}
      },
      {
        "content": "componentDidMount() {\n\t$0\n}\n",
        "doc": "Invoked once, only on the client (not on the server), immediately after the initial rendering occurs.",
        "grammar": "lsp",
        "label": "componentDidMount",
        "matches": {
          "cdm": true
        },
        "opts": {}
      },
      {
        "content": "componentWillReceiveProps(nextProps) {\n\t$0\n}\n",
        "doc": "Invoked when a component is receiving new props. This method is not called for the initial render. [DEPRECATION NOTE]: This method is deprecated in React 16.3",
        "grammar": "lsp",
        "label": "componentWillReceiveProps",
        "matches": {
          "cwr": true
        },
        "opts": {}
      },
      {
        "content": "shouldComponentUpdate(nextProps, nextState) {\n\t$0\n}\n",
        "doc": "Invoked before rendering when new props or state are being received. ",
        "grammar": "lsp",
        "label": "shouldComponentUpdate",
        "matches": {
          "scu": true
        },
        "opts": {}
      },
      {
        "content": "componentWillUpdate(nextProps, nextState) {\n\t$0\n}\n",
        "doc": "Invoked immediately before rendering when new props or state are being received. [DEPRECATION NOTE]: This method is deprecated in React 16.3",
        "grammar": "lsp",
        "label": "componentWillUpdate",
        "matches": {
          "cwup": true
        },
        "opts": {}
      },
      {
        "content": "componentDidUpdate(prevProps, prevState) {\n\t$0\n}\n",
        "doc": "Invoked immediately after the component's updates are flushed to the DOM.",
        "grammar": "lsp",
        "label": "componentDidUpdate",
        "matches": {
          "cdup": true
        },
        "opts": {}
      },
      {
        "content": "componentWillUnmount() {\n\t$0\n}\n",
        "doc": "Invoked immediately before a component is unmounted from the DOM.",
        "grammar": "lsp",
        "label": "componentWillUnmount",
        "matches": {
          "cwun": true
        },
        "opts": {}
      },
      {
        "content": "render() {\n\treturn (\n\t\t<div>\n\t\t\t$0\n\t\t</div>\n\t);\n}",
        "doc": "When called, it should examine this.props and this.state and return a single child element.",
        "grammar": "lsp",
        "label": "componentRender",
        "matches": {
          "ren": true
        },
        "opts": {}
      },
      {
        "content": "this.setState($0);",
        "doc": "Performs a shallow merge of nextState into current state",
        "grammar": "lsp",
        "label": "componentSetStateObject",
        "matches": {
          "sst": true
        },
        "opts": {}
      },
      {
        "content": "this.setState((state, props) => { return { $0 }});\n",
        "doc": "Performs a shallow merge of nextState into current state",
        "grammar": "lsp",
        "label": "componentSetStateFunc",
        "matches": {
          "ssf": true
        },
        "opts": {}
      },
      {
        "content": "this.props.$0",
        "doc": "Access component's props",
        "grammar": "lsp",
        "label": "componentProps",
        "matches": {
          "props": true
        },
        "opts": {}
      },
      {
        "content": "this.state.$0",
        "doc": "Access component's state",
        "grammar": "lsp",
        "label": "componentState",
        "matches": {
          "state": true
        },
        "opts": {}
      },
      {
        "content": "this.$1 = this.$1.bind(this);$0",
        "doc": "Binds the this of a method. To be used inside a constructor",
        "grammar": "lsp",
        "label": "bindThis",
        "matches": {
          "bnd": true
        },
        "opts": {}
      },
      {
        "content": "${1:$TM_FILENAME_BASE}.propTypes = {\n\t$2\n};",
        "doc": "Creates empty propTypes declaration",
        "grammar": "lsp",
        "label": "propTypes",
        "matches": {
          "rpt": true
        },
        "opts": {}
      },
      {
        "content": "${1:$TM_FILENAME_BASE}.defaultProps = {\n\t$2\n};",
        "doc": "Creates empty defaultProps declaration",
        "grammar": "lsp",
        "label": "defaultProps",
        "matches": {
          "rdp": true
        },
        "opts": {}
      },
      {
        "content": "PropTypes.array,",
        "doc": "Array prop type",
        "grammar": "lsp",
        "label": "propTypeArray",
        "matches": {
          "pta": true
        },
        "opts": {}
      },
      {
        "content": "PropTypes.array.isRequired,",
        "doc": "Array prop type required",
        "grammar": "lsp",
        "label": "propTypeArrayRequired",
        "matches": {
          "ptar": true
        },
        "opts": {}
      },
      {
        "content": "PropTypes.bool,",
        "doc": "Bool prop type",
        "grammar": "lsp",
        "label": "propTypeBool",
        "matches": {
          "ptb": true
        },
        "opts": {}
      },
      {
        "content": "PropTypes.bool.isRequired,",
        "doc": "Bool prop type required",
        "grammar": "lsp",
        "label": "propTypeBoolRequired",
        "matches": {
          "ptbr": true
        },
        "opts": {}
      },
      {
        "content": "PropTypes.func,",
        "doc": "Func prop type",
        "grammar": "lsp",
        "label": "propTypeFunc",
        "matches": {
          "ptf": true
        },
        "opts": {}
      },
      {
        "content": "PropTypes.func.isRequired,",
        "doc": "Func prop type required",
        "grammar": "lsp",
        "label": "propTypeFuncRequired",
        "matches": {
          "ptfr": true
        },
        "opts": {}
      },
      {
        "content": "PropTypes.number,",
        "doc": "Number prop type",
        "grammar": "lsp",
        "label": "propTypeNumber",
        "matches": {
          "ptn": true
        },
        "opts": {}
      },
      {
        "content": "PropTypes.number.isRequired,",
        "doc": "Number prop type required",
        "grammar": "lsp",
        "label": "propTypeNumberRequired",
        "matches": {
          "ptnr": true
        },
        "opts": {}
      },
      {
        "content": "PropTypes.object,",
        "doc": "Object prop type",
        "grammar": "lsp",
        "label": "propTypeObject",
        "matches": {
          "pto": true
        },
        "opts": {}
      },
      {
        "content": "PropTypes.object.isRequired,",
        "doc": "Object prop type required",
        "grammar": "lsp",
        "label": "propTypeObjectRequired",
        "matches": {
          "ptor": true
        },
        "opts": {}
      },
      {
        "content": "PropTypes.string,",
        "doc": "String prop type",
        "grammar": "lsp",
        "label": "propTypeString",
        "matches": {
          "pts": true
        },
        "opts": {}
      },
      {
        "content": "PropTypes.string.isRequired,",
        "doc": "String prop type required",
        "grammar": "lsp",
        "label": "propTypeStringRequired",
        "matches": {
          "ptsr": true
        },
        "opts": {}
      },
      {
        "content": "PropTypes.symbol,",
        "doc": "Symbol prop type",
        "grammar": "lsp",
        "label": "propTypeSymbol",
        "matches": {
          "ptsm": true
        },
        "opts": {}
      },
      {
        "content": "PropTypes.symbol.isRequired,",
        "doc": "Symbol prop type required",
        "grammar": "lsp",
        "label": "propTypeSymbolRequired",
        "matches": {
          "ptsmr": true
        },
        "opts": {}
      },
      {
        "content": "PropTypes.any,",
        "doc": "Any prop type",
        "grammar": "lsp",
        "label": "propTypeAny",
        "matches": {
          "ptan": true
        },
        "opts": {}
      },
      {
        "content": "PropTypes.any.isRequired,",
        "doc": "Any prop type required",
        "grammar": "lsp",
        "label": "propTypeAnyRequired",
        "matches": {
          "ptanr": true
        },
        "opts": {}
      },
      {
        "content": "PropTypes.node,",
        "doc": "Anything that can be rendered: numbers, strings, elements or an array",
        "grammar": "lsp",
        "label": "propTypeNode",
        "matches": {
          "ptnd": true
        },
        "opts": {}
      },
      {
        "content": "PropTypes.node.isRequired,",
        "doc": "Anything that can be rendered: numbers, strings, elements or an array required",
        "grammar": "lsp",
        "label": "propTypeNodeRequired",
        "matches": {
          "ptndr": true
        },
        "opts": {}
      },
      {
        "content": "PropTypes.element,",
        "doc": "React element prop type",
        "grammar": "lsp",
        "label": "propTypeElement",
        "matches": {
          "ptel": true
        },
        "opts": {}
      },
      {
        "content": "PropTypes.element.isRequired,",
        "doc": "React element prop type required",
        "grammar": "lsp",
        "label": "propTypeElementRequired",
        "matches": {
          "ptelr": true
        },
        "opts": {}
      },
      {
        "content": "PropTypes.instanceOf($0),",
        "doc": "Is an instance of a class prop type",
        "grammar": "lsp",
        "label": "propTypeInstanceOf",
        "matches": {
          "pti": true
        },
        "opts": {}
      },
      {
        "content": "PropTypes.instanceOf($0).isRequired,",
        "doc": "Is an instance of a class prop type required",
        "grammar": "lsp",
        "label": "propTypeInstanceOfRequired",
        "matches": {
          "ptir": true
        },
        "opts": {}
      },
      {
        "content": "PropTypes.oneOf(['$0']),",
        "doc": "Prop type limited to specific values by treating it as an enum",
        "grammar": "lsp",
        "label": "propTypeEnum",
        "matches": {
          "pte": true
        },
        "opts": {}
      },
      {
        "content": "PropTypes.oneOf(['$0']).isRequired,",
        "doc": "Prop type limited to specific values by treating it as an enum required",
        "grammar": "lsp",
        "label": "propTypeEnumRequired",
        "matches": {
          "pter": true
        },
        "opts": {}
      },
      {
        "content": "PropTypes.oneOfType([\n\t$0\n]),",
        "doc": "An object that could be one of many types",
        "grammar": "lsp",
        "label": "propTypeOneOfType",
        "matches": {
          "ptet": true
        },
        "opts": {}
      },
      {
        "content": "PropTypes.oneOfType([\n\t$0\n]).isRequired,",
        "doc": "An object that could be one of many types required",
        "grammar": "lsp",
        "label": "propTypeOneOfTypeRequired",
        "matches": {
          "ptetr": true
        },
        "opts": {}
      },
      {
        "content": "PropTypes.arrayOf($0),",
        "doc": "An array of a certain type",
        "grammar": "lsp",
        "label": "propTypeArrayOf",
        "matches": {
          "ptao": true
        },
        "opts": {}
      },
      {
        "content": "PropTypes.arrayOf($0).isRequired,",
        "doc": "An array of a certain type required",
        "grammar": "lsp",
        "label": "propTypeArrayOfRequired",
        "matches": {
          "ptaor": true
        },
        "opts": {}
      },
      {
        "content": "PropTypes.objectOf($0),",
        "doc": "An object with property values of a certain type",
        "grammar": "lsp",
        "label": "propTypeObjectOf",
        "matches": {
          "ptoo": true
        },
        "opts": {}
      },
      {
        "content": "PropTypes.objectOf($0).isRequired,",
        "doc": "An object with property values of a certain type required",
        "grammar": "lsp",
        "label": "propTypeObjectOfRequired",
        "matches": {
          "ptoor": true
        },
        "opts": {}
      },
      {
        "content": "PropTypes.objectOf(PropTypes.shape($0)),",
        "doc": "An object whose keys are known ahead of time",
        "grammar": "lsp",
        "label": "propTypeObjectOfShape",
        "matches": {
          "ptoos": true
        },
        "opts": {}
      },
      {
        "content": "PropTypes.objectOf(PropTypes.shape($0)).isRequired,",
        "doc": "An object whose keys are known ahead of time required",
        "grammar": "lsp",
        "label": "propTypeObjectOfShapeRequired",
        "matches": {
          "ptoosr": true
        },
        "opts": {}
      },
      {
        "content": "PropTypes.shape({\n\t$0\n}),",
        "doc": "An object taking on a particular shape",
        "grammar": "lsp",
        "label": "propTypeShape",
        "matches": {
          "ptsh": true
        },
        "opts": {}
      },
      {
        "content": "PropTypes.shape({\n\t$0\n}).isRequired,",
        "doc": "An object taking on a particular shape required",
        "grammar": "lsp",
        "label": "propTypeShapeRequired",
        "matches": {
          "ptshr": true
        },
        "opts": {}
      },
      {
        "content": "getSnapshotBeforeUpdate(prevProps, prevState) {\n\t$0\n}\n",
        "doc": "Invoked right before the most recently rendered output is committed to e.g. the DOM. It enables your component to capture current values",
        "grammar": "lsp",
        "label": "getSnapshotBeforeUpdate",
        "matches": {
          "gsbu": true
        },
        "opts": {}
      },
      {
        "content": "static getDerivedStateFromProps(nextProps, prevState) {\n\t$0\n}\n",
        "doc": "Invoked after a component is instantiated as well as when it receives new props.",
        "grammar": "lsp",
        "label": "getDerivedStateFromProps",
        "matches": {
          "gdsfp": true
        },
        "opts": {}
      },
      {
        "content": "componentDidCatch(error, info) {\n\t$0\n}\n",
        "doc": "Error boundaries catch errors during rendering, in lifecycle methods, and in constructors of the whole tree below them.",
        "grammar": "lsp",
        "label": "componentDidCatch",
        "matches": {
          "cdc": true
        },
        "opts": {}
      },
      {
        "content": "function mapDispatchToProps(dispatch) {\n\treturn {\n\t}\n\n}",
        "doc": "Adds the redux mapDispatchToProps function",
        "grammar": "lsp",
        "label": "dispatchRedux",
        "matches": {
          "disp": true
        },
        "opts": {}
      },
      {
        "content": "useEffect(() => {\n$0\n})",
        "doc": "Adds use effect",
        "grammar": "lsp",
        "label": "useEffect",
        "matches": {
          "usf": true
        },
        "opts": {}
      },
      {
        "content": "useEffect(() => {\n$0 return () => {\n$0\n\t}\n})",
        "doc": "Adds use effect",
        "grammar": "lsp",
        "label": "useEffectUnMount",
        "matches": {
          "usfu": true
        },
        "opts": {}
      },
      {
        "content": "useEffect(() => {\n$0\n},[])",
        "doc": "Adds use effect",
        "grammar": "lsp",
        "label": "useEffectDidMount",
        "matches": {
          "usfd": true
        },
        "opts": {}
      },
      {
        "content": "snippet ${1:trigger} \"${2:description}\"\n\t${0:${VISUAL}}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "snip": true
        },
        "opts": {}
      },
      {
        "content": "{VISUAL}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "v": true
        },
        "opts": {}
      },
      {
        "content": "${${1:1}:${0:text}}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "$": true
        },
        "opts": {}
      },
      {
        "content": "\\$\\{VISUAL${1:${2:default}${3:/transform/}}\\}",
        "doc": null,
        "grammar": "snu",
        "label": "${VISUAL}",
        "matches": {
          "vis": true
        },
        "opts": {
          "i": true
        }
      }
    ],
    "snippets-ts": [
      {
        "content": "import styled from 'styled-components/native';\n\nexport const ${1:Container} = styled.${2:View}`\n  ${3}\n`;\n",
        "doc": "Create React Native Styled Components file",
        "grammar": "lsp",
        "label": "styles",
        "matches": {
          "styled-react-native": true
        },
        "opts": {}
      }
    ],
    "soy": [
      {
        "content": "{namespace ${1:name}}",
        "doc": null,
        "grammar": "snu",
        "label": "Namespace",
        "matches": {
          "ns": true
        },
        "opts": {
          "b": true
        }
      },
      {
        "content": "{msg desc=\"${1:description}\"}\n\t$0\n{/msg}",
        "doc": null,
        "grammar": "snu",
        "label": "Message",
        "matches": {
          "msg": true
        },
        "opts": {
          "b": true
        }
      },
      {
        "content": "{let $${1:identifier}: ${2:expression} /}",
        "doc": null,
        "grammar": "snu",
        "label": "let command",
        "matches": {
          "let": true
        },
        "opts": {
          "b": true
        }
      },
      {
        "content": "{if ${1:expression}}\n\t$0\n{/if}",
        "doc": null,
        "grammar": "snu",
        "label": "if .. (if)",
        "matches": {
          "if": true
        },
        "opts": {
          "b": true
        }
      },
      {
        "content": "{if ${1:expression}}\n\t$2\n{else}\n\t$0\n{/if}",
        "doc": null,
        "grammar": "snu",
        "label": "if .. else (ife)",
        "matches": {
          "ife": true
        },
        "opts": {
          "b": true
        }
      },
      {
        "content": "{elif ${1:expression}}\n\t$0",
        "doc": null,
        "grammar": "snu",
        "label": "else if .. (eli)",
        "matches": {
          "eli": true
        },
        "opts": {
          "b": true
        }
      },
      {
        "content": "{foreach $${1:var} in ${2:ref}}\n\t$0\n{/foreach}",
        "doc": null,
        "grammar": "snu",
        "label": "foreach command",
        "matches": {
          "fore": true
        },
        "opts": {
          "b": true
        }
      },
      {
        "content": "{for $${1:var} in range(${2:rangeexpr})}\n\t$0\n{/for}",
        "doc": null,
        "grammar": "snu",
        "label": "for command",
        "matches": {
          "for": true
        },
        "opts": {
          "b": true
        }
      },
      {
        "content": "{call ${1:tmpl}}\n\t$0\n{/call}",
        "doc": null,
        "grammar": "snu",
        "label": "template call",
        "matches": {
          "call": true
        },
        "opts": {
          "b": true
        }
      }
    ],
    "sql": [
      {
        "content": "CREATE TABLE ${1:cities} (\n  ${0:name varchar(80), country_name text}\n);",
        "doc": "",
        "grammar": "snu",
        "label": "CREATE TABLE { ... }",
        "matches": {
          "CREATE_TABLE": true
        },
        "opts": {
          "head": true
        }
      },
      {
        "content": "CREATE INDEX ${1:_name} ON ${2:cities} (${3:name});",
        "doc": "",
        "grammar": "snu",
        "label": "CREATE INDEX ... ON ... ( ... )",
        "matches": {
          "CREATE_INDEX": true
        },
        "opts": {
          "head": true
        }
      },
      {
        "content": "DROP TABLE IF EXISTS ${1:table};",
        "doc": "",
        "grammar": "snu",
        "label": "DROP TABLE IF EXISTS ...",
        "matches": {
          "DROP_TABLE": true
        },
        "opts": {}
      },
      {
        "content": "ALTER TABLE ${1:table}\nMODIFY ${2:column} ${3:new_column_desc};",
        "doc": "",
        "grammar": "snu",
        "label": "ALTER TABLE ... MODIFY ...",
        "matches": {
          "ALTER_TABLE": true
        },
        "opts": {}
      },
      {
        "content": "TRUNCATE TABLE ${1:table};",
        "doc": "",
        "grammar": "snu",
        "label": "TRUNCATE TABLE ...",
        "matches": {
          "TRUNCATE_TABLE": true
        },
        "opts": {}
      },
      {
        "content": "INSERT INTO ${1:cities}\nVALUES (${0:'Vancouver', 'Canada'});",
        "doc": "",
        "grammar": "snu",
        "label": "INSERT INTO ... VALUES ( ... )",
        "matches": {
          "INSERT_DATA": true
        },
        "opts": {
          "head": true
        }
      },
      {
        "content": "UPDATE ${1:table}\nSET ${2:column} = ${3:value}\nWHERE ${4:condition};",
        "doc": "",
        "grammar": "snu",
        "label": "UPDATE ... SET ... WHERE ...",
        "matches": {
          "UPDATE_DATA": true
        },
        "opts": {}
      },
      {
        "content": "SELECT ${1:*}\nFROM ${2:cities} ${3:WHERE area = 'Asia'}\n${4: ORDER BY distance}\n${5: LIMIT 30};",
        "doc": "",
        "grammar": "snu",
        "label": "SELECT * from ... ORDER BY ... LIMIT ...",
        "matches": {
          "SELECT_DATA": true
        },
        "opts": {
          "head": true
        }
      },
      {
        "content": "SELECT ${1:*}\nFROM ${2:table1} ${3:T1}\nJOIN ${4:table2} ${5:T2}\nON T1.${6:column1} = T2.${7:column2}",
        "doc": "",
        "grammar": "snu",
        "label": "SELECT * FROM T1 JOIN T2 ... ON",
        "matches": {
          "SELECT_JOIN_DATA": true
        },
        "opts": {}
      },
      {
        "content": "DELETE FROM ${1:table}\nWHERE ${2:condition};",
        "doc": "",
        "grammar": "snu",
        "label": "DELETE FROM ... WHERE ...",
        "matches": {
          "DELETE_DATA": true
        },
        "opts": {}
      },
      {
        "content": "BEGIN TRANSACTION;\n${0:TARGET}\nCOMMIT;",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "BEGIN TRANSACTION": true,
          "TRANSACTION": true
        },
        "opts": {
          "head": true
        }
      },
      {
        "content": "create table ${1:table} (\n\t${0:columns}\n);",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "tbl": true
        },
        "opts": {}
      },
      {
        "content": "${1:name}\t${2:type}\t${3:default ''}\t${0:not null}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "col": true
        },
        "opts": {}
      },
      {
        "content": "${1:name}\tvarchar2(${2:size})\t${3:default ''}\t${0:not null}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ccol": true
        },
        "opts": {}
      },
      {
        "content": "${1:name}\tnumber\t${3:default 0}\t${0:not null}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ncol": true
        },
        "opts": {}
      },
      {
        "content": "${1:name}\tdate\t${3:default sysdate}\t${0:not null}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "dcol": true
        },
        "opts": {}
      },
      {
        "content": "create index ${0:$1_$2} on ${1:table}(${2:column});",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ind": true
        },
        "opts": {}
      },
      {
        "content": "create unique index ${1:name} on ${2:table}(${0:column});",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "uind": true
        },
        "opts": {}
      },
      {
        "content": "comment on table ${1:table} is '${0:comment}';",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "tblcom": true
        },
        "opts": {}
      },
      {
        "content": "comment on column ${1:table}.${2:column} is '${0:comment}';",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "colcom": true
        },
        "opts": {}
      },
      {
        "content": "alter table ${1:table} add (${2:column} ${0:type});",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "addcol": true
        },
        "opts": {}
      },
      {
        "content": "create sequence ${1:name} start with ${2:1} increment by ${3:1} minvalue ${0:1};",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "seq": true
        },
        "opts": {}
      },
      {
        "content": "select * from ${0:table}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "s*": true
        },
        "opts": {}
      }
    ],
    "sshconfig": [
      {
        "content": "Host ${1:name}\n\tHostName $1.${2:domain}\n\tPort ${3}\n\t${4:User }",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "Host": true
        },
        "opts": {
          "head": true
        }
      }
    ],
    "styled-components": [
      {
        "content": "import styled from 'styled-components';",
        "doc": "import styled from 'styled-components'",
        "grammar": "lsp",
        "label": "styled-components-import-styled-from-styled-components",
        "matches": {
          "imsc": true,
          "styled-components import styled": true
        },
        "opts": {}
      },
      {
        "content": "import styled from 'styled-components/native';",
        "doc": "import styled from 'styled-components/native'",
        "grammar": "lsp",
        "label": "styled-components-import-styled-from-styled-components-native",
        "matches": {
          "imscn": true,
          "styled-components import styled native'": true
        },
        "opts": {}
      },
      {
        "content": "import { createGlobalStyle } from 'styled-components';",
        "doc": "import { createGlobalStyle } from 'styled-components'",
        "grammar": "lsp",
        "label": "styled-components-import-create-global-style-from-styled-components",
        "matches": {
          "imscg": true,
          "styled-components import createglobalstyle": true
        },
        "opts": {}
      },
      {
        "content": "import { css } from 'styled-components';",
        "doc": "import { css } from 'styled-components'",
        "grammar": "lsp",
        "label": "styled-components-import-css-from-styled-components",
        "matches": {
          "imsccss": true,
          "styled-components import css": true
        },
        "opts": {}
      },
      {
        "content": "import { withTheme } from 'styled-components';",
        "doc": "import { withTheme } from 'styled-components'",
        "grammar": "lsp",
        "label": "styled-components-import-with-theme-from-styled-components",
        "matches": {
          "imsct": true,
          "styled-components import withtheme": true
        },
        "opts": {}
      },
      {
        "content": "const ${1} = styled.${2}`\n  ${3}\n`;",
        "doc": "Styled-Component",
        "grammar": "lsp",
        "label": "styled-components-styled-component",
        "matches": {
          "sc": true,
          "styled-components component": true
        },
        "opts": {}
      },
      {
        "content": "export const ${1} = styled.${2}`\n  ${3}\n`;",
        "doc": "Export styled-component",
        "grammar": "lsp",
        "label": "styled-components-export-styled-component",
        "matches": {
          "exsc": true,
          "styled-components export component": true
        },
        "opts": {}
      },
      {
        "content": "const Global${1} = createGlobalStyle`\n  ${2}\n`;",
        "doc": "createGlobalStyle",
        "grammar": "lsp",
        "label": "styled-components-create-global-style",
        "matches": {
          "scg": true,
          "styled-components createglobalstyle": true
        },
        "opts": {}
      },
      {
        "content": "export const Global${1} = createGlobalStyle`\n  ${2}\n`;",
        "doc": "Export createGlobalStyle",
        "grammar": "lsp",
        "label": "styled-components-export-create-global-style",
        "matches": {
          "exscg": true,
          "styled-components export createglobalstyle": true
        },
        "opts": {}
      },
      {
        "content": "const ${1} = styled(${2})`\n  ${3}\n`;",
        "doc": "Styled-Component from existing component",
        "grammar": "lsp",
        "label": "styled-components-styled-component-from-existing-component",
        "matches": {
          "scc": true,
          "styled-components component from existing": true
        },
        "opts": {}
      },
      {
        "content": "export const ${1} = styled(${2})`\n  ${3}\n`;",
        "doc": "Export styled-component from existing component",
        "grammar": "lsp",
        "label": "styled-components-export-styled-component-from-existing-component",
        "matches": {
          "exscc": true,
          "styled-components export component from existing": true
        },
        "opts": {}
      },
      {
        "content": "import styled from 'styled-components';\n\nconst ${1} = styled.${2}`\n  ${3}\n`;\n\nexport default ${1};",
        "doc": "Styled-Components file",
        "grammar": "lsp",
        "label": "styled-components-styled-components-file",
        "matches": {
          "scf": true,
          "styled-components file": true
        },
        "opts": {}
      },
      {
        "content": "<ThemeProvider theme={${1}}>\n  ${2}\n</ThemeProvider>",
        "doc": "ThemeProvider",
        "grammar": "lsp",
        "label": "styled-components-theme-provider",
        "matches": {
          "styled-components themeprovider": true,
          "themeprovider": true
        },
        "opts": {}
      },
      {
        "content": "// Define what props.theme will look like\nconst theme = {\n  ${1}: '${2}'\n};",
        "doc": "styled-component theme",
        "grammar": "lsp",
        "label": "styled-components-styled-component-theme",
        "matches": {
          "sct": true,
          "styled-components theme": true
        },
        "opts": {}
      },
      {
        "content": "const ${1} = styled.${2}.attrs({\n  ${3}: ${4}\n})`\n  ${5}\n`;",
        "doc": "Styled-Component with attributes",
        "grammar": "lsp",
        "label": "styled-components-styled-component-with-attributes",
        "matches": {
          "scattrs": true,
          "styled-components component with attributes": true
        },
        "opts": {}
      },
      {
        "content": "export const ${1} = styled.${2}.attrs({\n  ${3}: ${4}\n})`\n  ${5}\n`;",
        "doc": "Export styled-component with attributes",
        "grammar": "lsp",
        "label": "styled-components-export-styled-component-with-attributes",
        "matches": {
          "exscattrs": true,
          "styled-components export component with attributes": true
        },
        "opts": {}
      }
    ],
    "stylus": [
      {
        "content": "!important",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "!": true
        },
        "opts": {}
      },
      {
        "content": "align-content ${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ac": true
        },
        "opts": {}
      },
      {
        "content": "align-content start",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ac:s": true
        },
        "opts": {}
      },
      {
        "content": "align-content end",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ac:e": true
        },
        "opts": {}
      },
      {
        "content": "align-content center",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ac:c": true
        },
        "opts": {}
      },
      {
        "content": "align-content flex-start",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ac:fs": true
        },
        "opts": {}
      },
      {
        "content": "align-content flex-end",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ac:fe": true
        },
        "opts": {}
      },
      {
        "content": "align-content space-between",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ac:sb": true
        },
        "opts": {}
      },
      {
        "content": "align-content space-around",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ac:sa": true
        },
        "opts": {}
      },
      {
        "content": "align-content space-evenly",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ac:se": true
        },
        "opts": {}
      },
      {
        "content": "align-content stretch",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ac:st": true
        },
        "opts": {}
      },
      {
        "content": "align-content baseline",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ac:b": true
        },
        "opts": {}
      },
      {
        "content": "align-content first baseline",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ac:fb": true
        },
        "opts": {}
      },
      {
        "content": "align-content last baseline",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ac:lb": true
        },
        "opts": {}
      },
      {
        "content": "align-items ${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ai": true
        },
        "opts": {}
      },
      {
        "content": "align-items start",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ai:s": true
        },
        "opts": {}
      },
      {
        "content": "align-items end",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ai:e": true
        },
        "opts": {}
      },
      {
        "content": "align-items center",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ai:c": true
        },
        "opts": {}
      },
      {
        "content": "align-items flex-start",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ai:fs": true
        },
        "opts": {}
      },
      {
        "content": "align-items flex-end",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ai:fe": true
        },
        "opts": {}
      },
      {
        "content": "align-items stretch",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ai:st": true
        },
        "opts": {}
      },
      {
        "content": "align-items baseline",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ai:b": true
        },
        "opts": {}
      },
      {
        "content": "align-items first baseline",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ai:fb": true
        },
        "opts": {}
      },
      {
        "content": "align-items last baseline",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ai:lb": true
        },
        "opts": {}
      },
      {
        "content": "align-self ${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "as": true
        },
        "opts": {}
      },
      {
        "content": "align-self start",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "as:s": true
        },
        "opts": {}
      },
      {
        "content": "align-self end",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "as:e": true
        },
        "opts": {}
      },
      {
        "content": "align-self center",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "as:c": true
        },
        "opts": {}
      },
      {
        "content": "align-self stretch",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "as:st": true
        },
        "opts": {}
      },
      {
        "content": "align-self flex-start",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "as:fs": true
        },
        "opts": {}
      },
      {
        "content": "align-self flex-end",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "as:fe": true
        },
        "opts": {}
      },
      {
        "content": "align-self baseline",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "as:b": true
        },
        "opts": {}
      },
      {
        "content": "align-self first baseline",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "as:fb": true
        },
        "opts": {}
      },
      {
        "content": "align-self last baseline",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "as:lb": true
        },
        "opts": {}
      },
      {
        "content": "-moz-border-image url(${1}) ${2:0} ${3:0} ${4:0} ${5:0} ${6:stretch} ${0:stretch}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "bdi:m+": true
        },
        "opts": {}
      },
      {
        "content": "-moz-border-image ${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "bdi:m": true
        },
        "opts": {}
      },
      {
        "content": "-moz-border-radius ${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "bdrz:m": true
        },
        "opts": {}
      },
      {
        "content": "-moz-box-shadow ${1:0} ${2:0} ${3:0} ${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "bxsh:m+": true
        },
        "opts": {}
      },
      {
        "content": "-moz-box-shadow ${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "bxsh:m": true
        },
        "opts": {}
      },
      {
        "content": "-webkit-border-image url(${1}) ${2:0} ${3:0} ${4:0} ${5:0} ${6:stretch} ${0:stretch}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "bdi:w+": true
        },
        "opts": {}
      },
      {
        "content": "-webkit-border-image ${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "bdi:w": true
        },
        "opts": {}
      },
      {
        "content": "-webkit-border-radius ${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "bdrz:w": true
        },
        "opts": {}
      },
      {
        "content": "-webkit-box-shadow ${1:0} ${2:0} ${3:0} ${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "bxsh:w+": true
        },
        "opts": {}
      },
      {
        "content": "-webkit-box-shadow ${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "bxsh:w": true
        },
        "opts": {}
      },
      {
        "content": "@font-face ${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "@f": true
        },
        "opts": {}
      },
      {
        "content": "@import '${0}'",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "@i": true
        },
        "opts": {}
      },
      {
        "content": "@require '${0}'",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "@r": true
        },
        "opts": {}
      },
      {
        "content": "@media ${1:screen}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "@m": true
        },
        "opts": {}
      },
      {
        "content": "@media screen and (min-width: ${0}px)",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "@msmw": true
        },
        "opts": {}
      },
      {
        "content": "@extend .${1}\n${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "@ext": true
        },
        "opts": {}
      },
      {
        "content": "background ${1} url(${2}) ${3:0} ${4:0} ${0:no-repeat}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "bg+": true
        },
        "opts": {}
      },
      {
        "content": "background-attachment ${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "bga": true
        },
        "opts": {}
      },
      {
        "content": "background-attachment fixed",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "bga:f": true
        },
        "opts": {}
      },
      {
        "content": "background-attachment scroll",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "bga:s": true
        },
        "opts": {}
      },
      {
        "content": "background-break ${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "bgbk": true
        },
        "opts": {}
      },
      {
        "content": "background-break bounding-box",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "bgbk:bb": true
        },
        "opts": {}
      },
      {
        "content": "background-break continuous",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "bgbk:c": true
        },
        "opts": {}
      },
      {
        "content": "background-break each-box",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "bgbk:eb": true
        },
        "opts": {}
      },
      {
        "content": "background-clip ${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "bgcp": true
        },
        "opts": {}
      },
      {
        "content": "background-clip border-box",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "bgcp:bb": true
        },
        "opts": {}
      },
      {
        "content": "background-clip content-box",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "bgcp:cb": true
        },
        "opts": {}
      },
      {
        "content": "background-clip no-clip",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "bgcp:nc": true
        },
        "opts": {}
      },
      {
        "content": "background-clip padding-box",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "bgcp:pb": true
        },
        "opts": {}
      },
      {
        "content": "background-color ${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "bgc": true
        },
        "opts": {}
      },
      {
        "content": "background-color transparent",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "bgc:t": true
        },
        "opts": {}
      },
      {
        "content": "background-image url(${0})",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "bgi": true
        },
        "opts": {}
      },
      {
        "content": "background-image none",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "bgi:n": true
        },
        "opts": {}
      },
      {
        "content": "background-origin ${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "bgo": true
        },
        "opts": {}
      },
      {
        "content": "background-origin border-box",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "bgo:bb": true
        },
        "opts": {}
      },
      {
        "content": "background-origin content-box",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "bgo:cb": true
        },
        "opts": {}
      },
      {
        "content": "background-origin padding-box",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "bgo:pb": true
        },
        "opts": {}
      },
      {
        "content": "background-position-x ${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "bgpx": true
        },
        "opts": {}
      },
      {
        "content": "background-position-y ${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "bgpy": true
        },
        "opts": {}
      },
      {
        "content": "background-position ${1:0} ${0:0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "bgp": true
        },
        "opts": {}
      },
      {
        "content": "background-repeat ${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "bgr": true
        },
        "opts": {}
      },
      {
        "content": "background-repeat no-repeat",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "bgr:n": true
        },
        "opts": {}
      },
      {
        "content": "background-repeat repeat-x",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "bgr:x": true
        },
        "opts": {}
      },
      {
        "content": "background-repeat repeat-y",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "bgr:y": true
        },
        "opts": {}
      },
      {
        "content": "background-repeat repeat",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "bgr:r": true
        },
        "opts": {}
      },
      {
        "content": "background-size ${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "bgz": true
        },
        "opts": {}
      },
      {
        "content": "background-size auto",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "bgz:a": true
        },
        "opts": {}
      },
      {
        "content": "background-size contain",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "bgz:ct": true
        },
        "opts": {}
      },
      {
        "content": "background-size cover",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "bgz:cv": true
        },
        "opts": {}
      },
      {
        "content": "background ${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "bg": true
        },
        "opts": {}
      },
      {
        "content": "filter progid:DXImageTransform.Microsoft.AlphaImageLoader(src='${1}',sizingMethod='${0:crop}')",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "bg:ie": true
        },
        "opts": {}
      },
      {
        "content": "background none",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "bg:n": true
        },
        "opts": {}
      },
      {
        "content": "border ${1:1px} ${2:solid} ${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "bd+": true
        },
        "opts": {}
      },
      {
        "content": "border-bottom ${1:1px} ${2:solid} ${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "bdb+": true
        },
        "opts": {}
      },
      {
        "content": "border-bottom-color ${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "bdbc": true
        },
        "opts": {}
      },
      {
        "content": "border-bottom-image url(${0})",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "bdbi": true
        },
        "opts": {}
      },
      {
        "content": "border-bottom-image none",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "bdbi:n": true
        },
        "opts": {}
      },
      {
        "content": "border-bottom-left-image url(${0})",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "bdbli": true
        },
        "opts": {}
      },
      {
        "content": "border-bottom-left-image continue",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "bdbli:c": true
        },
        "opts": {}
      },
      {
        "content": "border-bottom-left-image none",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "bdbli:n": true
        },
        "opts": {}
      },
      {
        "content": "border-bottom-left-radius ${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "bdblrz": true
        },
        "opts": {}
      },
      {
        "content": "border-bottom-right-image url(${0})",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "bdbri": true
        },
        "opts": {}
      },
      {
        "content": "border-bottom-right-image continue",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "bdbri:c": true
        },
        "opts": {}
      },
      {
        "content": "border-bottom-right-image none",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "bdbri:n": true
        },
        "opts": {}
      },
      {
        "content": "border-bottom-right-radius ${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "bdbrrz": true
        },
        "opts": {}
      },
      {
        "content": "border-bottom-style ${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "bdbs": true
        },
        "opts": {}
      },
      {
        "content": "border-bottom-style none",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "bdbs:n": true
        },
        "opts": {}
      },
      {
        "content": "border-bottom-width ${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "bdbw": true
        },
        "opts": {}
      },
      {
        "content": "border-bottom ${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "bdb": true
        },
        "opts": {}
      },
      {
        "content": "border-bottom none",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "bdb:n": true
        },
        "opts": {}
      },
      {
        "content": "border-break ${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "bdbk": true
        },
        "opts": {}
      },
      {
        "content": "border-break close",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "bdbk:c": true
        },
        "opts": {}
      },
      {
        "content": "border-collapse ${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "bdcl": true
        },
        "opts": {}
      },
      {
        "content": "border-collapse collapse",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "bdcl:c": true
        },
        "opts": {}
      },
      {
        "content": "border-collapse separate",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "bdcl:s": true
        },
        "opts": {}
      },
      {
        "content": "border-color ${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "bdc": true
        },
        "opts": {}
      },
      {
        "content": "border-corner-image url(${0})",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "bdci": true
        },
        "opts": {}
      },
      {
        "content": "border-corner-image continue",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "bdci:c": true
        },
        "opts": {}
      },
      {
        "content": "border-corner-image none",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "bdci:n": true
        },
        "opts": {}
      },
      {
        "content": "border-fit ${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "bdf": true
        },
        "opts": {}
      },
      {
        "content": "border-fit clip",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "bdf:c": true
        },
        "opts": {}
      },
      {
        "content": "border-fit overwrite",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "bdf:of": true
        },
        "opts": {}
      },
      {
        "content": "border-fit overwrite",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "bdf:ow": true
        },
        "opts": {}
      },
      {
        "content": "border-fit repeat",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "bdf:r": true
        },
        "opts": {}
      },
      {
        "content": "border-fit scale",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "bdf:sc": true
        },
        "opts": {}
      },
      {
        "content": "border-fit space",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "bdf:sp": true
        },
        "opts": {}
      },
      {
        "content": "border-fit stretch",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "bdf:st": true
        },
        "opts": {}
      },
      {
        "content": "border-image url(${1}) ${2:0} ${3:0} ${4:0} ${5:0} ${6:stretch} ${0:stretch}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "bdi": true
        },
        "opts": {}
      },
      {
        "content": "border-image none",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "bdi:n": true
        },
        "opts": {}
      },
      {
        "content": "border-left ${1:1px} ${2:solid} ${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "bdl+": true
        },
        "opts": {}
      },
      {
        "content": "border-left-color ${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "bdlc": true
        },
        "opts": {}
      },
      {
        "content": "border-left-image url(${0})",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "bdli": true
        },
        "opts": {}
      },
      {
        "content": "border-left-image none",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "bdli:n": true
        },
        "opts": {}
      },
      {
        "content": "border-left-style ${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "bdls": true
        },
        "opts": {}
      },
      {
        "content": "border-left-style none",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "bdls:n": true
        },
        "opts": {}
      },
      {
        "content": "border-left-width ${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "bdlw": true
        },
        "opts": {}
      },
      {
        "content": "border-left ${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "bdl": true
        },
        "opts": {}
      },
      {
        "content": "border-left none",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "bdl:n": true
        },
        "opts": {}
      },
      {
        "content": "border-length ${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "bdlt": true
        },
        "opts": {}
      },
      {
        "content": "border-length auto",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "bdlt:a": true
        },
        "opts": {}
      },
      {
        "content": "border-radius ${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "bdrz": true
        },
        "opts": {}
      },
      {
        "content": "border-right ${1:1px} ${2:solid} ${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "bdr+": true
        },
        "opts": {}
      },
      {
        "content": "border-right-color ${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "bdrc": true
        },
        "opts": {}
      },
      {
        "content": "border-right-image url(${0})",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "bdri": true
        },
        "opts": {}
      },
      {
        "content": "border-right-image none",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "bdri:n": true
        },
        "opts": {}
      },
      {
        "content": "border-right-style ${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "bdrs": true
        },
        "opts": {}
      },
      {
        "content": "border-right-style none",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "bdrs:n": true
        },
        "opts": {}
      },
      {
        "content": "border-right-width ${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "bdrw": true
        },
        "opts": {}
      },
      {
        "content": "border-right ${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "bdr": true
        },
        "opts": {}
      },
      {
        "content": "border-right none",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "bdr:n": true
        },
        "opts": {}
      },
      {
        "content": "border-spacing ${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "bdsp": true
        },
        "opts": {}
      },
      {
        "content": "border-style ${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "bds": true
        },
        "opts": {}
      },
      {
        "content": "border-style dashed",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "bds:ds": true
        },
        "opts": {}
      },
      {
        "content": "border-style dot-dash",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "bds:dtds": true
        },
        "opts": {}
      },
      {
        "content": "border-style dot-dot-dash",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "bds:dtdtds": true
        },
        "opts": {}
      },
      {
        "content": "border-style dotted",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "bds:dt": true
        },
        "opts": {}
      },
      {
        "content": "border-style double",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "bds:db": true
        },
        "opts": {}
      },
      {
        "content": "border-style groove",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "bds:g": true
        },
        "opts": {}
      },
      {
        "content": "border-style hidden",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "bds:h": true
        },
        "opts": {}
      },
      {
        "content": "border-style inset",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "bds:i": true
        },
        "opts": {}
      },
      {
        "content": "border-style none",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "bds:n": true
        },
        "opts": {}
      },
      {
        "content": "border-style outset",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "bds:o": true
        },
        "opts": {}
      },
      {
        "content": "border-style ridge",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "bds:r": true
        },
        "opts": {}
      },
      {
        "content": "border-style solid",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "bds:s": true
        },
        "opts": {}
      },
      {
        "content": "border-style wave",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "bds:w": true
        },
        "opts": {}
      },
      {
        "content": "border-top ${1:1px} ${2:solid} ${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "bdt+": true
        },
        "opts": {}
      },
      {
        "content": "border-top-color ${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "bdtc": true
        },
        "opts": {}
      },
      {
        "content": "border-top-image url(${0})",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "bdti": true
        },
        "opts": {}
      },
      {
        "content": "border-top-image none",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "bdti:n": true
        },
        "opts": {}
      },
      {
        "content": "border-top-left-image url(${0})",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "bdtli": true
        },
        "opts": {}
      },
      {
        "content": "border-corner-image continue",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "bdtli:c": true
        },
        "opts": {}
      },
      {
        "content": "border-corner-image none",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "bdtli:n": true
        },
        "opts": {}
      },
      {
        "content": "border-top-left-radius ${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "bdtlrz": true
        },
        "opts": {}
      },
      {
        "content": "border-top-right-image url(${0})",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "bdtri": true
        },
        "opts": {}
      },
      {
        "content": "border-top-right-image continue",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "bdtri:c": true
        },
        "opts": {}
      },
      {
        "content": "border-top-right-image none",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "bdtri:n": true
        },
        "opts": {}
      },
      {
        "content": "border-top-right-radius ${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "bdtrrz": true
        },
        "opts": {}
      },
      {
        "content": "border-top-style ${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "bdts": true
        },
        "opts": {}
      },
      {
        "content": "border-top-style none",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "bdts:n": true
        },
        "opts": {}
      },
      {
        "content": "border-top-width ${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "bdtw": true
        },
        "opts": {}
      },
      {
        "content": "border-top ${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "bdt": true
        },
        "opts": {}
      },
      {
        "content": "border-top none",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "bdt:n": true
        },
        "opts": {}
      },
      {
        "content": "border-width ${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "bdw": true
        },
        "opts": {}
      },
      {
        "content": "border ${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "bd": true
        },
        "opts": {}
      },
      {
        "content": "border none",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "bd:n": true
        },
        "opts": {}
      },
      {
        "content": "bottom ${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "b": true
        },
        "opts": {}
      },
      {
        "content": "bottom auto",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "b:a": true
        },
        "opts": {}
      },
      {
        "content": "box-shadow ${1:0} ${2:0} ${3:0} ${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "bxsh+": true
        },
        "opts": {}
      },
      {
        "content": "box-shadow ${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "bxsh": true
        },
        "opts": {}
      },
      {
        "content": "box-shadow none",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "bxsh:n": true
        },
        "opts": {}
      },
      {
        "content": "box-sizing ${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "bxz": true
        },
        "opts": {}
      },
      {
        "content": "box-sizing border-box",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "bxz:bb": true
        },
        "opts": {}
      },
      {
        "content": "box-sizing content-box",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "bxz:cb": true
        },
        "opts": {}
      },
      {
        "content": "caption-side ${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "cps": true
        },
        "opts": {}
      },
      {
        "content": "caption-side bottom",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "cps:b": true
        },
        "opts": {}
      },
      {
        "content": "caption-side top",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "cps:t": true
        },
        "opts": {}
      },
      {
        "content": "clear ${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "cl": true
        },
        "opts": {}
      },
      {
        "content": "clear both",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "cl:b": true
        },
        "opts": {}
      },
      {
        "content": "clear left",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "cl:l": true
        },
        "opts": {}
      },
      {
        "content": "clear none",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "cl:n": true
        },
        "opts": {}
      },
      {
        "content": "clear right",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "cl:r": true
        },
        "opts": {}
      },
      {
        "content": "clip ${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "cp": true
        },
        "opts": {}
      },
      {
        "content": "clip auto",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "cp:a": true
        },
        "opts": {}
      },
      {
        "content": "clip rect(${1:0} ${2:0} ${3:0} ${0:0})",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "cp:r": true
        },
        "opts": {}
      },
      {
        "content": "color ${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "c": true
        },
        "opts": {}
      },
      {
        "content": "content ${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ct": true
        },
        "opts": {}
      },
      {
        "content": "content attr(${0})",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ct:a": true
        },
        "opts": {}
      },
      {
        "content": "content close-quote",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ct:cq": true
        },
        "opts": {}
      },
      {
        "content": "content counter(${0})",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ct:c": true
        },
        "opts": {}
      },
      {
        "content": "content counters(${0})",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ct:cs": true
        },
        "opts": {}
      },
      {
        "content": "content no-close-quote",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ct:ncq": true
        },
        "opts": {}
      },
      {
        "content": "content no-open-quote",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ct:noq": true
        },
        "opts": {}
      },
      {
        "content": "content normal",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ct:n": true
        },
        "opts": {}
      },
      {
        "content": "content open-quote",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ct:oq": true
        },
        "opts": {}
      },
      {
        "content": "counter-increment ${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "coi": true
        },
        "opts": {}
      },
      {
        "content": "counter-reset ${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "cor": true
        },
        "opts": {}
      },
      {
        "content": "cursor ${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "cur": true
        },
        "opts": {}
      },
      {
        "content": "cursor auto",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "cur:a": true
        },
        "opts": {}
      },
      {
        "content": "cursor crosshair",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "cur:c": true
        },
        "opts": {}
      },
      {
        "content": "cursor default",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "cur:d": true
        },
        "opts": {}
      },
      {
        "content": "cursor hand",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "cur:ha": true
        },
        "opts": {}
      },
      {
        "content": "cursor help",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "cur:he": true
        },
        "opts": {}
      },
      {
        "content": "cursor move",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "cur:m": true
        },
        "opts": {}
      },
      {
        "content": "cursor pointer",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "cur:p": true
        },
        "opts": {}
      },
      {
        "content": "cursor text",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "cur:t": true
        },
        "opts": {}
      },
      {
        "content": "display ${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "d": true
        },
        "opts": {}
      },
      {
        "content": "display -moz-inline-box",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "d:mib": true
        },
        "opts": {}
      },
      {
        "content": "display -moz-inline-stack",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "d:mis": true
        },
        "opts": {}
      },
      {
        "content": "display block",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "d:b": true
        },
        "opts": {}
      },
      {
        "content": "display compact",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "d:cp": true
        },
        "opts": {}
      },
      {
        "content": "display grid",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "d:g": true
        },
        "opts": {}
      },
      {
        "content": "display flex",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "d:f": true
        },
        "opts": {}
      },
      {
        "content": "display inline-block",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "d:ib": true
        },
        "opts": {}
      },
      {
        "content": "display inline-table",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "d:itb": true
        },
        "opts": {}
      },
      {
        "content": "display inline",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "d:i": true
        },
        "opts": {}
      },
      {
        "content": "display list-item",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "d:li": true
        },
        "opts": {}
      },
      {
        "content": "display none",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "d:n": true
        },
        "opts": {}
      },
      {
        "content": "display run-in",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "d:ri": true
        },
        "opts": {}
      },
      {
        "content": "display table-caption",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "d:tbcp": true
        },
        "opts": {}
      },
      {
        "content": "display table-cell",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "d:tbc": true
        },
        "opts": {}
      },
      {
        "content": "display table-column-group",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "d:tbclg": true
        },
        "opts": {}
      },
      {
        "content": "display table-column",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "d:tbcl": true
        },
        "opts": {}
      },
      {
        "content": "display table-footer-group",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "d:tbfg": true
        },
        "opts": {}
      },
      {
        "content": "display table-header-group",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "d:tbhg": true
        },
        "opts": {}
      },
      {
        "content": "display table-row-group",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "d:tbrg": true
        },
        "opts": {}
      },
      {
        "content": "display table-row",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "d:tbr": true
        },
        "opts": {}
      },
      {
        "content": "display table",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "d:tb": true
        },
        "opts": {}
      },
      {
        "content": "empty-cells ${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ec": true
        },
        "opts": {}
      },
      {
        "content": "empty-cells hide",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ec:h": true
        },
        "opts": {}
      },
      {
        "content": "empty-cells show",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ec:s": true
        },
        "opts": {}
      },
      {
        "content": "expression()",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "exp": true
        },
        "opts": {}
      },
      {
        "content": "float ${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "fl": true
        },
        "opts": {}
      },
      {
        "content": "float left",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "fl:l": true
        },
        "opts": {}
      },
      {
        "content": "float none",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "fl:n": true
        },
        "opts": {}
      },
      {
        "content": "float right",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "fl:r": true
        },
        "opts": {}
      },
      {
        "content": "font ${1:1em} ${2:Arial},${0:sans-serif}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "f+": true
        },
        "opts": {}
      },
      {
        "content": "font-effect ${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "fef": true
        },
        "opts": {}
      },
      {
        "content": "font-effect emboss",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "fef:eb": true
        },
        "opts": {}
      },
      {
        "content": "font-effect engrave",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "fef:eg": true
        },
        "opts": {}
      },
      {
        "content": "font-effect none",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "fef:n": true
        },
        "opts": {}
      },
      {
        "content": "font-effect outline",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "fef:o": true
        },
        "opts": {}
      },
      {
        "content": "font-emphasize-position ${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "femp": true
        },
        "opts": {}
      },
      {
        "content": "font-emphasize-position after",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "femp:a": true
        },
        "opts": {}
      },
      {
        "content": "font-emphasize-position before",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "femp:b": true
        },
        "opts": {}
      },
      {
        "content": "font-emphasize-style ${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "fems": true
        },
        "opts": {}
      },
      {
        "content": "font-emphasize-style accent",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "fems:ac": true
        },
        "opts": {}
      },
      {
        "content": "font-emphasize-style circle",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "fems:c": true
        },
        "opts": {}
      },
      {
        "content": "font-emphasize-style disc",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "fems:ds": true
        },
        "opts": {}
      },
      {
        "content": "font-emphasize-style dot",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "fems:dt": true
        },
        "opts": {}
      },
      {
        "content": "font-emphasize-style none",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "fems:n": true
        },
        "opts": {}
      },
      {
        "content": "font-emphasize ${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "fem": true
        },
        "opts": {}
      },
      {
        "content": "font-family ${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ff": true
        },
        "opts": {}
      },
      {
        "content": "font-family ${0:'Monotype Corsiva','Comic Sans MS'},cursive",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ff:c": true
        },
        "opts": {}
      },
      {
        "content": "font-family ${0:Capitals,Impact},fantasy",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ff:f": true
        },
        "opts": {}
      },
      {
        "content": "font-family ${0:Monaco,'Courier New'},monospace",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ff:m": true
        },
        "opts": {}
      },
      {
        "content": "font-family ${0:Helvetica,Arial},sans-serif",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ff:ss": true
        },
        "opts": {}
      },
      {
        "content": "font-family ${0:Georgia,'Times New Roman'},serif",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ff:s": true
        },
        "opts": {}
      },
      {
        "content": "font-size-adjust ${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "fza": true
        },
        "opts": {}
      },
      {
        "content": "font-size-adjust none",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "fza:n": true
        },
        "opts": {}
      },
      {
        "content": "font-size ${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "fz": true
        },
        "opts": {}
      },
      {
        "content": "font-smooth ${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "fsm": true
        },
        "opts": {}
      },
      {
        "content": "font-smooth always",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "fsm:aw": true
        },
        "opts": {}
      },
      {
        "content": "font-smooth auto",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "fsm:a": true
        },
        "opts": {}
      },
      {
        "content": "font-smooth never",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "fsm:n": true
        },
        "opts": {}
      },
      {
        "content": "font-stretch ${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "fst": true
        },
        "opts": {}
      },
      {
        "content": "font-stretch condensed",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "fst:c": true
        },
        "opts": {}
      },
      {
        "content": "font-stretch expanded",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "fst:e": true
        },
        "opts": {}
      },
      {
        "content": "font-stretch extra-condensed",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "fst:ec": true
        },
        "opts": {}
      },
      {
        "content": "font-stretch extra-expanded",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "fst:ee": true
        },
        "opts": {}
      },
      {
        "content": "font-stretch normal",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "fst:n": true
        },
        "opts": {}
      },
      {
        "content": "font-stretch semi-condensed",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "fst:sc": true
        },
        "opts": {}
      },
      {
        "content": "font-stretch semi-expanded",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "fst:se": true
        },
        "opts": {}
      },
      {
        "content": "font-stretch ultra-condensed",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "fst:uc": true
        },
        "opts": {}
      },
      {
        "content": "font-stretch ultra-expanded",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "fst:ue": true
        },
        "opts": {}
      },
      {
        "content": "font-style ${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "fs": true
        },
        "opts": {}
      },
      {
        "content": "font-style italic",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "fs:i": true
        },
        "opts": {}
      },
      {
        "content": "font-style normal",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "fs:n": true
        },
        "opts": {}
      },
      {
        "content": "font-style oblique",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "fs:o": true
        },
        "opts": {}
      },
      {
        "content": "font-variant ${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "fv": true
        },
        "opts": {}
      },
      {
        "content": "font-variant normal",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "fv:n": true
        },
        "opts": {}
      },
      {
        "content": "font-variant small-caps",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "fv:sc": true
        },
        "opts": {}
      },
      {
        "content": "font-weight ${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "fw": true
        },
        "opts": {}
      },
      {
        "content": "font-weight bold",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "fw:b": true
        },
        "opts": {}
      },
      {
        "content": "font-weight bolder",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "fw:br": true
        },
        "opts": {}
      },
      {
        "content": "font-weight lighter",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "fw:lr": true
        },
        "opts": {}
      },
      {
        "content": "font-weight normal",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "fw:n": true
        },
        "opts": {}
      },
      {
        "content": "font ${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "f": true
        },
        "opts": {}
      },
      {
        "content": "grid ${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "g": true
        },
        "opts": {}
      },
      {
        "content": "grid-auto-flow ${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "gaf": true
        },
        "opts": {}
      },
      {
        "content": "grid-auto-flow ${1:row} ${0:dense}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "gaf+": true
        },
        "opts": {}
      },
      {
        "content": "grid-auto-flow row",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "gaf:r": true
        },
        "opts": {}
      },
      {
        "content": "grid-auto-flow column",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "gaf:c": true
        },
        "opts": {}
      },
      {
        "content": "grid-auto-flow dense",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "gaf:d": true
        },
        "opts": {}
      },
      {
        "content": "grid-auto-flow row dense",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "gaf:rd": true
        },
        "opts": {}
      },
      {
        "content": "grid-auto-flow column dense",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "gaf:cd": true
        },
        "opts": {}
      },
      {
        "content": "grid-auto-rows ${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "gar": true
        },
        "opts": {}
      },
      {
        "content": "grid-auto-rows auto",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "gar:a": true
        },
        "opts": {}
      },
      {
        "content": "grid-auto-rows max-content",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "gar:mac": true
        },
        "opts": {}
      },
      {
        "content": "grid-auto-rows min-content",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "gar:mic": true
        },
        "opts": {}
      },
      {
        "content": "grid-auto-columns ${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "gac": true
        },
        "opts": {}
      },
      {
        "content": "grid-auto-columns auto",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "gac:a": true
        },
        "opts": {}
      },
      {
        "content": "grid-auto-columns max-content",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "gac:mac": true
        },
        "opts": {}
      },
      {
        "content": "grid-auto-columns min-content",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "gac:mic": true
        },
        "opts": {}
      },
      {
        "content": "grid-template ${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "gt": true
        },
        "opts": {}
      },
      {
        "content": "grid-template ${1} / ${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "gt+": true
        },
        "opts": {}
      },
      {
        "content": "grid-template-rows ${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "gtr": true
        },
        "opts": {}
      },
      {
        "content": "grid-template-columns ${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "gtc": true
        },
        "opts": {}
      },
      {
        "content": "grid-template-areas ${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "gta": true
        },
        "opts": {}
      },
      {
        "content": "grid-gap ${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "gg": true
        },
        "opts": {}
      },
      {
        "content": "grid-gap ${1} ${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "gg+": true
        },
        "opts": {}
      },
      {
        "content": "grid-gap 0",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "gg:0": true
        },
        "opts": {}
      },
      {
        "content": "grid-row-gap ${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "grg": true
        },
        "opts": {}
      },
      {
        "content": "grid-row-gap 0",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "grg:0": true
        },
        "opts": {}
      },
      {
        "content": "grid-column-gap ${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "gcg": true
        },
        "opts": {}
      },
      {
        "content": "grid-column-gap 0",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "gcg:0": true
        },
        "opts": {}
      },
      {
        "content": "grid-row ${1} / ${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "gr": true
        },
        "opts": {}
      },
      {
        "content": "grid-row-start ${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "grs": true
        },
        "opts": {}
      },
      {
        "content": "grid-row-end ${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "gre": true
        },
        "opts": {}
      },
      {
        "content": "grid-column ${1} / ${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "gc": true
        },
        "opts": {}
      },
      {
        "content": "grid-column-start ${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "gcs": true
        },
        "opts": {}
      },
      {
        "content": "grid-column-end ${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "gce": true
        },
        "opts": {}
      },
      {
        "content": "height ${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "h": true
        },
        "opts": {}
      },
      {
        "content": "height auto",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "h:a": true
        },
        "opts": {}
      },
      {
        "content": "left ${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "l": true
        },
        "opts": {}
      },
      {
        "content": "left auto",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "l:a": true
        },
        "opts": {}
      },
      {
        "content": "letter-spacing ${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "lts": true
        },
        "opts": {}
      },
      {
        "content": "line-height ${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "lh": true
        },
        "opts": {}
      },
      {
        "content": "list-style-image url(${0})",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "lisi": true
        },
        "opts": {}
      },
      {
        "content": "list-style-image none",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "lisi:n": true
        },
        "opts": {}
      },
      {
        "content": "list-style-position ${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "lisp": true
        },
        "opts": {}
      },
      {
        "content": "list-style-position inside",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "lisp:i": true
        },
        "opts": {}
      },
      {
        "content": "list-style-position outside",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "lisp:o": true
        },
        "opts": {}
      },
      {
        "content": "list-style-type ${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "list": true
        },
        "opts": {}
      },
      {
        "content": "list-style-type circle",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "list:c": true
        },
        "opts": {}
      },
      {
        "content": "list-style-type decimal-leading-zero",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "list:dclz": true
        },
        "opts": {}
      },
      {
        "content": "list-style-type decimal",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "list:dc": true
        },
        "opts": {}
      },
      {
        "content": "list-style-type disc",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "list:d": true
        },
        "opts": {}
      },
      {
        "content": "list-style-type lower-roman",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "list:lr": true
        },
        "opts": {}
      },
      {
        "content": "list-style-type none",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "list:n": true
        },
        "opts": {}
      },
      {
        "content": "list-style-type square",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "list:s": true
        },
        "opts": {}
      },
      {
        "content": "list-style-type upper-roman",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "list:ur": true
        },
        "opts": {}
      },
      {
        "content": "list-style ${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "lis": true
        },
        "opts": {}
      },
      {
        "content": "list-style none",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "lis:n": true
        },
        "opts": {}
      },
      {
        "content": "margin-bottom ${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "mb": true
        },
        "opts": {}
      },
      {
        "content": "margin-bottom auto",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "mb:a": true
        },
        "opts": {}
      },
      {
        "content": "margin-left ${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ml": true
        },
        "opts": {}
      },
      {
        "content": "margin-left auto",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ml:a": true
        },
        "opts": {}
      },
      {
        "content": "margin-right ${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "mr": true
        },
        "opts": {}
      },
      {
        "content": "margin-right auto",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "mr:a": true
        },
        "opts": {}
      },
      {
        "content": "margin-top ${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "mt": true
        },
        "opts": {}
      },
      {
        "content": "margin-top auto",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "mt:a": true
        },
        "opts": {}
      },
      {
        "content": "margin ${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "m": true
        },
        "opts": {}
      },
      {
        "content": "margin ${1:0} ${2:0} ${3:0} ${0:0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "m:4": true
        },
        "opts": {}
      },
      {
        "content": "margin ${1:0} ${2:0} ${0:0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "m:3": true
        },
        "opts": {}
      },
      {
        "content": "margin ${1:0} ${0:0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "m:2": true
        },
        "opts": {}
      },
      {
        "content": "margin 0",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "m:0": true
        },
        "opts": {}
      },
      {
        "content": "margin auto",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "m:a": true
        },
        "opts": {}
      },
      {
        "content": "max-height ${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "mah": true
        },
        "opts": {}
      },
      {
        "content": "max-height none",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "mah:n": true
        },
        "opts": {}
      },
      {
        "content": "max-width ${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "maw": true
        },
        "opts": {}
      },
      {
        "content": "max-width none",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "maw:n": true
        },
        "opts": {}
      },
      {
        "content": "min-height ${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "mih": true
        },
        "opts": {}
      },
      {
        "content": "min-width ${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "miw": true
        },
        "opts": {}
      },
      {
        "content": "opacity ${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "op": true
        },
        "opts": {}
      },
      {
        "content": "filter progid:DXImageTransform.Microsoft.Alpha(Opacity=${0:100})",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "op:ie": true
        },
        "opts": {}
      },
      {
        "content": "-ms-filter 'progid:DXImageTransform.Microsoft.Alpha(Opacity=${0:100})'",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "op:ms": true
        },
        "opts": {}
      },
      {
        "content": "orphans ${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "orp": true
        },
        "opts": {}
      },
      {
        "content": "outline ${1:1px} ${2:solid} ${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "o+": true
        },
        "opts": {}
      },
      {
        "content": "outline-color ${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "oc": true
        },
        "opts": {}
      },
      {
        "content": "outline-color invert",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "oc:i": true
        },
        "opts": {}
      },
      {
        "content": "outline-offset ${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "oo": true
        },
        "opts": {}
      },
      {
        "content": "outline-style ${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "os": true
        },
        "opts": {}
      },
      {
        "content": "outline-width ${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ow": true
        },
        "opts": {}
      },
      {
        "content": "outline ${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "o": true
        },
        "opts": {}
      },
      {
        "content": "outline none",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "o:n": true
        },
        "opts": {}
      },
      {
        "content": "overflow-style ${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ovs": true
        },
        "opts": {}
      },
      {
        "content": "overflow-style auto",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ovs:a": true
        },
        "opts": {}
      },
      {
        "content": "overflow-style marquee",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ovs:mq": true
        },
        "opts": {}
      },
      {
        "content": "overflow-style move",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ovs:mv": true
        },
        "opts": {}
      },
      {
        "content": "overflow-style panner",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ovs:p": true
        },
        "opts": {}
      },
      {
        "content": "overflow-style scrollbar",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ovs:s": true
        },
        "opts": {}
      },
      {
        "content": "overflow-x ${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ovx": true
        },
        "opts": {}
      },
      {
        "content": "overflow-x auto",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ovx:a": true
        },
        "opts": {}
      },
      {
        "content": "overflow-x hidden",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ovx:h": true
        },
        "opts": {}
      },
      {
        "content": "overflow-x scroll",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ovx:s": true
        },
        "opts": {}
      },
      {
        "content": "overflow-x visible",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ovx:v": true
        },
        "opts": {}
      },
      {
        "content": "overflow-y ${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ovy": true
        },
        "opts": {}
      },
      {
        "content": "overflow-y auto",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ovy:a": true
        },
        "opts": {}
      },
      {
        "content": "overflow-y hidden",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ovy:h": true
        },
        "opts": {}
      },
      {
        "content": "overflow-y scroll",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ovy:s": true
        },
        "opts": {}
      },
      {
        "content": "overflow-y visible",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ovy:v": true
        },
        "opts": {}
      },
      {
        "content": "overflow ${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ov": true
        },
        "opts": {}
      },
      {
        "content": "overflow auto",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ov:a": true
        },
        "opts": {}
      },
      {
        "content": "overflow hidden",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ov:h": true
        },
        "opts": {}
      },
      {
        "content": "overflow scroll",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ov:s": true
        },
        "opts": {}
      },
      {
        "content": "overflow visible",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ov:v": true
        },
        "opts": {}
      },
      {
        "content": "padding-bottom ${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "pb": true
        },
        "opts": {}
      },
      {
        "content": "padding-left ${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "pl": true
        },
        "opts": {}
      },
      {
        "content": "padding-right ${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "pr": true
        },
        "opts": {}
      },
      {
        "content": "padding-top ${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "pt": true
        },
        "opts": {}
      },
      {
        "content": "padding ${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "p": true
        },
        "opts": {}
      },
      {
        "content": "padding ${1:0} ${2:0} ${3:0} ${0:0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "p:4": true
        },
        "opts": {}
      },
      {
        "content": "padding ${1:0} ${2:0} ${0:0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "p:3": true
        },
        "opts": {}
      },
      {
        "content": "padding ${1:0} ${0:0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "p:2": true
        },
        "opts": {}
      },
      {
        "content": "padding 0",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "p:0": true
        },
        "opts": {}
      },
      {
        "content": "place-content ${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "pc": true
        },
        "opts": {}
      },
      {
        "content": "place-content ${1} ${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "pc+": true
        },
        "opts": {}
      },
      {
        "content": "place-content start",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "pc:s": true
        },
        "opts": {}
      },
      {
        "content": "place-content end",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "pc:e": true
        },
        "opts": {}
      },
      {
        "content": "place-content center",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "pc:c": true
        },
        "opts": {}
      },
      {
        "content": "place-content flex-start",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "pc:fs": true
        },
        "opts": {}
      },
      {
        "content": "place-content flex-end",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "pc:fe": true
        },
        "opts": {}
      },
      {
        "content": "place-content space-between",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "pc:sb": true
        },
        "opts": {}
      },
      {
        "content": "place-content space-around",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "pc:sa": true
        },
        "opts": {}
      },
      {
        "content": "place-content space-evenly",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "pc:se": true
        },
        "opts": {}
      },
      {
        "content": "place-content stretch",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "pc:st": true
        },
        "opts": {}
      },
      {
        "content": "page-break-after ${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "pgba": true
        },
        "opts": {}
      },
      {
        "content": "page-break-after always",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "pgba:aw": true
        },
        "opts": {}
      },
      {
        "content": "page-break-after auto",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "pgba:a": true
        },
        "opts": {}
      },
      {
        "content": "page-break-after left",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "pgba:l": true
        },
        "opts": {}
      },
      {
        "content": "page-break-after right",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "pgba:r": true
        },
        "opts": {}
      },
      {
        "content": "page-break-before ${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "pgbb": true
        },
        "opts": {}
      },
      {
        "content": "page-break-before always",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "pgbb:aw": true
        },
        "opts": {}
      },
      {
        "content": "page-break-before auto",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "pgbb:a": true
        },
        "opts": {}
      },
      {
        "content": "page-break-before left",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "pgbb:l": true
        },
        "opts": {}
      },
      {
        "content": "page-break-before right",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "pgbb:r": true
        },
        "opts": {}
      },
      {
        "content": "page-break-inside ${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "pgbi": true
        },
        "opts": {}
      },
      {
        "content": "page-break-inside auto",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "pgbi:a": true
        },
        "opts": {}
      },
      {
        "content": "page-break-inside avoid",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "pgbi:av": true
        },
        "opts": {}
      },
      {
        "content": "place-items ${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "pi": true
        },
        "opts": {}
      },
      {
        "content": "place-items ${1:stretch} ${0:stretch}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "pi+": true
        },
        "opts": {}
      },
      {
        "content": "place-items start",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "pi:s": true
        },
        "opts": {}
      },
      {
        "content": "place-items end",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "pi:e": true
        },
        "opts": {}
      },
      {
        "content": "place-items center",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "pi:c": true
        },
        "opts": {}
      },
      {
        "content": "place-items stretch",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "pi:st": true
        },
        "opts": {}
      },
      {
        "content": "position ${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "pos": true
        },
        "opts": {}
      },
      {
        "content": "position absolute",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "pos:a": true
        },
        "opts": {}
      },
      {
        "content": "position fixed",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "pos:f": true
        },
        "opts": {}
      },
      {
        "content": "position relative",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "pos:r": true
        },
        "opts": {}
      },
      {
        "content": "position static",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "pos:s": true
        },
        "opts": {}
      },
      {
        "content": "place-self ${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ps": true
        },
        "opts": {}
      },
      {
        "content": "place-self ${1:stretch} ${0:stretch}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ps+": true
        },
        "opts": {}
      },
      {
        "content": "place-self start",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ps:s": true
        },
        "opts": {}
      },
      {
        "content": "place-self end",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ps:e": true
        },
        "opts": {}
      },
      {
        "content": "place-self center",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ps:c": true
        },
        "opts": {}
      },
      {
        "content": "place-self stretch",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ps:st": true
        },
        "opts": {}
      },
      {
        "content": "quotes ${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "q": true
        },
        "opts": {}
      },
      {
        "content": "quotes '\\201C' '\\201D' '\\2018' '\\2019'",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "q:en": true
        },
        "opts": {}
      },
      {
        "content": "quotes none",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "q:n": true
        },
        "opts": {}
      },
      {
        "content": "quotes '\\00AB' '\\00BB' '\\201E' '\\201C'",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "q:ru": true
        },
        "opts": {}
      },
      {
        "content": "resize ${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "rz": true
        },
        "opts": {}
      },
      {
        "content": "resize both",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "rz:b": true
        },
        "opts": {}
      },
      {
        "content": "resize horizontal",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "rz:h": true
        },
        "opts": {}
      },
      {
        "content": "resize none",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "rz:n": true
        },
        "opts": {}
      },
      {
        "content": "resize vertical",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "rz:v": true
        },
        "opts": {}
      },
      {
        "content": "right ${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "r": true
        },
        "opts": {}
      },
      {
        "content": "right auto",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "r:a": true
        },
        "opts": {}
      },
      {
        "content": "table-layout ${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "tbl": true
        },
        "opts": {}
      },
      {
        "content": "table-layout auto",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "tbl:a": true
        },
        "opts": {}
      },
      {
        "content": "table-layout fixed",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "tbl:f": true
        },
        "opts": {}
      },
      {
        "content": "text-align-last ${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "tal": true
        },
        "opts": {}
      },
      {
        "content": "text-align-last auto",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "tal:a": true
        },
        "opts": {}
      },
      {
        "content": "text-align-last center",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "tal:c": true
        },
        "opts": {}
      },
      {
        "content": "text-align-last left",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "tal:l": true
        },
        "opts": {}
      },
      {
        "content": "text-align-last right",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "tal:r": true
        },
        "opts": {}
      },
      {
        "content": "text-align ${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ta": true
        },
        "opts": {}
      },
      {
        "content": "text-align center",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ta:c": true
        },
        "opts": {}
      },
      {
        "content": "text-align left",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ta:l": true
        },
        "opts": {}
      },
      {
        "content": "text-align right",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ta:r": true
        },
        "opts": {}
      },
      {
        "content": "text-decoration ${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "td": true
        },
        "opts": {}
      },
      {
        "content": "text-decoration line-through",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "td:l": true
        },
        "opts": {}
      },
      {
        "content": "text-decoration none",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "td:n": true
        },
        "opts": {}
      },
      {
        "content": "text-decoration overline",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "td:o": true
        },
        "opts": {}
      },
      {
        "content": "text-decoration underline",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "td:u": true
        },
        "opts": {}
      },
      {
        "content": "text-emphasis ${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "te": true
        },
        "opts": {}
      },
      {
        "content": "text-emphasis accent",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "te:ac": true
        },
        "opts": {}
      },
      {
        "content": "text-emphasis after",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "te:a": true
        },
        "opts": {}
      },
      {
        "content": "text-emphasis before",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "te:b": true
        },
        "opts": {}
      },
      {
        "content": "text-emphasis circle",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "te:c": true
        },
        "opts": {}
      },
      {
        "content": "text-emphasis disc",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "te:ds": true
        },
        "opts": {}
      },
      {
        "content": "text-emphasis dot",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "te:dt": true
        },
        "opts": {}
      },
      {
        "content": "text-emphasis none",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "te:n": true
        },
        "opts": {}
      },
      {
        "content": "text-height ${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "th": true
        },
        "opts": {}
      },
      {
        "content": "text-height auto",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "th:a": true
        },
        "opts": {}
      },
      {
        "content": "text-height font-size",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "th:f": true
        },
        "opts": {}
      },
      {
        "content": "text-height max-size",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "th:m": true
        },
        "opts": {}
      },
      {
        "content": "text-height text-size",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "th:t": true
        },
        "opts": {}
      },
      {
        "content": "text-indent ${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ti": true
        },
        "opts": {}
      },
      {
        "content": "text-indent -9999px",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ti:-": true
        },
        "opts": {}
      },
      {
        "content": "text-justify ${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "tj": true
        },
        "opts": {}
      },
      {
        "content": "text-justify auto",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "tj:a": true
        },
        "opts": {}
      },
      {
        "content": "text-justify distribute",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "tj:d": true
        },
        "opts": {}
      },
      {
        "content": "text-justify inter-cluster",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "tj:ic": true
        },
        "opts": {}
      },
      {
        "content": "text-justify inter-ideograph",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "tj:ii": true
        },
        "opts": {}
      },
      {
        "content": "text-justify inter-word",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "tj:iw": true
        },
        "opts": {}
      },
      {
        "content": "text-justify kashida",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "tj:k": true
        },
        "opts": {}
      },
      {
        "content": "text-justify tibetan",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "tj:t": true
        },
        "opts": {}
      },
      {
        "content": "text-outline ${1:0} ${2:0} ${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "to+": true
        },
        "opts": {}
      },
      {
        "content": "text-outline ${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "to": true
        },
        "opts": {}
      },
      {
        "content": "text-outline none",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "to:n": true
        },
        "opts": {}
      },
      {
        "content": "text-replace ${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "tr": true
        },
        "opts": {}
      },
      {
        "content": "text-replace none",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "tr:n": true
        },
        "opts": {}
      },
      {
        "content": "text-shadow ${1:0} ${2:0} ${3:0} ${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "tsh+": true
        },
        "opts": {}
      },
      {
        "content": "text-shadow ${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "tsh": true
        },
        "opts": {}
      },
      {
        "content": "text-shadow none",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "tsh:n": true
        },
        "opts": {}
      },
      {
        "content": "text-transform ${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "tt": true
        },
        "opts": {}
      },
      {
        "content": "text-transform capitalize",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "tt:c": true
        },
        "opts": {}
      },
      {
        "content": "text-transform lowercase",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "tt:l": true
        },
        "opts": {}
      },
      {
        "content": "text-transform none",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "tt:n": true
        },
        "opts": {}
      },
      {
        "content": "text-transform uppercase",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "tt:u": true
        },
        "opts": {}
      },
      {
        "content": "text-wrap ${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "tw": true
        },
        "opts": {}
      },
      {
        "content": "text-wrap none",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "tw:no": true
        },
        "opts": {}
      },
      {
        "content": "text-wrap normal",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "tw:n": true
        },
        "opts": {}
      },
      {
        "content": "text-wrap suppress",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "tw:s": true
        },
        "opts": {}
      },
      {
        "content": "text-wrap unrestricted",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "tw:u": true
        },
        "opts": {}
      },
      {
        "content": "top ${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "t": true
        },
        "opts": {}
      },
      {
        "content": "top auto",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "t:a": true
        },
        "opts": {}
      },
      {
        "content": "vertical-align ${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "va": true
        },
        "opts": {}
      },
      {
        "content": "vertical-align baseline",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "va:bl": true
        },
        "opts": {}
      },
      {
        "content": "vertical-align bottom",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "va:b": true
        },
        "opts": {}
      },
      {
        "content": "vertical-align middle",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "va:m": true
        },
        "opts": {}
      },
      {
        "content": "vertical-align sub",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "va:sub": true
        },
        "opts": {}
      },
      {
        "content": "vertical-align super",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "va:sup": true
        },
        "opts": {}
      },
      {
        "content": "vertical-align text-bottom",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "va:tb": true
        },
        "opts": {}
      },
      {
        "content": "vertical-align text-top",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "va:tt": true
        },
        "opts": {}
      },
      {
        "content": "vertical-align top",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "va:t": true
        },
        "opts": {}
      },
      {
        "content": "visibility ${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "v": true
        },
        "opts": {}
      },
      {
        "content": "visibility collapse",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "v:c": true
        },
        "opts": {}
      },
      {
        "content": "visibility hidden",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "v:h": true
        },
        "opts": {}
      },
      {
        "content": "visibility visible",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "v:v": true
        },
        "opts": {}
      },
      {
        "content": "white-space-collapse ${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "whsc": true
        },
        "opts": {}
      },
      {
        "content": "white-space-collapse break-all",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "whsc:ba": true
        },
        "opts": {}
      },
      {
        "content": "white-space-collapse break-strict",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "whsc:bs": true
        },
        "opts": {}
      },
      {
        "content": "white-space-collapse keep-all",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "whsc:k": true
        },
        "opts": {}
      },
      {
        "content": "white-space-collapse loose",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "whsc:l": true
        },
        "opts": {}
      },
      {
        "content": "white-space-collapse normal",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "whsc:n": true
        },
        "opts": {}
      },
      {
        "content": "white-space ${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "whs": true
        },
        "opts": {}
      },
      {
        "content": "white-space normal",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "whs:n": true
        },
        "opts": {}
      },
      {
        "content": "white-space nowrap",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "whs:nw": true
        },
        "opts": {}
      },
      {
        "content": "white-space pre-line",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "whs:pl": true
        },
        "opts": {}
      },
      {
        "content": "white-space pre-wrap",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "whs:pw": true
        },
        "opts": {}
      },
      {
        "content": "white-space pre",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "whs:p": true
        },
        "opts": {}
      },
      {
        "content": "widows ${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "wid": true
        },
        "opts": {}
      },
      {
        "content": "width ${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "w": true
        },
        "opts": {}
      },
      {
        "content": "width auto",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "w:a": true
        },
        "opts": {}
      },
      {
        "content": "word-break ${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "wob": true
        },
        "opts": {}
      },
      {
        "content": "word-break break-all",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "wob:ba": true
        },
        "opts": {}
      },
      {
        "content": "word-break break-strict",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "wob:bs": true
        },
        "opts": {}
      },
      {
        "content": "word-break keep-all",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "wob:k": true
        },
        "opts": {}
      },
      {
        "content": "word-break loose",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "wob:l": true
        },
        "opts": {}
      },
      {
        "content": "word-break normal",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "wob:n": true
        },
        "opts": {}
      },
      {
        "content": "word-spacing ${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "wos": true
        },
        "opts": {}
      },
      {
        "content": "word-wrap ${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "wow": true
        },
        "opts": {}
      },
      {
        "content": "word-wrap none",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "wow:no": true
        },
        "opts": {}
      },
      {
        "content": "word-wrap normal",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "wow:n": true
        },
        "opts": {}
      },
      {
        "content": "word-wrap suppress",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "wow:s": true
        },
        "opts": {}
      },
      {
        "content": "word-wrap unrestricted",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "wow:u": true
        },
        "opts": {}
      },
      {
        "content": "z-index ${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "z": true
        },
        "opts": {}
      },
      {
        "content": "z-index auto",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "z:a": true
        },
        "opts": {}
      },
      {
        "content": "zoom 1",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "zoo": true
        },
        "opts": {}
      },
      {
        "content": ":hover",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          ":h": true
        },
        "opts": {}
      },
      {
        "content": ":first-child",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          ":fc": true
        },
        "opts": {}
      },
      {
        "content": ":last-child",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          ":lc": true
        },
        "opts": {}
      },
      {
        "content": ":nth-child(${0})",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          ":nc": true
        },
        "opts": {}
      },
      {
        "content": ":nth-last-child(${0})",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          ":nlc": true
        },
        "opts": {}
      },
      {
        "content": ":only-child",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          ":oc": true
        },
        "opts": {}
      },
      {
        "content": ":after",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          ":a": true
        },
        "opts": {}
      },
      {
        "content": ":before",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          ":b": true
        },
        "opts": {}
      },
      {
        "content": "::after",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "::a": true
        },
        "opts": {}
      },
      {
        "content": "::before",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "::b": true
        },
        "opts": {}
      },
      {
        "content": "if ${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "if": true
        },
        "opts": {}
      },
      {
        "content": "${1}(${0})",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "mix": true
        },
        "opts": {}
      },
      {
        "content": "for ${1:i} in ${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "for": true
        },
        "opts": {}
      },
      {
        "content": "@keyframes ${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "keyf": true
        },
        "opts": {}
      },
      {
        "content": "justify-content ${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "jc": true
        },
        "opts": {}
      },
      {
        "content": "justify-content start",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "jc:s": true
        },
        "opts": {}
      },
      {
        "content": "justify-content end",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "jc:e": true
        },
        "opts": {}
      },
      {
        "content": "justify-content center",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "jc:c": true
        },
        "opts": {}
      },
      {
        "content": "justify-content flex-start",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "jc:fs": true
        },
        "opts": {}
      },
      {
        "content": "justify-content flex-end",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "jc:fe": true
        },
        "opts": {}
      },
      {
        "content": "justify-content space-between",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "jc:sb": true
        },
        "opts": {}
      },
      {
        "content": "justify-content space-around",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "jc:sa": true
        },
        "opts": {}
      },
      {
        "content": "justify-content space-evenly",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "jc:se": true
        },
        "opts": {}
      },
      {
        "content": "justify-content space-evenly",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "jc:st": true
        },
        "opts": {}
      },
      {
        "content": "justify-content left",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "jc:l": true
        },
        "opts": {}
      },
      {
        "content": "justify-content right",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "jc:r": true
        },
        "opts": {}
      },
      {
        "content": "justify-items ${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ji": true
        },
        "opts": {}
      },
      {
        "content": "justify-items start",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ji:s": true
        },
        "opts": {}
      },
      {
        "content": "justify-items end",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ji:e": true
        },
        "opts": {}
      },
      {
        "content": "justify-items center",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ji:c": true
        },
        "opts": {}
      },
      {
        "content": "justify-items stretch",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ji:st": true
        },
        "opts": {}
      },
      {
        "content": "justify-self ${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "js": true
        },
        "opts": {}
      },
      {
        "content": "justify-self start",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "js:s": true
        },
        "opts": {}
      },
      {
        "content": "justify-self end",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "js:e": true
        },
        "opts": {}
      },
      {
        "content": "justify-self center",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "js:c": true
        },
        "opts": {}
      },
      {
        "content": "justify-self stretch",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "js:st": true
        },
        "opts": {}
      }
    ],
    "supercollider": [
      {
        "content": "(\n\t${0}\n)",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "b": true
        },
        "opts": {}
      },
      {
        "content": "if (${1}) {\n\t${0}\n}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "if": true
        },
        "opts": {}
      },
      {
        "content": "if (${1}) {\n\t${2}\n} {\n\t${0}\n}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ife": true
        },
        "opts": {}
      },
      {
        "content": "for (${1:1}, ${2:10}) { |i|\n\t${0}\n}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "for": true
        },
        "opts": {}
      },
      {
        "content": "SynthDef(\\\\${1:synthName}, {${2}\n\t${0}\n}).add;",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "sdef": true
        },
        "opts": {}
      },
      {
        "content": "for (${1:1}, ${2:10}) {${3: |i}|}\n\t$0\n}",
        "doc": null,
        "grammar": "snu",
        "label": null,
        "matches": {
          "for": true
        },
        "opts": {}
      },
      {
        "content": "SynthDef(\\\\${1:synthName}, {${2: |${3:x}|}\n\t$0\n}).add;",
        "doc": null,
        "grammar": "snu",
        "label": null,
        "matches": {
          "sdef": true
        },
        "opts": {}
      }
    ],
    "svelte": [
      {
        "content": "<script>\n\t${1:// your script goes here}\n</script>\n\n<style>\n\t${2:/* your styles go here */}\n</style>\n\n${3:<!-- markup (zero or more items) goes here -->}",
        "doc": null,
        "grammar": "lsp",
        "label": "svelte-component-format",
        "matches": {
          "svcomponent": true,
          "svelte component template": true
        },
        "opts": {}
      },
      {
        "content": "<script>\n\t${1:// your script goes here}\n</script>",
        "doc": null,
        "grammar": "lsp",
        "label": "svelte-script-tag",
        "matches": {
          "svelte script": true,
          "svscript": true
        },
        "opts": {}
      },
      {
        "content": "<script context=\"module\">\n\t${1:// your script goes here}\n</script>",
        "doc": "add a script with context=\"module\" to your svelte file",
        "grammar": "lsp",
        "label": "svelte-script-context",
        "matches": {
          "svelte script context": true,
          "svscriptc": true
        },
        "opts": {}
      },
      {
        "content": "<style>\n\t${1:/* your styles go here */}\n</style>",
        "doc": "add styles to your svelte file",
        "grammar": "lsp",
        "label": "svelte-style-tag",
        "matches": {
          "svelte style": true,
          "svstyle": true
        },
        "opts": {}
      },
      {
        "content": "{${1:expression}}",
        "doc": null,
        "grammar": "lsp",
        "label": "svelte-expression",
        "matches": {
          "svelte expression": true,
          "svexp": true
        },
        "opts": {}
      },
      {
        "content": "{@html ${1:expression}}",
        "doc": null,
        "grammar": "lsp",
        "label": "svelte-expression-html",
        "matches": {
          "svelte expression html": true,
          "svexphtml": true
        },
        "opts": {}
      },
      {
        "content": "{@debug ${1:var1}${2:,var2}}",
        "doc": null,
        "grammar": "lsp",
        "label": "svelte-expression-debug",
        "matches": {
          "svelte expression debug": true,
          "svexpdebug": true
        },
        "opts": {}
      },
      {
        "content": "{#if ${1:condition}}\n\t${2: <!-- content here -->}\n{/if}",
        "doc": "if block",
        "grammar": "lsp",
        "label": "svelte-if-block",
        "matches": {
          "svelte if-block": true,
          "svif": true
        },
        "opts": {}
      },
      {
        "content": "{#if ${1:condition}}\n\t${2: <!-- content here -->}\n{:else}\n\t${3: <!-- else content here -->}\n{/if}",
        "doc": null,
        "grammar": "lsp",
        "label": "svelte-if-else-block",
        "matches": {
          "svelte if else": true,
          "svif-else": true
        },
        "opts": {}
      },
      {
        "content": "{:else}\n\t${1: <!-- else content here -->}",
        "doc": null,
        "grammar": "lsp",
        "label": "svelte-else-block",
        "matches": {
          "svelse": true,
          "svelte else": true
        },
        "opts": {}
      },
      {
        "content": "{#if ${1:condition}}\n\t${2: <!-- content here -->}\n{:else if ${3: otherCondition}}\n\t${4: <!-- else if content here -->}\n{:else}\n\t${5: <!-- else content here -->}\n{/if}",
        "doc": null,
        "grammar": "lsp",
        "label": "svelte-if-else-if-block",
        "matches": {
          "svelte if else if": true,
          "svif-else-if": true
        },
        "opts": {}
      },
      {
        "content": "{:else if ${1: otherCondition}}\n\t${2: <!-- else if content here -->}",
        "doc": null,
        "grammar": "lsp",
        "label": "svelte-else-if-block",
        "matches": {
          "svelse-if": true,
          "svelte else if": true
        },
        "opts": {}
      },
      {
        "content": "{#each ${1:items} as ${2:item}}\n\t${3: <!-- content here -->}\n{/each}",
        "doc": "each block",
        "grammar": "lsp",
        "label": "svelte-each-block",
        "matches": {
          "sveach": true,
          "svelte each": true
        },
        "opts": {}
      },
      {
        "content": "{#each ${1:items} as ${2:item}}\n\t${3: <!-- content here -->}\n{:else}\n\t${4: <!-- empty list -->}\n{/each}",
        "doc": null,
        "grammar": "lsp",
        "label": "svelte-each-else-block",
        "matches": {
          "sveach-else": true,
          "svelte each else": true
        },
        "opts": {}
      },
      {
        "content": "{#each ${1:items} as ${2:item}, ${3:i}}\n\t${4: <!-- content here -->}\n{/each}",
        "doc": null,
        "grammar": "lsp",
        "label": "svelte-each-index-block",
        "matches": {
          "sveach-index": true,
          "svelte each index": true
        },
        "opts": {}
      },
      {
        "content": "{#each ${1:items} as ${2:item}, (${3:key})}\n\t${4: <!-- content here -->}\n{/each}",
        "doc": null,
        "grammar": "lsp",
        "label": "svelte-each-key-block",
        "matches": {
          "sveach-key": true,
          "svelte each key": true
        },
        "opts": {}
      },
      {
        "content": "{#each ${1:items} as ${2:item}, i (${3:key})}\n\t${4: <!-- content here -->}\n{/each}",
        "doc": null,
        "grammar": "lsp",
        "label": "svelte-each-index-key-block",
        "matches": {
          "sveach-i-k": true,
          "svelte each index key": true
        },
        "opts": {}
      },
      {
        "content": "{#await ${1:promise}}\n\t${2: <!-- content when promise is pending -->}\n{:then ${3:value}}\n\t${4: <!-- content when promise was fulfilled -->}\n{/await}",
        "doc": null,
        "grammar": "lsp",
        "label": "svelte-await-then-block",
        "matches": {
          "svawait": true,
          "svelte await then": true
        },
        "opts": {}
      },
      {
        "content": "{:then ${1:value}}\n\t${2: <!-- content when promise was fulfilled -->}",
        "doc": null,
        "grammar": "lsp",
        "label": "svelte-then-block",
        "matches": {
          "svelte then": true,
          "svthen": true
        },
        "opts": {}
      },
      {
        "content": "{#await ${1:promise} then ${2:value}}\n\t${3: <!-- content when promise was fulfilled -->}\n{/await}",
        "doc": null,
        "grammar": "lsp",
        "label": "svelte-await-short-block",
        "matches": {
          "svawait-short": true,
          "svelte await short": true
        },
        "opts": {}
      },
      {
        "content": "{#await ${1:promise}}\n\t${2: <!-- content when promise is pending -->}\n{:then ${3:value}}\n\t${4: <!-- content when promise was fulfilled -->}\n{:catch error}\n\t${5: <!-- content when promise was rejected -->}\n{/await}",
        "doc": null,
        "grammar": "lsp",
        "label": "svelte-await-catch-block",
        "matches": {
          "svawait-catch": true,
          "svelte await catch": true
        },
        "opts": {}
      },
      {
        "content": "{:catch error}\n\t<!-- promise was rejected -->",
        "doc": null,
        "grammar": "lsp",
        "label": "svelte-catch-block",
        "matches": {
          "svcatch": true,
          "svelte catch": true
        },
        "opts": {}
      },
      {
        "content": "on:${1:eventname}={${2:handler}}",
        "doc": "on event",
        "grammar": "lsp",
        "label": "svelte-on-event",
        "matches": {
          "svelte on event": true,
          "svon": true
        },
        "opts": {}
      },
      {
        "content": "on:${1:eventname}",
        "doc": null,
        "grammar": "lsp",
        "label": "svelte-on-event-forward",
        "matches": {
          "svelte on event foward": true,
          "svon-foward": true
        },
        "opts": {}
      },
      {
        "content": "on:${1:eventname}|${2|preventDefault,stopPropagation,passive,capture,once|}={${3:handler}}",
        "doc": null,
        "grammar": "lsp",
        "label": "svelte-on-event-modifiers",
        "matches": {
          "svelte on event modifiers": true,
          "svon-modifiers": true
        },
        "opts": {}
      },
      {
        "content": "on:${1:click}=\"{() => ${2:count += 1}}\"",
        "doc": null,
        "grammar": "lsp",
        "label": "svelte-on-event-inline",
        "matches": {
          "svelte on event inline": true,
          "svon-inline": true
        },
        "opts": {}
      },
      {
        "content": "|${1|preventDefault,stopPropagation,passive,capture,once|}",
        "doc": null,
        "grammar": "lsp",
        "label": "svelte-modifiers",
        "matches": {
          "svelte modifier": true,
          "svmodifier": true
        },
        "opts": {}
      },
      {
        "content": "bind:${1:property}",
        "doc": null,
        "grammar": "lsp",
        "label": "svelte-bind",
        "matches": {
          "svbind-simple": true,
          "svelte bind": true
        },
        "opts": {}
      },
      {
        "content": "bind:${1:property}={${2:variable}}",
        "doc": null,
        "grammar": "lsp",
        "label": "svelte-bind-property",
        "matches": {
          "svbind-property": true,
          "svelte bind property": true
        },
        "opts": {}
      },
      {
        "content": "<video\nsrc={${1:clip}}\nbind:${2:duration}\nbind:${3:buffered}\nbind:${4:seekable}\nbind:${5:played}\nbind:${6:currentTime}\nbind:${7:paused}\nbind:${8:volume}\n></video>",
        "doc": null,
        "grammar": "lsp",
        "label": "svelte-bind-video",
        "matches": {
          "svbind-video": true,
          "svelte bind video": true
        },
        "opts": {}
      },
      {
        "content": "bind:${1|clientWidth,clientHeight,offsetWidth,offsetHeight|}={${2:variable}}",
        "doc": null,
        "grammar": "lsp",
        "label": "svelte-bind-block-level",
        "matches": {
          "svbind-level": true,
          "svelte bind level": true
        },
        "opts": {}
      },
      {
        "content": "bind:group={${1:variable}}",
        "doc": null,
        "grammar": "lsp",
        "label": "svelte-bind-group",
        "matches": {
          "svbind-group": true,
          "svelte bind group": true
        },
        "opts": {}
      },
      {
        "content": "bind:this={${1:dom_node}}",
        "doc": null,
        "grammar": "lsp",
        "label": "svelte-bind-this",
        "matches": {
          "svbind-this": true,
          "svelte bind this": true
        },
        "opts": {}
      },
      {
        "content": "class:${1:name}={${2:condition}}",
        "doc": null,
        "grammar": "lsp",
        "label": "svelte-class",
        "matches": {
          "svcl": true,
          "svelte class": true
        },
        "opts": {}
      },
      {
        "content": "class:${1:name}}",
        "doc": null,
        "grammar": "lsp",
        "label": "svelte-class-short",
        "matches": {
          "svcls": true,
          "svelte class short": true
        },
        "opts": {}
      },
      {
        "content": "use:action",
        "doc": null,
        "grammar": "lsp",
        "label": "svelte-use",
        "matches": {
          "svelte use": true,
          "svu": true
        },
        "opts": {}
      },
      {
        "content": "use:action={${1:parameters}}",
        "doc": null,
        "grammar": "lsp",
        "label": "svelte-use-parameters",
        "matches": {
          "svelte use parameters": true,
          "svupar": true
        },
        "opts": {}
      },
      {
        "content": "${1|transition,in,out|}:${2:name}",
        "doc": null,
        "grammar": "lsp",
        "label": "svelte-transition",
        "matches": {
          "svelte transition": true,
          "svt": true
        },
        "opts": {}
      },
      {
        "content": "${1|transition,in,out|}:${2:name}={${3:params}}",
        "doc": null,
        "grammar": "lsp",
        "label": "svelte-transition-params",
        "matches": {
          "svelte transition params": true,
          "svtp": true
        },
        "opts": {}
      },
      {
        "content": "on:${1|introstart,introend,outrostart,outroend|}=\"{() => status = '${1|introstart,introend,outrostart,outroend|}'}\"",
        "doc": null,
        "grammar": "lsp",
        "label": "svelte-transition-events",
        "matches": {
          "svelte transition events": true,
          "svte": true
        },
        "opts": {}
      },
      {
        "content": "${1|transition,in,out|}:${2:name}|${3:local}",
        "doc": null,
        "grammar": "lsp",
        "label": "svelte-transition-local",
        "matches": {
          "svelte transition local": true,
          "svtl": true
        },
        "opts": {}
      },
      {
        "content": "${1|transition,in,out|}:${2:name}|${3:local}={${4:params}}",
        "doc": null,
        "grammar": "lsp",
        "label": "svelte-transition-all",
        "matches": {
          "svelte transition all": true,
          "svta": true
        },
        "opts": {}
      },
      {
        "content": "animate:${1:name}={${2:params}}",
        "doc": null,
        "grammar": "lsp",
        "label": "svelte-animate",
        "matches": {
          "sva": true,
          "svelte animate": true
        },
        "opts": {}
      },
      {
        "content": "<slot>${1:<!-- optional fallback -->}</slot>",
        "doc": null,
        "grammar": "lsp",
        "label": "svelte-slot",
        "matches": {
          "svelte slot": true,
          "svsl": true
        },
        "opts": {}
      },
      {
        "content": "<slot name=\"${1:x}\">${2:<!-- optional fallback -->}</slot>",
        "doc": null,
        "grammar": "lsp",
        "label": "svelte-slot-name",
        "matches": {
          "svelte slot name": true,
          "svsn": true
        },
        "opts": {}
      },
      {
        "content": "<slot ${1:prop}={${2:value}}>${3:<!-- optional fallback -->}</slot>",
        "doc": null,
        "grammar": "lsp",
        "label": "svelte-slot-prop",
        "matches": {
          "svelte slot prop": true,
          "svsp": true
        },
        "opts": {}
      },
      {
        "content": "<svelte:self />",
        "doc": null,
        "grammar": "lsp",
        "label": "svelte-self",
        "matches": {
          "svelte self": true,
          "svse": true
        },
        "opts": {}
      },
      {
        "content": "<svelte:self ${1:prop}={${2:value}} />",
        "doc": null,
        "grammar": "lsp",
        "label": "svelte-self-prop",
        "matches": {
          "svelte self prop": true,
          "svsep": true
        },
        "opts": {}
      },
      {
        "content": "<svelte:component this={${1:component}} />",
        "doc": null,
        "grammar": "lsp",
        "label": "svelte-component",
        "matches": {
          "svc": true,
          "svelte component": true
        },
        "opts": {}
      },
      {
        "content": "<svelte:window />",
        "doc": null,
        "grammar": "lsp",
        "label": "svelte-window",
        "matches": {
          "svelte window": true,
          "svw": true
        },
        "opts": {}
      },
      {
        "content": "bind:${1|innerWidth,innerHeight,outerWidth,outerHeight,scrollX,scrollY,online|}={${2:variable}}",
        "doc": null,
        "grammar": "lsp",
        "label": "svelte-window-bind",
        "matches": {
          "svelte window bind": true,
          "svwb": true
        },
        "opts": {}
      },
      {
        "content": "<svelte:body />",
        "doc": null,
        "grammar": "lsp",
        "label": "svelte-body",
        "matches": {
          "svb": true,
          "svelte body": true
        },
        "opts": {}
      },
      {
        "content": "<svelte:head>\n\t${1:<!-- head content -->}\n</svelte:head>",
        "doc": null,
        "grammar": "lsp",
        "label": "svelte-head",
        "matches": {
          "svelte head": true,
          "svh": true
        },
        "opts": {}
      },
      {
        "content": "<svelte:options ${1|immutable,accessors,namespace,tag|}={${2:value}}/>",
        "doc": null,
        "grammar": "lsp",
        "label": "svelte-options",
        "matches": {
          "svelte options": true,
          "svop": true
        },
        "opts": {}
      },
      {
        "content": "const component = new ${1:App}({\n\ttarget: ${2|target,document.body|},\n\tprops: ${3:props},\n\tanchor: ${4:anchor},\n\thydrate: ${5|false,true|},\n\tintro: ${5|false,true|}\n})",
        "doc": null,
        "grammar": "lsp",
        "label": "svelte-create-component",
        "matches": {
          "svcreate-component": true,
          "svelte create component": true
        },
        "opts": {}
      },
      {
        "content": "function ${1:foo}(node) {\n\t// the node has been mounted in the DOM\n\treturn {\n\t\tdestroy() {\n\t\t\t// the node has been removed from the DOM\n\t\t}\n\t};\n}",
        "doc": null,
        "grammar": "lsp",
        "label": "svelte-action",
        "matches": {
          "svaction": true,
          "svelte action": true
        },
        "opts": {}
      },
      {
        "content": "function ${1:foo}(node, ${2:parameters}) {\n\t// the node has been mounted in the DOM\n\treturn {\n\t\tdestroy() {\n\t\t\t// the node has been removed from the DOM\n\t\t}\n\t};\n}",
        "doc": null,
        "grammar": "lsp",
        "label": "svelte-action-parameters",
        "matches": {
          "svactionp": true,
          "svelte action parameters": true
        },
        "opts": {}
      },
      {
        "content": "function ${1:foo}(node, ${2:parameters}) {\n\t// the node has been mounted in the DOM\n\treturn {\n\t\tupdate(${2:parameters}) {\n\t\t\t// the value of `${2:parameters}` has changed\n\t\t}\n\t\tdestroy() {\n\t\t\t// the node has been removed from the DOM\n\t\t}\n\t};\n}",
        "doc": null,
        "grammar": "lsp",
        "label": "svelte-action-update",
        "matches": {
          "svactionu": true,
          "svelte action update": true
        },
        "opts": {}
      },
      {
        "content": "onMount(() => {\n\t${1:// content here}\n});",
        "doc": null,
        "grammar": "lsp",
        "label": "svelte-on-mount",
        "matches": {
          "svelte lifecycle mount": true,
          "svlfm": true
        },
        "opts": {}
      },
      {
        "content": "beforeUpdate(() => {\n\t${1:// content here}\n});",
        "doc": null,
        "grammar": "lsp",
        "label": "svelte-before-update",
        "matches": {
          "svelte lifecycle before update": true,
          "svlfbu": true
        },
        "opts": {}
      },
      {
        "content": "afterUpdate(() => {\n\t${1:// content here}\n});",
        "doc": null,
        "grammar": "lsp",
        "label": "svelte-after-update",
        "matches": {
          "svelte lifecycle-after-update": true,
          "svlfap": true
        },
        "opts": {}
      },
      {
        "content": "onDestroy(() => {\n\t${1:// content here}\n});",
        "doc": null,
        "grammar": "lsp",
        "label": "svelte-on-destroy",
        "matches": {
          "svelte lifecycle destroy": true,
          "svlfd": true
        },
        "opts": {}
      },
      {
        "content": "await tick()",
        "doc": null,
        "grammar": "lsp",
        "label": "svelte-tick",
        "matches": {
          "sv-tick": true,
          "svelte tick": true
        },
        "opts": {}
      },
      {
        "content": "setContext(${1:key}, ${2:context})",
        "doc": null,
        "grammar": "lsp",
        "label": "svelte-set-context",
        "matches": {
          "sv-content": true,
          "svelte set content": true
        },
        "opts": {}
      },
      {
        "content": "getContext(${1:key})",
        "doc": null,
        "grammar": "lsp",
        "label": "svelte-get-context",
        "matches": {
          "svelte get content": true,
          "svgetc": true
        },
        "opts": {}
      },
      {
        "content": "const dispatch = createEventDispatcher();",
        "doc": null,
        "grammar": "lsp",
        "label": "svelte-dispatch",
        "matches": {
          "svdp": true,
          "svelte dispatch": true
        },
        "opts": {}
      },
      {
        "content": "dispatch(${1:key},${2:data})",
        "doc": null,
        "grammar": "lsp",
        "label": "svelte-dispatch-event",
        "matches": {
          "svdpe": true,
          "svelte dispatch event": true
        },
        "opts": {}
      },
      {
        "content": "const ${1:store} = writable(${2:initialValue});",
        "doc": null,
        "grammar": "lsp",
        "label": "svelte-writeable",
        "matches": {
          "svelte writeable": true,
          "svw": true
        },
        "opts": {}
      },
      {
        "content": "const ${1:store} = writable(${2:initialValue}, () => {\n\t${3:console.log('got a subscriber');}\n\treturn () => ${4:console.log('no more subscribers');}\n});",
        "doc": null,
        "grammar": "lsp",
        "label": "svelte-writeable-set",
        "matches": {
          "svelte writeable set": true,
          "svwt": true
        },
        "opts": {}
      },
      {
        "content": "const ${1:store} = readable(${2:initialValue}, () => {\n\t${3:console.log('got a subscriber');}\n\treturn () => ${4:console.log('no more subscribers');}\n});",
        "doc": null,
        "grammar": "lsp",
        "label": "svelte-readable",
        "matches": {
          "svelte readable": true,
          "svr": true
        },
        "opts": {}
      },
      {
        "content": "const ${1:value} = get(${2:store});",
        "doc": null,
        "grammar": "lsp",
        "label": "svelte-store-get",
        "matches": {
          "svelte store-get-value": true,
          "svstoregm": true
        },
        "opts": {}
      },
      {
        "content": "${1:component}.$set(${2: params});",
        "doc": null,
        "grammar": "lsp",
        "label": "svelte-component-set",
        "matches": {
          "svcoms": true,
          "svelte component set": true
        },
        "opts": {}
      },
      {
        "content": "${1:component}.$on(${2:eventname}, ${3:handler});",
        "doc": null,
        "grammar": "lsp",
        "label": "svelte-component-on",
        "matches": {
          "svcomon": true,
          "svelte component on": true
        },
        "opts": {}
      },
      {
        "content": "${1:component}.$destroy();",
        "doc": null,
        "grammar": "lsp",
        "label": "svelte-component-destroy",
        "matches": {
          "svcomd": true,
          "svelte component destroy": true
        },
        "opts": {}
      },
      {
        "content": "const { head, html, css } = ${1:App}.render({\n\tprops: ${3:props},\n})",
        "doc": null,
        "grammar": "lsp",
        "label": "svelte-render-component",
        "matches": {
          "svelte render component": true,
          "svrcom": true
        },
        "opts": {}
      },
      {
        "content": "const ${1:store} = tweened(${2:value}, ${3:options});",
        "doc": null,
        "grammar": "lsp",
        "label": "svelte-tweened",
        "matches": {
          "svelte tweened": true,
          "svtw": true
        },
        "opts": {}
      },
      {
        "content": "const ${1:store} = spring(${2:value}, ${3:options});",
        "doc": null,
        "grammar": "lsp",
        "label": "svelte-spring",
        "matches": {
          "svelte spring": true,
          "svsp": true
        },
        "opts": {}
      },
      {
        "content": "require('svelte/register');\nconst ${1:App} = require('${2:./App.svelte}').default;",
        "doc": null,
        "grammar": "lsp",
        "label": "svelte-register",
        "matches": {
          "svelte register": true,
          "svreg": true
        },
        "opts": {}
      },
      {
        "content": "import { Route, Router } from 'svelte-routing'",
        "doc": null,
        "grammar": "lsp",
        "label": "svelte-routing-import",
        "matches": {
          "svelte import routing": true,
          "svroute": true
        },
        "opts": {}
      },
      {
        "content": ":global(${1:body}) {\n\t/* this will apply to <body> */\n\t${2:/* your styles go here */}\n}",
        "doc": null,
        "grammar": "lsp",
        "label": "svelte-global-style",
        "matches": {
          "svelte global style": true,
          "svsglobal": true
        },
        "opts": {}
      }
    ],
    "swift": [
      {
        "content": "struct ${1:name} {\n    ${0:TARGET}\n}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "struct": true
        },
        "opts": {
          "word": true
        }
      },
      {
        "content": "class ${1:name} {\n    ${0:TARGET}\n}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "class": true
        },
        "opts": {
          "word": true
        }
      },
      {
        "content": "enum ${1:name} {\n    ${0:TARGET}\n}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "enum": true
        },
        "opts": {
          "word": true
        }
      },
      {
        "content": "case ${1:pattern}${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "case": true
        },
        "opts": {
          "head": true
        }
      },
      {
        "content": "protocol ${1:name} {\n    ${0:TARGET}\n}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "protocol": true
        },
        "opts": {
          "word": true
        }
      },
      {
        "content": "var ${1:name}: ${2:Int}${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "var": true
        },
        "opts": {
          "word": true
        }
      },
      {
        "content": "let ${1:name}: ${2:Int}${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "let": true
        },
        "opts": {
          "word": true
        }
      },
      {
        "content": "extension ${1:Int} {\n    ${0:TARGET}\n}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "extension": true
        },
        "opts": {}
      },
      {
        "content": "func ${1:name}(${2:#:arguments}) -> ${3:Int}${0}",
        "doc": "",
        "grammar": "snu",
        "label": "func name(...) -> Type { ... }",
        "matches": {
          "func": true
        },
        "opts": {
          "word": true
        }
      },
      {
        "content": "func ${1:name}(${2:#:arguments})${0}",
        "doc": "",
        "grammar": "snu",
        "label": "func name(...) { ... }",
        "matches": {
          "void": true
        },
        "opts": {
          "word": true
        }
      },
      {
        "content": "for var ${1:i = 0}; ${2:i < j}; ${3:i++} {\n    ${0:TARGET}\n}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "for": true
        },
        "opts": {
          "head": true
        }
      },
      {
        "content": "for ${1:item} in ${2:collection} {\n    ${0:TARGET}\n}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "iter": true
        },
        "opts": {
          "head": true
        }
      },
      {
        "content": "while ${1:false} {\n    ${0:TARGET}\n}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "while": true
        },
        "opts": {
          "head": true
        }
      },
      {
        "content": "repeat {\n    ${0:TARGET}\n} while ${1:false}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "repeat": true
        },
        "opts": {
          "head": true
        }
      },
      {
        "content": "if ${1:false} {\n    ${0:TARGET}\n}${9}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "if": true
        },
        "opts": {
          "word": true
        }
      },
      {
        "content": "else if ${1:false} {\n    ${0:TARGET}\n}${9}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "elif": true
        },
        "opts": {
          "word": true
        }
      },
      {
        "content": "else {\n    ${0:TARGET}\n}${9}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "else": true
        },
        "opts": {
          "word": true
        }
      },
      {
        "content": "if ${1:let} ${2:name} = ${3:expression} else {\n    ${0:TARGET}\n}${9}",
        "doc": "",
        "grammar": "snu",
        "label": "if let/case ... { ... }",
        "matches": {
          "optional": true
        },
        "opts": {
          "head": true
        }
      },
      {
        "content": "guard let ${1} = ${2} else {\n    ${0:TARGET}\n}\n${9}",
        "doc": "",
        "grammar": "snu",
        "label": "guard let ... else { ... }",
        "matches": {
          "guard": true
        },
        "opts": {
          "head": true
        }
      },
      {
        "content": "switch ${1:expression} {\n    ${0:TARGET}\n}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "switch": true
        },
        "opts": {
          "head": true
        }
      },
      {
        "content": "do {\n    ${0:TARGET}\n}${9}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "do": true
        },
        "opts": {
          "head": true
        }
      },
      {
        "content": "catch${1:#:pattern} {\n    ${0:TARGET}\n}${9}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "catch": true
        },
        "opts": {
          "word": true
        }
      },
      {
        "content": "defer {\n    ${0:TARGET}\n}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "defer": true
        },
        "opts": {
          "head": true
        }
      },
      {
        "content": "import ${1:module}\n${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "import": true
        },
        "opts": {}
      },
      {
        "content": "subscript(${1:index: Int}) -> ${2:Int} {\n    ${0:TARGET}\n}\n${9}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "subscript": true
        },
        "opts": {
          "word": true
        }
      },
      {
        "content": "init${1:#:?}(${2:#:arguments}) {\n    ${0:TARGET}\n}\n${9}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "init": true
        },
        "opts": {
          "word": true
        }
      },
      {
        "content": "deinit {\n    ${0:TARGET}\n}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "deinit": true
        },
        "opts": {
          "head": true
        }
      },
      {
        "content": "{ ${1:#capture}(${2:#:arguments}) -> ${3:Void} in\n    ${0:TARGET}\n}\n${9}",
        "doc": "",
        "grammar": "snu",
        "label": "{ (...) -> Type in ... }",
        "matches": {
          "closure": true
        },
        "opts": {
          "word": true
        }
      }
    ],
    "systemverilog": [
      {
        "content": "always_comb begin\n    ${1:TARGET}\nend",
        "doc": "",
        "grammar": "snu",
        "label": "always_comb",
        "matches": {
          "alc": true
        },
        "opts": {}
      },
      {
        "content": "always @(posedge ${1:clk} iff !${2:rst} or posedge $2) begin\n    if (${2}) begin\n        ${3:TARGET}\n    end else begin\n    end\nend",
        "doc": "",
        "grammar": "snu",
        "label": "always_ff @()",
        "matches": {
          "alf": true
        },
        "opts": {}
      },
      {
        "content": "always_latch begin\n    if (${1:enable}) begin\n        ${2:TARGET}\n    end\nend",
        "doc": "",
        "grammar": "snu",
        "label": "always_latch",
        "matches": {
          "all": true
        },
        "opts": {}
      },
      {
        "content": "logic${1:#: nbit} ${2:reg}_r, $2_w;${3:TARGET}",
        "doc": "",
        "grammar": "snu",
        "label": "logic [] _r, _w;",
        "matches": {
          "rw": true
        },
        "opts": {}
      },
      {
        "content": "typedef struct packed {\n    ${2:TARGET}\n} ${1:name} ;",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "struct": true
        },
        "opts": {}
      },
      {
        "content": "typedef enum {${2:TARGET}} ${1:name};",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "enum": true
        },
        "opts": {}
      },
      {
        "content": "for (int ${1:i} = ${2}; $1 < ${3}; ${4:do what}) begin\n    ${5:TARGET}\nend",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "for": true
        },
        "opts": {}
      },
      {
        "content": "unique case (${1}) begin\n    ${2:'b0}: begin\n        ${3}\n    end\nend",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "case_parallel": true
        },
        "opts": {}
      },
      {
        "content": "priority case (${1}) begin\n    ${2:'b0}: begin\n        ${3}\n    end\nend",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "case_full": true
        },
        "opts": {}
      },
      {
        "content": "foreach (${1}) begin\n\t${0}\nend",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "forea": true
        },
        "opts": {}
      },
      {
        "content": "do begin\n\t${0}\nend while (${1});",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "dowh": true
        },
        "opts": {}
      },
      {
        "content": "always_comb begin ${1:: statement_label}\n\t${0}\nend $1",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "alc": true
        },
        "opts": {}
      },
      {
        "content": "always_ff @(posedge ${1:clk}) begin ${2:: statement_label}\n\t${0}\nend $2",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "alff": true
        },
        "opts": {}
      },
      {
        "content": "always_latch begin ${1:: statement_label}\n\t${0}\nend $1",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "all": true
        },
        "opts": {}
      },
      {
        "content": "class ${1:class_name};\n\t// data or class properties\n\t${0}\n\t// initialization\n\tfunction new();\n\tendfunction : new\nendclass : $1",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "cl": true
        },
        "opts": {}
      },
      {
        "content": "typedef struct {\n\t${0}\n} ${1:name_t};",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "types": true
        },
        "opts": {}
      },
      {
        "content": "program ${1:program_name} ();\n\t${0}\nendprogram : $1",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "prog": true
        },
        "opts": {}
      },
      {
        "content": "interface ${1:program_name} ();\n\t// nets\n\t${0}\n\t// clocking\n\t// modports\nendinterface : $1",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "intf": true
        },
        "opts": {}
      },
      {
        "content": "clocking ${1:clocking_name} @(${2:posedge} ${3:clk});\n\t${0}\nendclocking : $1",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "clock": true
        },
        "opts": {}
      },
      {
        "content": "covergroup ${1:group_name} @(${2:posedge} ${3:clk});\n\t${0}\nendgroup : $1",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "cg": true
        },
        "opts": {}
      },
      {
        "content": "package ${1:package_name};\n\t${0}\nendpackage : $1",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "pkg": true
        },
        "opts": {}
      }
    ],
    "tcl": [
      {
        "content": "#!/usr/bin/env tclsh",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "#!": true
        },
        "opts": {}
      },
      {
        "content": "proc ${1:function_name} {${2:args}} {\n\t${0}\n}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "pro": true
        },
        "opts": {}
      },
      {
        "content": "${1:expr}? ${2:true} : ${0:false}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "xif": true
        },
        "opts": {}
      },
      {
        "content": "if {${1}} {\n\t${0}\n}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "if": true
        },
        "opts": {}
      },
      {
        "content": "if {${1}} {\n\t${2}\n} else {\n\t${0:# else...}\n}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ife": true
        },
        "opts": {}
      },
      {
        "content": "elseif {${1}} {\n\t${0}\n}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "eif": true
        },
        "opts": {}
      },
      {
        "content": "if {${1}} {\n\t${2}\n} elseif {${3}} {\n\t${4:# elsif...}\n} else {\n\t${0:# else...}\n}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ifee": true
        },
        "opts": {}
      },
      {
        "content": "if { [catch {${1:#do something...}} ${2:err}] } {\n\t${0:# handle failure...}\n}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ifc": true
        },
        "opts": {}
      },
      {
        "content": "catch {${1}} ${2:err} ${0:options}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "catch": true
        },
        "opts": {}
      },
      {
        "content": "while {${1}} {\n\t${0}\n}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "wh": true
        },
        "opts": {}
      },
      {
        "content": "for {set ${2:var} 0} {$$2 < ${1:count}} {${3:incr} $2} {\n\t${0}\n}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "for": true
        },
        "opts": {}
      },
      {
        "content": "foreach ${1:x} {${2:#list}} {\n\t${0}\n}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "fore": true
        },
        "opts": {}
      },
      {
        "content": "after ${1:ms} ${0:#do something}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "af": true
        },
        "opts": {}
      },
      {
        "content": "after cancel ${0:id or script}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "afc": true
        },
        "opts": {}
      },
      {
        "content": "after idle ${0:script}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "afi": true
        },
        "opts": {}
      },
      {
        "content": "after info ${0:id}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "afin": true
        },
        "opts": {}
      },
      {
        "content": "expr {${0:#expression here}}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "exp": true
        },
        "opts": {}
      },
      {
        "content": "switch ${1:var} {\n\t${3:pattern 1} {\n\t\t${0:#do something}\n\t}\n\tdefault {\n\t\t${2:#do something}\n\t}\n}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "sw": true
        },
        "opts": {}
      },
      {
        "content": "${1:pattern} {\n\t${2:#do something}\n}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ca": true
        },
        "opts": {}
      },
      {
        "content": "namespace eval ${1:path} {${0:#script...}}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ns": true
        },
        "opts": {}
      },
      {
        "content": "namespace current",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "nsc": true
        },
        "opts": {}
      },
      {
        "content": "for {${1:set i 0}} {${2:\\$i < \\$n}} {${3:incr i}} {\n\t$4\n}\n",
        "doc": null,
        "grammar": "snu",
        "label": "for... (for)",
        "matches": {
          "for": true
        },
        "opts": {
          "b": true
        }
      },
      {
        "content": "foreach ${1:var} ${2:\\$list} {\n\t$3\n}\n",
        "doc": null,
        "grammar": "snu",
        "label": "foreach... (foreach)",
        "matches": {
          "foreach": true
        },
        "opts": {}
      },
      {
        "content": "if {${1:condition}} {\n\t$2\n}\n",
        "doc": null,
        "grammar": "snu",
        "label": "if... (if)",
        "matches": {
          "if": true
        },
        "opts": {
          "b": true
        }
      },
      {
        "content": "proc ${1:name} {${2:args}} \\\n{\n\t$3\n}\n",
        "doc": null,
        "grammar": "snu",
        "label": "proc... (proc)",
        "matches": {
          "proc": true
        },
        "opts": {
          "b": true
        }
      },
      {
        "content": "switch ${1:-exact} -- ${2:\\$var} {\n\t${3:match} {\n\t\t$4\n\t}\n\tdefault {$5}\n}\n",
        "doc": null,
        "grammar": "snu",
        "label": "switch... (switch)",
        "matches": {
          "switch": true
        },
        "opts": {
          "b": true
        }
      },
      {
        "content": "while {${1:condition}} {\n\t$2\n}\n",
        "doc": null,
        "grammar": "snu",
        "label": "while... (while)",
        "matches": {
          "while": true
        },
        "opts": {
          "b": true
        }
      }
    ],
    "tex": [
      {
        "content": "\\documentclass[${1}]{${2:article}}${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "\\documentclass": true,
          "documentclass": true
        },
        "opts": {}
      },
      {
        "content": "$${1:#:expression}$${2}",
        "doc": "",
        "grammar": "snu",
        "label": "$ expression $",
        "matches": {
          "$": true,
          "mathexpression": true
        },
        "opts": {}
      },
      {
        "content": "$$${1:#:expression}$$${2}",
        "doc": "",
        "grammar": "snu",
        "label": "$$ expression $$",
        "matches": {
          "$$": true,
          "mathenva": true
        },
        "opts": {}
      },
      {
        "content": "\\[${1:#:expression}\\]${2}",
        "doc": "",
        "grammar": "snu",
        "label": "\\[ expression \\]",
        "matches": {
          "\\[": true,
          "mathenvb": true
        },
        "opts": {}
      },
      {
        "content": "\\begin{${1:#:type}}\n\t${2:TARGET}\n\\end{$1}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "\\begin": true,
          "begin": true
        },
        "opts": {}
      },
      {
        "content": "\\begin{list}\n\t${1:TARGET}\n\\end{list}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "\\begin{list} \\list": true,
          "list": true
        },
        "opts": {}
      },
      {
        "content": "\\begin{quotation}\n\t${1:TARGET}\n\\end{quotation}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "\\begin{quotation} \\quotation": true,
          "quotation": true
        },
        "opts": {}
      },
      {
        "content": "\\begin{description}\n\t\\item[${1}] ${0}\n\\end{description}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "\\begin{description} \\description desc": true,
          "description": true
        },
        "opts": {}
      },
      {
        "content": "\\item[${1}] ${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "itd": true,
          "item[ \\item[": true
        },
        "opts": {}
      },
      {
        "content": "\\item ${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "it": true,
          "item \\item": true
        },
        "opts": {}
      },
      {
        "content": "\\begin{sloppypar}\n\t${1:TARGET}\n\\end{sloppypar}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "\\begin{sloppypar} \\sloppypar": true,
          "sloppypar": true
        },
        "opts": {}
      },
      {
        "content": "\\begin{enumerate}\n\t\\item ${1:TARGET}\n\\end{enumerate}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "\\begin{enumerate} \\enumerate enum": true,
          "enumerate": true
        },
        "opts": {}
      },
      {
        "content": "\\begin{theindex}\n\t${1:TARGET}\n\\end{theindex}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "\\begin{theindex} \\theindex": true,
          "theindex": true
        },
        "opts": {}
      },
      {
        "content": "\\begin{itemize}\n\t\\item ${1:TARGET}\n\\end{itemize}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "\\begin{itemize} \\itemize": true,
          "itemize": true
        },
        "opts": {}
      },
      {
        "content": "\\begin{titlepage}\n\t${1:TARGET}\n\\end{titlepage}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "\\begin{titlepage} \\titlepage": true,
          "titlepage": true
        },
        "opts": {}
      },
      {
        "content": "\\begin{verbatim}\n\t${1:TARGET}\n\\end{verbatim}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "\\begin{verbatim} verb \\verbatim": true,
          "verbatim": true
        },
        "opts": {}
      },
      {
        "content": "\\begin{verbatimtab}[${1:8}]\n\t${2:TARGET}\n\\end{verbatim}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "\\begin{verbatimtab} \\verbatimtab": true,
          "verbatimtab": true
        },
        "opts": {}
      },
      {
        "content": "\\begin{trivlist}\n\t${1:TARGET}\n\\end{trivlist}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "\\begin{trivlist} \\trivlist": true,
          "trivlist": true
        },
        "opts": {}
      },
      {
        "content": "\\begin{verse}\n\t${1:TARGET}\n\\end{verse}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "\\begin{verse} \\verse": true,
          "verse": true
        },
        "opts": {}
      },
      {
        "content": "\\begin{table}[${1}]\n\t\\centering\n\t\\caption{${2}}\n\t\\label{${3}}\n\t\\begin{tabular}{${4}}\n\t\t${5}\n\t\\end{tabular}\n\\end{table}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "\\begin{table} \\table": true,
          "table": true
        },
        "opts": {}
      },
      {
        "content": "\\begin{thebibliography}\n\t${1:TARGET}\n\\end{thebibliography}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "\\begin{thebibliography} \\thebibliography": true,
          "thebibliography": true
        },
        "opts": {}
      },
      {
        "content": "\\begin{tabbing}\n\t${1:TARGET}\n\\end{tabbing}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "\\begin{tabbing} \\tabbing": true,
          "tabbing": true
        },
        "opts": {}
      },
      {
        "content": "\\begin{note}\n\t${1:TARGET}\n\\end{note}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "\\begin{note} \\note": true,
          "note": true
        },
        "opts": {}
      },
      {
        "content": "\\begin{tabular}{${1}}\n\t${2:TARGET}\n\\end{tabular}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "\\begin{tabular} \\tabular": true,
          "tabular": true
        },
        "opts": {}
      },
      {
        "content": "\\begin{overlay}\n\t${1:TARGET}\n\\end{overlay}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "\\begin{overlay} \\overlay": true,
          "overlay": true
        },
        "opts": {}
      },
      {
        "content": "\\begin{array}{${1}}\n\t${2:TARGET}\n\\end{array}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "\\begin{array} \\array": true,
          "array": true
        },
        "opts": {}
      },
      {
        "content": "\\begin{cases}{${1}}\n\t${2:TARGET}\n\\end{cases}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "\\begin{cases} \\cases": true,
          "cases": true
        },
        "opts": {}
      },
      {
        "content": "\\begin{slide}\n\t${1:TARGET}\n\\end{slide}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "\\begin{slide} \\slide": true,
          "slide": true
        },
        "opts": {}
      },
      {
        "content": "\\begin{displaymath}\n\t${1:TARGET}\n\\end{displaymath}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "\\begin{displaymath} \\displaymath": true,
          "displaymath": true
        },
        "opts": {}
      },
      {
        "content": "\\begin{abstract}\n\t${1:TARGET}\n\\end{abstract}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "\\begin{abstract} \\abstract": true,
          "abstract": true
        },
        "opts": {}
      },
      {
        "content": "\\begin{align}\n\t${1:TARGET}\n\\end{align}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "\\begin{align} \\align": true,
          "align": true
        },
        "opts": {}
      },
      {
        "content": "\\begin{align*}\n\t${1:TARGET}\n\\end{align*}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "\\begin{align*} \\align*": true,
          "align*": true
        },
        "opts": {}
      },
      {
        "content": "\\begin{aligned}\n        ${1:TARGET}\n\\end{aligned}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "\\begin{aligned} \\aligned": true,
          "aligned": true
        },
        "opts": {}
      },
      {
        "content": "\\begin{eqnarray}\n\t${1:TARGET}\n\\end{eqnarray}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "\\begin{eqnarray} \\eqnarray": true,
          "eqnarray": true
        },
        "opts": {}
      },
      {
        "content": "\\begin{eqnarray*}\n\t${1:TARGET}\n\\end{eqnarray*}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "\\begin{eqnarray*} \\eqnarray*": true,
          "eqnarray*": true
        },
        "opts": {}
      },
      {
        "content": "\\begin{equation}\n\t${1:TARGET}\n\\end{equation}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "\\begin{equation} \\equation": true,
          "equation": true
        },
        "opts": {}
      },
      {
        "content": "\\begin{equation*}\n\t${1:TARGET}\n\\end{equation*}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "\\begin{equation*} \\equation*": true,
          "equation*": true
        },
        "opts": {}
      },
      {
        "content": "\\begin{center}\n\t${1:TARGET}\n\\end{center}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "\\begin{center} \\center": true,
          "center": true
        },
        "opts": {}
      },
      {
        "content": "\\begin{document}\n\t${1:TARGET}\n\\end{document}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "\\begin{document} \\document": true,
          "document": true
        },
        "opts": {}
      },
      {
        "content": "\\begin{filecontents}\n\t${1:TARGET}\n\\end{filecontents}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "\\begin{filecontents} \\filecontents": true,
          "filecontents": true
        },
        "opts": {}
      },
      {
        "content": "\\begin{lrbox}\n\t${1:TARGET}\n\\end{lrbox}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "\\begin{lrbox} \\lrbox": true,
          "lrbox": true
        },
        "opts": {}
      },
      {
        "content": "\\begin{flushleft}\n\t${1:TARGET}\n\\end{flushleft}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "\\begin{flushleft} \\flushleft": true,
          "flushleft": true
        },
        "opts": {}
      },
      {
        "content": "\\begin{flushright}\n\t${1:TARGET}\n\\end{flushright}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "\\begin{flushright} \\flushright": true,
          "flushright": true
        },
        "opts": {}
      },
      {
        "content": "\\begin{minipage}{${1:0.45}\\linewidth}\n\t${2:TARGET}\n\\end{minipage}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "\\begin{minipage} \\minipage": true,
          "minipage": true
        },
        "opts": {}
      },
      {
        "content": "\\begin{picture}\n\t${1:TARGET}\n\\end{picture}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "\\begin{picture} \\picture": true,
          "picture": true
        },
        "opts": {}
      },
      {
        "content": "\\begin{math}\n\t${1:TARGET}\n\\end{math}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "\\begin{math} \\math": true,
          "math": true
        },
        "opts": {}
      },
      {
        "content": "\\begin{quote}\n\t${1:TARGET}\n\\end{quote}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "\\begin{quote} \\quote": true,
          "quote": true
        },
        "opts": {}
      },
      {
        "content": "\\begin{matrix}\n\t${1:TARGET}\n\\end{matrix}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "\\begin{matrix} \\matrix": true,
          "matrix": true
        },
        "opts": {}
      },
      {
        "content": "\\begin{bmatrix}\n\t${1:TARGET}\n\\end{bmatrix}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "\\begin{bmatrix} \\bmatrix": true,
          "bmatrix": true
        },
        "opts": {}
      },
      {
        "content": "\\begin{pmatrix}\n\t${1:TARGET}\n\\end{pmatrix}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "\\pegin{bmatrix} \\pmatrix": true,
          "pmatrix": true
        },
        "opts": {}
      },
      {
        "content": "\\begin{vmatrix}\n\t${1:TARGET}\n\\end{vmatrix}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "\\begin{vmatrix} \\vmatrix": true,
          "vmatrix": true
        },
        "opts": {}
      },
      {
        "content": "\\begin{Bmatrix}\n\t${1:TARGET}\n\\end{Bmatrix}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "Bmatrix": true,
          "\\begin{Bmatrix} \\Bmatrix": true
        },
        "opts": {}
      },
      {
        "content": "\\begin{Vmatrix}\n\t${1:TARGET}\n\\end{Vmatrix}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "Vmatrix": true,
          "\\begin{Vmatrix} \\Vmatrix": true
        },
        "opts": {}
      },
      {
        "content": "\\part{${1}}\n${0:TARGET}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "\\part": true,
          "part \\part{": true
        },
        "opts": {}
      },
      {
        "content": "\\chapter{${1}}\n${0:TARGET}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "\\chapter": true,
          "chapter \\chapter{": true
        },
        "opts": {}
      },
      {
        "content": "\\section{${1}}\n${0:TARGET}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "\\section": true,
          "section \\section{": true
        },
        "opts": {}
      },
      {
        "content": "\\subsection{${1}}\n${0:TARGET}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "\\subsection": true,
          "subsection \\subsection{": true
        },
        "opts": {}
      },
      {
        "content": "\\subsubsection{${1}}\n${0:TARGET}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "\\subsubsection": true,
          "subsubsection \\subsubsection{": true
        },
        "opts": {}
      },
      {
        "content": "\\paragraph{${1}}\n${0:TARGET}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "\\paragraph": true,
          "paragraph \\paragraph{": true
        },
        "opts": {}
      },
      {
        "content": "\\subparagraph{${1}}\n${0:TARGET}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "\\subparagraph": true,
          "subparagraph \\subparagraph{": true
        },
        "opts": {}
      },
      {
        "content": "\\frac{${1}}{${2}}${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "\\frac": true,
          "frac \\frac{": true
        },
        "opts": {}
      },
      {
        "content": "\\left${1:(} ${3:#:body} \\right${2:)}${0}",
        "doc": "",
        "grammar": "snu",
        "label": "\\left \\right",
        "matches": {
          "\\left": true,
          "left": true
        },
        "opts": {}
      },
      {
        "content": "\\begin{bfseries}\n\t${1:TARGET}\n\\end{bfseries}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "\\begin{bfseries} \\bfseries": true,
          "bfseries": true
        },
        "opts": {}
      },
      {
        "content": "\\begin{mdseries}\n\t${1:TARGET}\n\\end{mdseries}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "\\begin{mdseries} \\mdseries": true,
          "mdseries": true
        },
        "opts": {}
      },
      {
        "content": "\\begin{ttfamily}\n\t${1:TARGET}\n\\end{ttfamily}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "\\begin{ttfamily} \\ttfamily": true,
          "ttfamily": true
        },
        "opts": {}
      },
      {
        "content": "\\begin{sffamily}\n\t${1:TARGET}\n\\end{sffamily}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "\\begin{sffamily} \\sffamily": true,
          "sffamily": true
        },
        "opts": {}
      },
      {
        "content": "\\begin{rmfamily}\n\t${1:TARGET}\n\\end{rmfamily}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "\\begin{rmfamily} \\rmfamily": true,
          "rmfamily": true
        },
        "opts": {}
      },
      {
        "content": "\\begin{upshape}\n\t${1:TARGET}\n\\end{upshape}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "\\begin{upshape} \\upshape": true,
          "upshape": true
        },
        "opts": {}
      },
      {
        "content": "\\begin{slshape}\n\t${1:TARGET}\n\\end{slshape}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "\\begin{slshape} \\slshape": true,
          "slshape": true
        },
        "opts": {}
      },
      {
        "content": "\\begin{scshape}\n\t${1:TARGET}\n\\end{scshape}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "\\begin{scshape} \\scshape": true,
          "scshape": true
        },
        "opts": {}
      },
      {
        "content": "\\begin{itshape}\n\t${1:TARGET}\n\\end{itshape}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "\\begin{itshape} \\itshape": true,
          "itshape": true
        },
        "opts": {}
      },
      {
        "content": "\\textbf{${1:TARGET}}${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "\\textbf": true,
          "textbf \\textbf{": true
        },
        "opts": {}
      },
      {
        "content": "\\textmd{${1:TARGET}}${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "\\textmd": true,
          "textmd \\textmd{": true
        },
        "opts": {}
      },
      {
        "content": "\\texttt{${1:TARGET}}${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "\\texttt": true,
          "texttt \\texttt{": true
        },
        "opts": {}
      },
      {
        "content": "\\textsf{${1:TARGET}}${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "\\textsf": true,
          "textsf \\textsf{": true
        },
        "opts": {}
      },
      {
        "content": "\\textrm{${1:TARGET}}${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "\\textrm": true,
          "textrm \\textrm{": true
        },
        "opts": {}
      },
      {
        "content": "\\textup{${1:TARGET}}${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "\\textup": true,
          "textup \\textup{": true
        },
        "opts": {}
      },
      {
        "content": "\\textsl{${1:TARGET}}${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "\\textsl": true,
          "textsl \\textsl{": true
        },
        "opts": {}
      },
      {
        "content": "\\textsc{${1:TARGET}}${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "\\textsc": true,
          "textsc \\textsc{": true
        },
        "opts": {}
      },
      {
        "content": "\\textit{${1:TARGET}}${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "\\textit": true,
          "textit \\textit{": true
        },
        "opts": {}
      },
      {
        "content": "\\begin{frame}{${1:#:frametitle}}\n\t${2:TARGET}\n\\end{frame}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "\\begin{frame} \\frame": true,
          "frame": true
        },
        "opts": {}
      },
      {
        "content": "\\begin{block}{${1:#:title}}\n\t${2:TARGET}\n\\end{block}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "\\begin{block}": true,
          "block": true
        },
        "opts": {}
      },
      {
        "content": "\\begin{exampleblock}{${1:#:title}}\n\t${2:TARGET}\n\\end{exampleblock}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "\\begin{exampleblock}": true,
          "exampleblock": true
        },
        "opts": {}
      },
      {
        "content": "\\begin{alertblock}{${1:#:title}}\n\t${2:TARGET}\n\\end{alertblock}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "\\begin{alertblock}": true,
          "alertblock": true
        },
        "opts": {}
      },
      {
        "content": "\\begin{columns}\n\t\\begin{column}{${1:#:width}${2:\\\\\\textwidth}}\n\t\t${0:#:body}\n\t\\end{column}\n\\end{columns}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "\\begin{columns} \\columns": true,
          "columns": true
        },
        "opts": {}
      },
      {
        "content": "\\begin{column}{${1:#:width}${2:\\\\\\textwidth}}\n\t${0:#:body}\n\\end{column}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "\\begin{column} \\column": true,
          "column": true
        },
        "opts": {}
      },
      {
        "content": "\\begin{figure}[${1}]\n\t\\centering\n\t\\begin{tikzpicture}[${2}]\n\t\t${3:TARGET}\n\t\\end{tikzpicture}\n\t\\caption{${4}}\n\t\\label{${5}}\n\\end{figure}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "figuretikz": true,
          "tikzfig": true
        },
        "opts": {}
      },
      {
        "content": "\\begin{tikzpicture}[${1}]\n\t${2:TARGET}\n\\end{tikzpicture}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "\\begin{tikzpicture}": true,
          "tikzpicture": true
        },
        "opts": {}
      },
      {
        "content": "\\begin{scope}[${1}]\n\t${2:TARGET}\n\\end{scope}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "\\begin{scope}": true,
          "scope": true
        },
        "opts": {}
      },
      {
        "content": "\\path[${1}] ${2};${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "\\path": true,
          "path": true
        },
        "opts": {}
      },
      {
        "content": "\\draw[${1}] ${2};${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "\\draw": true,
          "draw": true
        },
        "opts": {}
      },
      {
        "content": "\\fill[${1}] ${2};${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "\\fill": true,
          "fill": true
        },
        "opts": {}
      },
      {
        "content": "\\filldraw[${1}] ${2};${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "\\filldraw": true,
          "filldraw": true
        },
        "opts": {}
      },
      {
        "content": "\\shade[${1}] ${2};${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "\\shade": true,
          "shade": true
        },
        "opts": {}
      },
      {
        "content": "\\coordinate[${1}](${2:name}) ${3};${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "\\coordinate": true,
          "coordinate": true
        },
        "opts": {}
      },
      {
        "content": "\\node[${1}](${2:name}) ${3};${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "\\node": true,
          "node": true
        },
        "opts": {}
      },
      {
        "content": "\\addbibresource{${1:resource}}${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "\\addbibresource": true,
          "addbibresource": true
        },
        "opts": {}
      },
      {
        "content": "\\cite{${1}}${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "\\cite": true,
          "cite": true
        },
        "opts": {}
      },
      {
        "content": "\\nocite{${1}}${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "\\nocite": true,
          "nocite": true
        },
        "opts": {}
      },
      {
        "content": "\\supercite{${1}}${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "\\supercite": true,
          "supercite": true
        },
        "opts": {}
      },
      {
        "content": "\\autocite{${1}}${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "\\autocite": true,
          "autocite": true
        },
        "opts": {}
      },
      {
        "content": "\\fullcite{${1}}${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "\\fullcite": true,
          "fullcite": true
        },
        "opts": {}
      },
      {
        "content": "\\ref{${1}}${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "\\ref": true,
          "ref": true
        },
        "opts": {}
      },
      {
        "content": "\\label{${1}}${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "\\label": true,
          "label": true
        },
        "opts": {}
      },
      {
        "content": "\\\\documentclass{${1:class}} ${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "dcl \\documentclass{}": true
        },
        "opts": {}
      },
      {
        "content": "\\\\documentclass[${1:options}]{${2:class}} ${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "dclo \\documentclass[]{}": true
        },
        "opts": {}
      },
      {
        "content": "\\\\newcommand{\\\\${1:cmd}}[${2:opt}]{${3:realcmd}} ${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "nc \\newcommand": true
        },
        "opts": {}
      },
      {
        "content": "\\\\usepackage[${1:options}]{${2:package}} ${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "up \\usepackage": true
        },
        "opts": {}
      },
      {
        "content": "\\\\newunicodechar{${1}}{${2:\\\\ensuremath}${3:tex-substitute}}} ${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "nuc \\newunicodechar": true
        },
        "opts": {}
      },
      {
        "content": "\\\\DeclareMathOperator{${1}}{${2}} ${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "dmo \\DeclareMathOperator": true
        },
        "opts": {}
      },
      {
        "content": "\\\\begin{${1:env}}\n\t${0:${VISUAL}}\n\\\\end{$1}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "begin \\begin{} ... \\end{} block": true
        },
        "opts": {}
      },
      {
        "content": "\\\\maketitle",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "mkt maketitle": true
        },
        "opts": {}
      },
      {
        "content": "\\\\begin{${1:tabular}}{${2:c}}\n\t${0:${VISUAL}}\n\\\\end{$1}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "tab tabular (or arbitrary) environment": true
        },
        "opts": {}
      },
      {
        "content": "\\\\begin[${1:author}]{${2:thm}}\n\t${0:${VISUAL}}\n\\\\end{$2}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "thm thm (or arbitrary) environment with optional argument": true
        },
        "opts": {}
      },
      {
        "content": "\\\\begin{center}\n\t${0:${VISUAL}}\n\\\\end{center}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "center center environment": true
        },
        "opts": {}
      },
      {
        "content": "\\\\begin{align${1:ed}}\n\t\\\\label{eq:${2}}\n\t${0:${VISUAL}}\n\\\\end{align$1}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ali align(ed) environment": true
        },
        "opts": {}
      },
      {
        "content": "\\\\begin{gather${1:ed}}\n\t${0:${VISUAL}}\n\\\\end{gather$1}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "gat gather(ed) environment": true
        },
        "opts": {}
      },
      {
        "content": "\\\\begin{equation}\n\t${0:${VISUAL}}\n\\\\end{equation}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "eq equation environment": true
        },
        "opts": {}
      },
      {
        "content": "\\\\begin{equation}\n\t\\\\label{eq:${2}}\n${0:${VISUAL}}\n\\\\end{equation}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "eql Labeled equation environment": true
        },
        "opts": {}
      },
      {
        "content": "\\\\begin{equation*}\n\t${0:${VISUAL}}\n\\\\end{equation*}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "eq* unnumbered equation environment": true
        },
        "opts": {}
      },
      {
        "content": "\\\\[\n\t${0:${VISUAL}}\n\\\\]",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "\\ unnumbered equation: \\[ ... \\]": true
        },
        "opts": {}
      },
      {
        "content": "\\\\begin{eqnarray}\n\t${0:${VISUAL}}\n\\\\end{eqnarray}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "eqnarray eqnarray environment": true
        },
        "opts": {}
      },
      {
        "content": "\\\\label{${1:eq:}${2:fig:}${3:tab:}${0}}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "lab \\label": true
        },
        "opts": {}
      },
      {
        "content": "\\\\begin{enumerate}\n\t\\\\item ${0}\n\\\\end{enumerate}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "enum enumerate environment": true
        },
        "opts": {}
      },
      {
        "content": "\\\\begin{enumerate}[(a)]\n\t\\\\item ${0}\n\\\\end{enumerate}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "enuma enumerate environment": true
        },
        "opts": {}
      },
      {
        "content": "\\\\begin{enumerate}[(i)]\n\t\\\\item ${0}\n\\\\end{enumerate}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "enumi enumerate environment": true
        },
        "opts": {}
      },
      {
        "content": "\\\\begin{itemize}\n\t\\\\item ${0}\n\\\\end{itemize}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "item itemize environment": true
        },
        "opts": {}
      },
      {
        "content": "\\\\item ${1:${VISUAL}}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "it \\item": true
        },
        "opts": {}
      },
      {
        "content": "\\\\begin{description}\n\t\\\\item[${1}] ${0}\n\\\\end{description}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "desc description environment": true
        },
        "opts": {}
      },
      {
        "content": "\\\\item ${1}\n\t${0:]i}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "]i \\item (recursive)": true
        },
        "opts": {}
      },
      {
        "content": "\\\\begin{${1:p/b/v/V/B/small}matrix}\n\t${0:${VISUAL}}\n\\\\end{$1matrix}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "mat smart matrix environment": true
        },
        "opts": {}
      },
      {
        "content": "\\\\begin{cases}\n\t${1:equation}, &\\\\text{ if }${2:case}\\\\\n\t${0:${VISUAL}}\n\\\\end{cases}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "cas cases environment": true
        },
        "opts": {}
      },
      {
        "content": "\\\\begin{split}\n\t${0:${VISUAL}}\n\\\\end{split}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "spl split environment": true
        },
        "opts": {}
      },
      {
        "content": "\\\\part{${1:part name}} % (fold)%\n\\\\label{prt:${2:$1}}\n${0}\n% part $2 (end)",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "part document \\part": true
        },
        "opts": {}
      },
      {
        "content": "\\\\chapter{${1:chapter name}}%\n\\\\label{cha:${2:$1}}\n${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "cha \\chapter": true
        },
        "opts": {}
      },
      {
        "content": "\\\\section{${1:section name}}%\n\\\\label{sec:${2:$1}}\n${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "sec \\section": true
        },
        "opts": {}
      },
      {
        "content": "\\\\section*{${1:section name}}%\n\\\\label{sec:${2:$1}}\n${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "sec* \\section*": true
        },
        "opts": {}
      },
      {
        "content": "\\\\subsection{${1:subsection name}}%\n\\\\label{sub:${2:$1}}\n${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "sub \\subsection": true
        },
        "opts": {}
      },
      {
        "content": "\\\\subsection*{${1:subsection name}}%\n\\\\label{sub:${2:$1}}\n${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "sub* \\subsection*": true
        },
        "opts": {}
      },
      {
        "content": "\\\\subsubsection{${1:subsubsection name}}%\n\\\\label{ssub:${2:$1}}\n${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ssub \\subsubsection": true
        },
        "opts": {}
      },
      {
        "content": "\\\\subsubsection*{${1:subsubsection name}}%\n\\\\label{ssub:${2:$1}}\n${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ssub* \\subsubsection*": true
        },
        "opts": {}
      },
      {
        "content": "\\\\paragraph{${1:paragraph name}}%\n\\\\label{par:${2:$1}}\n${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "par \\paragraph": true
        },
        "opts": {}
      },
      {
        "content": "\\\\subparagraph{${1:subparagraph name}}%\n\\\\label{subp:${2:$1}}\n${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "subp \\subparagraph": true
        },
        "opts": {}
      },
      {
        "content": "\\\\noindent\n${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ni \\noindent": true
        },
        "opts": {}
      },
      {
        "content": "\\\\item[${1:description}] ${0:item}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "itd description \\item": true
        },
        "opts": {}
      },
      {
        "content": "${1:Figure}~\\\\ref{${2:fig:}}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "figure reference to a figure": true
        },
        "opts": {}
      },
      {
        "content": "${1:Table}~\\\\ref{${2:tab:}}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "table reference to a table": true
        },
        "opts": {}
      },
      {
        "content": "${1:Listing}~\\\\ref{${2:list}}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "listing reference to a listing": true
        },
        "opts": {}
      },
      {
        "content": "${1:Section}~\\\\ref{sec:${2}} ${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "section reference to a section": true
        },
        "opts": {}
      },
      {
        "content": "${1:page}~\\\\pageref{${2}} ${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "page reference to a page": true
        },
        "opts": {}
      },
      {
        "content": "\\\\index{${1:index}} ${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "index \\index": true
        },
        "opts": {}
      },
      {
        "content": "\\\\citen{${1}} ${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "citen \\citen": true
        },
        "opts": {}
      },
      {
        "content": "\\\\citep{${1}} ${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "citep \\citep": true
        },
        "opts": {}
      },
      {
        "content": "\\\\citet{${1}} ${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "citet \\citet": true
        },
        "opts": {}
      },
      {
        "content": "\\\\cite[${1}]{${2}} ${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "cite \\cite[]{}": true
        },
        "opts": {}
      },
      {
        "content": "\\\\citeauthor{${1}} ${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "citea \\citeauthor": true
        },
        "opts": {}
      },
      {
        "content": "\\\\citeyear{${1}} ${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "citey \\citeyear": true
        },
        "opts": {}
      },
      {
        "content": "\\\\footcite[${1}]{${2}}${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "fcite \\footcite[]{}": true
        },
        "opts": {}
      },
      {
        "content": "\\\\begin{figure}\n\\\\begin{center}\n\t\\\\includegraphics[scale=${1}]{Figures/${2}}\n\\\\end{center}\n\\\\caption{${3}}\n\\\\label{fig:${4}}\n\\\\end{figure}\n${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "fig figure environment (includegraphics)": true
        },
        "opts": {}
      },
      {
        "content": "\\\\begin{figure}[htpb]\n\\\\begin{center}\n\\\\begin{tikzpicture}[scale=${1:1}, transform shape]\n\t${2}\n\\\\end{tikzpicture}\n\\\\end{center}\n\\\\caption{${3}}%\n\\\\label{fig:${4}}\n\\\\end{figure}\n${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "tikz figure environment (tikzpicture)": true
        },
        "opts": {}
      },
      {
        "content": "\\\\begin{subfigure}[${1}]{${2:\\\\textwidth}}\n\\\\begin{center}\n\t${3}\n\\\\end{center}\n\\\\caption{${4}}\n\\\\label{fig:${5}}\n\\\\end{subfigure}\n${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "subfig subfigure environment": true
        },
        "opts": {}
      },
      {
        "content": "\\\\begin{equation}\n\\\\begin{tikzcd}\n\t${1}\n\\\\end{tikzcd}\n\\\\end{equation}\n${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "tikzcd tikzcd environment in equation": true
        },
        "opts": {}
      },
      {
        "content": "\\\\begin{equation*}\n\\\\begin{tikzcd}\n\t${1}\n\\\\end{tikzcd}\n\\\\end{equation*}\n${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "tikzcd* tikzcd environment in equation*": true
        },
        "opts": {}
      },
      {
        "content": "\\\\stackrel{${1:above}}{${2:below}} ${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "stackrel \\stackrel{}{}": true
        },
        "opts": {}
      },
      {
        "content": "\\\\frac{${1:num}}{${2:denom}} ${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "frac \\frac{}{}": true
        },
        "opts": {}
      },
      {
        "content": "\\\\sum^{${1:n}}_{${2:i=1}} ${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "sum \\sum^{}_{}": true
        },
        "opts": {}
      },
      {
        "content": "\\\\lim_{${1:n \\\\to \\\\infty}} ${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "lim \\lim_{}": true
        },
        "opts": {}
      },
      {
        "content": "\\\\begin{frame}[${1:t}]\n\t\\frametitle{${2:title}}\n\t\\framesubtitle{${3:subtitle}}\n\t${0:${VISUAL}}\n\\\\end{frame}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "frame frame environment": true
        },
        "opts": {}
      },
      {
        "content": "\\\\begin{block}{${1:title}}\n\t${0:${VISUAL}}\n\\\\end{block}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "block block environment": true
        },
        "opts": {}
      },
      {
        "content": "\\\\begin{alertblock}{${1:title}}\n\t${0:${VISUAL}}\n\\\\end{alertblock}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "alertblock alertblock environment": true
        },
        "opts": {}
      },
      {
        "content": "\\\\begin{exampleblock}{${1:title}}\n\t${0:${VISUAL}}\n\\\\end{exampleblock}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "example exampleblock environment": true
        },
        "opts": {}
      },
      {
        "content": "\\\\begin{columns}\n\t\\\\begin{column}{0.5\\\\textwidth}\n\t\t${1}\n\t\\\\end{column}\n\t\\\\begin{column}{0.5\\\\textwidth}\n\t\t${0}\n\t\\\\end{column}\n\\\\end{columns}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "col2 two-column environment": true
        },
        "opts": {}
      },
      {
        "content": "\\\\begin{multicols}{2}\n\t${1}\n\t\\columnbreak\n\t${0}\n\\\\end{multicols}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "multicol2 two-column environment with multicol": true
        },
        "opts": {}
      },
      {
        "content": "\\\\{ ${0} \\\\}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "\\{ \\{ \\}": true
        },
        "opts": {}
      },
      {
        "content": "\\\\left${1} ${0:${VISUAL}} \\\\right$1",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "lr left right": true
        },
        "opts": {}
      },
      {
        "content": "\\\\left( ${0:${VISUAL}} \\\\right)",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "lr( left( right)": true
        },
        "opts": {}
      },
      {
        "content": "\\\\left| ${0:${VISUAL}} \\\\right|",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "lr| left| right|": true
        },
        "opts": {}
      },
      {
        "content": "\\\\left\\\\{ ${0:${VISUAL}} \\\\right\\\\}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "lr{ left\\{ right\\}": true
        },
        "opts": {}
      },
      {
        "content": "\\\\left[ ${0:${VISUAL}} \\\\right]",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "lr[ left[ right]": true
        },
        "opts": {}
      },
      {
        "content": "\\\\langle ${0:${VISUAL}} \\\\rangle",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "lra langle rangle": true
        },
        "opts": {}
      },
      {
        "content": "\\\\begin{listing}[language=${1:language}]\n\t${0:${VISUAL}}\n\\\\end{listing}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "lst": true
        },
        "opts": {}
      },
      {
        "content": "\\\\lstinline|${1}| ${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "lsi": true
        },
        "opts": {}
      },
      {
        "content": "\\\\url{${1}} ${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "url": true
        },
        "opts": {}
      },
      {
        "content": "\\\\href{${1}}{${2}} ${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "href": true
        },
        "opts": {}
      },
      {
        "content": "\\\\frac{d}{dt} {$1} {$0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ddt time derivative": true
        },
        "opts": {}
      },
      {
        "content": "\\\\lim_{{$1}} {{$2}} {$0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "lim limit": true
        },
        "opts": {}
      },
      {
        "content": "\\\\frac{\\\\partial {$1}}{\\partial {$2}} {$0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "pdv partial derivation": true
        },
        "opts": {}
      },
      {
        "content": "\\\\frac{\\partial^2 {$1}}{\\partial {$2} \\partial {$3}} {$0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ppdv second partial derivation": true
        },
        "opts": {}
      },
      {
        "content": "\\\\frac{d {$1}}{d {$2}} {$0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "dv derivative": true
        },
        "opts": {}
      },
      {
        "content": "\\\\sum_{{$1}} {$0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "summ summation": true
        },
        "opts": {}
      },
      {
        "content": "\\\\dot{{$1}} {$0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "dot dot": true
        },
        "opts": {}
      },
      {
        "content": "\\\\ddot{{$1}} {$0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ddot ddot": true
        },
        "opts": {}
      },
      {
        "content": "\\\\vec{{$1}} {$0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "vec vector": true
        },
        "opts": {}
      },
      {
        "content": "\\\\times {$0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "\\x cross product": true
        },
        "opts": {}
      },
      {
        "content": "\\\\cdot {$0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          ". dot product": true
        },
        "opts": {}
      },
      {
        "content": "\\\\int_{{$1}}^{{$2}} {$3} \\: d{$4} {$5}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "int integral": true
        },
        "opts": {}
      },
      {
        "content": "\\\\rightarrow {$0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ra rightarrow": true
        },
        "opts": {}
      },
      {
        "content": "\\\\longrightarrow {$0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "lra longrightarrow": true
        },
        "opts": {}
      }
    ],
    "texmath": [
      {
        "content": "\\begin{equation*}\n\t${0:${VISUAL}}\n\\end{equation*}",
        "doc": null,
        "grammar": "snu",
        "label": "Equation without a number",
        "matches": {
          "eqnn": true
        },
        "opts": {
          "b": true
        }
      },
      {
        "content": "\\begin{align}\n\t${0:${VISUAL}}\n\\end{align}",
        "doc": null,
        "grammar": "snu",
        "label": "Align",
        "matches": {
          "al": true
        },
        "opts": {
          "b": true
        }
      },
      {
        "content": "\\begin{align*}\n\t${0:${VISUAL}}\n\\end{align*}",
        "doc": null,
        "grammar": "snu",
        "label": "Align without a number",
        "matches": {
          "alnn": true
        },
        "opts": {
          "b": true
        }
      },
      {
        "content": "\\begin{eqnarray}\n\t${1:${VISUAL}} & ${2:${VISUAL}} & ${0:${VISUAL}}\n\\end{eqnarray}",
        "doc": null,
        "grammar": "snu",
        "label": "Equation array",
        "matches": {
          "eqa": true
        },
        "opts": {
          "b": true
        }
      },
      {
        "content": "\\begin{eqnarray*}\n\t${1:${VISUAL}} & ${2:${VISUAL}} & ${0:${VISUAL}}\n\\end{eqnarray*}",
        "doc": null,
        "grammar": "snu",
        "label": "Equation array without a number",
        "matches": {
          "eqann": true
        },
        "opts": {
          "b": true
        }
      },
      {
        "content": "\\dv[${1:${VISUAL}}]{${2}}{${3}}",
        "doc": null,
        "grammar": "snu",
        "label": "Derivative",
        "matches": {
          "dv": true
        },
        "opts": {
          "w": true
        }
      },
      {
        "content": "\\pdv[${1:${VISUAL}}]{${2}}{${3}}",
        "doc": null,
        "grammar": "snu",
        "label": "Partial Derivative",
        "matches": {
          "pdv": true
        },
        "opts": {
          "w": true
        }
      },
      {
        "content": "\\SI{${1:${VISUAL}}}{${2}}",
        "doc": null,
        "grammar": "snu",
        "label": "SI-Unit",
        "matches": {
          "SI": true
        },
        "opts": {
          "w": true
        }
      }
    ],
    "textile": [
      {
        "content": "---\ntitle: ${1:title}\nlayout: post\ndate: ${2:date} ${0:hour:minute:second} -05:00\n---",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "header": true
        },
        "opts": {}
      },
      {
        "content": "!${1:url}(${2:title}):${0:link}!",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "img": true
        },
        "opts": {}
      },
      {
        "content": "|${1}|",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "|": true
        },
        "opts": {}
      },
      {
        "content": "\"${1:link text}\":${0:url}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "link": true
        },
        "opts": {}
      },
      {
        "content": "(${1:Expand acronym})",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "(": true
        },
        "opts": {}
      },
      {
        "content": "[${1:ref number}] ${0}\nfn$1. ${2:footnote}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "fn": true
        },
        "opts": {}
      }
    ],
    "toml": [],
    "ts-snippets": [
      {
        "content": "import React, { Component } from 'react'\n\ninterface Props {\n\t\n}\ninterface State {\n\t\n}\n\nexport default class ${1:${TM_FILENAME_BASE}} extends Component<Props, State> {\n\tstate = {}\n\n\trender() {\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t$0\n\t\t\t</div>\n\t\t)\n\t}\n}\n",
        "doc": "Creates a React component class with ES7 module system and TypeScript interfaces",
        "grammar": "lsp",
        "label": "typeScriptReactClassComponent",
        "matches": {
          "tsrcc": true
        },
        "opts": {}
      },
      {
        "content": "import React, { Component } from 'react'\n\ninterface Props {\n\t\n}\ninterface State {\n\t\n}\n\nclass ${1:${TM_FILENAME_BASE}} extends Component<Props, State> {\n\tstate = {}\n\n\trender() {\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t$0\n\t\t\t</div>\n\t\t)\n\t}\n}\n\nexport default ${1:${TM_FILENAME_BASE}}\n",
        "doc": "Creates a React component class with ES7 module system and TypeScript interfaces",
        "grammar": "lsp",
        "label": "typeScriptReactClassExportComponent",
        "matches": {
          "tsrce": true
        },
        "opts": {}
      },
      {
        "content": "import React, { ReactElement } from 'react'\n\ninterface Props {\n\t\n}\n\nfunction ${1:${TM_FILENAME_BASE}}({}: Props): ReactElement {\n\treturn (\n\t\t<div>\n\t\t\t$0\n\t\t</div>\n\t)\n}\n\nexport default ${1:${TM_FILENAME_BASE}}\n",
        "doc": "Creates a React Functional Component with ES7 module system and TypeScript interface",
        "grammar": "lsp",
        "label": "typeScriptReactFunctionalExportComponent",
        "matches": {
          "tsrfce": true
        },
        "opts": {}
      },
      {
        "content": "import React, { ReactElement } from 'react'\n\ninterface Props {\n\t\n}\n\nexport default function ${1:${TM_FILENAME_BASE}}({}: Props): ReactElement {\n\treturn (\n\t\t<div>\n\t\t\t$0\n\t\t</div>\n\t)\n}\n",
        "doc": "Creates a React Functional Component with ES7 module system and TypeScript interface",
        "grammar": "lsp",
        "label": "typeScriptReactFunctionalComponent",
        "matches": {
          "tsrfc": true
        },
        "opts": {}
      },
      {
        "content": "import React from 'react'\n\ninterface Props {\n\t\n}\n\nconst ${1:${TM_FILENAME_BASE}} = (props: Props) => {\n\treturn (\n\t\t<div>\n\t\t\t$0\n\t\t</div>\n\t)\n}\n\nexport default ${1:${TM_FILENAME_BASE}}\n",
        "doc": "Creates a React Arrow Function Component with ES7 module system and TypeScript interface",
        "grammar": "lsp",
        "label": "typeScriptReactArrowFunctionExportComponent",
        "matches": {
          "tsrafce": true
        },
        "opts": {}
      },
      {
        "content": "import React from 'react'\n\ninterface Props {\n\t\n}\n\nexport const ${1:${TM_FILENAME_BASE}} = (props: Props) => {\n\treturn (\n\t\t<div>\n\t\t\t$0\n\t\t</div>\n\t)\n}\n",
        "doc": "Creates a React Arrow Function Component with ES7 module system and TypeScript interface",
        "grammar": "lsp",
        "label": "typeScriptReactArrowFunctionComponent",
        "matches": {
          "tsrafc": true
        },
        "opts": {}
      },
      {
        "content": "import React, { PureComponent } from 'react'\n\ninterface Props {\n\t\n}\n\nexport default class ${1:${TM_FILENAME_BASE}} extends PureComponent<Props> {\n\trender() {\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t$0\n\t\t\t</div>\n\t\t)\n\t}\n}\n",
        "doc": "Creates a React pure component class with ES7 module system and TypeScript interface",
        "grammar": "lsp",
        "label": "typeScriptReactClassPureComponent",
        "matches": {
          "tsrpc": true
        },
        "opts": {}
      },
      {
        "content": "import React, { PureComponent } from 'react'\n\ninterface Props {\n\t\n}\n\nclass ${1:${TM_FILENAME_BASE}} extends PureComponent<Props> {\n\trender() {\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t$0\n\t\t\t</div>\n\t\t)\n\t}\n}\n\nexport default ${1:${TM_FILENAME_BASE}}\n",
        "doc": "Creates a React pure component class with ES7 module system and TypeScript interface",
        "grammar": "lsp",
        "label": "typeScriptReactClassExportPureComponent",
        "matches": {
          "tsrpce": true
        },
        "opts": {}
      },
      {
        "content": "import React, { memo } from 'react'\n\ninterface Props {\n\t\n}\n\nexport default memo(function ${1:${TM_FILENAME_BASE}}({}: Props) {\n\treturn (\n\t\t<div>\n\t\t\t$0\n\t\t</div>\n\t)\n})\n",
        "doc": "Creates a React Memo Function Component with ES7 module system and TypeScript interface",
        "grammar": "lsp",
        "label": "typeScriptReactFunctionMemoComponent",
        "matches": {
          "tsrmc": true
        },
        "opts": {}
      },
      {
        "content": "import React, { Component } from 'react'\nimport { connect } from 'react-redux'\n\ninterface Props {\n\t\n}\ninterface State {\n\t\n}\n\nexport class ${1:${TM_FILENAME_BASE}} extends Component<Props, State> {\n\tstate = {}\n\n\trender() {\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t$0\n\t\t\t</div>\n\t\t)\n\t}\n}\n\nconst mapStateToProps = (state) => ({\n\t\n})\n\nconst mapDispatchToProps = {\n\t\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(${1:${TM_FILENAME_BASE}})\n",
        "doc": "Creates a React component class with PropTypes with connected redux and ES7 module system and TypeScript interfaces",
        "grammar": "lsp",
        "label": "typeScriptReactClassCompomentRedux",
        "matches": {
          "tsrcredux": true
        },
        "opts": {}
      },
      {
        "content": "import React from 'react'\nimport { View, Text } from 'react-native'\n\ninterface Props {\n\t\n}\n\nconst ${1:${TM_FILENAME_BASE}} = (props: Props) => {\n\treturn (\n\t\t<View>\n\t\t\t<Text>$0</Text>\n\t\t</View>\n\t)\n}\n\nexport default ${1:${TM_FILENAME_BASE}}\n",
        "doc": "Creates a React Native Arrow Function Component with ES7 module system and TypeScript interface",
        "grammar": "lsp",
        "label": "typescriptReactNativeArrowFunctionComponent",
        "matches": {
          "tsrnf": true
        },
        "opts": {}
      },
      {
        "content": "import React from 'react'\nimport { View } from 'react-native'\n\ninterface ${1:${TM_FILENAME_BASE}}Props {\n\t\n}\n\nconst ${1:${TM_FILENAME_BASE}}: React.FunctionComponent<${1:${TM_FILENAME_BASE}}Props> = (props) => {\n\treturn (\n\t\t<View>\n\t\t\t$0\n\t\t</View>\n\t)\n}\n\nexport default ${1:${TM_FILENAME_BASE}}\n",
        "doc": "Creates a React Native Arrow Function Component with ES7 module system and named TypeScript interface",
        "grammar": "lsp",
        "label": "typescriptReactNativeArrowFunctionComponentNamedProps",
        "matches": {
          "tsrnfi": true
        },
        "opts": {}
      },
      {
        "content": "import React from 'react'\nimport { StyleSheet, Text, View } from 'react-native'\n\ninterface Props {\n\t\n}\n\nconst ${1:${TM_FILENAME_BASE}} = (props: Props) => {\n\treturn (\n\t\t<View>\n\t\t\t<Text>$0</Text>\n\t\t</View>\n\t)\n}\n\nexport default ${1:${TM_FILENAME_BASE}}\n\nconst styles = StyleSheet.create({})\n",
        "doc": "Creates a React Native Arrow Function Component with ES7 module system, TypeScript interface and StyleSheet",
        "grammar": "lsp",
        "label": "typescriptReactNativeArrowFunctionComponentWithStyles",
        "matches": {
          "tsrnfs": true
        },
        "opts": {}
      },
      {
        "content": "export interface ${1:${TM_FILENAME_BASE}} {$0}",
        "doc": null,
        "grammar": "lsp",
        "label": "Export interface",
        "matches": {
          "expint": true
        },
        "opts": {}
      },
      {
        "content": "export type ${1:${TM_FILENAME_BASE}} = {$0}",
        "doc": null,
        "grammar": "lsp",
        "label": "Export type",
        "matches": {
          "exptp": true
        },
        "opts": {}
      }
    ],
    "twig": [
      {
        "content": "{% autoescape ${1:#:strategy} %}\n\t${0:TARGET}\n{% autoescape %}",
        "doc": "",
        "grammar": "snu",
        "label": "{% autoescape ... %} ... {% endautoescape %}",
        "matches": {
          "autoescape": true
        },
        "opts": {
          "head": true
        }
      },
      {
        "content": "{% block ${1:#:name} %}\n\t${0:TARGET}\n{% endblock %}",
        "doc": "",
        "grammar": "snu",
        "label": "{% block ... %} ... {% endblock %}",
        "matches": {
          "bl": true,
          "block": true
        },
        "opts": {
          "head": true
        }
      },
      {
        "content": "<pre>\n\t{{ dump(${0:TARGET}) }}\n</pre>",
        "doc": "",
        "grammar": "snu",
        "label": "<pre> {{ dump(...) }} </pre>",
        "matches": {
          "dump": true
        },
        "opts": {
          "head": true
        }
      },
      {
        "content": "{% embed '${1:template}' %}\n\t{% block ${2} %}\n\t\t${0:TARGET}\n\t{% endblock %}\n{% endembed %}",
        "doc": "",
        "grammar": "snu",
        "label": "{% embed ... %} ... {% endembed %}",
        "matches": {
          "embed": true
        },
        "opts": {
          "head": true
        }
      },
      {
        "content": "{% extends '${1:#:template}' %}",
        "doc": "",
        "grammar": "snu",
        "label": "{% extends ... %}",
        "matches": {
          "ext": true,
          "extends": true
        },
        "opts": {
          "head": true
        }
      },
      {
        "content": "{% filter ${1} %}\n\t${0:TARGET}\n{% endfilter %}",
        "doc": "",
        "grammar": "snu",
        "label": "{% filter ... %} ... {% endfilter %}",
        "matches": {
          "filter": true
        },
        "opts": {
          "head": true
        }
      },
      {
        "content": "{% flush %}",
        "doc": "",
        "grammar": "snu",
        "label": "{% flush %}",
        "matches": {
          "flush": true
        },
        "opts": {
          "head": true
        }
      },
      {
        "content": "{% for ${1:#:value} in ${2:#:list} %}\n\t${0:TARGET}\n{% endfor %}",
        "doc": "",
        "grammar": "snu",
        "label": "{% for ... in ... %} ... {% endfor %}",
        "matches": {
          "for": true
        },
        "opts": {
          "head": true
        }
      },
      {
        "content": "{% from '${1:#:module}' import ${2:#:macro} %}",
        "doc": "",
        "grammar": "snu",
        "label": "{% from '...' import ... %}",
        "matches": {
          "from": true
        },
        "opts": {
          "head": true
        }
      },
      {
        "content": "{% if ${1} %}\n\t${0:TARGET}\n{% endif %}",
        "doc": "",
        "grammar": "snu",
        "label": "{% if ... %} ... {% endif %}",
        "matches": {
          "if": true
        },
        "opts": {
          "head": true
        }
      },
      {
        "content": "{% elseif ${1} %}\n\t${0:TARGET}",
        "doc": "",
        "grammar": "snu",
        "label": "{% elseif ... %} ...",
        "matches": {
          "elif": true,
          "elseif": true
        },
        "opts": {
          "head": true
        }
      },
      {
        "content": "{% else %}\n\t${0:TARGET}",
        "doc": "",
        "grammar": "snu",
        "label": "{% else %} ...",
        "matches": {
          "else": true
        },
        "opts": {
          "head": true
        }
      },
      {
        "content": "{% import '${1:#:module}' as ${2:#:namespace} %}",
        "doc": "",
        "grammar": "snu",
        "label": "{% import '...' as ... %}",
        "matches": {
          "import": true
        },
        "opts": {
          "head": true
        }
      },
      {
        "content": "{% include '${1:#:template}' %}",
        "doc": "",
        "grammar": "snu",
        "label": "{% include '...' %}",
        "matches": {
          "include": true
        },
        "opts": {
          "head": true
        }
      },
      {
        "content": "{% include '${1:#:template}' with {${2:#:'key'}: ${2:#:'value'}} %}",
        "doc": "",
        "grammar": "snu",
        "label": "{% include '...' %}",
        "matches": {
          "includewith": true
        },
        "opts": {
          "head": true
        }
      },
      {
        "content": "{% macro ${1:#:name}(${2:#:args}) %}\n\t${0:TARGET}\n{% endmacro %}",
        "doc": "",
        "grammar": "snu",
        "label": "{% macro ...(...) %} ... {% endmacro %}",
        "matches": {
          "macro": true
        },
        "opts": {
          "head": true
        }
      },
      {
        "content": "{% sandbox %}\n\t${0:TARGET}\n{% endsandbox %}",
        "doc": "",
        "grammar": "snu",
        "label": "{% sandbox %} ... {% endsandbox %}",
        "matches": {
          "sandbox": true
        },
        "opts": {
          "head": true
        }
      },
      {
        "content": "{% set ${1:#:var} = ${2:#:value} %}",
        "doc": "",
        "grammar": "snu",
        "label": "{% set ... = ... %}",
        "matches": {
          "set": true
        },
        "opts": {
          "head": true
        }
      },
      {
        "content": "{% set ${1:#:var} %}\n\t${0:TARGET}\n{% endset %}",
        "doc": "",
        "grammar": "snu",
        "label": "{% set ... %} ... {% endset %}",
        "matches": {
          "setblock": true
        },
        "opts": {
          "head": true
        }
      },
      {
        "content": "{% spaceless %}\n\t${0:TARGET}\n{% endspaceless %}",
        "doc": "",
        "grammar": "snu",
        "label": "{% spaceless %} ... {% endspaceless %}",
        "matches": {
          "spaceless": true
        },
        "opts": {
          "head": true
        }
      },
      {
        "content": "{% use '${1:#:template}' %}",
        "doc": "",
        "grammar": "snu",
        "label": "{% use '...' %}",
        "matches": {
          "use": true
        },
        "opts": {
          "head": true
        }
      },
      {
        "content": "{% verbatim %}\n\t${0:TARGET}\n{% endverbatim %}",
        "doc": "",
        "grammar": "snu",
        "label": "{% verbatim %} ... {% endverbatim %}",
        "matches": {
          "verbatim": true
        },
        "opts": {
          "head": true
        }
      },
      {
        "content": "{# ${1:comment} #}",
        "doc": "",
        "grammar": "snu",
        "label": "{# ... #}",
        "matches": {
          "#": true,
          "comment": true
        },
        "opts": {
          "head": true
        }
      },
      {
        "content": "{% ${1:#:tag} %}",
        "doc": "",
        "grammar": "snu",
        "label": "{% ... %}",
        "matches": {
          "%": true,
          "tag": true
        },
        "opts": {
          "head": true
        }
      },
      {
        "content": "{% ${1:#:tag} ${2:#:name} %}\n\t${0:TARGET}\n{% end$1 %}",
        "doc": "",
        "grammar": "snu",
        "label": "{% ... %} ... {% end... %}",
        "matches": {
          "tagblock": true
        },
        "opts": {
          "head": true
        }
      },
      {
        "content": "{% apply ${1} %}\n\t${0}\n{% endapply %}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "apply \"twig apply\"": true
        },
        "opts": {}
      },
      {
        "content": "{% autoescape %}\n\t${0}\n{% endautoescape %}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "autoescape \"twig autoescape\"": true
        },
        "opts": {}
      },
      {
        "content": "{% endautoescape %}${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "endautoescape \"twig endautoescape\"": true
        },
        "opts": {}
      },
      {
        "content": "{% block ${1} %}\n\t${0}\n{% endblock %}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "bl \"twig block\"": true
        },
        "opts": {}
      },
      {
        "content": "{% block ${1} %}\n\t${0}\n{% endblock %}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "block \"twig block\"": true
        },
        "opts": {}
      },
      {
        "content": "{% endblock %}${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "endblock \"twig endblock\"": true
        },
        "opts": {}
      },
      {
        "content": "{% cache %}\n\t${0}\n{% endcache %}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "cache \"twig cache\"": true
        },
        "opts": {}
      },
      {
        "content": "{% endcache %}${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "endcache \"twig endcache\"": true
        },
        "opts": {}
      },
      {
        "content": "{% css %}\n\t${0}\n{% endcss %}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "css \"twig css\"": true
        },
        "opts": {}
      },
      {
        "content": "{% endcss %}${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "endcss \"twig endcss\"": true
        },
        "opts": {}
      },
      {
        "content": "{% dd ${1} %}${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "dd \"twig dd\"": true
        },
        "opts": {}
      },
      {
        "content": "{% do ${1} %}${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "do \"twig do\"": true
        },
        "opts": {}
      },
      {
        "content": "{% embed \"${1}\" %}\n\t${0}\n{% endembed %}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "embed \"twig embed\"": true
        },
        "opts": {}
      },
      {
        "content": "{% endembed %}${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "endembed \"twig endembed\"": true
        },
        "opts": {}
      },
      {
        "content": "{% exit ${1} %}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "exit \"twig exit\"": true
        },
        "opts": {}
      },
      {
        "content": "{% extends \"${1}\" %}${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "extends \"twig extends\"": true
        },
        "opts": {}
      },
      {
        "content": "{% extends \"${1}\" %}${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ext \"twig extends\"": true
        },
        "opts": {}
      },
      {
        "content": "{% for ${1} in ${2} %}\n\t${0}\n{% endfor %}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "for \"twig for\"": true
        },
        "opts": {}
      },
      {
        "content": "{% for ${1} in ${2} %}\n\t${3}\n{% else %}\n\t${0}\n{% endfor %}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "fore \"twig for else\"": true
        },
        "opts": {}
      },
      {
        "content": "{% endfor %}${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "endfor \"twig endfor\"": true
        },
        "opts": {}
      },
      {
        "content": "{% from \"${1}\" import ${2} %}${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "from \"twig from\"": true
        },
        "opts": {}
      },
      {
        "content": "{% header \"${1}\" %}${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "header \"twig header\"": true
        },
        "opts": {}
      },
      {
        "content": "{% hook \"${1}\" %}${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "hook \"twig hook\"": true
        },
        "opts": {}
      },
      {
        "content": "{% html %}\n\t${0}\n{% endhtml %}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "html \"twig html\"": true
        },
        "opts": {}
      },
      {
        "content": "{% endhtml %}${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "endhtml \"twig endhtml\"": true
        },
        "opts": {}
      },
      {
        "content": "{% if ${1} %}\n\t${0}\n{% endif %}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "if \"twig if\"": true
        },
        "opts": {}
      },
      {
        "content": "{% if ${1} %}\n\t${2}\n{% else %}\n\t${0}\n{% endif %}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ife \"twig if else\"": true
        },
        "opts": {}
      },
      {
        "content": "{% else %}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "el \"twig else\"": true
        },
        "opts": {}
      },
      {
        "content": "{% elseif ${1} %}\n\t${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "eif \"twig elseif\"": true
        },
        "opts": {}
      },
      {
        "content": "{% endif %}${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "endif \"twig endif\"": true
        },
        "opts": {}
      },
      {
        "content": "{% import \"${1}\" as ${2} %}${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "import \"twig import\"": true
        },
        "opts": {}
      },
      {
        "content": "{% include \"${1}\" %}${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "include \"twig include\"": true
        },
        "opts": {}
      },
      {
        "content": "{% include \"${1}\" with ${2} %}${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "includewith \"twig include with parameters\"": true
        },
        "opts": {}
      },
      {
        "content": "{% js %}\n\t${0}\n{% endjs %}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "js \"twig js\"": true
        },
        "opts": {}
      },
      {
        "content": "{% endjs %}${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "endjs \"twig endjs\"": true
        },
        "opts": {}
      },
      {
        "content": "{% macro ${1}(${2}) %}\n\t${0}\n{% endmacro %}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "macro \"twig macro\"": true
        },
        "opts": {}
      },
      {
        "content": "{% endmacro %}${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "endmacro \"twig endmacro\"": true
        },
        "opts": {}
      },
      {
        "content": "{% namespace \"${1}\" %}\n\t${0}\n{% endnamespace %}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "namespace \"twig namespace\"": true
        },
        "opts": {}
      },
      {
        "content": "{% endnamespace %}${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "endnamespace \"twig endnamespace\"": true
        },
        "opts": {}
      },
      {
        "content": "{% nav ${1} in ${2} %}\n\t${0}\n{% endnav %}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "nav \"twig nav\"": true
        },
        "opts": {}
      },
      {
        "content": "{% endnav %}${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "endnav \"twig endnav\"": true
        },
        "opts": {}
      },
      {
        "content": "{% paginate ${1} as ${2} %}${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "paginate \"twig paginate\"": true
        },
        "opts": {}
      },
      {
        "content": "{% redirect \"${1}\" %}${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "redirect \"twig redirect\"": true
        },
        "opts": {}
      },
      {
        "content": "{% requireGuest %}${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "requireguest \"twig requireguest\"": true
        },
        "opts": {}
      },
      {
        "content": "{% requireLogin %}${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "requirelogin \"twig requirelogin\"": true
        },
        "opts": {}
      },
      {
        "content": "{% requirePermission \"${1}\" %}${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "requirepermission \"twig requirepermission\"": true
        },
        "opts": {}
      },
      {
        "content": "{% set ${1} = ${2} %}${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "set \"twig set\"": true
        },
        "opts": {}
      },
      {
        "content": "{% set ${1} %}\n\t${0}\n{% endset %}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "setb \"twig set block\"": true
        },
        "opts": {}
      },
      {
        "content": "{% endset %}${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "endset \"twig endset\"": true
        },
        "opts": {}
      },
      {
        "content": "{% switch ${1} %}\n\t{% case \"${2}\" %}\n\t\t${0}\n\t{% default %}\n{% endswitch %}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "switch \"twig switch\"": true
        },
        "opts": {}
      },
      {
        "content": "{% case \"${1}\" %}\n\t${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "case \"twig switch case\"": true
        },
        "opts": {}
      },
      {
        "content": "{% default %}\n\t${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "default \"twig switch default\"": true
        },
        "opts": {}
      },
      {
        "content": "{% endswitch %}${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "endswitch \"twig endswitch\"": true
        },
        "opts": {}
      },
      {
        "content": "{% use \"${1}\" %}${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "use \"twig use\"": true
        },
        "opts": {}
      },
      {
        "content": "{% verbatim %}\n\t${0}\n{% endverbatim %}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "verbatim \"twig verbatim\"": true
        },
        "opts": {}
      },
      {
        "content": "{% endverbatim %}${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "endverbatim \"twig endverbatim\"": true
        },
        "opts": {}
      },
      {
        "content": "{% with %}\n\t${0}\n{% endwith %}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "with \"twig with\"": true
        },
        "opts": {}
      },
      {
        "content": "{% endwith %}${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "endwith \"twig endwith\"": true
        },
        "opts": {}
      },
      {
        "content": "<pre>\n\t{{ dump(${1}) }}\n</pre>",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "dump \"twig dump\"": true
        },
        "opts": {}
      },
      {
        "content": "{{ \"${1}\"|t }}${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "translate \"twig translate\"": true
        },
        "opts": {}
      }
    ],
    "typescript": [
      {
        "content": "import { Component, OnInit } from '@angular/core';\n\n@Component({\n\tselector: '${1:selector-name}',\n\ttemplateUrl: '${2:name}.component.html'\n})\n\nexport class ${3:Name}Component implements OnInit {\n\tconstructor() { }\n\n\tngOnInit() { }$0\n}",
        "doc": "Angular component",
        "grammar": "lsp",
        "label": "Angular Component",
        "matches": {
          "a-component": true
        },
        "opts": {}
      },
      {
        "content": "import { Component, OnInit } from '@angular/core';\n\n@Component({\n\tselector: '${1:selector-name}',\n\ttemplate: `$0`\n})\n\nexport class ${2:Name}Component implements OnInit {\n\tconstructor() { }\n\n\tngOnInit() { }\n}",
        "doc": "Angular component with an inline template",
        "grammar": "lsp",
        "label": "Angular Component with Inline Template",
        "matches": {
          "a-component-inline": true
        },
        "opts": {}
      },
      {
        "content": "import { Pipe, PipeTransform } from '@angular/core';\n\n@Pipe({\n\tname: '${1:selector-name}'\n})\n\nexport class ${2:Name}Pipe implements PipeTransform {\n\ttransform(value: any, ...args: any[]): any {\n\t\t$0\n\t}\n}",
        "doc": "Angular pipe",
        "grammar": "lsp",
        "label": "Angular Pipe",
        "matches": {
          "a-pipe": true
        },
        "opts": {}
      },
      {
        "content": "import { Injectable } from '@angular/core';\n\n@Injectable({providedIn: ${1:'root'}})\nexport class ${2:ServiceName}Service {\n\tconstructor() { }\n\t$0\n}",
        "doc": "Angular Service with Injectable ProvidedIn Root",
        "grammar": "lsp",
        "label": "Angular Service",
        "matches": {
          "a-service": true
        },
        "opts": {}
      },
      {
        "content": "{ path: '', pathMatch: 'full', redirectTo: '${1:path}' },$0",
        "doc": "Angular default route path",
        "grammar": "lsp",
        "label": "Angular Default Route Path",
        "matches": {
          "a-route-path-default": true
        },
        "opts": {}
      },
      {
        "content": "{\n\tpath: '${1:path}', \n\tcomponent: ${2:Component},\n\tchildren: [\n\t\t{ path: '${3:childpath}', component: ${4:ChildComponent} }\n\t]\n},$0",
        "doc": "Angular route path with children",
        "grammar": "lsp",
        "label": "Angular Route Path with Children",
        "matches": {
          "a-route-path-with-children": true
        },
        "opts": {}
      },
      {
        "content": "{ path: '**', component: ${1:PathNotFoundComponent} },$0",
        "doc": "Angular 404 route path",
        "grammar": "lsp",
        "label": "Angular 404 Route Path",
        "matches": {
          "a-route-path-404": true
        },
        "opts": {}
      },
      {
        "content": "{ path: '${1:path}', component: ${2:Name}Component },$0",
        "doc": "Angular eager route path",
        "grammar": "lsp",
        "label": "Angular Eager Route Path",
        "matches": {
          "a-route-path-eager": true
        },
        "opts": {}
      },
      {
        "content": "{\n\tpath: '${1:path}', \n\tloadChildren: () => import('${2:lazy-path}').then(m => m.${3:lazy-module})\n},$0",
        "doc": "Angular lazy route path",
        "grammar": "lsp",
        "label": "Angular Lazy Route Path",
        "matches": {
          "a-route-path-lazy": true
        },
        "opts": {}
      },
      {
        "content": "this.route.paramMap\n\t.pipe(map(params => params.get('id')), tap(id => (this.id = +id)))\n\t.subscribe(id => {$1});\n$0",
        "doc": "Angular - subscribe to routing parameters",
        "grammar": "lsp",
        "label": "Routing Params - Subscribe",
        "matches": {
          "a-route-params-subscribe": true
        },
        "opts": {}
      },
      {
        "content": "return this.httpClient.get('${1:url}');$0",
        "doc": "Angular HttpClient.get",
        "grammar": "lsp",
        "label": "HttpClient.get",
        "matches": {
          "a-httpclient-get": true
        },
        "opts": {}
      },
      {
        "content": "import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\n\n@Injectable({providedIn: ${1:'root'}})\nexport class ${2:ServiceName}Service {\n\tconstructor(private httpClient: HttpClient) { }\n\t$0\n}",
        "doc": "Angular service with HttpClient",
        "grammar": "lsp",
        "label": "Angular HttpClient Service",
        "matches": {
          "a-service-httpclient": true
        },
        "opts": {}
      },
      {
        "content": "import { HttpInterceptor, HttpHandler, HttpRequest, HttpEvent, HttpResponse } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\n\n@Injectable()\nexport class LogInterceptor implements HttpInterceptor {\n\tconstructor() {}\n\n\tintercept(req: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\n\t\tconst started = Date.now();\n\t\treturn next.handle(req).pipe(\n\t\t\ttap(event => {\n\t\t\t\tif (event instanceof HttpResponse) {\n\t\t\t\t\tconst elapsed = Date.now() - started;\n\t\t\t\t\tconsole.log(`Request for \\${req.urlWithParams} took \\${elapsed} ms.`);\n\t\t\t\t}\n\t\t\t})\n\t\t);\n\t}\n}",
        "doc": "Angular HttpInterceptor for Logging HttpClient",
        "grammar": "lsp",
        "label": "Angular HttpInterceptor for Logging",
        "matches": {
          "a-http-interceptor-logging": true
        },
        "opts": {}
      },
      {
        "content": "import { Injectable } from '@angular/core';\nimport { HttpEvent, HttpInterceptor, HttpHandler, HttpRequest } from '@angular/common/http';\nimport { Observable } from 'rxjs';\n\n@Injectable()\nexport class HeaderInterceptor implements HttpInterceptor {\n\tconstructor() {}\n\n\tintercept(req: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\n\t\tconst headers = req.headers\n\t\t\t.set('Content-Type', 'application/json');\n\t\tconst authReq = req.clone({ headers });\n\t\treturn next.handle(authReq);\n\t}\n}",
        "doc": "Angular HttpInterceptor for headers HttpClient",
        "grammar": "lsp",
        "label": "Angular HttpInterceptor for Headers",
        "matches": {
          "a-http-interceptor-headers": true
        },
        "opts": {}
      },
      {
        "content": "import { Injectable } from '@angular/core';\nimport { HttpInterceptor, HttpEvent, HttpHandler, HttpRequest } from '@angular/common/http';\nimport { Observable } from 'rxjs';\n\n@Injectable()\nexport class ${2:Your}Interceptor implements HttpInterceptor {\n\tintercept(req: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\n\t\treturn next.handle(req);\n\t}\n}",
        "doc": "Empty Angular HttpInterceptor for HttpClient",
        "grammar": "lsp",
        "label": "Angular HttpInterceptor - Empty",
        "matches": {
          "a-http-interceptor": true
        },
        "opts": {}
      },
      {
        "content": "@Output() ${1:eventName} = new EventEmitter<${2:eventType}>();",
        "doc": "Angular @Output event and emitter",
        "grammar": "lsp",
        "label": "Output Event",
        "matches": {
          "a-output-event": true
        },
        "opts": {}
      },
      {
        "content": "this.${1:service}.${2:function}\n\t.subscribe(${3:arg} => this.${4:property} = ${3:arg});\n$0",
        "doc": "Angular observable subscribe",
        "grammar": "lsp",
        "label": "Subscribe",
        "matches": {
          "a-subscribe": true
        },
        "opts": {}
      },
      {
        "content": "import { Component } from '@angular/core';\n\n@Component({\n\tselector: '${1:prefix-app}',\n\ttemplate: `\n\t\t<router-outlet></router-outlet>\n\t\t`\n})\nexport class ${2:App}Component { }\n$0",
        "doc": "Angular App root component",
        "grammar": "lsp",
        "label": "Angular Root Component",
        "matches": {
          "a-component-root": true
        },
        "opts": {}
      },
      {
        "content": "import { NgModule } from '@angular/core';\nimport { BrowserModule  } from '@angular/platform-browser';\nimport { HttpModule } from '@angular/http';\n\nimport { ${1:App}Component } from './${1:app}.component';\n\n@NgModule({\n\timports: [\n\t\tBrowserModule,\n\t\tHttpModule,\n\t],\n\tdeclarations: [${1:App}Component],\n\tbootstrap: [${1:App}Component],\n})\nexport class ${1:App}Module { }\n$0",
        "doc": "Angular Root Module",
        "grammar": "lsp",
        "label": "Angular Root Module",
        "matches": {
          "a-module-root": true
        },
        "opts": {}
      },
      {
        "content": "import { Routes } from '@angular/router';\n\nexport const routes: Routes = [${0}]",
        "doc": "Route definitions",
        "grammar": "lsp",
        "label": "Route definitions",
        "matches": {
          "a-routes": true
        },
        "opts": {}
      },
      {
        "content": "import { NgModule } from '@angular/core';\n\nimport { ${1:Name}Component } from './${2:name}.component';\n\n@NgModule({\n\timports: [],\n\texports: [],\n\tdeclarations: [${1:Name}Component],\n\tproviders: [],\n})\nexport class ${1:Name}Module { }\n$0",
        "doc": "Angular Module",
        "grammar": "lsp",
        "label": "Angular Module",
        "matches": {
          "a-module": true
        },
        "opts": {}
      },
      {
        "content": "import { Directive } from '@angular/core';\n\n@Directive({ selector: '[${1:selector-name}]' })\nexport class ${2:Name}Directive {\n\tconstructor() { }\n}",
        "doc": "Angular directive",
        "grammar": "lsp",
        "label": "Angular Directive",
        "matches": {
          "a-directive": true
        },
        "opts": {}
      },
      {
        "content": "import { Injectable } from '@angular/core';\nimport { ActivatedRouteSnapshot, CanActivate, RouterStateSnapshot } from '@angular/router';\n\n@Injectable({providedIn: ${1:'root'}})\nexport class ${2:Name}Guard implements CanActivate {\n\tconstructor() { }\n\n\tcanActivate(route: ActivatedRouteSnapshot, state: RouterStateSnapshot) {\n\t\treturn true;$0\n\t}\n}",
        "doc": "Angular CanActivate guard",
        "grammar": "lsp",
        "label": "Angular CanActivate Guard",
        "matches": {
          "a-guard-can-activate": true
        },
        "opts": {}
      },
      {
        "content": "import { Injectable } from '@angular/core';\nimport { ActivatedRouteSnapshot, CanActivateChild, RouterStateSnapshot } from '@angular/router';\n\n@Injectable({providedIn: ${1:'root'}})\nexport class ${2:Name}Guard implements CanActivateChild {\n\tconstructor() { }\n\n\tcanActivateChild(route: ActivatedRouteSnapshot, state: RouterStateSnapshot) {\n\t\treturn true;$0\n\t}\n}",
        "doc": "Angular CanActivateChild guard",
        "grammar": "lsp",
        "label": "Angular CanActivateChild Guard",
        "matches": {
          "a-guard-can-activate-child": true
        },
        "opts": {}
      },
      {
        "content": "import { Injectable } from '@angular/core';\nimport { CanLoad, Route } from '@angular/router';\n\n@Injectable({providedIn: ${1:'root'}})\nexport class ${2:Name}Guard implements CanLoad {\n\tconstructor() { }\n\n\tcanLoad(route: Route) {\n\t\treturn true;$0\n\t}\n}",
        "doc": "Angular CanLoad guard",
        "grammar": "lsp",
        "label": "Angular CanLoad Guard",
        "matches": {
          "a-guard-can-load": true
        },
        "opts": {}
      },
      {
        "content": "import { Injectable } from '@angular/core';\nimport { ActivatedRouteSnapshot, CanDeactivate, RouterStateSnapshot } from '@angular/router';\nimport { Observable } from 'rxjs';\n\nimport { ${2:ComponentName}Component } from './${3:filename}.component';\n\n// Consider using this interface for all CanDeactivate guards,\n// and have your components implement this interface, too.\n//\n//   e.g. export class CanDeactivateGuard implements CanDeactivate<CanComponentDeactivate> {\n//\n// export interface CanComponentDeactivate {\n// canDeactivate: () => any;\n// }\n\n@Injectable({providedIn: ${4:'root'}})\nexport class ${1:Name}Guard implements CanDeactivate<${2:ComponentName}Component> {\n\tcanDeactivate(\n\t\tcomponent: ${2:ComponentName}Component,\n\t\tcurrentRoute: ActivatedRouteSnapshot, \n\t\tcurrentState: RouterStateSnapshot\n\t): Observable<boolean>|Promise<boolean>|boolean {\n\t\treturn false;$0\n\t}\n}",
        "doc": "Angular CanDeactivate guard",
        "grammar": "lsp",
        "label": "Angular CanDeactivate Guard",
        "matches": {
          "a-guard-can-deactivate": true
        },
        "opts": {}
      },
      {
        "content": "import { PreloadingStrategy, Route } from '@angular/router';\nimport { Observable, of } from 'rxjs';\n\nexport class PreloadSelectedModulesList implements PreloadingStrategy {\n\tpreload(route: Route, load: Function): Observable<any> {\n\t\treturn route.data && route.data['${1:preload}'] ? load() : of(null);\n\t}\n}\n$0",
        "doc": "Angular opt-in preload strategy",
        "grammar": "lsp",
        "label": "Angular Opt-In Preload Strategy",
        "matches": {
          "a-preload-opt-in-strategy": true
        },
        "opts": {}
      },
      {
        "content": "import { Injectable } from '@angular/core';\nimport { PreloadingStrategy, Route } from '@angular/router';\nimport { Observable, EMPTY } from 'rxjs';\n\n// avoid typing issues for now\nexport declare var navigator;\n\n@Injectable({ providedIn: 'root' })\nexport class NetworkAwarePreloadStrategy implements PreloadingStrategy {\n\tpreload(route: Route, load: () => Observable<any>): Observable<any> {\n\t\treturn this.hasGoodConnection() ? load() : EMPTY;\n\t}\n\n\thasGoodConnection(): boolean {\n\t\tconst conn = navigator.connection;\n\t\tif (conn) {\n\t\t\tif (conn.saveData) {\n\t\t\t\treturn false; // save data mode is enabled, so dont preload\n\t\t\t}\n\t\t\tconst avoidTheseConnections = ['slow-2g', '2g' /* , '3g', '4g' */];\n\t\t\tconst effectiveType = conn.effectiveType || '';\n\t\t\tif (avoidTheseConnections.includes(effectiveType)) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\treturn true;\n\t}\n}",
        "doc": "Angular network aware preload strategy",
        "grammar": "lsp",
        "label": "Angular Network-Aware Preload Strategy",
        "matches": {
          "a-preload-network-strategy": true
        },
        "opts": {}
      },
      {
        "content": "checkEvents() {\n\tthis.router.events.subscribe(event => {\n\t\tswitch (true) {\n\t\t\tcase event instanceof ${1:eventName}:\n\t\t\t\t$0\n\t\t\t\tbreak;\n\n\t\t\tdefault:\n\t\t\t\tbreak;\n\t\t}\n\t});\n}",
        "doc": "Angular Router Events",
        "grammar": "lsp",
        "label": "Angular Router Events",
        "matches": {
          "a-router-events": true
        },
        "opts": {}
      },
      {
        "content": "constructor( @Optional() @SkipSelf() parentModule: ${1:ModuleName} {\n\tif (parentModule) {\n\t\tconst msg = `${1:ModuleName} has already been loaded. \n\t\t\tImport ${1:ModuleName} once, only, in the root AppModule.`;\n\t\tthrow new Error(msg);\n\t}\n}",
        "doc": "Angular Module SkipSelf constructor",
        "grammar": "lsp",
        "label": "Angular Module SkipSelf Constructor",
        "matches": {
          "a-ctor-skip-self": true
        },
        "opts": {}
      },
      {
        "content": "import { ${1:Observable} } from 'rxjs';\n$0",
        "doc": "RxJs import",
        "grammar": "lsp",
        "label": "RxJs Import",
        "matches": {
          "a-rxjs-import": true
        },
        "opts": {}
      },
      {
        "content": "import { ${1:map} } from 'rxjs/operators';\n$0",
        "doc": "RxJs import",
        "grammar": "lsp",
        "label": "RxJs Operator Import",
        "matches": {
          "a-rxjs-operator-import": true
        },
        "opts": {}
      },
      {
        "content": "import { Injectable } from '@angular/core';\nimport { Resolve, ActivatedRouteSnapshot } from '@angular/router';\nimport { Observable } from 'rxjs';\n\n@Injectable({ providedIn: ${1:'root'} })\nexport class ${2:YourResolver} implements Resolve<${3:ObjectToResolve}> {\n\tresolve(route: ActivatedRouteSnapshot): Observable<${3:ObjectToResolve}> | Promise<${3:ObjectToResolve}> | ${3:ObjectToResolve} {\n\t\treturn ${0};\n\t}\n}",
        "doc": "Angular Resolver",
        "grammar": "lsp",
        "label": "Angular Resolver",
        "matches": {
          "a-resolver": true
        },
        "opts": {}
      },
      {
        "content": "import { NgModule } from '@angular/core';\nimport { EffectsModule } from '@ngrx/effects';\nimport { StoreModule } from '@ngrx/store';\nimport { StoreDevtoolsModule } from '@ngrx/store-devtools';\nimport { environment } from '../../environments/environment';\n\n@NgModule({\n  imports: [\n    StoreModule.forRoot({}),\n    EffectsModule.forRoot([]),\n    environment.production ? [] : StoreDevtoolsModule.instrument()\n  ]\n})\nexport class $1StoreModule {}",
        "doc": "NgRx Store Module",
        "grammar": "lsp",
        "label": "NgRx Store Module",
        "matches": {
          "a-ngrx-store-module": true
        },
        "opts": {}
      },
      {
        "content": "export const ${1:action} = createAction('[${2:Source}] ${3:Event}');",
        "doc": "Creates an NgRx Action",
        "grammar": "lsp",
        "label": "NgRx Create Action",
        "matches": {
          "a-ngrx-create-action": true
        },
        "opts": {}
      },
      {
        "content": "export const ${1:action} = createAction('[${2:Source}] ${3:Event}', props<{${4:key}: ${5:type}}>());",
        "doc": "Creates an NgRx Action with Props",
        "grammar": "lsp",
        "label": "NgRx Create Action w/ Props",
        "matches": {
          "a-ngrx-create-action-props": true
        },
        "opts": {}
      },
      {
        "content": "const ${1:feature}Reducer = createReducer(\n\tinitialState,\n\ton($1Actions.action, state => ({ ...state, ${2:prop}: ${3:updatedValue} })),\n);\n\nexport function reducer(state: State | undefined, action: Action) {\n\treturn $1Reducer(state, action);\n}",
        "doc": "Creates an NgRx Reducer",
        "grammar": "lsp",
        "label": "NgRx Create Reducer",
        "matches": {
          "a-ngrx-create-reducer": true
        },
        "opts": {}
      },
      {
        "content": "export const select${1:Feature}${2:Property} = createSelector(\n\tselect$1,\n\t(state: $1State) => state.${3:property}\n);",
        "doc": "Creates an NgRx Selector",
        "grammar": "lsp",
        "label": "NgRx Create Selector",
        "matches": {
          "a-ngrx-create-selector": true
        },
        "opts": {}
      },
      {
        "content": "export const select${1:Feature}${2:Property} = createSelector(\n\tselect$1,\n\t(state: $1State, props) => ${3:selectLogic}\n);",
        "doc": "Creates an NgRx Selector using props",
        "grammar": "lsp",
        "label": "NgRx Create Selector w/ Props",
        "matches": {
          "a-ngrx-create-selector-props": true
        },
        "opts": {}
      },
      {
        "content": "EntityDataModule.forRoot(${1:entityConfig}),",
        "doc": "Import NgRx Entity Data Module",
        "grammar": "lsp",
        "label": "NgRx Data Import Entity Data Module",
        "matches": {
          "a-ngrx-data-entity-data-module-import": true
        },
        "opts": {}
      },
      {
        "content": "import { EntityMetadataMap } from '@ngrx/data';\n\nconst entityMetadata: EntityMetadataMap = {\n  ${1:Model1}: {},${0}\n};\n\nexport const entityConfig = {\n  entityMetadata\n};",
        "doc": "NgRx Data Entity Metadata",
        "grammar": "lsp",
        "label": "NgRx Data Entity Metadata",
        "matches": {
          "a-ngrx-data-entity-metadata": true
        },
        "opts": {}
      },
      {
        "content": "import { Injectable } from '@angular/core';\nimport {\n  EntityCollectionServiceBase,\n  EntityCollectionServiceElementsFactory\n} from '@ngrx/data';\nimport { ${1:Model} } from '${2:../core}';\n\n@Injectable({ providedIn: ${3:'root'} })\nexport class ${1:Model}Service extends EntityCollectionServiceBase<${1:Model}> {\n  constructor(serviceElementsFactory: EntityCollectionServiceElementsFactory) {\n    super('${1:Model}', serviceElementsFactory);\n  }\n}",
        "doc": "NgRx Data Entity Collection Data Service",
        "grammar": "lsp",
        "label": "NgRx Data Entity Collection Data Service",
        "matches": {
          "a-ngrx-data-entity-collection-data-service": true
        },
        "opts": {}
      },
      {
        "content": "${1:trackBy}(index: number, ${2:name}: ${3:model}): ${4:number} {\n  return ${2:name}${5:.id};$0\n}",
        "doc": "TrackBy Function",
        "grammar": "lsp",
        "label": "TrackBy Function",
        "matches": {
          "a-trackby": true
        },
        "opts": {}
      },
      {
        "content": "var ${1:#:NAME}: ${2:#:TYPE} = ${0:#:TARGET};",
        "doc": "",
        "grammar": "snu",
        "label": "var NAME: TYPE = expr;",
        "matches": {
          "var-with-type": true
        },
        "opts": {
          "head": true
        }
      },
      {
        "content": "class ${1:#:NAME} {\n  constructor(${2:#:Args}) {\n    ${3:#:TARGET}\n  }\n  ${0:#:TARGET}\n}",
        "doc": "",
        "grammar": "snu",
        "label": "class NAME {...}",
        "matches": {
          "class": true
        },
        "opts": {
          "word": true
        }
      },
      {
        "content": "${1:#:NAME}(${2:#:Args}): ${3:#:TYPE} {\n  ${0:#:TARGET}\n}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "method": true
        },
        "opts": {
          "head": true
        }
      },
      {
        "content": "get ${1:#:NAME}(): ${2:#:TYPE} {\n  ${3:#:TARGET}\n}\nset $1(${4:value}: $2) {\n  ${0:#:TARGET}\n}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "accessor": true
        },
        "opts": {
          "head": true
        }
      },
      {
        "content": "static ${1:#:NAME}(${2:#:Args}) {\n  ${0:#:TARGET}\n}",
        "doc": "",
        "grammar": "snu",
        "label": "static f(){}",
        "matches": {
          "static": true
        },
        "opts": {
          "head": true
        }
      },
      {
        "content": "interface ${1:#:NAME} {\n  ${0:#:TARGET}\n}",
        "doc": "",
        "grammar": "snu",
        "label": "interface NAME {...}",
        "matches": {
          "interface": true
        },
        "opts": {
          "word": true
        }
      },
      {
        "content": "enum ${1:#:NAME} {\n  ${0:#:TARGET}\n}",
        "doc": "",
        "grammar": "snu",
        "label": "enum NAME {...}",
        "matches": {
          "enum": true
        },
        "opts": {
          "head": true
        }
      },
      {
        "content": "module ${1:#:NAME} {\n  ${0:#:TARGET}\n}",
        "doc": "",
        "grammar": "snu",
        "label": "module NAME {...}",
        "matches": {
          "module": true
        },
        "opts": {
          "head": true
        }
      },
      {
        "content": "namespace ${1:#:NAME} {\n  ${0:#:TARGET}\n}",
        "doc": "",
        "grammar": "snu",
        "label": "namespace NAME {...}",
        "matches": {
          "namespace": true
        },
        "opts": {
          "head": true
        }
      },
      {
        "content": "/// <reference path=\"${0:#:TARGET}\" />",
        "doc": "",
        "grammar": "snu",
        "label": "/// <reference path=\"...\" />",
        "matches": {
          "reference": true
        },
        "opts": {
          "head": true
        }
      },
      {
        "content": "(${1:#:Args}) => { ${0:#:TARGET} }",
        "doc": "",
        "grammar": "snu",
        "label": "() => {}",
        "matches": {
          "arrow-function": true,
          "function-arrow": true
        },
        "opts": {
          "word": true
        }
      },
      {
        "content": "const ${1}: ${2:any} = ${3};\n${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "tconst \"ts const\"": true
        },
        "opts": {}
      },
      {
        "content": "let ${1}: ${2:any} = ${3};\n${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "tlet \"ts let\"": true
        },
        "opts": {}
      },
      {
        "content": "var ${1}: ${2:any} = ${3};\n${0}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "tvar \"ts var\"": true
        },
        "opts": {}
      },
      {
        "content": "${1}: ${0:any}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "+ \"ts create field\"": true
        },
        "opts": {}
      },
      {
        "content": "#${1}: ${0:any}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "#+ \"ts create private field using #\"": true
        },
        "opts": {}
      },
      {
        "content": "public ${1}: ${0:any}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "tpfi \"ts create public field\"": true
        },
        "opts": {}
      },
      {
        "content": "private ${1}: ${0:any}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "tprfi \"ts create private field\"": true
        },
        "opts": {}
      },
      {
        "content": "protected ${1}: ${0:any}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "tprofi \"ts create protected field\"": true
        },
        "opts": {}
      },
      {
        "content": "interface ${1} {\n\t${2}: ${3:any};\n\t${0}\n}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "int \"interface\"": true
        },
        "opts": {}
      },
      {
        "content": "interface ${1} extends ${2} {\n\t${3}: ${4:any};\n\t${0}\n}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "intx \"interface extends\"": true
        },
        "opts": {}
      },
      {
        "content": "function ${1}(${2}): ${3:any} {\n\t${0}\n}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "tfun \"ts function\"": true
        },
        "opts": {}
      },
      {
        "content": "public ${1}(${2}): ${3:any} {\n\t${0}\n}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "tpmet \"ts public method\"": true
        },
        "opts": {}
      },
      {
        "content": "public static ${1}(${2}): ${3:any} {\n\t${0}\n}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "tpsmet \"ts public static method\"": true
        },
        "opts": {}
      },
      {
        "content": "private ${1}(${2}): ${3:any} {\n\t${0}\n}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "tprmet \"ts private method\"": true
        },
        "opts": {}
      },
      {
        "content": "protected ${1}(${2}): ${3:any} {\n\t${0}\n}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "tpromet \"ts protected method\"": true
        },
        "opts": {}
      },
      {
        "content": "class ${1} {\n\t${2}\n\tconstructor(public ${3}: ${4: any}) {\n\t\t${5}\n\t}\n\t${0}\n}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "tcla \"ts class\"": true
        },
        "opts": {}
      },
      {
        "content": "class ${1} extends ${2} {\n\t${3}\n\tconstructor(public ${4}: ${5: any}) {\n\t\t${6}\n\t}\n\t${0}\n}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "tclax \"ts class extends\"": true
        },
        "opts": {}
      }
    ],
    "typescriptreact": [],
    "verilog": [
      {
        "content": "always @(${1:*})${2:TARGET}",
        "doc": "",
        "grammar": "snu",
        "label": "always @()",
        "matches": {
          "al": true
        },
        "opts": {}
      },
      {
        "content": "always @(posedge clk${1})${2:TARGET}",
        "doc": "",
        "grammar": "snu",
        "label": "always @(posedge clk)",
        "matches": {
          "alclk": true
        },
        "opts": {}
      },
      {
        "content": "begin\n    ${1:TARGET}\nend",
        "doc": "",
        "grammar": "snu",
        "label": "begin ... end",
        "matches": {
          "be": true,
          "beginend": true
        },
        "opts": {}
      },
      {
        "content": "reg${1:#: nbit} ${2:reg}_r, $2_w;${3:TARGET}",
        "doc": "",
        "grammar": "snu",
        "label": "reg [] _r, _w;",
        "matches": {
          "rw": true
        },
        "opts": {}
      },
      {
        "content": "input${1:#: nbit} i_${2:name},",
        "doc": "",
        "grammar": "snu",
        "label": "input [] i_,",
        "matches": {
          "I": true
        },
        "opts": {}
      },
      {
        "content": "output${1:#: nbit} o_${2:name},",
        "doc": "",
        "grammar": "snu",
        "label": "output [] o_,",
        "matches": {
          "O": true
        },
        "opts": {}
      },
      {
        "content": "inout${1:#: nbit} io_${2:name},",
        "doc": "",
        "grammar": "snu",
        "label": "inout [] io_,",
        "matches": {
          "IO": true
        },
        "opts": {}
      },
      {
        "content": "reg [${1}:${2:0}] ${3:name} [${4:0}:${5}];${6:TARGET}",
        "doc": "",
        "grammar": "snu",
        "label": "reg [] name []",
        "matches": {
          "regm": true,
          "regmemory": true
        },
        "opts": {}
      },
      {
        "content": "${1:reg}_r <= $1_w;${2:TARGET}",
        "doc": "",
        "grammar": "snu",
        "label": "_r <= _w;",
        "matches": {
          "regseq": true
        },
        "opts": {}
      },
      {
        "content": "${1:reg}_w = $1_r;${2:TARGET}",
        "doc": "",
        "grammar": "snu",
        "label": "_w = _r",
        "matches": {
          "regkeep": true
        },
        "opts": {}
      },
      {
        "content": "assign ${1:#:name} = ${2:#:val};${3:TARGET}",
        "doc": "",
        "grammar": "snu",
        "label": "assign ... = ...",
        "matches": {
          "as": true,
          "assign": true
        },
        "opts": {}
      },
      {
        "content": "parameter ${1:#:name} = ${2:#:val};${3:TARGET}",
        "doc": "",
        "grammar": "snu",
        "label": "parameter ... = ...",
        "matches": {
          "pa": true,
          "parameter": true
        },
        "opts": {}
      },
      {
        "content": "localparam ${1:#:name} = ${2:#:val};${3:TARGET}",
        "doc": "",
        "grammar": "snu",
        "label": "localparam ... = ...",
        "matches": {
          "localparam": true,
          "lpa": true
        },
        "opts": {}
      },
      {
        "content": "if (${1:#:condition})${0:TARGET}",
        "doc": "",
        "grammar": "snu",
        "label": "if()",
        "matches": {
          "if": true
        },
        "opts": {}
      },
      {
        "content": "else${0:TARGET}",
        "doc": "",
        "grammar": "snu",
        "label": "else",
        "matches": {
          "el": true,
          "else": true
        },
        "opts": {}
      },
      {
        "content": "else if (${1:#:condition})${0:TARGET}",
        "doc": "",
        "grammar": "snu",
        "label": "else if ()",
        "matches": {
          "elseif": true
        },
        "opts": {}
      },
      {
        "content": "initial begin\n    ${0:TARGET}\nend",
        "doc": "",
        "grammar": "snu",
        "label": "initial begin ... end",
        "matches": {
          "init": true,
          "initial": true
        },
        "opts": {}
      },
      {
        "content": "for (${1:i} = ${2}; $1 < ${3}; ${4:$1 = $1 + 1})${0:TARGET}",
        "doc": "",
        "grammar": "snu",
        "label": "for () begin ... end",
        "matches": {
          "for": true
        },
        "opts": {}
      },
      {
        "content": "while (${1:#:condition})${0:TARGET}",
        "doc": "",
        "grammar": "snu",
        "label": "while () begin ... end",
        "matches": {
          "while": true
        },
        "opts": {}
      },
      {
        "content": "case (${1})\n    ${2:'b0}: begin\n        ${3}\n    end\n    default : begin\n        ${4}\n    end\nendcase",
        "doc": "",
        "grammar": "snu",
        "label": "case () ... endcase",
        "matches": {
          "case": true
        },
        "opts": {}
      },
      {
        "content": "function${1:# nbit} ${1:func_name};\n    ${2:portlist};\n    begin\n        ${0:TARGET};\n    end\nendfunction",
        "doc": "",
        "grammar": "snu",
        "label": "function ... endfunction",
        "matches": {
          "func": true,
          "function": true
        },
        "opts": {}
      },
      {
        "content": "(${1:#:condition}) ? ${2:#:a} : ${3:#:b}",
        "doc": "",
        "grammar": "snu",
        "label": "() ? a : b",
        "matches": {
          "ter": true,
          "ternary": true
        },
        "opts": {}
      },
      {
        "content": "$display(\"${1}\", ${2});",
        "doc": "",
        "grammar": "snu",
        "label": "$display(\"...\", ...);",
        "matches": {
          "display": true
        },
        "opts": {}
      },
      {
        "content": "$strobe(\"${1}\", ${2});",
        "doc": "",
        "grammar": "snu",
        "label": "$strobe(\"...\", ...);",
        "matches": {
          "strobe": true
        },
        "opts": {}
      },
      {
        "content": "if (${1}) begin\n\t${0}\nend",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "if": true
        },
        "opts": {}
      },
      {
        "content": "if (${1}) begin\n\t${2}\nend\nelse begin\n\t${3}\nend",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ife": true
        },
        "opts": {}
      },
      {
        "content": "else if (${1}) begin\n\t${0}\nend",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "eif": true
        },
        "opts": {}
      },
      {
        "content": "else begin\n\t${0}\nend",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "el": true
        },
        "opts": {}
      },
      {
        "content": "while (${1}) begin\n\t${0}\nend",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "wh": true
        },
        "opts": {}
      },
      {
        "content": "repeat (${1}) begin\n\t${0}\nend",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "rep": true
        },
        "opts": {}
      },
      {
        "content": "case (${1:/* variable */})\n\t${2:/* value */}: begin\n\t\t${3}\n\tend\n\tdefault: begin\n\t\t${4}\n\tend\nendcase",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "case": true
        },
        "opts": {}
      },
      {
        "content": "casez (${1:/* variable */})\n\t${2:/* value */}: begin\n\t\t${3}\n\tend\n\tdefault: begin\n\t\t${4}\n\tend\nendcase",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "casez": true
        },
        "opts": {}
      },
      {
        "content": "always @(${1:/* sensitive list */}) begin\n\t${0}\nend",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "al": true
        },
        "opts": {}
      },
      {
        "content": "for (int ${2:i} = 0; $2 < ${1:count}; $2${3:++}) begin\n\t${4}\nend",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "for": true
        },
        "opts": {}
      },
      {
        "content": "forever begin\n\t${0}\nend",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "forev": true
        },
        "opts": {}
      },
      {
        "content": "function ${1:void} ${2:name}(${3});\n\t${0}\nendfunction: $2",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "fun": true
        },
        "opts": {}
      },
      {
        "content": "task ${1:name}(${2});\n\t${0}\nendtask: $1",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "task": true
        },
        "opts": {}
      },
      {
        "content": "initial begin\n\t${0}\nend",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ini": true
        },
        "opts": {}
      },
      {
        "content": "typedef enum ${2:logic[15:0]}\n{\n\t${3:REG = 16'h0000}\n} ${1:my_dest_t};",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "tde": true
        },
        "opts": {}
      }
    ],
    "vhdl": [
      {
        "content": "library ${1}\nuse $1.${2}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "lib": true
        },
        "opts": {}
      },
      {
        "content": "library IEEE;\nuse IEEE.std_logic_1164.ALL;\nuse IEEE.numeric_std.ALL;",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "libs": true
        },
        "opts": {}
      },
      {
        "content": "library UNISIM;\nuse UNISIM.VCOMPONENTS.ALL;",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "libx": true
        },
        "opts": {}
      },
      {
        "content": "signal ${1} : std_logic;",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "st": true
        },
        "opts": {}
      },
      {
        "content": "signal ${1} : std_logic_vector (${2} downto 0);",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "sv": true
        },
        "opts": {}
      },
      {
        "content": "${1} : in std_logic;",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ist": true
        },
        "opts": {}
      },
      {
        "content": "${1} : in std_logic_vector (${2} downto 0);",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "isv": true
        },
        "opts": {}
      },
      {
        "content": "${1} : out std_logic;",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ost": true
        },
        "opts": {}
      },
      {
        "content": "${1} : out std_logic_vector (${2} downto 0);",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "osv": true
        },
        "opts": {}
      },
      {
        "content": "signal ${1} : unsigned (${2} downto 0);",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "un": true
        },
        "opts": {}
      },
      {
        "content": "process (${1})\nbegin\n\t${2}\nend process;",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "pr": true
        },
        "opts": {}
      },
      {
        "content": "process (${1:clk})\nbegin\n\tif rising_edge ($1) then\n\t\t${2}\n\tend if;\nend process;",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "prc": true
        },
        "opts": {}
      },
      {
        "content": "process (${1:clk}, ${2:nrst})\nbegin\n\tif ($2 = '${3:0}') then\n\t\t${4}\n\telsif rising_edge($1) then\n\t\t${5}\n\tend if;\nend process;",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "prcr": true
        },
        "opts": {}
      },
      {
        "content": "process (${1:all})\nbegin\n\t${2}\nend process;",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "pra": true
        },
        "opts": {}
      },
      {
        "content": "if ${1} then\n\t${2}\nend if;",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "if": true
        },
        "opts": {}
      },
      {
        "content": "if ${1} then\n\t${2}\nelse\n\t${3}\nend if;",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ife": true
        },
        "opts": {}
      },
      {
        "content": "else\n\t${1}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "el": true
        },
        "opts": {}
      },
      {
        "content": "elsif ${1} then\n\t${2}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "eif": true
        },
        "opts": {}
      },
      {
        "content": "case ${1} is\n\t${2}\nend case;",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ca": true
        },
        "opts": {}
      },
      {
        "content": "when ${1} =>\n\t${2}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "wh": true
        },
        "opts": {}
      },
      {
        "content": "for ${1:i} in ${2} ${3:to} ${4} loop\n\t${5}\nend loop;",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "for": true
        },
        "opts": {}
      },
      {
        "content": "while ${1} loop\n\t${2}\nend loop;",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "wh": true
        },
        "opts": {}
      },
      {
        "content": "(others => '${1:0}');",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "oth": true
        },
        "opts": {}
      }
    ],
    "vim": [
      {
        "content": "if ${1:#:condition}\n  ${0:TARGET}\nendif",
        "doc": "",
        "grammar": "snu",
        "label": "if endif",
        "matches": {
          "if": true
        },
        "opts": {
          "head": true
        }
      },
      {
        "content": "elseif ${1:#:condition}\n    ${0:TARGET}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "elseif": true
        },
        "opts": {
          "head": true
        }
      },
      {
        "content": "if ${1:#:condition}\n  ${2:TARGET}\nelse\n  ${3}\nendif",
        "doc": "",
        "grammar": "snu",
        "label": "if else endif",
        "matches": {
          "ifelse": true
        },
        "opts": {
          "head": true
        }
      },
      {
        "content": "for ${1:#:var} in ${2:#:list}\n  ${0:TARGET}\nendfor",
        "doc": "",
        "grammar": "snu",
        "label": "for in endfor",
        "matches": {
          "for": true
        },
        "opts": {
          "head": true
        }
      },
      {
        "content": "while ${1:#:condition}\n  ${0:TARGET}\nendwhile",
        "doc": "",
        "grammar": "snu",
        "label": "while endwhile",
        "matches": {
          "while": true
        },
        "opts": {
          "head": true
        }
      },
      {
        "content": "function! ${1:#:func_name}(${2}) abort\n  ${0:TARGET}\nendfunction",
        "doc": "",
        "grammar": "snu",
        "label": "func endfunc",
        "matches": {
          "func": true,
          "function": true
        },
        "opts": {
          "head": true
        }
      },
      {
        "content": "try\n  ${1:TARGET}\ncatch /${2:#:pattern}/\n  ${3}\nendtry",
        "doc": "",
        "grammar": "snu",
        "label": "try endtry",
        "matches": {
          "try": true
        },
        "opts": {
          "head": true
        }
      },
      {
        "content": "try\n  ${1:TARGET}\nfinally\n  ${2}\nendtry",
        "doc": "",
        "grammar": "snu",
        "label": "try ... finally ... endtry",
        "matches": {
          "tryf": true,
          "tryfinally": true
        },
        "opts": {
          "head": true
        }
      },
      {
        "content": "catch ${1:/${2:#:pattern: empty, E484, Vim(cmdname):{errmsg\\\\}\\}/}",
        "doc": "",
        "grammar": "snu",
        "label": "catch /pattern/",
        "matches": {
          "catch": true
        },
        "opts": {
          "head": true
        }
      },
      {
        "content": "echomsg string(${1:TARGET})",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "echomsg": true,
          "log": true
        },
        "opts": {
          "head": true
        }
      },
      {
        "content": "command! ${1:#:command_name} call ${2:#:func_name}",
        "doc": "",
        "grammar": "snu",
        "label": "command call function",
        "matches": {
          "command": true
        },
        "opts": {
          "head": true
        }
      },
      {
        "content": "function! ${1:#:func_name}(arglead, cmdline, cursorpos) abort\n  return filter(${2:#:list}, 'stridx(v:val, a:arglead) == 0')\nendfunction",
        "doc": "",
        "grammar": "snu",
        "label": "customlist complete function",
        "matches": {
          "customlist": true
        },
        "opts": {
          "head": true
        }
      },
      {
        "content": "augroup ${1:#:augroup_name}\n  autocmd!\n  autocmd ${2:#:event}\naugroup END",
        "doc": "",
        "grammar": "snu",
        "label": "augroup with autocmds",
        "matches": {
          "augroup": true
        },
        "opts": {
          "head": true
        }
      },
      {
        "content": "redir => ${1:#:var}\n\t${2::TARGET}\nredir END",
        "doc": "",
        "grammar": "snu",
        "label": "redir => var",
        "matches": {
          "redir": true
        },
        "opts": {
          "head": true
        }
      },
      {
        "content": "let s:hooks = neobundle#get_hooks('${1}')\nfunction! s:hooks.on_source(bundle) abort\n  ${0}\nendfunction\nunlet s:hooks",
        "doc": "",
        "grammar": "snu",
        "label": "neobundle hooks",
        "matches": {
          "bundle_hooks": true
        },
        "opts": {}
      },
      {
        "content": "if exists('g:loaded_${1}')\n  finish\nendif\n${0}\nlet g:loaded_$1 = 1",
        "doc": "",
        "grammar": "snu",
        "label": "if exists('g:loaded_{plugin-name}')",
        "matches": {
          "g:loaded": true,
          "loaded": true
        },
        "opts": {
          "head": true
        }
      },
      {
        "content": "\" vim: ${0:foldmethod=marker}",
        "doc": "",
        "grammar": "snu",
        "label": "\" vim: {modeline}",
        "matches": {
          "modeline": true
        },
        "opts": {}
      },
      {
        "content": "if !exists('b:undo_ftplugin')\n  let b:undo_ftplugin = ''\nendif\n${1}\nlet b:undo_ftplugin .= '\n\\ | setlocal ${2:#:option_name1< option_name2<...}\n\\'",
        "doc": "",
        "grammar": "snu",
        "label": "if !exists('b:undo_ftplugin')",
        "matches": {
          "b:undo_ftplugin": true,
          "undo_ftplugin": true
        },
        "opts": {}
      },
      {
        "content": "python << EOF\n${0}\nEOF",
        "doc": "",
        "grammar": "snu",
        "label": "python <<EOF | EOF",
        "matches": {
          "py": true,
          "python": true
        },
        "opts": {
          "head": true
        }
      },
      {
        "content": "python3 << EOF\n${0}\nEOF",
        "doc": "",
        "grammar": "snu",
        "label": "python3 <<EOF | EOF",
        "matches": {
          "py3": true,
          "python3": true
        },
        "opts": {
          "head": true
        }
      },
      {
        "content": "lua << EOF\n${0}\nEOF",
        "doc": "",
        "grammar": "snu",
        "label": "lua <<EOF | EOF",
        "matches": {
          "lua": true
        },
        "opts": {
          "head": true
        }
      },
      {
        "content": "let pos_save = getpos('.')\ntry\n  ${0}\nfinally\n  call setpos('.', pos_save)\nendtry",
        "doc": "",
        "grammar": "snu",
        "label": "use pos save",
        "matches": {
          "save_pos": true
        },
        "opts": {
          "head": true
        }
      },
      {
        "content": "let save_reg_$1 = getreg('${1}')\nlet save_regtype_$1 = getregtype('$1')\ntry\n  ${0}\nfinally\n  call setreg('$1', save_reg_$1, save_regtype_$1)\nendtry",
        "doc": "",
        "grammar": "snu",
        "label": "use register save",
        "matches": {
          "save_register": true
        },
        "opts": {
          "head": true
        }
      },
      {
        "content": "let $1_save = &${1}\nlet &$1 = ${2}\ntry\n  ${0}\nfinally\n  let &$1 = $1_save\nendtry",
        "doc": "",
        "grammar": "snu",
        "label": "use option save",
        "matches": {
          "save_option": true
        },
        "opts": {
          "head": true
        }
      },
      {
        "content": "echomsg string([${0:TARGET}])",
        "doc": "",
        "grammar": "snu",
        "label": "debug-echomsg",
        "matches": {
          "p": true
        },
        "opts": {
          "head": true
        }
      },
      {
        "content": "v:version > ${1} || (v:version == $1 && has('patch${2}'))",
        "doc": "",
        "grammar": "snu",
        "label": "vim-version-check",
        "matches": {
          "version": true
        },
        "opts": {}
      },
      {
        "content": "has('patch-${1}')",
        "doc": "",
        "grammar": "snu",
        "label": "vim-version-check-new",
        "matches": {
          "version_new": true
        },
        "opts": {}
      },
      {
        "content": "try\n\t${1:${VISUAL}}\ncatch ${2}\n\t${0}\nendtry",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "t try ... catch statement": true
        },
        "opts": {}
      },
      {
        "content": "for ${1} in ${2}\n\t${0:${VISUAL}}\nendfor",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "for for ... in loop": true
        },
        "opts": {}
      },
      {
        "content": "for [${1},${2}] in items(${3})\n\t${0}\n\tunlet $1 $2\nendfor",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "forkv for [key, value] in loop": true
        },
        "opts": {}
      },
      {
        "content": "while ${1}\n\t${0:${VISUAL}}\nendw",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "wh while loop": true
        },
        "opts": {}
      },
      {
        "content": "if ${1}\n\t${0:${VISUAL}}\nendif",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "if if statement": true
        },
        "opts": {}
      },
      {
        "content": "if ${1}\n\t${2:${VISUAL}}\nelse\n\t${0}\nendif",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ife if ... else statement": true
        },
        "opts": {}
      },
      {
        "content": "augroup ${1:AU_NAME}\n\tautocmd!\n\tautocmd ${2:BufRead,BufNewFile} ${3:*.ext,*.ext3|<buffer[=N]>} ${0}\naugroup END",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "au augroup ... autocmd block": true
        },
        "opts": {}
      },
      {
        "content": "augroup ${1:AU_NAME}\n\tautocmd!\n\t${0:${VISUAL}}\naugroup END",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "auv augroupvisual ... autocmd block with visual placeholder": true
        },
        "opts": {}
      },
      {
        "content": "Plugin '${0}'",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "bun Vundle.vim Plugin definition": true
        },
        "opts": {}
      },
      {
        "content": "Plug '${0}'",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "plug vim-plug Plugin definition": true
        },
        "opts": {}
      },
      {
        "content": "Plug '${1}', { 'do': '${0}' }",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "plugdo vim-plug Plugin definition with { 'do': '' }": true
        },
        "opts": {}
      },
      {
        "content": "Plug '${1}', { 'on': '${0}' }",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "plugon vim-plug Plugin definition with { 'on': '' }": true
        },
        "opts": {}
      },
      {
        "content": "Plug '${1}', { 'for': '${0}' }",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "plugfor vim-plug Plugin definition with { 'for': '' }": true
        },
        "opts": {}
      },
      {
        "content": "Plug '${1}', { 'branch': '${0}' }",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "plugbr vim-plug Plugin definition with { 'branch': '' }": true
        },
        "opts": {}
      },
      {
        "content": "Plug '${1}', { 'tag': '${0}' }",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "plugtag vim-plug Plugin definition with { 'tag': '' }": true
        },
        "opts": {}
      },
      {
        "content": "let ${1:variable} = ${0: value}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "let": true
        },
        "opts": {}
      },
      {
        "content": "set ${1:setting};",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "se": true
        },
        "opts": {}
      },
      {
        "content": "set ${1:setting} = ${0:value}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "set": true
        },
        "opts": {}
      },
      {
        "content": "nnoremap ${1} ${2}<CR>",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "nn": true
        },
        "opts": {}
      },
      {
        "content": "noremap ${1} ${2}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "no": true
        },
        "opts": {}
      },
      {
        "content": "vmap ${1} ${2}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "vm": true
        },
        "opts": {}
      },
      {
        "content": "imap ${1} ${2}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "im": true
        },
        "opts": {}
      },
      {
        "content": "execute ${1}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "exe": true
        },
        "opts": {}
      },
      {
        "content": "if !exists(\"g:${1:MyUltraImportantVar}\")\n\tlet g:$1 = ${2:\"${3:<tab>}\"}\nendif",
        "doc": null,
        "grammar": "snu",
        "label": "Global / configuration variable",
        "matches": {
          "gvar": true
        },
        "opts": {
          "b": true
        }
      },
      {
        "content": "fun ${1:function_name}($2)\n\t${3:\" code}\nendf",
        "doc": null,
        "grammar": "snu",
        "label": "function",
        "matches": {
          "f": true
        },
        "opts": {
          "b": true
        }
      }
    ],
    "vimshell": [
      {
        "content": "ls",
        "doc": "",
        "grammar": "snu",
        "label": "=> ls?",
        "matches": {
          "sl": true
        },
        "opts": {}
      }
    ],
    "vimspec": [
      {
        "content": "function! s:suite.${1}()\n  ${2:TARGET}\n  call s:assert.equal(${3:expected}, ${4:actual})\nendfunction",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "suite": true
        },
        "opts": {
          "head": true
        }
      },
      {
        "content": "call themis#log(${TARGET})",
        "doc": "",
        "grammar": "snu",
        "label": "p",
        "matches": {
          "themis#log (This is an undocumented function)": true
        },
        "opts": {
          "head": true
        }
      }
    ],
    "vimwiki": [
      {
        "content": "*${1}*${2}",
        "doc": "",
        "grammar": "snu",
        "label": "*text*",
        "matches": {
          "bold": true
        },
        "opts": {
          "head": true
        }
      },
      {
        "content": "~~${1}~~${2}",
        "doc": "",
        "grammar": "snu",
        "label": "~~scratch~~",
        "matches": {
          "scratch": true
        },
        "opts": {
          "head": true
        }
      },
      {
        "content": "_${1}_${2}",
        "doc": "",
        "grammar": "snu",
        "label": "_italic_",
        "matches": {
          "italic": true
        },
        "opts": {
          "head": true
        }
      },
      {
        "content": ",,${1},,${2}",
        "doc": "",
        "grammar": "snu",
        "label": ",,sub,,",
        "matches": {
          "sub": true
        },
        "opts": {
          "head": true
        }
      },
      {
        "content": "^${1}^${2}",
        "doc": "",
        "grammar": "snu",
        "label": "^upper^",
        "matches": {
          "upper": true
        },
        "opts": {
          "head": true
        }
      },
      {
        "content": "{{local:${1:image_path}}}${2}",
        "doc": "",
        "grammar": "snu",
        "label": "{{<image path>}}",
        "matches": {
          "image_local": true
        },
        "opts": {
          "head": true
        }
      },
      {
        "content": "{{http://${1:image_url}}}${2}",
        "doc": "",
        "grammar": "snu",
        "label": "{{<image url>}}",
        "matches": {
          "image": true
        },
        "opts": {
          "head": true
        }
      },
      {
        "content": "|${1:title}|${2:title}|\n|---|---|\n|${3:value}|${4:value}${5:TARGET}|",
        "doc": "",
        "grammar": "snu",
        "label": "table template",
        "matches": {
          "table": true
        },
        "opts": {
          "head": true
        }
      },
      {
        "content": "term:: ${1:definintion}",
        "doc": "",
        "grammar": "snu",
        "label": "definition",
        "matches": {
          "definintion": true
        },
        "opts": {
          "head": true
        }
      },
      {
        "content": ":${1:tag}:${3}",
        "doc": "",
        "grammar": "snu",
        "label": ":tag1:tag2:",
        "matches": {
          "tag": true
        },
        "opts": {
          "head": true
        }
      },
      {
        "content": "{{{\n${0:TARGET}\n}}}",
        "doc": "",
        "grammar": "snu",
        "label": "{{{<code>}}}",
        "matches": {
          "code": true
        },
        "opts": {
          "head": true
        }
      }
    ],
    "vital": [
      {
        "content": "vital#${1:#:plugin_name}#new()",
        "doc": "",
        "grammar": "snu",
        "label": "vital#...#new()",
        "matches": {
          "vital_new_without_let": true
        },
        "opts": {}
      },
      {
        "content": "let ${1:s:V} = vital#${2:#:plugin_name}#new()",
        "doc": "",
        "grammar": "snu",
        "label": "let s:V = vital#...#new()",
        "matches": {
          "vital_new": true
        },
        "opts": {
          "head": true
        }
      },
      {
        "content": "${1:s:V}.import('${2:#:module_name}')",
        "doc": "",
        "grammar": "snu",
        "label": "s:V.import('...')",
        "matches": {
          "vital_import_without_let": true
        },
        "opts": {}
      },
      {
        "content": "let ${1:s:M} = ${2:s:V}.import('${3:#:module_name}')",
        "doc": "",
        "grammar": "snu",
        "label": "let s:M = s:V.import('...')",
        "matches": {
          "vital_import": true
        },
        "opts": {
          "head": true
        }
      },
      {
        "content": "${1:s:V}.load('${2:#:module_name}')",
        "doc": "",
        "grammar": "snu",
        "label": "s:V.load('...')",
        "matches": {
          "vital_load_without_call": true
        },
        "opts": {}
      },
      {
        "content": "call ${1:s:V}.load('${2:#:module_name}')",
        "doc": "",
        "grammar": "snu",
        "label": "call s:V.load('...')",
        "matches": {
          "vital_load": true
        },
        "opts": {
          "head": true
        }
      }
    ],
    "vue": [
      {
        "content": "<template>\n\t<${1:div}$2>\n\t\t$0\n\t</${1:div}>\n</template>",
        "doc": "template element",
        "grammar": "lsp",
        "label": "vue-template",
        "matches": {
          "template": true,
          "vue template": true
        },
        "opts": {}
      },
      {
        "content": "v-text=\"${1:msg}\"",
        "doc": "Expects: string. Updates the element’s textContent.",
        "grammar": "lsp",
        "label": "vue-v-text",
        "matches": {
          "vtext": true,
          "vue v-text": true
        },
        "opts": {}
      },
      {
        "content": "v-html=\"${1:html}\"",
        "doc": "Expects: string. Updates the element’s innerHTML.",
        "grammar": "lsp",
        "label": "vue-v-html",
        "matches": {
          "vhtml": true,
          "vue v-html": true
        },
        "opts": {}
      },
      {
        "content": "v-show=\"${1:condition}\"",
        "doc": "Expects: any",
        "grammar": "lsp",
        "label": "vue-v-show",
        "matches": {
          "vshow": true,
          "vue v-show": true
        },
        "opts": {}
      },
      {
        "content": "v-if=\"${1:condition}\"",
        "doc": "Expects: any",
        "grammar": "lsp",
        "label": "vue-v-if",
        "matches": {
          "vif": true,
          "vue v-if": true
        },
        "opts": {}
      },
      {
        "content": "v-else",
        "doc": "Does not expect expression. previous sibling element must have v-if or v-else-if.",
        "grammar": "lsp",
        "label": "vue-v-else",
        "matches": {
          "velse": true,
          "vue v-else": true
        },
        "opts": {}
      },
      {
        "content": "v-else-if=\"${1:condition}\"",
        "doc": "Expects: any. previous sibling element must have v-if or v-else-if.",
        "grammar": "lsp",
        "label": "vue-v-else-if",
        "matches": {
          "velseif": true,
          "vue v-else-if": true
        },
        "opts": {}
      },
      {
        "content": "v-for=\"${1:item} in ${2:items}\"",
        "doc": "Expects: Array | Object | number | string",
        "grammar": "lsp",
        "label": "vue-v-for-without-key",
        "matches": {
          "vforwithoutkey": true,
          "vue v-for-without-key": true
        },
        "opts": {}
      },
      {
        "content": "v-for=\"(${1:item}, ${2:index}) in ${3:items}\" :key=\"${4:index}\"",
        "doc": "Expects: Array | Object | number | string",
        "grammar": "lsp",
        "label": "vue-v-for",
        "matches": {
          "vfor": true,
          "vue v-for": true
        },
        "opts": {}
      },
      {
        "content": "v-on:${1:event}=\"${2:handle}\"",
        "doc": "Expects: Function | Inline Statement",
        "grammar": "lsp",
        "label": "vue-v-on",
        "matches": {
          "von": true,
          "vue v-on": true
        },
        "opts": {}
      },
      {
        "content": "v-bind$1=\"${2}\"",
        "doc": "Expects: any (with argument) | Object (without argument)",
        "grammar": "lsp",
        "label": "vue-v-bind",
        "matches": {
          "vbind": true,
          "vue v-bind": true
        },
        "opts": {}
      },
      {
        "content": "v-model=\"${1:something}\"",
        "doc": "Expects: varies based on value of form inputs element or output of components",
        "grammar": "lsp",
        "label": "vue-v-model",
        "matches": {
          "vmodel": true,
          "vue v-model": true
        },
        "opts": {}
      },
      {
        "content": "v-pre",
        "doc": "Does not expect expression",
        "grammar": "lsp",
        "label": "vue-v-pre",
        "matches": {
          "vpre": true,
          "vue v-pre": true
        },
        "opts": {}
      },
      {
        "content": "v-cloak",
        "doc": "Does not expect expression",
        "grammar": "lsp",
        "label": "vue-v-cloak",
        "matches": {
          "vcloak": true,
          "vue v-cloak": true
        },
        "opts": {}
      },
      {
        "content": "v-once",
        "doc": "Does not expect expression",
        "grammar": "lsp",
        "label": "vue-v-once",
        "matches": {
          "vonce": true,
          "vue v-once": true
        },
        "opts": {}
      },
      {
        "content": ":key=\"${1:key}\"",
        "doc": "Expects: string. Children of the same common parent must have unique keys. Duplicate keys will cause render errors.",
        "grammar": "lsp",
        "label": "vue-key",
        "matches": {
          "key": true,
          "vue key": true
        },
        "opts": {}
      },
      {
        "content": "ref=\"${1:reference}\"$0",
        "doc": "Expects: string. ref is used to register a reference to an element or a child component. The reference will be registered under the parent component’s $refs object. If used on a plain DOM element, the reference will be that element; if used on a child component, the reference will be component instance.",
        "grammar": "lsp",
        "label": "vue-ref",
        "matches": {
          "ref": true,
          "vue ref": true
        },
        "opts": {}
      },
      {
        "content": "slot=\"$1\"$0",
        "doc": "slot=''. Expects: string. Used on content inserted into child components to indicate which named slot the content belongs to.",
        "grammar": "lsp",
        "label": "vue-slota",
        "matches": {
          "slota": true,
          "vue slota": true
        },
        "opts": {}
      },
      {
        "content": "<slot$1>$2</slot>$0",
        "doc": "<slot></slot>. Expects: string. Used on content inserted into child components to indicate which named slot the content belongs to.",
        "grammar": "lsp",
        "label": "vue-slote",
        "matches": {
          "slote": true,
          "vue slote": true
        },
        "opts": {}
      },
      {
        "content": "slot-scope=\"$1\"$0",
        "doc": "Used to denote an element or component as a scoped slot. The attribute’s value should be a valid JavaScript expression that can appear in the argument position of a function signature. This means in supported environments you can also use ES2015 destructuring in the expression. Serves as a replacement for scope in 2.5.0+.",
        "grammar": "lsp",
        "label": "vue-slotscope",
        "matches": {
          "slotscope": true,
          "vue slotscope": true
        },
        "opts": {}
      },
      {
        "content": "scope=\"${1:this api replaced by slot-scope in 2.5.0+}\"$0",
        "doc": "Used to denote a <template> element as a scoped slot, which is replaced by `slot-scope` in 2.5.0+.",
        "grammar": "lsp",
        "label": "vue-scope",
        "matches": {
          "scope": true,
          "vue scope": true
        },
        "opts": {}
      },
      {
        "content": "<component :is=\"${1:componentId}\"></component>$0",
        "doc": "component element",
        "grammar": "lsp",
        "label": "vue-component",
        "matches": {
          "component": true,
          "vue component": true
        },
        "opts": {}
      },
      {
        "content": "<keep-alive$1>\n$2\n</keep-alive>$0",
        "doc": "keep-alive element",
        "grammar": "lsp",
        "label": "vue-keep-alive",
        "matches": {
          "keepalive": true,
          "vue keep-alive": true
        },
        "opts": {}
      },
      {
        "content": "<transition$1>\n$2\n</transition>$0",
        "doc": "transition element",
        "grammar": "lsp",
        "label": "vue-transition",
        "matches": {
          "transition": true,
          "vue transition": true
        },
        "opts": {}
      },
      {
        "content": "<transition-group$1>\n$2\n</transition-group>",
        "doc": "transition-group element",
        "grammar": "lsp",
        "label": "vue-transition-group",
        "matches": {
          "transitiongroup": true,
          "vue transition-group": true
        },
        "opts": {}
      },
      {
        "content": "enter-class=\"$1\"$0",
        "doc": "enter-class=''. Expects: string.",
        "grammar": "lsp",
        "label": "vue-enter-class",
        "matches": {
          "enterclass": true,
          "vue enter-class": true
        },
        "opts": {}
      },
      {
        "content": "leave-class=\"$1\"$0",
        "doc": "leave-class=''. Expects: string.",
        "grammar": "lsp",
        "label": "vue-leave-class",
        "matches": {
          "leaveclass": true,
          "vue leave-class": true
        },
        "opts": {}
      },
      {
        "content": "appear-class=\"$1\"$0",
        "doc": "appear-class=''. Expects: string.",
        "grammar": "lsp",
        "label": "vue-appear-class",
        "matches": {
          "appearclass": true,
          "vue appear-class": true
        },
        "opts": {}
      },
      {
        "content": "enter-to-class=\"$1\"$0",
        "doc": "enter-to-class=''. Expects: string.",
        "grammar": "lsp",
        "label": "vue-enter-to-class",
        "matches": {
          "entertoclass": true,
          "vue enter-to-class": true
        },
        "opts": {}
      },
      {
        "content": "leave-to-class=\"$1\"$0",
        "doc": "leave-to-class=''. Expects: string.",
        "grammar": "lsp",
        "label": "vue-leave-to-class",
        "matches": {
          "leavetoclass": true,
          "vue leave-to-class": true
        },
        "opts": {}
      },
      {
        "content": "appear-to-class=\"$1\"$0",
        "doc": "appear-to-class=''. Expects: string.",
        "grammar": "lsp",
        "label": "vue-appear-to-class",
        "matches": {
          "appeartoclass": true,
          "vue appear-to-class": true
        },
        "opts": {}
      },
      {
        "content": "enter-active-class=\"$1\"$0",
        "doc": "enter-active-class=''. Expects: string.",
        "grammar": "lsp",
        "label": "vue-enter-active-class",
        "matches": {
          "enteractiveclass": true,
          "vue enter-active-class": true
        },
        "opts": {}
      },
      {
        "content": "leave-active-class=\"$1\"$0",
        "doc": "leave-active-class=''. Expects: string.",
        "grammar": "lsp",
        "label": "vue-leave-active-class",
        "matches": {
          "leaveactiveclass": true,
          "vue leave-active-class": true
        },
        "opts": {}
      },
      {
        "content": "appear-active-class=\"$1\"$0",
        "doc": "appear-active-class=''. Expects: string.",
        "grammar": "lsp",
        "label": "vue-appear-active-class",
        "matches": {
          "appearactiveclass": true,
          "vue appear-active-class": true
        },
        "opts": {}
      },
      {
        "content": "@before-enter=\"$1\"$0",
        "doc": "@before-enter=''",
        "grammar": "lsp",
        "label": "vue-before-enter",
        "matches": {
          "beforeenterevent": true,
          "vue before-enter": true
        },
        "opts": {}
      },
      {
        "content": "@before-leave=\"$1\"$0",
        "doc": "@before-leave=''",
        "grammar": "lsp",
        "label": "vue-before-leave",
        "matches": {
          "beforeleaveevent": true,
          "vue before-leave": true
        },
        "opts": {}
      },
      {
        "content": "@before-appear=\"$1\"$0",
        "doc": "@before-appear=''",
        "grammar": "lsp",
        "label": "vue-before-appear",
        "matches": {
          "beforeappearevent": true,
          "vue before-appear": true
        },
        "opts": {}
      },
      {
        "content": "@enter=\"$1\"$0",
        "doc": "@enter=''",
        "grammar": "lsp",
        "label": "vue-enter",
        "matches": {
          "enterevent": true,
          "vue enter": true
        },
        "opts": {}
      },
      {
        "content": "@leave=\"$1\"$0",
        "doc": "@leave=''",
        "grammar": "lsp",
        "label": "vue-leave",
        "matches": {
          "leaveevent": true,
          "vue leave": true
        },
        "opts": {}
      },
      {
        "content": "@appear=\"$1\"$0",
        "doc": "@appear=''",
        "grammar": "lsp",
        "label": "vue-appear",
        "matches": {
          "appearevent": true,
          "vue appear": true
        },
        "opts": {}
      },
      {
        "content": "@after-enter=\"$1\"$0",
        "doc": "@after-enter=''",
        "grammar": "lsp",
        "label": "vue-after-enter",
        "matches": {
          "afterenterevent": true,
          "vue after-enter": true
        },
        "opts": {}
      },
      {
        "content": "@after-leave=\"$1\"$0",
        "doc": "@after-leave=''",
        "grammar": "lsp",
        "label": "vue-after-leave",
        "matches": {
          "afterleaveevent": true,
          "vue after-leave": true
        },
        "opts": {}
      },
      {
        "content": "@after-appear=\"$1\"$0",
        "doc": "@after-appear=''",
        "grammar": "lsp",
        "label": "vue-after-appear",
        "matches": {
          "afterappearevent": true,
          "vue after-appear": true
        },
        "opts": {}
      },
      {
        "content": "@enter-cancelled=\"$1\"$0",
        "doc": "@enter-cancelled=''",
        "grammar": "lsp",
        "label": "vue-enter-cancelled",
        "matches": {
          "entercancelledevent": true,
          "vue enter-cancelled": true
        },
        "opts": {}
      },
      {
        "content": "@leave-cancelled=\"$1\"$0",
        "doc": "@leave-cancelled='' (v-show only)",
        "grammar": "lsp",
        "label": "vue-leave-cancelled",
        "matches": {
          "leavecancelledevent": true,
          "vue leave-cancelled": true
        },
        "opts": {}
      },
      {
        "content": "@appear-cancelled=\"$1\"$0",
        "doc": "@appear-cancelled=''",
        "grammar": "lsp",
        "label": "vue-appear-cancelled",
        "matches": {
          "appearcancelledevent": true,
          "vue appear-cancelled": true
        },
        "opts": {}
      },
      {
        "content": "<router-link $1>$2</router-link>$0",
        "doc": "router-link element",
        "grammar": "lsp",
        "label": "vue-routerlink",
        "matches": {
          "routerlink": true,
          "vue routerlink": true
        },
        "opts": {}
      },
      {
        "content": "<router-link to=\"$1\">$2</router-link>$0",
        "doc": "<router-link to=''></router-link>. router-link element",
        "grammar": "lsp",
        "label": "vue-routerlinkto",
        "matches": {
          "routerlinkto": true,
          "vue routerlinkto": true
        },
        "opts": {}
      },
      {
        "content": "to=\"$1\"$0",
        "doc": "to=''",
        "grammar": "lsp",
        "label": "vue-to",
        "matches": {
          "to": true,
          "vue to": true
        },
        "opts": {}
      },
      {
        "content": "tag=\"$1\"$0",
        "doc": "tag=''",
        "grammar": "lsp",
        "label": "vue-tag",
        "matches": {
          "tag": true,
          "vue tag": true
        },
        "opts": {}
      },
      {
        "content": "<router-view>$1</router-view>$0",
        "doc": "router-view element",
        "grammar": "lsp",
        "label": "vue-routerview",
        "matches": {
          "routerview": true,
          "vue routerview": true
        },
        "opts": {}
      },
      {
        "content": "data() {\n\treturn {\n\t\t${1:key}: ${2:value}\n\t}\n},",
        "doc": "Vue Component Data",
        "grammar": "lsp",
        "label": "vue-data",
        "matches": {
          "vdata": true,
          "vue data": true
        },
        "opts": {}
      },
      {
        "content": "methods: {\n\t${1:name}() {\n\t\t${0}\n\t}\n},",
        "doc": "vue method",
        "grammar": "lsp",
        "label": "vue-methods",
        "matches": {
          "vmethod": true,
          "vue methods": true
        },
        "opts": {}
      },
      {
        "content": "computed: {\n\t${1:name}() {\n\t\treturn this.${2:data} ${0}\n\t}\n},",
        "doc": "computed value",
        "grammar": "lsp",
        "label": "vue-computed",
        "matches": {
          "vcomputed": true,
          "vue computed": true
        },
        "opts": {}
      },
      {
        "content": "beforeCreate () {\n\t${0};\n},",
        "doc": "beforeCreate lifecycle method",
        "grammar": "lsp",
        "label": "vue-lifecycle-beforecreate",
        "matches": {
          "vbeforecreate": true,
          "vue lifecycle beforecreate": true
        },
        "opts": {}
      },
      {
        "content": "created () {\n\t${0};\n},",
        "doc": "created lifecycle method",
        "grammar": "lsp",
        "label": "vue-lifecycle-created",
        "matches": {
          "vcreated": true,
          "vue lifecycle created": true
        },
        "opts": {}
      },
      {
        "content": "beforeMount () {\n\t${0};\n},",
        "doc": "beforeMount lifecycle method",
        "grammar": "lsp",
        "label": "vue-lifecycle-beforemount",
        "matches": {
          "vbeforemount": true,
          "vue lifecycle beforemount": true
        },
        "opts": {}
      },
      {
        "content": "mounted () {\n\t${0};\n},",
        "doc": "mounted lifecycle method",
        "grammar": "lsp",
        "label": "vue-lifecycle-mounted",
        "matches": {
          "vmounted": true,
          "vue lifecycle mounted": true
        },
        "opts": {}
      },
      {
        "content": "beforeUpdate () {\n\t${0};\n},",
        "doc": "beforeUpdate lifecycle method",
        "grammar": "lsp",
        "label": "vue-lifecycle-beforeupdate",
        "matches": {
          "vbeforeupdate": true,
          "vue lifecycle beforeupdate": true
        },
        "opts": {}
      },
      {
        "content": "updated () {\n\t${0};\n},",
        "doc": "updated lifecycle method",
        "grammar": "lsp",
        "label": "vue-lifecycle-updated",
        "matches": {
          "vue lifecycle updated": true,
          "vupdated": true
        },
        "opts": {}
      },
      {
        "content": "beforeDestroy () {\n\t${0};\n},",
        "doc": "beforeDestroy lifecycle method",
        "grammar": "lsp",
        "label": "vue-lifecycle-beforedestroy",
        "matches": {
          "vbeforedestroy": true,
          "vue lifecycle beforedestroy": true
        },
        "opts": {}
      },
      {
        "content": "destroyed () {\n\t${0};\n},",
        "doc": "destroyed lifecycle method",
        "grammar": "lsp",
        "label": "vue-lifecycle-destroyed",
        "matches": {
          "vdestroyed": true,
          "vue lifecycle destroyed": true
        },
        "opts": {}
      },
      {
        "content": "watch: {\n\t${1:data}(${2:newValue}, ${3:oldValue}) {\n\t\t${0}\n\t}\n},",
        "doc": "vue watcher",
        "grammar": "lsp",
        "label": "vue-watchers",
        "matches": {
          "vue watchers": true,
          "vwatcher": true
        },
        "opts": {}
      },
      {
        "content": "watch: {\n\t${1:data}: {\n\t\timmediate: ${2:true},\n\t\tdeep: ${3:true},\n\t\thandler(${4:newValue}, ${5:oldValue}) {\n\t\t\t${0}\n\t\t}\n\t}\n},",
        "doc": "vue watcher with options",
        "grammar": "lsp",
        "label": "vue-watchers-with-options",
        "matches": {
          "vue watchers with options": true,
          "vwatcher-options": true
        },
        "opts": {}
      },
      {
        "content": "props: {\n\t${1:propName}: {\n\t\ttype: ${2:Number},\n\t\tdefault: ${0}\n\t},\n},",
        "doc": "Vue Props with Default",
        "grammar": "lsp",
        "label": "vue-props-with-default",
        "matches": {
          "vprops": true,
          "vue props with default": true
        },
        "opts": {}
      },
      {
        "content": "import ${1:New} from '@/components/${1:New}.vue';",
        "doc": "Import one component into another",
        "grammar": "lsp",
        "label": "vue-import-file",
        "matches": {
          "vimport": true,
          "vue import file": true
        },
        "opts": {}
      },
      {
        "content": "components: {\n\t${1:New},\n},",
        "doc": "Import one component into another, within export statement",
        "grammar": "lsp",
        "label": "vue-import-into-the-component",
        "matches": {
          "vcomponents": true,
          "vue import into the component": true
        },
        "opts": {}
      },
      {
        "content": "import ${1:Name} from '@/components/${1:Name}.vue'\n\nexport default {\n\tcomponents: {\n\t\t${1:Name}\n\t},\n}",
        "doc": "import a component and include it in export default",
        "grammar": "lsp",
        "label": "vue-import-export",
        "matches": {
          "vimport-export": true,
          "vue import export": true
        },
        "opts": {}
      },
      {
        "content": "import { mapState } from 'vuex'\n\nexport default {\n\tcomputed: {\n\t\t...mapState([\n\t\t\t${1:'nameOfState'},\n\t\t])\n\t},\n}",
        "doc": "map getters inside a vue component",
        "grammar": "lsp",
        "label": "vue-mapstate",
        "matches": {
          "vmapstate": true,
          "vue mapstate": true
        },
        "opts": {}
      },
      {
        "content": "import { mapGetters } from 'vuex'\n\nexport default {\n\tcomputed: {\n\t\t...mapGetters([\n\t\t\t${1:'nameOfGetter'},\n\t\t])\n\t},\n}",
        "doc": "mapgetters inside a vue component",
        "grammar": "lsp",
        "label": "vue-mapgetters",
        "matches": {
          "vmapgetters": true,
          "vue mapgetters": true
        },
        "opts": {}
      },
      {
        "content": "import { mapMutations } from 'vuex'\n\nexport default {\n\tmethods: {\n\t\t...mapMutations([\n\t\t\t${1:'nameOfMutation'}, //also supports payload `this.nameOfMutation(amount)` \n\t\t])\n\t},\n}",
        "doc": "mapmutations inside a vue component",
        "grammar": "lsp",
        "label": "vue-mapmutations",
        "matches": {
          "vmapmutations": true,
          "vue mapmutations": true
        },
        "opts": {}
      },
      {
        "content": "import { mapActions } from 'vuex'\n\nexport default {\n\tmethods: {\n\t\t...mapActions([\n\t\t\t${1:'nameOfAction'}, //also supports payload `this.nameOfAction(amount)` \n\t\t])\n\t},\n}",
        "doc": "mapactions inside a vue component",
        "grammar": "lsp",
        "label": "vue-mapactions",
        "matches": {
          "vmapactions": true,
          "vue mapactions": true
        },
        "opts": {}
      },
      {
        "content": "filters: {\n\t${1:fnName}: function(${2:value}) {\n\t\treturn ${2:value}${0};\n\t}\n}",
        "doc": "vue filter",
        "grammar": "lsp",
        "label": "vue-filter",
        "matches": {
          "vfilter": true,
          "vue filter": true
        },
        "opts": {}
      },
      {
        "content": "const ${1:mixinName} = {\n\tmounted() {\n\t\tconsole.log('hello from mixin!')\n\t},\n}",
        "doc": "vue mixin",
        "grammar": "lsp",
        "label": "vue-mixin",
        "matches": {
          "vmixin": true,
          "vue mixin": true
        },
        "opts": {}
      },
      {
        "content": "mixins: [${1:mixinName}],",
        "doc": "vue use mixin",
        "grammar": "lsp",
        "label": "vue-use-mixin",
        "matches": {
          "vmixin-use": true,
          "vue use mixin": true
        },
        "opts": {}
      },
      {
        "content": "Vue.directive('${1:directiveName}', {\n\tbind(el, binding, vnode) {\n\t\tel.style.${2:arg} = binding.value.${2:arg};\n\t}\n});",
        "doc": "vue custom directive",
        "grammar": "lsp",
        "label": "vue-custom-directive",
        "matches": {
          "vc-direct": true,
          "vue custom directive": true
        },
        "opts": {}
      },
      {
        "content": "import { ${1:libName} } from '${1:libName}'",
        "doc": "import a library",
        "grammar": "lsp",
        "label": "vue-import-library",
        "matches": {
          "vimport-lib": true,
          "vue import library": true
        },
        "opts": {}
      },
      {
        "content": "import { TimelineMax, ${1:Ease} } from 'gsap'",
        "doc": "component methods options that dispatch an action from vuex store.",
        "grammar": "lsp",
        "label": "vue-import-gsap",
        "matches": {
          "vimport-gsap": true,
          "vue import gsap": true
        },
        "opts": {}
      },
      {
        "content": "beforeEnter(el) {\n\tconsole.log('beforeEnter');\n},\nenter(el, done) {\n\tconsole.log('enter');\n\tdone();\n},\nbeforeLeave(el) {\n\tconsole.log('beforeLeave');\n},\nleave(el, done) {\n\tconsole.log('leave');\n\tdone();\n},",
        "doc": "transition component js hooks",
        "grammar": "lsp",
        "label": "vue-transition-methods-with-javascript-hooks",
        "matches": {
          "vanimhook-js": true,
          "vue transition methods with javascript hooks": true
        },
        "opts": {}
      },
      {
        "content": "${1:mutationName}() {\n\tthis.\\$store.commit('${1:mutationName}', ${2:payload})\n}",
        "doc": "commit to vuex store in methods for mutation",
        "grammar": "lsp",
        "label": "vue-commit-vuex-store-in-methods",
        "matches": {
          "vcommit": true,
          "vue commit vuex store in methods": true
        },
        "opts": {}
      },
      {
        "content": "${1:actionName}() {\n\tthis.\\$store.dispatch('${1:actionName}', ${2:payload})\n}",
        "doc": "dispatch to vuex store in methods for action",
        "grammar": "lsp",
        "label": "vue-dispatch-vuex-store-in-methods",
        "matches": {
          "vdispatch": true,
          "vue dispatch vuex store in methods": true
        },
        "opts": {}
      },
      {
        "content": "return ${1:this.num} += ${2:1}",
        "doc": "increment",
        "grammar": "lsp",
        "label": "vue-incrementer",
        "matches": {
          "vinc": true,
          "vue incrementer": true
        },
        "opts": {}
      },
      {
        "content": "return ${1:this.num} -= ${2:1}",
        "doc": "decrement",
        "grammar": "lsp",
        "label": "vue-decrementer",
        "matches": {
          "vdec": true,
          "vue decrementer": true
        },
        "opts": {}
      },
      {
        "content": "import Vue from 'vue'\nimport ${1:HelloWorld} from './components/${1:HelloWorld}'\n\ndescribe('${1:HelloWorld}.vue', () => {\n\tit('${2:should render correct contents}', () => {\n\t\tconst Constructor = Vue.extend(${1:HelloWorld})\n\t\tconst vm = new Constructor().$mount()\n\t\texpect(vm.$el.querySelector('.hello h1').textContent)\n\t\t\t.to.equal(${3:'Welcome to Your Vue.js App'})\n\t})\n})",
        "doc": "unit test component",
        "grammar": "lsp",
        "label": "vue-unit-test",
        "matches": {
          "vtest": true,
          "vue unit test": true
        },
        "opts": {}
      },
      {
        "content": "module.exports = {\n\tcss: {\n\t\tloaderOptions: {\n\t\t\t${1:sass}: {\n\t\t\t\tdata: `${2:@import '@/styles/_variables.scss';}`\n\t\t\t}\n\t\t}\n\t}\n}",
        "doc": "vue.config.js",
        "grammar": "lsp",
        "label": "vue-vue-config-js-import",
        "matches": {
          "vconfig": true,
          "vue vue.config.js import": true
        },
        "opts": {}
      },
      {
        "content": "<template>\n\t<div>\n\n\t</div>\n</template>\n\n<script>\n\texport default {\n\t\t${0}\n\t}\n</script>\n\n<style lang=\"scss\" scoped>\n\n</style>",
        "doc": "Base for Vue File with SCSS",
        "grammar": "lsp",
        "label": "vue-single-file-component",
        "matches": {
          "vue base": true
        },
        "opts": {}
      },
      {
        "content": "<template>\n\t<div>\n\n\t</div>\n</template>\n\n<script>\n\texport default {\n\t\t${0}\n\t}\n</script>\n\n<style lang=\"postcss\" scoped>\n\n</style>",
        "doc": "Base for Vue File with PostCSS",
        "grammar": "lsp",
        "label": "vue-single-file-component-with-postcss",
        "matches": {
          "vue base postcss": true
        },
        "opts": {}
      },
      {
        "content": "<template>\n\t<div>\n\n\t</div>\n</template>\n\n<script>\n\texport default {\n\t\t${0}\n\t}\n</script>\n\n<style scoped>\n\n</style>",
        "doc": "Base for Vue File with CSS",
        "grammar": "lsp",
        "label": "vue-single-file-component-with-css",
        "matches": {
          "vue base css": true
        },
        "opts": {}
      },
      {
        "content": "<template>\n\t<div>\n\n\t</div>\n</template>\n\n<script lang=\"ts\">\n\timport Vue from 'vue'\n\n\texport default Vue.extend({\n\t\t${0}\n\t})\n</script>\n\n<style scoped>\n\n</style>",
        "doc": "Base for Vue File with Typescript",
        "grammar": "lsp",
        "label": "vue-single-file-component-with-typescript",
        "matches": {
          "vue base ts": true
        },
        "opts": {}
      },
      {
        "content": "const ${1:name} = reactive({\n\t${2:count}: ${3:0}\n})",
        "doc": "Set reactive property - Vue Composition API",
        "grammar": "lsp",
        "label": "vue-v3reactive",
        "matches": {
          "vue v3 reactive": true
        },
        "opts": {}
      },
      {
        "content": "const ${1:name} = computed(() => {\n\treturn ${2}\n})",
        "doc": "Set computed property - Vue Composition API",
        "grammar": "lsp",
        "label": "vue-v3computed",
        "matches": {
          "vue v3 computed": true
        },
        "opts": {}
      },
      {
        "content": "watch(() => ${1:foo}, (newValue, oldValue) => {\n\t${2}\n})",
        "doc": "Requires watching a specific data source, and applies side effects in a separate callback function.",
        "grammar": "lsp",
        "label": "vue-v3watch",
        "matches": {
          "vue v3 watch": true
        },
        "opts": {}
      },
      {
        "content": "watch([${1:foo}, ${2:bar}], ([new${1}, new${2}], [prev${1}, prev${2}]) => {\n\t${3}\n})",
        "doc": "Requires watching an array, and applies side effects in a separate callback function.",
        "grammar": "lsp",
        "label": "vue-v3watch-array",
        "matches": {
          "vue v3 watch-array": true
        },
        "opts": {}
      },
      {
        "content": "watchEffect(() => {\n\t${1}\n})",
        "doc": "Run a function immediately while reactively tracking its dependencies, and re-run it whenever the dependencies have changed.",
        "grammar": "lsp",
        "label": "vue-v3watcheffect",
        "matches": {
          "vue v3 watcheffect": true
        },
        "opts": {}
      },
      {
        "content": "const ${1:name} = ref(${2:initialValue})",
        "doc": "Takes an inner value and returns a reactive and mutable ref object.",
        "grammar": "lsp",
        "label": "vue-v3ref",
        "matches": {
          "vue v3ref": true
        },
        "opts": {}
      },
      {
        "content": "import ${1|onBeforeMount,onMounted,onBeforeUpdate,onUpdated,onBeforeUnmount,onUnmounted,,onActivated,onDeactivated,onErrorCaptured,onRenderTracked,onRenderTriggered|} from '${2|vue,@vue/composition-api|}'",
        "doc": "Import Lifecycle hooks to use in file",
        "grammar": "lsp",
        "label": "vue-v3lifecyclehook-import",
        "matches": {
          "vue v3 importlifecyclehook ": true
        },
        "opts": {}
      },
      {
        "content": "${1|onBeforeMount,onMounted,onBeforeUpdate,onUpdated,onBeforeUnmount,onUnmounted,,onActivated,onDeactivated,onErrorCaptured,onRenderTracked,onRenderTriggered|}(() => {${2}})",
        "doc": "Lifecycle hooks can be registered with directly imported `onXXX` functions:",
        "grammar": "lsp",
        "label": "vue-v3lifecyclehook",
        "matches": {
          "vue v3 lifecyclehook": true
        },
        "opts": {}
      },
      {
        "content": "<template>\n\t<div>\n\n\t</div>\n</template>\n\n<script>\nimport { ${0|ref,reactive,computed,readonly,watchEffect,watch|} } from '${1|vue,@vue/composition-api|}'\nexport default {\n\tsetup () {\n\t\t${2}\n\n\t\treturn {}\n\t}\n}\n</script>\n\n<style lang=\"scss\" scoped>\n\n</style>",
        "doc": "Base for Vue File Composition API with SCSS",
        "grammar": "lsp",
        "label": "vue-single-file-component-v3",
        "matches": {
          "vue v3 base": true
        },
        "opts": {}
      },
      {
        "content": "<template>\n\t<div>\n\n\t</div>\n</template>\n\n<script lang=\"ts\">\nimport Vue from 'vue'\n\nexport default Vue.extend({\n\tsetup () {\n\t\t${0}\n\n\t\treturn {}\n\t}\n})\n</script>\n\n<style scoped>\n\n</style>",
        "doc": "Base for Vue File Composition API - Typescript",
        "grammar": "lsp",
        "label": "vue-single-file-component-with-typescript-v3",
        "matches": {
          "vue v3 base ts": true
        },
        "opts": {}
      },
      {
        "content": "<template>\n\t<div>\n\n\t</div>\n</template>\n\n<script>\n\texport default {\n\t\t${0}\n\t}\n</script>\n\n<style lang=\"scss\" scoped>\n\n</style>",
        "doc": "Base for Vue File with SCSS",
        "grammar": "lsp",
        "label": "Vue Single File Component",
        "matches": {
          "vbase": true
        },
        "opts": {}
      },
      {
        "content": "<template>\n\t<div>\n\n\t</div>\n</template>\n\n<script>\n\texport default {\n\t\t${0}\n\t}\n</script>\n\n<style lang=\"sass\" scoped>\n\n</style>",
        "doc": "Base for Vue File with PostCSS",
        "grammar": "lsp",
        "label": "Vue Single File Component with SASS",
        "matches": {
          "vbase-sass": true
        },
        "opts": {}
      },
      {
        "content": "<template>\n\t<div>\n\n\t</div>\n</template>\n\n<script>\n\texport default {\n\t\t${0}\n\t}\n</script>\n\n<style lang=\"less\" scoped>\n\n</style>",
        "doc": "Base for Vue File with PostCSS",
        "grammar": "lsp",
        "label": "Vue Single File Component with LESS",
        "matches": {
          "vbase-less": true
        },
        "opts": {}
      },
      {
        "content": "<template>\n\t<div>\n\n\t</div>\n</template>\n\n<script>\n\texport default {\n\t\t${0}\n\t}\n</script>\n\n<style lang=\"postcss\" scoped>\n\n</style>",
        "doc": "Base for Vue File with PostCSS",
        "grammar": "lsp",
        "label": "Vue Single File Component with postcss",
        "matches": {
          "vbase-pcss": true
        },
        "opts": {}
      },
      {
        "content": "<template>\n\t<div>\n\n\t</div>\n</template>\n\n<script>\n\texport default {\n\t\t${0}\n\t}\n</script>\n\n<style scoped>\n\n</style>",
        "doc": "Base for Vue File with CSS",
        "grammar": "lsp",
        "label": "Vue Single File Component with Css",
        "matches": {
          "vbase-css": true
        },
        "opts": {}
      },
      {
        "content": "<template>\n\t<div>\n\n\t</div>\n</template>\n\n<script>\n\texport default {\n\t\t${0}\n\t}\n</script>\n\n<style lang=\"stylus\" scoped>\n\n</style>",
        "doc": "Base for Vue File with Stylus",
        "grammar": "lsp",
        "label": "Vue Single File Component with Stylus",
        "matches": {
          "vbase-styl": true
        },
        "opts": {}
      },
      {
        "content": "<template>\n\t<div>\n\n\t</div>\n</template>\n\n<script lang=\"ts\">\n\timport Vue from 'vue'\n\n\texport default Vue.extend({\n\t\t${0}\n\t})\n</script>\n\n<style scoped>\n\n</style>",
        "doc": "Base for Vue File with Typescript",
        "grammar": "lsp",
        "label": "Vue Single File Component with Typescript",
        "matches": {
          "vbase-ts": true
        },
        "opts": {}
      },
      {
        "content": "<template>\n\t<div>\n\n\t</div>\n</template>\n\n<script>\n\texport default {\n\t\t${0}\n\t}\n</script>",
        "doc": "Base for Vue File with no styles",
        "grammar": "lsp",
        "label": "Vue Single File Component with No Style",
        "matches": {
          "vbase-ns": true
        },
        "opts": {}
      },
      {
        "content": "<template>\n\t<div>\n\n\t</div>\n</template>\n\n<script>\nexport default {\n\tsetup () {\n\t\t${0}\n\n\t\treturn {}\n\t}\n}\n</script>\n\n<style lang=\"scss\" scoped>\n\n</style>",
        "doc": "Base for Vue File Composition API with SCSS",
        "grammar": "lsp",
        "label": "Vue Single File Component Composition API",
        "matches": {
          "vbase-3": true
        },
        "opts": {}
      },
      {
        "content": "<template>\n\t<div>\n\n\t</div>\n</template>\n\n<script setup>\n\n</script>\n\n<style lang=\"scss\" scoped>\n\n</style>",
        "doc": "Base for Vue File Setup Composition API with SCSS",
        "grammar": "lsp",
        "label": "Vue Single File Component Setup Composition API",
        "matches": {
          "vbase-3-setup": true
        },
        "opts": {}
      },
      {
        "content": "<template>\n\t<div>\n\n\t</div>\n</template>\n\n<script>\nimport { reactive, toRefs } from '@vue/composition-api'\n\nexport default {\n\tsetup () {\n\t\tconst state = reactive({\n\t\t\t${0:count}: ${1:0},\n\t\t})\n\t\n\t\treturn {\n\t\t\t...toRefs(state),\n\t\t}\n\t}\n}\n</script>\n\n<style lang=\"scss\" scoped>\n\n</style>",
        "doc": "Base for Vue File Composition API with SCSS",
        "grammar": "lsp",
        "label": "Vue Single File Component Composition API Reactive",
        "matches": {
          "vbase-3-reactive": true
        },
        "opts": {}
      },
      {
        "content": "<template>\n\t<div>\n\n\t</div>\n</template>\n\n<script lang=\"ts\">\nimport { defineComponent } from 'vue'\n\nexport default defineComponent({\n\tsetup () {\n\t\t${0}\n\n\t\treturn {}\n\t}\n})\n</script>\n\n<style scoped>\n\n</style>",
        "doc": "Base for Vue File Composition API - Typescript",
        "grammar": "lsp",
        "label": "Vue Single File Component Composition API with Typescript",
        "matches": {
          "vbase-3-ts": true
        },
        "opts": {}
      },
      {
        "content": "<template>\n\t<div>\n\n\t</div>\n</template>\n\n<script setup lang=\"ts\">\n\n</script>\n\n<style scoped>\n\n</style>",
        "doc": "Base for Vue File Setup Composition API - Typescript",
        "grammar": "lsp",
        "label": "Vue Single File Component Setup Composition API with Typescript",
        "matches": {
          "vbase-3-ts-setup": true
        },
        "opts": {}
      },
      {
        "content": "<template>\n\t<div>\n\n\t</div>\n</template>\n\n<script lang=\"ts\">\n\timport { Component, Vue } from 'vue-property-decorator';\n\n\t@Component\n\texport default class ${0} extends Vue {\n\t\t\n\t}\n</script>\n\n<style scoped>\n\n</style>",
        "doc": "Base for Vue File with Class based Typescript format",
        "grammar": "lsp",
        "label": "Vue Single File Component with Class based Typescript format",
        "matches": {
          "vbase-ts-class": true
        },
        "opts": {}
      },
      {
        "content": "<template>\n  ${0}\n</template>\n<script>\nexport default {\n}\n</script>\n<style>\n</style>",
        "doc": "",
        "grammar": "snu",
        "label": "Scaffold <template> <script> and <style>",
        "matches": {
          "scaffold": true
        },
        "opts": {
          "head": true
        }
      },
      {
        "content": "<template>\n  ${0}\n</template>",
        "doc": "",
        "grammar": "snu",
        "label": "Scaffold <template> with html",
        "matches": {
          "template_with_html": true
        },
        "opts": {
          "head": true
        }
      },
      {
        "content": "<template lang=\"pug\">\n  ${0}\n</template>",
        "doc": "",
        "grammar": "snu",
        "label": "Scaffold <template> with pug",
        "matches": {
          "template_with_pug": true
        },
        "opts": {
          "head": true
        }
      },
      {
        "content": "<script>\nexport default {\n  ${0}\n}\n</script>",
        "doc": "",
        "grammar": "snu",
        "label": "Scaffold <script> with JavaScript",
        "matches": {
          "script_with_JavaScript": true
        },
        "opts": {
          "head": true
        }
      },
      {
        "content": "<script lang=\"ts\">\nimport Vue from 'vue'\nexport default Vue.extend({\n  ${0}\n})\n</script>",
        "doc": "",
        "grammar": "snu",
        "label": "Scaffold <script> with TypeScript",
        "matches": {
          "script_with_TypeScript": true
        },
        "opts": {
          "head": true
        }
      },
      {
        "content": "<style>\n${0}\n</style>",
        "doc": "",
        "grammar": "snu",
        "label": "Scaffold <style> with CSS",
        "matches": {
          "style_with_CSS": true
        },
        "opts": {
          "head": true
        }
      },
      {
        "content": "<style scoped>\n${0}\n</style>",
        "doc": "",
        "grammar": "snu",
        "label": "Scaffold <style> with CSS scoped",
        "matches": {
          "style_with_CSS_scoped": true
        },
        "opts": {
          "head": true
        }
      },
      {
        "content": "<style lang=\"scss\">\n${0}\n</style>",
        "doc": "",
        "grammar": "snu",
        "label": "Scaffold <style> with scss",
        "matches": {
          "style_with_scss": true
        },
        "opts": {
          "head": true
        }
      },
      {
        "content": "<style lang=\"scss\" scoped>\n${0}\n</style>",
        "doc": "",
        "grammar": "snu",
        "label": "Scaffold <style> with scss scoped",
        "matches": {
          "style_with_scss_scoped": true
        },
        "opts": {
          "head": true
        }
      },
      {
        "content": "<style lang=\"less\">\n${0}\n</style>",
        "doc": "",
        "grammar": "snu",
        "label": "Scaffold <style> with less",
        "matches": {
          "style_with_less": true
        },
        "opts": {
          "head": true
        }
      },
      {
        "content": "<style lang=\"less\" scoped>\n${0}\n</style>",
        "doc": "",
        "grammar": "snu",
        "label": "Scaffold <style> with less scoped",
        "matches": {
          "style_with_less_scoped": true
        },
        "opts": {
          "head": true
        }
      },
      {
        "content": "<style lang=\"sass\">\n${0}\n</style>",
        "doc": "",
        "grammar": "snu",
        "label": "Scaffold <style> with sass",
        "matches": {
          "style_with_sass": true
        },
        "opts": {
          "head": true
        }
      },
      {
        "content": "<style lang=\"sass\" scoped>\n${0}\n</style>",
        "doc": "",
        "grammar": "snu",
        "label": "Scaffold <style> with sass scoped",
        "matches": {
          "style_with_sass_scoped": true
        },
        "opts": {
          "head": true
        }
      },
      {
        "content": "<style lang=\"postcss\">\n${0}\n</style>",
        "doc": "",
        "grammar": "snu",
        "label": "Scaffold <style> with postcss",
        "matches": {
          "style_with_postcss": true
        },
        "opts": {
          "head": true
        }
      },
      {
        "content": "<style lang=\"postcss\" scoped>\n${0}\n</style>",
        "doc": "",
        "grammar": "snu",
        "label": "Scaffold <style> with postcss scoped",
        "matches": {
          "style_with_postcss_scoped": true
        },
        "opts": {
          "head": true
        }
      },
      {
        "content": "<style lang=\"stylus\">\n${0}\n</style>",
        "doc": "",
        "grammar": "snu",
        "label": "Scaffold <style> with stylus",
        "matches": {
          "style_with_stylus": true
        },
        "opts": {
          "head": true
        }
      },
      {
        "content": "<style lang=\"stylus\" scoped>\n${0}\n</style>",
        "doc": "",
        "grammar": "snu",
        "label": "Scaffold <style> with stylus scoped",
        "matches": {
          "style_with_stylus_scoped": true
        },
        "opts": {
          "head": true
        }
      },
      {
        "content": "<slot></slot>",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "slot": true
        },
        "opts": {}
      },
      {
        "content": "<template></template>",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "template": true
        },
        "opts": {}
      },
      {
        "content": "<transition></transition>",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "transition": true
        },
        "opts": {}
      },
      {
        "content": "<template>\n\t<div>\n\t</div>\n</template>\n<script>\n\texport default{\n\t\t${0}\n\t}\n</script>\n<style scoped>\n</style>",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "vbase": true
        },
        "opts": {}
      },
      {
        "content": "import ${1:Name} from './components/$1.vue';\nexport default {\n\tcomponents: {\n\t\t$1\n\t}\n}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "vimport:c": true
        },
        "opts": {}
      },
      {
        "content": "actions: {\n\t${1:updateValue}({commit}, ${2:payload}) {\n\t\tcommit($1, $2);\n\t}\n}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "vactions": true
        },
        "opts": {}
      },
      {
        "content": "<transition\n  @before-enter=\"beforeEnter\"\n  @enter=\"enter\"\n  @after-enter=\"afterEnter\"\n  @enter-cancelled=\"enterCancelled\"\n  @before-Leave=\"beforeLeave\"\n  @leave=\"leave\"\n  @after-leave=\"afterLeave\"\n  @leave-cancelled=\"leaveCancelled\"\n  :css=\"false\">\n </transition>",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "vanim:js:el": true
        },
        "opts": {}
      },
      {
        "content": "methods: {\n\tbeforeEnter(el) {\n\t\tconsole.log('beforeEnter');\n\t},\n\tenter(el, done) {\n\t\tconsole.log('enter');\n\t\tdone();\n\t},\n\tafterEnter(el) {\n\t\tconsole.log('afterEnter');\n\t},\n\tenterCancelled(el, done) {\n\t\tconsole.log('enterCancelled');\n\t},\n\tbeforeLeave(el) {\n\t\tconsole.log('beforeLeave');\n\t},\n\tleave(el, done) {\n\t\tconsole.log('leave');\n\t\tdone();\n\t},\n\tafterLeave(el) {\n\t\tconsole.log('afterLeave');\n\t},\n\tleaveCancelled(el, done) {\n\t\tconsole.log('leaveCancelled');\n\t}\n}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "vanim:js:method": true
        },
        "opts": {}
      },
      {
        "content": "@click=\"${1}\"",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "vcl": true
        },
        "opts": {}
      },
      {
        "content": "data() {\n\treturn {\n\t\t${1:key}: ${2:value}\n\t};\n}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "vdata": true
        },
        "opts": {}
      },
      {
        "content": "filters: {\n\t${1:fnName}: function(${2:value}) {\n\t\treturn;\n\t}\n}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "vfilter": true
        },
        "opts": {}
      },
      {
        "content": "<div v-for=\"${1:item} in ${2:items}\" :key=\"$1.id\">\n\t{{ $1 }}\n</div>",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "vfor": true
        },
        "opts": {}
      },
      {
        "content": "getters: {\n\t${1:value}: state => {\n\t\treturn state.$1;\n\t}\n}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "vgetters": true
        },
        "opts": {}
      },
      {
        "content": "import ${1:New} from './components/$1.vue';",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "vimport": true
        },
        "opts": {}
      },
      {
        "content": "<keep-alive>\n\t<component :is=\"\">\n\t\t<p>default</p>\n\t</component>\n</keep-alive>",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "vkeep": true
        },
        "opts": {}
      },
      {
        "content": "const ${1:mixinName} = {\n\tmounted() {\n\t\tconsole.log('hello from mixin!')\n\t},\n}\nconst ${2:Component} = Vue.extend({\n\tmixins: [$1]\n})",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "vmixin": true
        },
        "opts": {}
      },
      {
        "content": "mutations: {\n\t${1:updateValue}(state, ${3:payload}) => {\n\t\tstate.${2:value} = $3;\n\t}\n}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "vmutations": true
        },
        "opts": {}
      },
      {
        "content": "${1:propName}: {\n  type: ${2:Number},\n  default: ${0}\n},",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "vprops:d": true
        },
        "opts": {}
      },
      {
        "content": "${1:propName}: {\n\ttype: ${2:Number}\n},",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "vprops": true
        },
        "opts": {}
      },
      {
        "content": "import Vue from 'vue';\nimport Vuex from 'vuex';\nVue.use(Vuex);\nexport const store = new Vuex.Store({\n\tstate: {\n\t\t${1:key}: ${2:value}\n\t}\n});",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "vstore": true
        },
        "opts": {}
      },
      {
        "content": "$t('$1')",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "trans": true
        },
        "opts": {}
      },
      {
        "content": "$t('$1', { $2: $3 })",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "transc": true
        },
        "opts": {}
      }
    ],
    "vue-pug": [
      {
        "content": "${1:div}(v-for=\"${2:item} in ${2:item}s\" :key=\"${2:item}.id\")\n\t| {{ ${2:item} }}",
        "doc": "vfor statement",
        "grammar": "lsp",
        "label": "Vue v-for",
        "matches": {
          "vfor": true
        },
        "opts": {}
      },
      {
        "content": "input(v-model=\"${1:data}\" type=\"text\")",
        "doc": "v-model directive",
        "grammar": "lsp",
        "label": "Vue v-model Directive",
        "matches": {
          "vmodel": true
        },
        "opts": {}
      },
      {
        "content": "input(v-model.number=\"${1:numData}\" type=\"number\" step=\"1\")",
        "doc": "v-model directive number input",
        "grammar": "lsp",
        "label": "Vue v-model Number Directive",
        "matches": {
          "vmodel-num": true
        },
        "opts": {}
      },
      {
        "content": "@click=\"${1:handler}(${2:arg}, $event)\"",
        "doc": "v-on click handler with arguments",
        "grammar": "lsp",
        "label": "Vue v-on Shortcut Directive",
        "matches": {
          "von": true
        },
        "opts": {}
      },
      {
        "content": "${1:component}(:${1:propName}=\"${0}\")",
        "doc": "component element with props",
        "grammar": "lsp",
        "label": "Vue Component with Props Binding",
        "matches": {
          "vel-props": true
        },
        "opts": {}
      },
      {
        "content": "img(:src=\"'/path/to/images/' + ${1:fileName}\" alt=\"${2:altText}\")",
        "doc": "image source binding",
        "grammar": "lsp",
        "label": "Vue Image Source Binding",
        "matches": {
          "vsrc": true
        },
        "opts": {}
      },
      {
        "content": "${1:div}(:style=\"{ fontSize: ${2:data} + 'px' }\")",
        "doc": "vue inline style binding",
        "grammar": "lsp",
        "label": "Vue Style Binding",
        "matches": {
          "vstyle": true
        },
        "opts": {}
      },
      {
        "content": "${1:div}(:style=\"[${2:styleObjectA}, ${3:styleObjectB]}\")",
        "doc": "vue inline style binding, objects",
        "grammar": "lsp",
        "label": "Vue Style Binding Object",
        "matches": {
          "vstyle-obj": true
        },
        "opts": {}
      },
      {
        "content": "${1:div}(:class=\"{ ${2:className}: ${3:data} }\")",
        "doc": "vue class binding",
        "grammar": "lsp",
        "label": "Vue Class Binding",
        "matches": {
          "vclass": true
        },
        "opts": {}
      },
      {
        "content": "${1:div}(:class=\"[${2:classNameA}, ${3:classNameB}]\")",
        "doc": "vue class binding",
        "grammar": "lsp",
        "label": "Vue Class Binding Object",
        "matches": {
          "vclass-obj": true
        },
        "opts": {}
      },
      {
        "content": "${1:div}(:class=\"[${2:classNameA}, {${3:classNameB} : ${4:condition}}]\")",
        "doc": "vue multiple conditional class bindings",
        "grammar": "lsp",
        "label": "Vue Multiple Conditional Class Bindings",
        "matches": {
          "vclass-obj-mult": true
        },
        "opts": {}
      },
      {
        "content": "transition(\n\tmode=\"out-in\"\n\t@before-enter=\"beforeEnter\"\n\t@enter=\"enter\"\n\n\t@before-leave=\"beforeLeave\"\n\t@leave=\"leave\"\n\t:css=\"false\"\n)",
        "doc": "transition component js hooks",
        "grammar": "lsp",
        "label": "Vue Transition Component with JavaScript Hooks",
        "matches": {
          "vanim": true
        },
        "opts": {}
      },
      {
        "content": "nuxt-link(to=\"/${1:page}\") ${1:page}",
        "doc": "nuxt routing link",
        "grammar": "lsp",
        "label": "Vue Nuxt Routing Link",
        "matches": {
          "vnuxtl": true
        },
        "opts": {}
      },
      {
        "content": "@change=\"$emit('change', $event.target.value)\"",
        "doc": "Vue Emit from Child Component",
        "grammar": "lsp",
        "label": "Vue Emit from Child",
        "matches": {
          "vemit-child": true
        },
        "opts": {}
      },
      {
        "content": "@change=\"${1:foo} = $event\"",
        "doc": "Vue Emit to Parent Component",
        "grammar": "lsp",
        "label": "Vue Emit to Parent",
        "matches": {
          "vemit-parent": true
        },
        "opts": {}
      }
    ],
    "vue-script": [
      {
        "content": "data() {\n\treturn {\n\t\t${1:key}: ${2:value}\n\t}\n},",
        "doc": "Vue Component Data",
        "grammar": "lsp",
        "label": "Vue Data",
        "matches": {
          "vdata": true
        },
        "opts": {}
      },
      {
        "content": "methods: {\n\t${1:name}() {\n\t\t${0}\n\t}\n},",
        "doc": "vue method",
        "grammar": "lsp",
        "label": "Vue Methods",
        "matches": {
          "vmethod": true
        },
        "opts": {}
      },
      {
        "content": "computed: {\n\t${1:name}() {\n\t\treturn this.${2:data} ${0}\n\t}\n},",
        "doc": "computed value",
        "grammar": "lsp",
        "label": "Vue Computed",
        "matches": {
          "vcomputed": true
        },
        "opts": {}
      },
      {
        "content": "beforeCreate () {\n\t${0};\n},",
        "doc": "beforeCreate lifecycle method",
        "grammar": "lsp",
        "label": "Vue Lifecycle beforeCreate",
        "matches": {
          "vbeforecreate": true
        },
        "opts": {}
      },
      {
        "content": "created () {\n\t${0};\n},",
        "doc": "created lifecycle method",
        "grammar": "lsp",
        "label": "Vue Lifecycle created",
        "matches": {
          "vcreated": true
        },
        "opts": {}
      },
      {
        "content": "beforeMount () {\n\t${0};\n},",
        "doc": "beforeMount lifecycle method",
        "grammar": "lsp",
        "label": "Vue Lifecycle beforeMount",
        "matches": {
          "vbeforemount": true
        },
        "opts": {}
      },
      {
        "content": "mounted () {\n\t${0};\n},",
        "doc": "mounted lifecycle method",
        "grammar": "lsp",
        "label": "Vue Lifecycle mounted",
        "matches": {
          "vmounted": true
        },
        "opts": {}
      },
      {
        "content": "beforeUpdate () {\n\t${0};\n},",
        "doc": "beforeUpdate lifecycle method",
        "grammar": "lsp",
        "label": "Vue Lifecycle beforeUpdate",
        "matches": {
          "vbeforeupdate": true
        },
        "opts": {}
      },
      {
        "content": "updated () {\n\t${0};\n},",
        "doc": "updated lifecycle method",
        "grammar": "lsp",
        "label": "Vue Lifecycle updated",
        "matches": {
          "vupdated": true
        },
        "opts": {}
      },
      {
        "content": "beforeDestroy () {\n\t${0};\n},",
        "doc": "beforeDestroy lifecycle method",
        "grammar": "lsp",
        "label": "Vue Lifecycle beforeDestroy",
        "matches": {
          "vbeforedestroy": true
        },
        "opts": {}
      },
      {
        "content": "destroyed () {\n\t${0};\n},",
        "doc": "destroyed lifecycle method",
        "grammar": "lsp",
        "label": "Vue Lifecycle destroyed",
        "matches": {
          "vdestroyed": true
        },
        "opts": {}
      },
      {
        "content": "watch: {\n\t${1:data}(${2:newValue}, ${3:oldValue}) {\n\t\t${0}\n\t}\n},",
        "doc": "vue watcher",
        "grammar": "lsp",
        "label": "Vue Watchers",
        "matches": {
          "vwatcher": true
        },
        "opts": {}
      },
      {
        "content": "watch: {\n\t${1:data}: {\n\t\timmediate: ${2:true},\n\t\tdeep: ${3:true},\n\t\thandler(${4:newValue}, ${5:oldValue}) {\n\t\t\t${0}\n\t\t}\n\t}\n},",
        "doc": "vue watcher with options",
        "grammar": "lsp",
        "label": "Vue Watchers with Options",
        "matches": {
          "vwatcher-options": true
        },
        "opts": {}
      },
      {
        "content": "props: {\n\t${1:propName}: {\n\t\ttype: ${2:Number},\n\t\tdefault: ${0}\n\t},\n},",
        "doc": "Vue Props with Default",
        "grammar": "lsp",
        "label": "Vue Props with Default",
        "matches": {
          "vprops": true
        },
        "opts": {}
      },
      {
        "content": "import ${1:New} from '@/components/${1:New}.vue';",
        "doc": "Import one component into another",
        "grammar": "lsp",
        "label": "Vue Import File",
        "matches": {
          "vimport": true
        },
        "opts": {}
      },
      {
        "content": "components: {\n\t${1:New},\n},",
        "doc": "Import one component into another, within export statement",
        "grammar": "lsp",
        "label": "Vue Import into the Component",
        "matches": {
          "vcomponents": true
        },
        "opts": {}
      },
      {
        "content": "import ${1:Name} from '@/components/${1:Name}.vue';\n\nexport default {\n\tcomponents: {\n\t\t${1:Name}\n\t},\n};",
        "doc": "import a component and include it in export default",
        "grammar": "lsp",
        "label": "Vue Import Export",
        "matches": {
          "vimport-export": true
        },
        "opts": {}
      },
      {
        "content": "${1:New} = () => import('@/components/${1:New}.vue')",
        "doc": "Import component that should be lazy loaded",
        "grammar": "lsp",
        "label": "Vue Import Component Dynamically",
        "matches": {
          "vimport-dynamic": true
        },
        "opts": {}
      },
      {
        "content": "import { mapState } from 'vuex';\n\nexport default {\n\tcomputed: {\n\t\t...mapState([\n\t\t\t${1:'nameOfState'},\n\t\t])\n\t},\n};",
        "doc": "map getters inside a vue component",
        "grammar": "lsp",
        "label": "Vue MapState",
        "matches": {
          "vmapstate": true
        },
        "opts": {}
      },
      {
        "content": "import { mapGetters } from 'vuex';\n\nexport default {\n\tcomputed: {\n\t\t...mapGetters([\n\t\t\t${1:'nameOfGetter'},\n\t\t])\n\t},\n};",
        "doc": "mapgetters inside a vue component",
        "grammar": "lsp",
        "label": "Vue MapGetters",
        "matches": {
          "vmapgetters": true
        },
        "opts": {}
      },
      {
        "content": "import { mapMutations } from 'vuex';\n\nexport default {\n\tmethods: {\n\t\t...mapMutations([\n\t\t\t${1:'nameOfMutation'}, //also supports payload `this.nameOfMutation(amount)` \n\t\t])\n\t},\n};",
        "doc": "mapmutations inside a vue component",
        "grammar": "lsp",
        "label": "Vue MapMutations",
        "matches": {
          "vmapmutations": true
        },
        "opts": {}
      },
      {
        "content": "import { mapActions } from 'vuex';\n\nexport default {\n\tmethods: {\n\t\t...mapActions([\n\t\t\t${1:'nameOfAction'}, //also supports payload `this.nameOfAction(amount)` \n\t\t])\n\t},\n};",
        "doc": "mapactions inside a vue component",
        "grammar": "lsp",
        "label": "Vue MapActions",
        "matches": {
          "vmapactions": true
        },
        "opts": {}
      },
      {
        "content": "filters: {\n\t${1:fnName}: function(${2:value}) {\n\t\treturn ${2:value}${0};\n\t}\n}",
        "doc": "vue filter",
        "grammar": "lsp",
        "label": "Vue Filter",
        "matches": {
          "vfilter": true
        },
        "opts": {}
      },
      {
        "content": "const ${1:mixinName} = {\n\tmounted() {\n\t\tconsole.log('hello from mixin!');\n\t},\n};",
        "doc": "vue mixin",
        "grammar": "lsp",
        "label": "Vue Mixin",
        "matches": {
          "vmixin": true
        },
        "opts": {}
      },
      {
        "content": "mixins: [${1:mixinName}],",
        "doc": "vue use mixin",
        "grammar": "lsp",
        "label": "Vue Use Mixin",
        "matches": {
          "vmixin-use": true
        },
        "opts": {}
      },
      {
        "content": "Vue.directive('${1:directiveName}', {\n\tbind(el, binding, vnode) {\n\t\tel.style.${2:arg} = binding.value.${2:arg};\n\t}\n});",
        "doc": "vue custom directive",
        "grammar": "lsp",
        "label": "Vue Custom Directive",
        "matches": {
          "vc-direct": true
        },
        "opts": {}
      },
      {
        "content": "import { ${1:libName} } from '${1:libName}';",
        "doc": "import a library",
        "grammar": "lsp",
        "label": "Vue Import Library",
        "matches": {
          "vimport-lib": true
        },
        "opts": {}
      },
      {
        "content": "import gsap from 'gsap';",
        "doc": "import gsap library",
        "grammar": "lsp",
        "label": "Vue Import GSAP",
        "matches": {
          "vimport-gsap": true
        },
        "opts": {}
      },
      {
        "content": "beforeEnter(el) {\n\tconsole.log('beforeEnter');\n},\nenter(el, done) {\n\tconsole.log('enter');\n\tdone();\n},\nbeforeLeave(el) {\n\tconsole.log('beforeLeave');\n},\nleave(el, done) {\n\tconsole.log('leave');\n\tdone();\n},",
        "doc": "transition component js hooks",
        "grammar": "lsp",
        "label": "Vue Transition Methods with JavaScript Hooks",
        "matches": {
          "vanimhook-js": true
        },
        "opts": {}
      },
      {
        "content": "${1:mutationName}() {\n\tthis.\\$store.commit('${1:mutationName}', ${2:payload});\n}",
        "doc": "commit to vuex store in methods for mutation",
        "grammar": "lsp",
        "label": "Vue Commit Vuex Store in Methods",
        "matches": {
          "vcommit": true
        },
        "opts": {}
      },
      {
        "content": "${1:actionName}() {\n\tthis.\\$store.dispatch('${1:actionName}', ${2:payload});\n}",
        "doc": "dispatch to vuex store in methods for action",
        "grammar": "lsp",
        "label": "Vue Dispatch Vuex Store in Methods",
        "matches": {
          "vdispatch": true
        },
        "opts": {}
      },
      {
        "content": "import Vue from 'vue';\nimport ${1:HelloWorld} from './components/${1:HelloWorld}';\n\ndescribe('${1:HelloWorld}.vue', () => {\n\tit('${2:should render correct contents}', () => {\n\t\tconst Constructor = Vue.extend(${1:HelloWorld});\n\t\tconst vm = new Constructor().$mount();\n\t\texpect(vm.$el.querySelector('.hello h1').textContent)\n\t\t\t.to.equal(${3:'Welcome to Your Vue.js App'});\n\t});\n});",
        "doc": "unit test component",
        "grammar": "lsp",
        "label": "Unit Test",
        "matches": {
          "vtest": true
        },
        "opts": {}
      },
      {
        "content": "module.exports = {\n\tcss: {\n\t\tloaderOptions: {\n\t\t\t${1:sass}: {\n\t\t\t\tdata: `${2:@import '@/styles/_variables.scss';}`\n\t\t\t}\n\t\t}\n\t}\n}",
        "doc": "vue.config.js",
        "grammar": "lsp",
        "label": "Vue.config.js Import",
        "matches": {
          "vconfig": true
        },
        "opts": {}
      },
      {
        "content": "const ${1:name} = reactive({\n\t${2:count}: ${3:0}\n})",
        "doc": "Vue Composition api - reactive",
        "grammar": "lsp",
        "label": "Vue Composition API - Reactive",
        "matches": {
          "v3reactive": true
        },
        "opts": {}
      },
      {
        "content": "const ${1:name} = computed(() => {\n\treturn ${2}\n})",
        "doc": "Vue Composition api - computed",
        "grammar": "lsp",
        "label": "Vue Composition API - Computed",
        "matches": {
          "v3computed": true
        },
        "opts": {}
      },
      {
        "content": "watch(() => ${1:foo}, (newValue, oldValue) => {\n\t${2}\n})",
        "doc": "Vue Composition api - watcher single source",
        "grammar": "lsp",
        "label": "Vue Composition API - watch - single source",
        "matches": {
          "v3watch": true
        },
        "opts": {}
      },
      {
        "content": "watch([${1:foo}, ${2:bar}], ([new${1}, new${2}], [prev${1}, prev${2}]) => {\n\t${3}\n})",
        "doc": "Vue Composition api - watch as array",
        "grammar": "lsp",
        "label": "Vue Composition API - watch - array",
        "matches": {
          "v3watch-array": true
        },
        "opts": {}
      },
      {
        "content": "watchEffect(() => {\n\t${1}\n})",
        "doc": "Vue Composition api - watchEffect",
        "grammar": "lsp",
        "label": "Vue Composition API - watchEffect",
        "matches": {
          "v3watcheffect": true
        },
        "opts": {}
      },
      {
        "content": "const ${1:name} = ref(${2:initialValue})",
        "doc": "Vue Ref",
        "grammar": "lsp",
        "label": "Vue Composition API - Vue ref",
        "matches": {
          "v3ref": true
        },
        "opts": {}
      },
      {
        "content": "onMounted(() => {${1}})",
        "doc": "Vue Mounted Lifecycle hook",
        "grammar": "lsp",
        "label": "Vue Lifecycle Hooks - onMounted",
        "matches": {
          "v3onmounted": true
        },
        "opts": {}
      },
      {
        "content": "onBeforeMount(() => {${1}})",
        "doc": "Vue onBeforeMount Lifecycle hook",
        "grammar": "lsp",
        "label": "Vue Lifecycle Hooks - onBeforeMount",
        "matches": {
          "v3onbeforemount": true
        },
        "opts": {}
      },
      {
        "content": "onBeforeUpdate(() => {${1}})",
        "doc": "Vue onBeforeUpdate Lifecycle hook",
        "grammar": "lsp",
        "label": "Vue Lifecycle Hooks - onBeforeUpdate",
        "matches": {
          "v3onbeforeupdate": true
        },
        "opts": {}
      },
      {
        "content": "onUpdated(() => {${1}})",
        "doc": "Vue onUpdated Lifecycle hook",
        "grammar": "lsp",
        "label": "Vue Lifecycle Hooks - onUpdated",
        "matches": {
          "v3onupdated": true
        },
        "opts": {}
      },
      {
        "content": "onErrorCaptured(() => {${1}})",
        "doc": "Vue onErrorCaptured Lifecycle hook",
        "grammar": "lsp",
        "label": "Vue Lifecycle Hooks - onErrorCaptured",
        "matches": {
          "v3onerrorcaptured": true
        },
        "opts": {}
      },
      {
        "content": "onUnmounted(() => {${1}})",
        "doc": "(destroyed) Vue onUnmounted Lifecycle hook",
        "grammar": "lsp",
        "label": "Vue Lifecycle Hooks - onUnmounted",
        "matches": {
          "v3onunmounted": true
        },
        "opts": {}
      },
      {
        "content": "onBeforeUnmount(() => {${1}})",
        "doc": "(beforeDestroy) Vue onBeforeUnmount Lifecycle hook",
        "grammar": "lsp",
        "label": "Vue Lifecycle Hooks - onBeforeUnmount",
        "matches": {
          "v3onbeforeunmount": true
        },
        "opts": {}
      },
      {
        "content": "import Vue from 'vue'\nimport ${1:VueCompositionApi} from '${2:@vue/composition-api}'\n\nVue.use(${1:VueCompositionApi})",
        "doc": "Import a plugin to main.js or plugins file",
        "grammar": "lsp",
        "label": "Plugin import",
        "matches": {
          "vplugin": true
        },
        "opts": {}
      },
      {
        "content": "import { reactive, toRefs } from '@vue/composition-api'\n\nexport default {\n\tsetup () {\n\t\tconst state = reactive({\n\t\t\t${0:count}: ${1:0},\n\t\t})\n\t\n\t\treturn {\n\t\t\t...toRefs(state),\n\t\t}\n\t}\n}",
        "doc": "Vue Composition API Script with Reactive",
        "grammar": "lsp",
        "label": "Vue Composition API Reactive Script",
        "matches": {
          "v3reactive-setup": true
        },
        "opts": {}
      },
      {
        "content": "import { ${0:component} } from '@/composables/${0:component}.js'\n\nexport default {\n\tsetup () {\n\t\tconst { ${1:name} } = ${0:component}()\n\t\n\t\treturn {\n\t\t\t${1:name}\n\t\t}\n\t}\n}",
        "doc": "Use Composition API within Options API",
        "grammar": "lsp",
        "label": "Use Composition API within Options API",
        "matches": {
          "v3useinoptions": true
        },
        "opts": {}
      }
    ],
    "vue-script-router": [
      {
        "content": "import Vue from 'vue';\nimport VueRouter from 'vue-router';\n\nVue.use(VueRouter);\n\nexport const router = new VueRouter({\n\tbase: '/',\n\tmode: 'history',\n\troutes: [\n\t\t{ path: '/path', component: component }\n\t]\n});",
        "doc": "Base for Vue Router",
        "grammar": "lsp",
        "label": "Vue Router",
        "matches": {
          "vrouter": true
        },
        "opts": {}
      },
      {
        "content": "scrollBehavior(to, from, savedPosition) {\n\tif(savedPosition) {\n\t\treturn savedPosition;\n\t} else {\n\t\treturn { x: 0, y: 0 };\n\t}\n},",
        "doc": "Vue Router scrollBehavior",
        "grammar": "lsp",
        "label": "Vue Router scrollBehavior",
        "matches": {
          "vscrollbehavior": true
        },
        "opts": {}
      },
      {
        "content": "router.beforeEach((to, from, next) => {\n\t${1:next();}\n});",
        "doc": "Vue Router global guards beforeEach",
        "grammar": "lsp",
        "label": "Vue Router beforeEach",
        "matches": {
          "vbeforeeach": true
        },
        "opts": {}
      },
      {
        "content": "router.beforeResolve((to, from, next) => {\n\t${1:next();}\n});",
        "doc": "Vue Router global guards beforeResolve",
        "grammar": "lsp",
        "label": "Vue Router beforeResolve",
        "matches": {
          "vbeforeresolve": true
        },
        "opts": {}
      },
      {
        "content": "router.afterEach((to, from) => {\n\t\n});",
        "doc": "Vue Router global guards afterEach",
        "grammar": "lsp",
        "label": "Vue Router afterEach",
        "matches": {
          "vaftereach": true
        },
        "opts": {}
      },
      {
        "content": "beforeEnter(to, from, next) {\n\t${1:next();}\n},",
        "doc": "Vue Router per-route guard beforeEnter",
        "grammar": "lsp",
        "label": "Vue Router beforeEnter",
        "matches": {
          "vbeforeenter": true
        },
        "opts": {}
      },
      {
        "content": "beforeRouteEnter(to, from, next) {\n\tnext(vm => {${1:}});\n},",
        "doc": "Vue Router component guards beforeRouteEnter",
        "grammar": "lsp",
        "label": "Vue Router beforeRouteEnter",
        "matches": {
          "vbeforerouteenter": true
        },
        "opts": {}
      },
      {
        "content": "beforeRouteUpdate(to, from, next) {\n\t${1:next();}\n},",
        "doc": "Vue Router component guards beforeRouteUpdate",
        "grammar": "lsp",
        "label": "Vue Router beforeRouteUpdate",
        "matches": {
          "vbeforerouteupdate": true
        },
        "opts": {}
      },
      {
        "content": "beforeRouteLeave(to, from, next) {\n\t${1:next();}\n},",
        "doc": "Vue Router component guards beforeRouteLeave",
        "grammar": "lsp",
        "label": "Vue Router beforeRouteLeave",
        "matches": {
          "vbeforerouteleave": true
        },
        "opts": {}
      },
      {
        "content": "{\n\tpath: '${1:pathName}',\n\tname: '${2:routeName}',\n\tcomponent: () => import('./${3:pathToComponent}'),\n},",
        "doc": "Vue Router route with per route code-splitting",
        "grammar": "lsp",
        "label": "Vue Router Route",
        "matches": {
          "vroute-named": true
        },
        "opts": {}
      }
    ],
    "vue-script-vuex": [
      {
        "content": "import Vue from 'vue';\nimport Vuex from 'vuex';\n\nVue.use(Vuex);\n\nexport const store = new Vuex.Store({\n\tstate: {\n\t\t${1:key}: ${2:value}\n\t}\n});",
        "doc": "Base for Vuex store",
        "grammar": "lsp",
        "label": "Vuex Store",
        "matches": {
          "vstore": true
        },
        "opts": {}
      },
      {
        "content": "getters: {\n\t${1:value}: state => {\n\t\treturn state.${1:value};\n\t}\n}",
        "doc": "vuex getter",
        "grammar": "lsp",
        "label": "Vuex Getters",
        "matches": {
          "vgetter": true
        },
        "opts": {}
      },
      {
        "content": "mutations: {\n\t${1:updateValue}(state, ${3:payload}) {\n\t\tstate.${2:value} = ${3:payload};\n\t}\n}",
        "doc": "vuex mutation",
        "grammar": "lsp",
        "label": "Vuex Mutation",
        "matches": {
          "vmutation": true
        },
        "opts": {}
      },
      {
        "content": "actions: {\n\t${1:updateValue}({commit}, ${2:payload}) {\n\t\tcommit('${1:updateValue}', ${2:payload});\n\t}\n}",
        "doc": "vuex action",
        "grammar": "lsp",
        "label": "Vuex Action",
        "matches": {
          "vaction": true
        },
        "opts": {}
      },
      {
        "content": "import { store } from './store/index';",
        "doc": "import vuex store into main.js",
        "grammar": "lsp",
        "label": "Vue Import Vuex Store",
        "matches": {
          "vstore-import": true
        },
        "opts": {}
      },
      {
        "content": "export default {\n\tstate: {\n\t\tvalue: 'my value'\n\t},\n\tgetters: {\n\t\tvalue: state => {\n\t\t\treturn state.value;\n\t\t}\n\t},\n\tmutations: {\n\t\tupdateValue(state, payload) {\n\t\t\tstate.value = payload;\n\t\t}\n\t},\n\tactions: {\n\t\tupdateValue({commit}, payload) {\n\t\t\tcommit('updateValue', payload);\n\t\t}\n\t}\n};",
        "doc": "vuex module",
        "grammar": "lsp",
        "label": "Vuex Module",
        "matches": {
          "vmodule": true
        },
        "opts": {}
      },
      {
        "content": "export const state = () => ({\n\tvalue: 'myvalue'\n})\n\nexport const getters = {\n\tgetterValue: state => {\n\t\treturn state.value\n\t}\n}\n\nexport const mutations = {\n\tupdateValue: (state, payload) => {\n\t\tstate.value = payload\n\t}\n}\n\nexport const actions = {\n\tupdateActionValue({ commit }) {\n\t\tcommit('updateValue', payload)\n\t}\n}",
        "doc": "vuex store 2",
        "grammar": "lsp",
        "label": "Vuex Store 2",
        "matches": {
          "vstore2": true
        },
        "opts": {}
      }
    ],
    "vue-template": [
      {
        "content": "<${1:div} v-for=\"${2:item} in ${2:item}s\" :key=\"${2:item}.id\">\n\t{{ ${2:item} }}\n</${1:div}>",
        "doc": "vfor statement",
        "grammar": "lsp",
        "label": "Vue v-for",
        "matches": {
          "vfor": true
        },
        "opts": {}
      },
      {
        "content": "<input v-model=\"${1:data}\" type=\"text\" />",
        "doc": "v-model directive",
        "grammar": "lsp",
        "label": "Vue v-model Directive",
        "matches": {
          "vmodel": true
        },
        "opts": {}
      },
      {
        "content": "<input v-model.number=\"${1:numData}\" type=\"number\" step=\"1\" />",
        "doc": "v-model directive number input",
        "grammar": "lsp",
        "label": "Vue v-model Number Directive",
        "matches": {
          "vmodel-num": true
        },
        "opts": {}
      },
      {
        "content": "@click=\"${1:handler}(${2:arg}, $event)\"",
        "doc": "v-on click handler with arguments",
        "grammar": "lsp",
        "label": "Vue v-on Shortcut Directive",
        "matches": {
          "von": true
        },
        "opts": {}
      },
      {
        "content": "<${1:component} :${1:propName}=\"${0}\"></${1:component}>",
        "doc": "component element with props",
        "grammar": "lsp",
        "label": "Vue Component with Props Binding",
        "matches": {
          "vel-props": true
        },
        "opts": {}
      },
      {
        "content": "<template v-slot:${0:name}>${1:defaultcontent}</template>",
        "doc": "named slot",
        "grammar": "lsp",
        "label": "Vue Named Slot",
        "matches": {
          "vslot-named": true
        },
        "opts": {}
      },
      {
        "content": "<img :src=\"'/path/to/images/' + ${1:fileName}\" alt=\"${2:altText}\"/>",
        "doc": "image source binding",
        "grammar": "lsp",
        "label": "Vue Image Source Binding",
        "matches": {
          "vsrc": true
        },
        "opts": {}
      },
      {
        "content": "<${1:div} :style=\"{ fontSize: ${2:data} + 'px' }\"></${1:div}>",
        "doc": "vue inline style binding",
        "grammar": "lsp",
        "label": "Vue Style Binding",
        "matches": {
          "vstyle": true
        },
        "opts": {}
      },
      {
        "content": "<${1:div} :style=\"[${2:styleObjectA}, ${3:styleObjectB]}\"></${1:div}>",
        "doc": "vue inline style binding, objects",
        "grammar": "lsp",
        "label": "Vue Style Binding Object",
        "matches": {
          "vstyle-obj": true
        },
        "opts": {}
      },
      {
        "content": "<${1:div} :class=\"{ ${2:className}: ${3:data} }\"></${1:div}>",
        "doc": "vue class binding",
        "grammar": "lsp",
        "label": "Vue Class Binding",
        "matches": {
          "vclass": true
        },
        "opts": {}
      },
      {
        "content": "<${1:div} :class=\"[${2:classNameA}, ${3:classNameB}]\"></${1:div}>",
        "doc": "vue class binding",
        "grammar": "lsp",
        "label": "Vue Class Binding Object",
        "matches": {
          "vclass-obj": true
        },
        "opts": {}
      },
      {
        "content": "<${1:div} :class=\"[${2:classNameA}, {${3:classNameB} : ${4:condition}}]\"></${1:div}>",
        "doc": "vue multiple conditional class bindings",
        "grammar": "lsp",
        "label": "Vue Multiple Conditional Class Bindings",
        "matches": {
          "vclass-obj-mult": true
        },
        "opts": {}
      },
      {
        "content": "@change=\"$emit('change', $event.target.value)\"",
        "doc": "Vue Emit from Child Component",
        "grammar": "lsp",
        "label": "Vue Emit from Child",
        "matches": {
          "vemit-child": true
        },
        "opts": {}
      },
      {
        "content": "@change=\"${1:foo} = $event\"",
        "doc": "Vue Emit to Parent Component",
        "grammar": "lsp",
        "label": "Vue Emit to Parent",
        "matches": {
          "vemit-parent": true
        },
        "opts": {}
      },
      {
        "content": "<transition\n\tmode=\"out-in\"\n\t@before-enter=\"beforeEnter\"\n\t@enter=\"enter\"\n\n\t@before-leave=\"beforeLeave\"\n\t@leave=\"leave\"\n\t:css=\"false\">\n\n</transition>",
        "doc": "transition component js hooks",
        "grammar": "lsp",
        "label": "Vue Transition Component with JavaScript Hooks",
        "matches": {
          "vanim": true
        },
        "opts": {}
      },
      {
        "content": "<nuxt-link to=\"/${1:page}\">${1:page}</nuxt-link>",
        "doc": "nuxt routing link",
        "grammar": "lsp",
        "label": "Vue Nuxt Routing Link",
        "matches": {
          "vnuxtl": true
        },
        "opts": {}
      },
      {
        "content": "<router-link :to=\"{name: '${1:name}'}\">${2:LinkTitle}</router-link>",
        "doc": "Named routing link",
        "grammar": "lsp",
        "label": "Vue Named Routing Link",
        "matches": {
          "vroutename": true
        },
        "opts": {}
      },
      {
        "content": "<router-link :to=\"{name: '${1:name}', params:{${2:id}: '${3:value}'} }\">${4:LinkTitle}</router-link>",
        "doc": "Named routing link w/ params",
        "grammar": "lsp",
        "label": "Vue Named Routing Link with Params",
        "matches": {
          "vroutenameparam": true
        },
        "opts": {}
      },
      {
        "content": "<router-link to=\"${1:path}\">${2:LinkTitle}</router-link>",
        "doc": "Path routing link",
        "grammar": "lsp",
        "label": "Vue Path Routing Link",
        "matches": {
          "vroutepath": true
        },
        "opts": {}
      }
    ],
    "vuex": [
      {
        "content": "import Vue from 'vue';\nimport Vuex from 'vuex';\n\nVue.use(Vuex);\n\nexport const store = new Vuex.Store({\n\tstate: {\n\t\t${1:key}: ${2:value}\n\t}\n});",
        "doc": "Base for Vuex store",
        "grammar": "lsp",
        "label": "vuex-store",
        "matches": {
          "vstore": true,
          "vuex store": true
        },
        "opts": {}
      },
      {
        "content": "getters: {\n\t${1:value}: state => {\n\t\treturn state.${1:value};\n\t}\n}",
        "doc": "vuex getter",
        "grammar": "lsp",
        "label": "vuex-getters",
        "matches": {
          "vgetter": true,
          "vuex getters": true
        },
        "opts": {}
      },
      {
        "content": "mutations: {\n\t${1:updateValue}(state, ${3:payload}) {\n\t\tstate.${2:value} = ${3:payload};\n\t}\n}",
        "doc": "vuex mutation",
        "grammar": "lsp",
        "label": "vuex-mutation",
        "matches": {
          "vmutation": true,
          "vuex mutation": true
        },
        "opts": {}
      },
      {
        "content": "actions: {\n\t${1:updateValue}({commit}, ${2:payload}) {\n\t\tcommit('${1:updateValue}', ${2:payload});\n\t}\n}",
        "doc": "vuex action",
        "grammar": "lsp",
        "label": "vuex-action",
        "matches": {
          "vaction": true,
          "vuex action": true
        },
        "opts": {}
      },
      {
        "content": "import { store } from './store/index';",
        "doc": "import vuex store into main.js",
        "grammar": "lsp",
        "label": "vuex-import-store",
        "matches": {
          "vstore-import": true,
          "vuex import store": true
        },
        "opts": {}
      },
      {
        "content": "export default {\n\tstate: {\n\t\tvalue: 'my value'\n\t},\n\tgetters: {\n\t\tvalue: state => {\n\t\t\treturn state.value;\n\t\t}\n\t},\n\tmutations: {\n\t\tupdateValue(state, payload) {\n\t\t\tstate.value = payload;\n\t\t}\n\t},\n\tactions: {\n\t\tupdateValue({commit}, payload) {\n\t\t\tcommit('updateValue', payload);\n\t\t}\n\t}\n};",
        "doc": "vuex module",
        "grammar": "lsp",
        "label": "vuex-module",
        "matches": {
          "vmodule": true,
          "vuex module": true
        },
        "opts": {}
      },
      {
        "content": "export const state = () => ({\n\tvalue: 'myvalue'\n})\n\nexport const getters = {\n\tgetterValue: state => {\n\t\treturn state.value\n\t}\n}\n\nexport const mutations = {\n\tupdateValue: (state, payload) => {\n\t\tstate.value = payload\n\t}\n}\n\nexport const actions = {\n\tupdateActionValue({ commit }) {\n\t\tcommit('updateValue', payload)\n\t}\n}",
        "doc": "vuex store 2",
        "grammar": "lsp",
        "label": "vuex-store-2",
        "matches": {
          "vstore2": true,
          "vuex store 2": true
        },
        "opts": {}
      }
    ],
    "xhtml": [
      {
        "content": "<html xmlns=\"http://www.w3.org/1999/xhtml\">\n    ${1:TARGET}\n</html>",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "xhtml": true
        },
        "opts": {}
      }
    ],
    "xml": [
      {
        "content": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "xml": true
        },
        "opts": {}
      },
      {
        "content": "<${1:}>\n\t${2}\n</$1>",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "t": true
        },
        "opts": {}
      },
      {
        "content": "<${1:}>${2}</$1>",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ti": true
        },
        "opts": {}
      },
      {
        "content": "<?xml version=\"1.0\"?>\n",
        "doc": null,
        "grammar": "snu",
        "label": "XML declaration",
        "matches": {
          "xml": true
        },
        "opts": {
          "b": true
        }
      }
    ],
    "xslt": [
      {
        "content": "<xsl:apply-templates select=\"${1:*}\">\n\t<xsl:with-param name=\"${2:param}\">${3}</xsl:with-param>${4}\n</xsl:apply-templates>",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "apply-templates with-param": true
        },
        "opts": {}
      },
      {
        "content": "<xsl:apply-templates select=\"${1:*}\">\n\t<xsl:sort select=\"${2:node}\" order=\"${3:ascending}\" data-type=\"${4:text}\">${5}\n</xsl:apply-templates>",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "apply-templates sort-by": true
        },
        "opts": {}
      },
      {
        "content": "<xsl:apply-templates select=\"${1:*}\" />",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "apply-templates plain": true
        },
        "opts": {}
      },
      {
        "content": "<xsl:attribute name=\"${1:name}\">${2}</xsl:attribute>",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "attribute blank": true
        },
        "opts": {}
      },
      {
        "content": "<xsl:attribute name=\"${1:name}\">\n\t<xsl:value-of select=\"${2:*}\" />\n</xsl:attribute>",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "attribute value-of": true
        },
        "opts": {}
      },
      {
        "content": "<xsl:call-template name=\"${1:template}\" />",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "call-template": true
        },
        "opts": {}
      },
      {
        "content": "<xsl:call-template name=\"${1:template}\">\n\t<xsl:with-param name=\"${2:param}\">${3}</xsl:with-param>${4}\n</xsl:call-template>",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "call-template with-param": true
        },
        "opts": {}
      },
      {
        "content": "<xsl:choose>\n\t<xsl:when test=\"${1:value}\">\n\t\t${2}\n\t</xsl:when>\n</xsl:choose>",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "choose": true
        },
        "opts": {}
      },
      {
        "content": "<xsl:copy-of select=\"${1:*}\" />",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "copy-of": true
        },
        "opts": {}
      },
      {
        "content": "<xsl:for-each select=\"${1:*}\">${2}\n</xsl:for-each>",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "for-each": true
        },
        "opts": {}
      },
      {
        "content": "<xsl:if test=\"${1:test}\">${2}\n</xsl:if>",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "if": true
        },
        "opts": {}
      },
      {
        "content": "<xsl:import href=\"${1:stylesheet}\" />",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "import": true
        },
        "opts": {}
      },
      {
        "content": "<xsl:include href=\"${1:stylesheet}\" />",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "include": true
        },
        "opts": {}
      },
      {
        "content": "<xsl:otherwise>${0}\n</xsl:otherwise>",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "otherwise": true
        },
        "opts": {}
      },
      {
        "content": "<xsl:param name=\"${1:name}\">${2}\n</xsl:param>",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "param": true
        },
        "opts": {}
      },
      {
        "content": "<xsl:stylesheet version=\"1.0\"\nxmlns:xsl=\"http://www.w3.org/1999/XSL/Transform\">${0}\n</xsl:stylesheet>",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "stylesheet": true
        },
        "opts": {}
      },
      {
        "content": "<xsl:template match=\"${1:*}\">${0}\n</xsl:template>",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "template": true
        },
        "opts": {}
      },
      {
        "content": "<xsl:template name=\"${1:name}\">${0}\n</xsl:template>",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "template named": true
        },
        "opts": {}
      },
      {
        "content": "<xsl:text>${0}</xsl:text>",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "text": true
        },
        "opts": {}
      },
      {
        "content": "<xsl:value-of select=\"${1:*}\" />",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "value-of": true
        },
        "opts": {}
      },
      {
        "content": "<xsl:variable name=\"${1:name}\">${0}\n</xsl:variable>",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "variable blank": true
        },
        "opts": {}
      },
      {
        "content": "<xsl:variable select=\"${1:*}\" />",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "variable select": true
        },
        "opts": {}
      },
      {
        "content": "<xsl:when test=\"${1:test}\">${0}\n</xsl:when>",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "when": true
        },
        "opts": {}
      },
      {
        "content": "<xsl:with-param name=\"${1:name}\">${0}</xsl:with-param>",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "with-param": true
        },
        "opts": {}
      },
      {
        "content": "<xsl:with-param name=\"${1:name}\" select=\"${0:*}\" />",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "with-param select": true
        },
        "opts": {}
      }
    ],
    "yii": [
      {
        "content": "Yii::app()->session['${0}'];",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "yse": true
        },
        "opts": {}
      },
      {
        "content": "$this->renderDynamic('${0:callback}');",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "yrd": true
        },
        "opts": {}
      },
      {
        "content": "Yii::app()->cache->set('${1:key}', ${2:value}, ${3:expire}, new C${4:}CacheDependency(${0}));",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ycas": true
        },
        "opts": {}
      },
      {
        "content": "Yii::app()->cache->add('${1:key}', ${2:value}, ${3:expire}, new C${4}CacheDependency(${0}));",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ycad": true
        },
        "opts": {}
      },
      {
        "content": "Yii::app()->clientScript->registerCssFile('${0:file}');",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "yregcf": true
        },
        "opts": {}
      },
      {
        "content": "Yii::app()->request->requestType",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "yreqtype": true
        },
        "opts": {}
      },
      {
        "content": "Yii::app()->request->isAjaxRequest",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "yisajax": true
        },
        "opts": {}
      },
      {
        "content": "Yii::t('${1:category}', '${2:message}',array(${0}));",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "yt": true
        },
        "opts": {}
      },
      {
        "content": "Yii::app()->clientScript->registerCss('${1:id}', '${0}');",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "yregc": true
        },
        "opts": {}
      },
      {
        "content": "Yii::log('${1:msg}', '${0:info}');",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ylog": true
        },
        "opts": {}
      },
      {
        "content": "YYii::app()->request->userHostAddress",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "yuserip": true
        },
        "opts": {}
      },
      {
        "content": "Yii::app()->clientScript->registerScriptFile('${1:scriptUrl}', CClientScript::POS_${0:END});",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "yregsf": true
        },
        "opts": {}
      },
      {
        "content": "$this->widget('CLinkPager', array('pages'=>$pages,'header'=>'${0}'}))",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ylinkpager": true
        },
        "opts": {}
      },
      {
        "content": "CJSON::encode(${0:text});",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "yjec": true
        },
        "opts": {}
      },
      {
        "content": "$dataProvider = new CActiveDataProvider('${1}', array(\n  'criteria' => array(\n\t\t'condition' => '${2}',\n\t\t'order' => '${3}',\n\t\t'with' => array('${4}')\n\t),\n//'pagination' => false,\n\t'pagination' => array(\n\t\t'pageSize'=>${5},\n\t),\n));\n${0}\n// $dataProvider->getData() will return a list of Post objects",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "yadp": true
        },
        "opts": {}
      },
      {
        "content": "$this->renderDynamic('${1:callback}', array('${2:key}'=>${0:value}));",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "yrdi": true
        },
        "opts": {}
      },
      {
        "content": "Yii::app()->clientScript->registerScript('${1:id}', '${2}', CClientScript::POS_${0:READY});",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "yregs": true
        },
        "opts": {}
      },
      {
        "content": "Yii::app()->cache->flush();",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ycaf": true
        },
        "opts": {}
      },
      {
        "content": "Yii::app()->request->cookies['${0}']",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "yco": true
        },
        "opts": {}
      },
      {
        "content": "Yii::app()->user->",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "yuser": true
        },
        "opts": {}
      },
      {
        "content": "$this->refresh();",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "yrf": true
        },
        "opts": {}
      },
      {
        "content": "Yii::import('${0}');",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "yimp": true
        },
        "opts": {}
      },
      {
        "content": "Yii::trace('${0:msg}');",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ytrace": true
        },
        "opts": {}
      },
      {
        "content": "Yii::app()->params['${0}']",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ypar": true
        },
        "opts": {}
      },
      {
        "content": "Yii::app()->request->isPostRequest",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "yispost": true
        },
        "opts": {}
      },
      {
        "content": "if(Yii::app()->request->isAjaxRequest == TRUE)\n{\n\t${0}\n}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "yifisajax": true
        },
        "opts": {}
      },
      {
        "content": "Yii::app()->cache->delete('${0:key}');",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ydelcache": true
        },
        "opts": {}
      },
      {
        "content": "$this->render('${1:view}',array('${2:key}'=>${0:value}));",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "yr": true
        },
        "opts": {}
      },
      {
        "content": "$this->redirect(array('${1:controller}/${0:action}'));",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "yre": true
        },
        "opts": {}
      },
      {
        "content": "Yii::app()->cache->get('${0:key}');",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ycag": true
        },
        "opts": {}
      },
      {
        "content": "$this->renderText('${0}');",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "yrt": true
        },
        "opts": {}
      },
      {
        "content": "$this->renderPartial('${1:view}',array('${2:key}'=>${0:value}));",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "yrp": true
        },
        "opts": {}
      },
      {
        "content": "${1:ModelName}::model()->count(${2:condition}, array('${3:key}'=>${0:value}));",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ycountm": true
        },
        "opts": {}
      },
      {
        "content": "${1:ModelName}::model()->countBySql(${2:sql},array('${3:key}'=>${0:value}));",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ycountbs": true
        },
        "opts": {}
      },
      {
        "content": "${1:ModelName}::model()->updateAll(${2:array('attributes')}, ${3:condition},array('${4:key}'=>${0:value}));",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "yupdatea": true
        },
        "opts": {}
      },
      {
        "content": "${1:ModelName}::model()->updateByPk(${2:pk}, ${3:array('attributes')}, ${4:condition},array('${5:key}'=>${0:value}));",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "yupdatebp": true
        },
        "opts": {}
      },
      {
        "content": "${1:ModelName}::model()->deleteAll(${2:condition},array('${3:key}'=>${0:value}));",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ydela": true
        },
        "opts": {}
      },
      {
        "content": "${1:ModelName}::model()->deleteByPk(${2:pk}, ${3:condition}, array('${4:key}'=>${0:value}));",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ydelbp": true
        },
        "opts": {}
      },
      {
        "content": "${1:ModelName}::model()->find(${2:condition},array('${3:key}'=>${0:value}));",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "yfind": true
        },
        "opts": {}
      },
      {
        "content": "${1:ModelName}::model()->findAll(${2:condition},array('${3:key}'=>${0:value}));",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "yfinda": true
        },
        "opts": {}
      },
      {
        "content": "${1:ModelName}::model()->findByPk(${2:pk}, ${3:condition}, array('${4:key}'=>${0:value}));",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "yfindbp": true
        },
        "opts": {}
      },
      {
        "content": "${1:ModelName}::model()->findAllByPk(${2:pk}, ${3:condition},array('${4:key}'=>${0:value}));",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "yfindabp": true
        },
        "opts": {}
      },
      {
        "content": "${1:ModelName}::model()->findBySql(${2:sql}, array('${3:key}'=>${0:value}));",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "yfindbs": true
        },
        "opts": {}
      },
      {
        "content": "${1:ModelName}::model()->findAllByAttributes(array('${2:attributeName}'=>${3:attributeValue}), ${4:condition}, array('${5:key}'=>${0:value}));",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "yfindaba": true
        },
        "opts": {}
      },
      {
        "content": "${1:ModelName}::model()->exists(${2:condition}, array('${3:key}'=>${0:value}));",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "yexists": true
        },
        "opts": {}
      },
      {
        "content": "<?php\nclass ${1:ModelName} extends ${2:CActiveRecord}\n{\n\t/**\n\t * Returns the static model of the specified AR class.\n\t * @return CActiveRecord the static model class\n\t */\n\tpublic static function model($className=__CLASS__)\n\t{\n\t\treturn parent::model($className);\n\t}\n\t/**\n\t * @return string the associated database table name\n\t */\n\tpublic function tableName()\n\t{\n\t\treturn '${0:table_name}';\n\t}\n\t/**\n\t * @return array validation rules for model attributes.\n\t */\n\tpublic function rules()\n\t{\n\t\treturn array(\n\t\t);\n\t}\n\t/**\n\t * @return array relational rules.\n\t */\n\tpublic function relations()\n\t{\n\t\treturn array(\n\t\t);\n\t}\n\t/**\n\t * @return array customized attribute labels (name=&gt;label)\n\t */\n\tpublic function attributeLabels()\n\t{\n\t\treturn array(\n\t\t);\n\t}\n}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ymodel": true
        },
        "opts": {}
      },
      {
        "content": "<?php\n/**\n * ${1:}\n */\nclass ${2:Site}Controller extends ${3:CController}\n{\n\t  public function action${4:Index}()\n\t  {\n\t      ${0}\n\t  }\n\t// -----------------------------------------------------------\n\t// Uncomment the following methods and override them if needed\n\t/*\n\tpublic function filters()\n\t{\n\t\t// return the filter configuration for this controller, e.g.:\n\t\treturn array(\n\t\t\t'inlineFilterName',\n\t\t\tarray(\n\t\t\t\t'class'=>'path.to.FilterClass',\n\t\t\t\t'propertyName'=>'propertyValue',\n\t\t\t),\n\t\t);\n\t}\n\tpublic function actions()\n\t{\n\t\t// return external action classes, e.g.:\n\t\treturn array(\n\t\t\t'action1'=>'path.to.ActionClass',\n\t\t\t'action2'=>array(\n\t\t\t\t'class'=>'path.to.AnotherActionClass',\n\t\t\t\t'propertyName'=>'propertyValue',\n\t\t\t),\n\t\t);\n\t}\n\t*/\n}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ycontroller": true
        },
        "opts": {}
      },
      {
        "content": "public function action${1:Index}(${2:params})\n{\n\t${0}\n}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "yact": true
        },
        "opts": {}
      }
    ],
    "yii-chtml": [
      {
        "content": "echo CHtml::radioButton('${1:name}', ${2:false},array(${3:optionName}=>${0:optionValue} );",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "yhrb": true
        },
        "opts": {}
      },
      {
        "content": "echo CHtml::asset('${0:path}');",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "yhass": true
        },
        "opts": {}
      },
      {
        "content": "echo CHtml::activeLabelEx(${1:model}, '${2:attribute}',array('${3:optionName}'=>${0:optionValue}));",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "yhale": true
        },
        "opts": {}
      },
      {
        "content": "echo CHtml::encodeArray(array(${0}));",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "yheca": true
        },
        "opts": {}
      },
      {
        "content": "echo CHtml::normalizeUrl(array('${0}'));",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "yhnurl": true
        },
        "opts": {}
      },
      {
        "content": "echo CHtml::submitButton('${1:label}',array('${2:optionName}'=>${0:optionValue}));",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "yhsb": true
        },
        "opts": {}
      },
      {
        "content": "echo CHtml::linkButton('${1:lable}',array('${2:optionName}'=>${0:optionValue}));",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "yhlinkb": true
        },
        "opts": {}
      },
      {
        "content": "echo CHtml::activeTextArea(${1:model}, '${2:attribute}',array('${3:optionName}'=>${0:optionValue}));",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "yhata": true
        },
        "opts": {}
      },
      {
        "content": "echo CHtml::ajaxButton('${1:label}', '${2:url}',array('${3:ajaxOptionName}'=>${4:ajaxOptionValue}),array('${5:optionName}'=>${0:optionValue}));",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "yhajb": true
        },
        "opts": {}
      },
      {
        "content": "echo CHtml::activeId(${1:model}, '${0:attribute}');",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "yhai": true
        },
        "opts": {}
      },
      {
        "content": "echo CHtml::activeCheckBox(${1:model}, '${2:attribute}',array('${3:optionName}'=>${0:optionValue}));",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "yhacb": true
        },
        "opts": {}
      },
      {
        "content": "echo CHtml::activeHiddenField(${1:model}, '${2:attribute}',array('${3:optionName}'=>${0:optionValue}));",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "yhahf": true
        },
        "opts": {}
      },
      {
        "content": "echo CHtml::encode(${0:text});",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "yhec": true
        },
        "opts": {}
      },
      {
        "content": "echo CHtml::metaTag('${1:content}', '${2:name}', '${3:httpEquiv}',array('${4:optionName}'=>${0:optionValue}));",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "yhmtag": true
        },
        "opts": {}
      },
      {
        "content": "echo CHtml::dropDownList('${1:name}', '${2:select}', array(${3}),array('${4:optionName}'=>${0:optionValue}));",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "yhddl": true
        },
        "opts": {}
      },
      {
        "content": "echo CHtml::listBox('${1:name}', '${2:select}',array(${3}),array('${4:optionName}'=>${0:optionValue}));",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "yhlb": true
        },
        "opts": {}
      },
      {
        "content": "echo CHtml::script('${0:test}');",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "yhjs": true
        },
        "opts": {}
      },
      {
        "content": "echo CHtml::ajax(array(${0}));",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "yhaj": true
        },
        "opts": {}
      },
      {
        "content": "echo CHtml::textField('${1:name}', '${2:value}',array('${3:optionName}'=>${0:optionValue}));",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "yhtf": true
        },
        "opts": {}
      },
      {
        "content": "echo CHtml::activePasswordField(${1:model}, '${2:attribute}',array('${3:optionName}'=>${0:optionValue}));",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "yhapf": true
        },
        "opts": {}
      },
      {
        "content": "echo CHtml::listData(array(${1}),'${2:valueField}', '${3:textField}','${0:groupField}');",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "yhld": true
        },
        "opts": {}
      },
      {
        "content": "echo CHtml::mailto('${1:text}', '${2:email}',array('${3:optionName}'=>${0:optionValue}));",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "yhmt": true
        },
        "opts": {}
      },
      {
        "content": "echo CHtml::image('${1:src}', '${2:alt}',array('${3:optionName}'=>${0:optionValue}));",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "yhimg": true
        },
        "opts": {}
      },
      {
        "content": "echo CHtml::activeListBox(${1:model}, '${2:attribute}', array(${3}),array('${4:optionName}'=>${0:optionValue}));",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "yhalb": true
        },
        "opts": {}
      },
      {
        "content": "echo CHtml::activeFileField(${1:model}, '${2:attribute}',array('${3:optionName}'=>${0:optionValue}));",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "yhaff": true
        },
        "opts": {}
      },
      {
        "content": "echo CHtml::closeTag('${0:tag}');",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "yhct": true
        },
        "opts": {}
      },
      {
        "content": "echo CHtml::activeInputField('${1:type}', ${2:model}, '${3:attribute}',array('${4:optionName}'=>${0:optionValue}));",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "yhaif": true
        },
        "opts": {}
      },
      {
        "content": "echo CHtml::scriptFile('${0:url}');",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "yhjsf": true
        },
        "opts": {}
      },
      {
        "content": "echo CHtml::radioButtonList('${1:name}', ${2:select}, array(${3}),array('${4:optionName}'=>${0:optionValue}));",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "yhrbl": true
        },
        "opts": {}
      },
      {
        "content": "echo CHtml::cssFile('${1:url}','${0:media}');",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "yhcssf": true
        },
        "opts": {}
      },
      {
        "content": "echo CHtml::error(${1:model}, '${0:attribute}');",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "yherr": true
        },
        "opts": {}
      },
      {
        "content": "echo CHtml::passwordField('${1:name}', '${2:value}',array('${3:optionName}'=>${0:optionValue}));",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "yhpf": true
        },
        "opts": {}
      },
      {
        "content": "echo CHtml::hiddenField('${1:name}', '${2:value}',array('${3:optionName}'=>${0:optionValue}));",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "yhhf": true
        },
        "opts": {}
      },
      {
        "content": "echo CHtml::cdata(${0:text});",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "yhc": true
        },
        "opts": {}
      },
      {
        "content": "echo CHtml::link('${1:text}',array(${2}),array('${3:optionName}'=>${0:optionValue}));",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "yhlink": true
        },
        "opts": {}
      },
      {
        "content": "echo CHtml::errorSummary(${1:model},'${2:headerHtml}','${0:footerHtml}');",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "yherrs": true
        },
        "opts": {}
      },
      {
        "content": "echo CHtml::tag('${1:tag}',array('${2:optionName}'=>${3:optionValue}),${4:false},${0:true});",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "yht": true
        },
        "opts": {}
      },
      {
        "content": "echo CHtml::ajaxLink('${1:label}', '${2:url}',array('${3:ajaxOptionName}'=>${4:ajaxOptionValue}),array('${5:optionName}'=>${0:optionValue}));",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "yhajl": true
        },
        "opts": {}
      },
      {
        "content": "echo CHtml::label('${1:label}', '${2:for}',array('${3:optionName}'=>${0:optionValue}));",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "yhlabel": true
        },
        "opts": {}
      },
      {
        "content": "echo CHtml::activeName(${1:model}, '${0:attribute}');",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "yhan": true
        },
        "opts": {}
      },
      {
        "content": "echo CHtml::statefulForm(array('${1}'), '${2:post}',array('${3:optionName}'=>${0:optionValue}));",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "yhsform": true
        },
        "opts": {}
      },
      {
        "content": "echo CHtml::fileField('${1:name}', '${2:value}',array('${3:optionName}'=>${0:optionValue}));",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "yhff": true
        },
        "opts": {}
      },
      {
        "content": "echo CHtml::activeTextField(${1:model}, '${2:attribute}',array('${3:optionName}'=>${0:optionValue}));",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "yhatf": true
        },
        "opts": {}
      },
      {
        "content": "echo CHtml::css('${1:test}','${0:media}');",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "yhcss": true
        },
        "opts": {}
      },
      {
        "content": "echo CHtml::imageButton('${1:src}',array('${2:optionName}'=>${0:optionValue}));",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "yhimgb": true
        },
        "opts": {}
      },
      {
        "content": "echo CHtml::ajaxSubmitButton('${1:label}', '${2:url}',array('${3:ajaxOptionName}'=>${4:ajaxOptionValue}),array('${5:optionName}'=>${0:optionValue}));",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "yhajsb": true
        },
        "opts": {}
      },
      {
        "content": "echo CHtml::button('${1:label}',array('${2:optionName}'=>${0:optionValue}));",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "yhb": true
        },
        "opts": {}
      },
      {
        "content": "echo CHtml::listOptions('${1:selection}', array(${2}), array('${3:optionName}'=>${0:optionValue}));",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "yhlo": true
        },
        "opts": {}
      },
      {
        "content": "echo CHtml::activeCheckBoxList(${1:model}, '${2:attribute}', array(${3}),array('${4:optionName}'=>${0:optionValue}));",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "yhacbl": true
        },
        "opts": {}
      },
      {
        "content": "echo CHtml::openTag('${1:tag}', array('${2:optionName}'=>${0:optionValue}));",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "yhot": true
        },
        "opts": {}
      },
      {
        "content": "echo CHtml::checkBox('${1:name}', ${2:false}, array('${3:optionName}'=>${0:optionValue}));",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "yhcb": true
        },
        "opts": {}
      },
      {
        "content": "echo CHtml::textArea('${1:name}', '${2:value}',array('${3:optionName}'=>${0:optionValue}));",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "yhta": true
        },
        "opts": {}
      },
      {
        "content": "echo CHtml::linkTag('${1:relation}', '${2:type}', '${3:href}', '${4:media}',array('${5:optionName}'=>${0:optionValue}));",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "yhlinkt": true
        },
        "opts": {}
      },
      {
        "content": "echo CHtml::resetButton('${1:label}',array('${2:optionName}'=>${0:optionValue}));",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "yhrsb": true
        },
        "opts": {}
      },
      {
        "content": "echo CHtml::activeRadioButtonList(${1:model}, '${2:attribute}', array(${3}),array('${4:optionName}'=>${0:optionValue}));",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "yharbl": true
        },
        "opts": {}
      },
      {
        "content": "echo CHtml::checkBoxList('${1:name}', ${2:select}, array(${3}),array('${4:optionName}'=>${0:optionValue}));",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "yhcbl": true
        },
        "opts": {}
      },
      {
        "content": "echo CHtml::form(array('${1}'), '${2:post}',array('${3:optionName}'=>${0:optionValue}));",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "yhform": true
        },
        "opts": {}
      },
      {
        "content": "echo CHtml::beginForm(array('${1}'), '${2:post}',array('${3:optionName}'=>${4:optionValue}));\n${0}\necho CHtml::endForm();",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "yhbeform": true
        },
        "opts": {}
      },
      {
        "content": "echo CHtml::activeDropDownList(${1:model}, '${2:attribute}', array(${3}),array('${4:optionName}'=>${0:optionValue}));",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "yhaddl": true
        },
        "opts": {}
      },
      {
        "content": "echo CHtml::activeRadioButton(${1:model}, '${2:attribute}',array('${3:optionName}'=>${0:optionValue}));",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "yharb": true
        },
        "opts": {}
      },
      {
        "content": "echo CHtml::activeLabel(${1:model}, '${2:attribute}',array('${3:optionName}'=>${0:optionValue}));",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "yhal": true
        },
        "opts": {}
      }
    ],
    "yup": [
      {
        "content": "yup.reach()",
        "doc": "yup.reach(schema: Schema, path: string, value?: object, context?: object): Schema\n\nFor nested schemas yup.reach will retrieve a nested schema based on the provided path.For nested schemas that need to resolve dynamically, you can provide a value and optionally\na context object.let schema = object().shape({\n  nested: object().shape({\n    arr: array().of(object().shape({ num: number().max(4) }))\n  })\n});\n\nreach(schema, \"nested.arr.num\");\nreach(schema, \"nested.arr[].num\");\nreach(schema, \"nested.arr[1].num\");\nreach(schema, 'nested[\"arr\"][1].num');\n",
        "grammar": "lsp",
        "label": "yup-reach",
        "matches": {
          "yup reach": true
        },
        "opts": {}
      },
      {
        "content": "yup.addMethod()",
        "doc": "yup.addMethod(schemaType: Schema, name: string, method: ()=> Schema): void\n\nAdds a new method to the core schema types. A friendlier convenience method for schemaType.prototype[name] = method.yup.addMethod(yup.date, \"format\", function(formats, parseStrict) {\n  return this.transform(function(value, originalValue) {\n    if (this.isType(value)) return value;\n\n    value = Moment(originalValue, formats, parseStrict);\n\n    return value.isValid() ? value.toDate() : new Date(\"\");\n  });\n});\n",
        "grammar": "lsp",
        "label": "yup-add-method",
        "matches": {
          "yup addmethod": true
        },
        "opts": {}
      },
      {
        "content": "yup.ref()",
        "doc": "yup.ref(path: string, options: { contextPrefix: string }): Ref\n\nCreates a reference to another sibling or sibling descendant field. Refs are resolved\nat validation/cast time and supported where specified. Refs are evaluated in the proper order so that\nthe ref value is resolved before the field using the ref (be careful of circular dependencies!).let schema = object({\n  baz: ref(\"foo.bar\"),\n  foo: object({\n    bar: string()\n  }),\n  x: ref(\"$x\")\n});\n\nschema.cast({ foo: { bar: \"boom\" } }, { context: { x: 5 } });\n// => { baz: 'boom',  x: 5, foo: { bar: 'boom' } }\n",
        "grammar": "lsp",
        "label": "yup-ref",
        "matches": {
          "yup ref": true
        },
        "opts": {}
      },
      {
        "content": "yup.lazy()",
        "doc": "yup.lazy((value: any) => Schema): Lazy\n\nCreates a schema that is evaluated at validation/cast time. Useful for creating\nrecursive schema like Trees, for polymorphic fields and arrays.CAUTION! When defining parent-child recursive object schema, you want to reset the default()\nto undefined on the child otherwise the object will infinitely nest itself when you cast it!.let node = object({\n  id: number(),\n  child: yup.lazy(() => node.default(undefined))\n});\n\nlet renderable = yup.lazy(value => {\n  switch (typeof value) {\n    case \"number\":\n      return number();\n    case \"string\":\n      return string();\n    default:\n      return mixed();\n  }\n});\n\nlet renderables = array().of(renderable);\n",
        "grammar": "lsp",
        "label": "yup-lazy",
        "matches": {
          "yup lazy": true
        },
        "opts": {}
      },
      {
        "content": "mixed.clone()",
        "doc": "mixed.clone(): Schema\n\nCreates a deep copy of the schema. Clone is used internally to return a new schema with every schema state change.",
        "grammar": "lsp",
        "label": "mixed-clone",
        "matches": {
          "yup mixed clone": true
        },
        "opts": {}
      },
      {
        "content": "mixed.label()",
        "doc": "mixed.label(label: string): Schema\n\nOverrides the key name which is used in error messages.",
        "grammar": "lsp",
        "label": "mixed-label",
        "matches": {
          "yup mixed label": true
        },
        "opts": {}
      },
      {
        "content": "mixed.meta()",
        "doc": "mixed.meta(metadata: object): Schema\n\nAdds to a metadata object, useful for storing data with a schema, that doesn't belong\nthe cast object itself.",
        "grammar": "lsp",
        "label": "mixed-meta",
        "matches": {
          "yup mixed meta": true
        },
        "opts": {}
      },
      {
        "content": "mixed.describe()",
        "doc": "mixed.describe(): SchemaDescription\n\nCollects schema details (like meta, labels, and active tests) into a serializable\ndescription object.SchemaDescription {\n  type: string,\n  label: string,\n  meta: object,\n  tests: Array<{ name: string, params: object }>\n}\n",
        "grammar": "lsp",
        "label": "mixed-describe",
        "matches": {
          "yup mixed describe": true
        },
        "opts": {}
      },
      {
        "content": "mixed.concat()",
        "doc": "mixed.concat(schema: Schema)\n\nCreates a new instance of the schema by combining two schemas. Only schemas of the same type can be concatenated.",
        "grammar": "lsp",
        "label": "mixed-concat",
        "matches": {
          "yup mixed concat": true
        },
        "opts": {}
      },
      {
        "content": "mixed.validate()",
        "doc": "mixed.validate(value: any, options?: object): Promise<any, ValidationError>\n\nReturns the value (a cast value if isStrict is false) if the value is valid, and returns the errors otherwise.\nThis method is asynchronous and returns a Promise object, that is fulfilled with the value, or rejected\nwith a ValidationError.The options argument is an object hash containing any schema options you may want to override\n(or specify for the first time).Options = {\n  strict: boolean = false;\n  abortEarly: boolean = true;\n  stripUnknown: boolean = false;\n  recursive: boolean = true;\n  context?: object;\n}\n\nstrict: only validate the input, and skip and coercion or transformation\nabortEarly: return from validation methods on the first error rather\nthan after all validations run.\nstripUnknown: remove unspecified keys from objects.\nrecursive: when false validations will not descend into nested schema\n(relevant for objects or arrays).\ncontext: any context needed for validating schema conditions (see: when())\nschema.validate({ name: \"jimmy\", age: 24 }).then(function(value) {\n  value; // => { name: 'jimmy',age: 24 }\n});\n\nschema.validate({ name: \"jimmy\", age: \"hi\" }).catch(function(err) {\n  err.name; // => 'ValidationError'\n  err.errors; // => ['age must be a number']\n});\n",
        "grammar": "lsp",
        "label": "mixed-validate",
        "matches": {
          "yup mixed validate": true
        },
        "opts": {}
      },
      {
        "content": "mixed.validateSync()",
        "doc": "mixed.validateSync(value: any, options?: object): any\n\nRuns validatations synchronously if possible and returns the resulting value,\nor throws a ValidationError. Accepts all the same options as validate.Synchronous validation only works if there are no configured async tests, e.g tests that return a Promise.\nFor instance this will work:let schema = number().test(\n  \"is-42\",\n  \"this isn't the number i want\",\n  value => value != 42\n);\n\nschema.validateSync(23); // throws ValidationError\nhowever this will not:let schema = number().test(\"is-42\", \"this isn't the number i want\", value =>\n  Promise.resolve(value != 42)\n);\n\nschema.validateSync(42); // throws Error\n",
        "grammar": "lsp",
        "label": "mixed-validate-sync",
        "matches": {
          "yup mixed validatesync": true
        },
        "opts": {}
      },
      {
        "content": "mixed.validateAt()",
        "doc": "mixed.validateAt(path: string, value: any, options?: object): Promise<any, ValidationError>\n\nValidate a deeply nested path within the schema. Similar to how reach works,\nbut uses the resulting schema as the subject for validation.\nNote! The value here is the root value relative to the starting schema, not the value at the nested path.\nlet schema = object({\n  foo: array().of(\n    object({\n      loose: boolean(),\n      bar: string().when(\"loose\", {\n        is: true,\n        otherwise: s => s.strict()\n      })\n    })\n  )\n});\n\nlet rootValue = {\n  foo: [{ bar: 1 }, { bar: 1, loose: true }]\n};\n\nawait schema.validateAt(\"foo[0].bar\", rootValue); // => ValidationError: must be a string\n\nawait schema.validateAt(\"foo[1].bar\", rootValue); // => '1'\n",
        "grammar": "lsp",
        "label": "mixed-validate-at",
        "matches": {
          "yup mixed validateat": true
        },
        "opts": {}
      },
      {
        "content": "mixed.validateSyncAt()",
        "doc": "mixed.validateSyncAt(path: string, value: any, options?: object): any\n\nSame as validateAt but synchronous.",
        "grammar": "lsp",
        "label": "mixed-validate-sync-at",
        "matches": {
          "yup mixed validatesyncat": true
        },
        "opts": {}
      },
      {
        "content": "mixed.isValid()",
        "doc": "mixed.isValid(value: any, options?: object): Promise<boolean>\n\nReturns true when the passed in value matches the schema. isValid\nis asynchronous and returns a Promise object.Takes the same options as validate().",
        "grammar": "lsp",
        "label": "mixed-is-valid",
        "matches": {
          "yup mixed isvalid": true
        },
        "opts": {}
      },
      {
        "content": "mixed.isValidSync()",
        "doc": "mixed.isValidSync(value: any, options?: object): boolean\n\nSynchronously returns true when the passed in value matches the schema.Takes the same options as validateSync() and has the same caveats around async tests.",
        "grammar": "lsp",
        "label": "mixed-is-valid-sync",
        "matches": {
          "yup mixed isvalidsync": true
        },
        "opts": {}
      },
      {
        "content": "mixed.cast()",
        "doc": "mixed.cast(value: any, options = {}): any\n\nAttempts to coerce the passed in value to a value that matches the schema. For example: '5' will\ncast to 5 when using the number() type. Failed casts generally return null, but may also\nreturn results like NaN and unexpected strings.options parameter can be an object containing context. (For more info on context see mixed.validate)",
        "grammar": "lsp",
        "label": "mixed-cast",
        "matches": {
          "yup mixed cast": true
        },
        "opts": {}
      },
      {
        "content": "mixed.isType()",
        "doc": "mixed.isType(value: any): boolean\n\nRuns a type check against the passed in value. It returns true if it matches,\nit does not cast the value. When nullable() is set null is considered a valid value of the type.\nYou should use isType for all Schema type checks.",
        "grammar": "lsp",
        "label": "mixed-is-type",
        "matches": {
          "yup mixed istype": true
        },
        "opts": {}
      },
      {
        "content": "mixed.strict()",
        "doc": "mixed.strict(isStrict: boolean = false): Schema\n\nSets the strict option to true. Strict schemas skip coercion and transformation attempts,\nvalidating the value \"as is\".",
        "grammar": "lsp",
        "label": "mixed-strict",
        "matches": {
          "yup mixed strict": true
        },
        "opts": {}
      },
      {
        "content": "mixed.strip()",
        "doc": "mixed.strip(stripField: boolean = true): Schema\n\nMarks a schema to be removed from an output object. Only works as a nested schema.let schema = object({\n  useThis: number(),\n  notThis: string().strip()\n});\n\nschema.cast({ notThis: \"foo\", useThis: 4 }); // => { useThis: 4 }\n",
        "grammar": "lsp",
        "label": "mixed-strip",
        "matches": {
          "yup mixed strip": true
        },
        "opts": {}
      },
      {
        "content": "mixed.withMutation()",
        "doc": "mixed.withMutation(builder: (current: Schema) => void): void\n\nFirst the legally required Rich Hickey quote:\nIf a tree falls in the woods, does it make a sound?\nIf a pure function mutates some local data in order to produce an immutable return value, is that ok?\nwithMutation allows you to mutate the schema in place, instead of the default behavior which clones before each change.\nGenerally this isn't necessary since the vast majority of schema changes happen during the initial\ndeclaration, and only happen once over the lifetime of the schema, so performance isn't an issue.\nHowever certain mutations do occur at cast/validation time, (such as conditional schema using when()), or\nwhen instantiating a schema object.object()\n  .shape({ key: string() })\n  .withMutation(schema => {\n    return arrayOfObjectTests.forEach(test => {\n      schema.test(test);\n    });\n  });\n",
        "grammar": "lsp",
        "label": "mixed-with-mutation",
        "matches": {
          "yup mixed withmutation": true
        },
        "opts": {}
      },
      {
        "content": "mixed.default()",
        "doc": "mixed.default(): Any\n\nCalling default with no arguments will return the current default value",
        "grammar": "lsp",
        "label": "mixed-default",
        "matches": {
          "yup mixed default": true
        },
        "opts": {}
      },
      {
        "content": "mixed.nullable()",
        "doc": "mixed.nullable(isNullable: boolean = true): Schema\n\nIndicates that null is a valid value for the schema. Without nullable()\nnull is treated as a different type and will fail isType() checks.",
        "grammar": "lsp",
        "label": "mixed-nullable",
        "matches": {
          "yup mixed nullable": true
        },
        "opts": {}
      },
      {
        "content": "mixed.required()",
        "doc": "mixed.required(message?: string | function): Schema\n\nMark the schema as required. All field values apart from undefined and null meet this requirement.",
        "grammar": "lsp",
        "label": "mixed-required",
        "matches": {
          "yup mixed required": true
        },
        "opts": {}
      },
      {
        "content": "mixed.notRequired()",
        "doc": "mixed.notRequired(): Schema\n\nMark the schema as not required. Passing undefined as value will not fail validation.",
        "grammar": "lsp",
        "label": "mixed-not-required",
        "matches": {
          "yup mixed notrequired": true
        },
        "opts": {}
      },
      {
        "content": "mixed.typeError()",
        "doc": "mixed.typeError(message: string): Schema\n\nDefine an error message for failed type checks. The ${value} and ${type} interpolation can\nbe used in the message argument.",
        "grammar": "lsp",
        "label": "mixed-type-error",
        "matches": {
          "yup mixed typeerror": true
        },
        "opts": {}
      },
      {
        "content": "mixed.oneOf()",
        "doc": "mixed.oneOf(arrayOfValues: Array<any>, message?: string | function): Schema Alias: equals\n\nWhitelist a set of values. Values added are automatically removed from any blacklist if they are in it.\nThe ${values} interpolation can be used in the message argument.Note that undefined does not fail this validator, even when undefined is not included in arrayOfValues.\nIf you don't want undefined to be a valid value, you can use mixed.required.let schema = yup.mixed().oneOf([\"jimmy\", 42]);\n\nawait schema.isValid(42); // => true\nawait schema.isValid(\"jimmy\"); // => true\nawait schema.isValid(new Date()); // => false\n",
        "grammar": "lsp",
        "label": "mixed-one-of",
        "matches": {
          "yup mixed oneof": true
        },
        "opts": {}
      },
      {
        "content": "mixed.notOneOf()",
        "doc": "mixed.notOneOf(arrayOfValues: Array<any>, message?: string | function)\n\nBlacklist a set of values. Values added are automatically removed from any whitelist if they are in it.\nThe ${values} interpolation can be used in the message argument.let schema = yup.mixed().notOneOf([\"jimmy\", 42]);\n\nawait schema.isValid(42); // => false\nawait schema.isValid(new Date()); // => true\n",
        "grammar": "lsp",
        "label": "mixed-not-one-of",
        "matches": {
          "yup mixed notoneof": true
        },
        "opts": {}
      },
      {
        "content": "mixed.when()",
        "doc": "mixed.when(keys: string | Array<string>, builder: object | (value, schema)=> Schema): Schema\n\nAdjust the schema based on a sibling or sibling children fields. You can provide an object\nliteral where the key is is value or a matcher function, then provides the true schema and/or\notherwise for the failure condition.is conditions are strictly compared (===) if you want to use a different form of equality you\ncan provide a function like: is: (value) => value == true.Like joi you can also prefix properties with $ to specify a property that is dependent\non context passed in by validate() or isValid. when conditions are additive.let schema = object({\n  isBig: boolean(),\n  count: number()\n    .when(\"isBig\", {\n      is: true, // alternatively: (val) => val == true\n      then: yup.number().min(5),\n      otherwise: yup.number().min(0)\n    })\n    .when(\"$other\", (other, schema) => (other === 4 ? schema.max(6) : schema))\n});\n\nawait schema.validate(value, { context: { other: 4 } });\nYou can also specify more than one dependent key, in which case each value will be spread as an argument.let schema = object({\n  isSpecial: boolean(),\n  isBig: boolean(),\n  count: number().when([\"isBig\", \"isSpecial\"], {\n    is: true, // alternatively: (isBig, isSpecial) => isBig && isSpecial\n    then: yup.number().min(5),\n    otherwise: yup.number().min(0)\n  })\n});\n\nawait schema.validate({\n  isBig: true,\n  isSpecial: true,\n  count: 10\n});\nAlternatively you can provide a function that returns a schema\n(called with the value of the key and the current schema).let schema = yup.object({\n  isBig: yup.boolean(),\n  count: yup.number().when(\"isBig\", (isBig, schema) => {\n    return isBig ? schema.min(5) : schema.min(0);\n  })\n});\n\nawait schema.validate({ isBig: false, count: 4 });\n",
        "grammar": "lsp",
        "label": "mixed-when",
        "matches": {
          "yup mixed when": true
        },
        "opts": {}
      },
      {
        "content": "mixed.test()",
        "doc": "mixed.test(options: object): Schema\n\nAlternative test(..) signature. options is an object containing some of the following options:Options = {\n  // unique name identifying the test\n  name: string;\n  // test function, determines schema validity\n  test: (value: any) => boolean;\n  // the validation error message\n  message: string;\n  // values passed to message for interpolation\n  params: ?object;\n  // mark the test as exclusive, meaning only one of the same can be active at once\n  exclusive: boolean = false;\n}\nIn the case of mixing exclusive and non-exclusive tests the following logic is used.\nIf a non-exclusive test is added to a schema with an exclusive test of the same name\nthe exclusive test is removed and further tests of the same name will be stacked.If an exclusive test is added to a schema with non-exclusive tests of the same name\nthe previous tests are removed and further tests of the same name will replace each other.let max = 64;\nlet schema = yup.mixed().test({\n  name: \"max\",\n  exclusive: true,\n  params: { max },\n  message: \"${path} must be less than ${max} characters\",\n  test: value => value == null || value.length <= max\n});\n",
        "grammar": "lsp",
        "label": "mixed-test",
        "matches": {
          "yup mixed test": true
        },
        "opts": {}
      },
      {
        "content": "mixed.transform()",
        "doc": "mixed.transform((currentValue: any, originalValue: any) => any): Schema\n\nAdds a transformation to the transform chain. Transformations are central to the casting process,\ndefault transforms for each type coerce values to the specific type (as verified by isType()).\ntransforms are run before validations and only applied when strict is true. Some types have built in transformations.Transformations are useful for arbitrarily altering how the object is cast, however, you should take care\nnot to mutate the passed in value. Transforms are run sequentially so each value represents the\ncurrent state of the cast, you can use the originalValue param if you need to work on the raw initial value.let schema = string().transform(function(value, originalvalue) {\n  return this.isType(value) && value !== null ? value.toUpperCase() : value;\n});\n\nschema.cast(\"jimmy\"); // => 'JIMMY'\nEach types will handle basic coercion of values to the proper type for you, but occasionally\nyou may want to adjust or refine the default behavior. For example, if you wanted to use a different\ndate parsing strategy than the default one you could do that with a transform.module.exports = function(formats = \"MMM dd, yyyy\") {\n  return date().transform(function(value, originalvalue) {\n    // check to see if the previous transform already parsed the date\n    if (this.isType(value)) return value;\n\n    // the default coercion failed so lets try it with Moment.js instead\n    value = Moment(originalValue, formats);\n\n    // if its valid return the date object, otherwise return an `InvalidDate`\n    return value.isValid() ? value.toDate() : new Date(\"\");\n  });\n};\nstringDefine a string schema. Supports all the same methods as mixed.let schema = yup.string();\n\nawait schema.isValid(\"hello\"); // => true\nBy default, the cast logic of string is to call toString on the value if it exists.\nempty values are not coerced (use ensure() to coerce empty values to empty strings).Failed casts return the input value.",
        "grammar": "lsp",
        "label": "mixed-transform",
        "matches": {
          "yup mixed transform": true
        },
        "opts": {}
      },
      {
        "content": "string.required()",
        "doc": "string.required(message?: string | function): Schema\n\nThe same as the mixed() schema required, except that empty strings are also considered 'missing' values.",
        "grammar": "lsp",
        "label": "string-required",
        "matches": {
          "yup string required": true
        },
        "opts": {}
      },
      {
        "content": "string.length()",
        "doc": "string.length(limit: number | Ref, message?: string | function): Schema\n\nSet a required length for the string value. The ${length} interpolation can be used in the message argument",
        "grammar": "lsp",
        "label": "string-length",
        "matches": {
          "yup string length": true
        },
        "opts": {}
      },
      {
        "content": "string.min()",
        "doc": "string.min(limit: number | Ref, message?: string | function): Schema\n\nSet a minimum length limit for the string value. The ${min} interpolation can be used in the message argument",
        "grammar": "lsp",
        "label": "string-min",
        "matches": {
          "yup string min": true
        },
        "opts": {}
      },
      {
        "content": "string.max()",
        "doc": "string.max(limit: number | Ref, message?: string | function): Schema\n\nSet a maximum length limit for the string value. The ${max} interpolation can be used in the message argument",
        "grammar": "lsp",
        "label": "string-max",
        "matches": {
          "yup string max": true
        },
        "opts": {}
      },
      {
        "content": "string.matches()",
        "doc": "string.matches(regex: Regex, options: { message: string, excludeEmptyString: bool }): Schema\n\nAn alternate signature for string.matches with an options object. excludeEmptyString, when true,\nshort circuits the regex test when the value is an empty stringlet schema = string().matches(/(hi|bye)/, { excludeEmptyString: true });\n\nawait schema.isValid(\"\"); // => true\n",
        "grammar": "lsp",
        "label": "string-matches",
        "matches": {
          "yup string matches": true
        },
        "opts": {}
      },
      {
        "content": "string.email()",
        "doc": "string.email(message?: string | function): Schema\n\nValidates the value as an email address via a regex.",
        "grammar": "lsp",
        "label": "string-email",
        "matches": {
          "yup string email": true
        },
        "opts": {}
      },
      {
        "content": "string.url()",
        "doc": "string.url(message?: string | function): Schema\n\nValidates the value as a valid URL via a regex.",
        "grammar": "lsp",
        "label": "string-url",
        "matches": {
          "yup string url": true
        },
        "opts": {}
      },
      {
        "content": "string.ensure()",
        "doc": "string.ensure(): Schema\n\nTransforms undefined and null values to an empty string along with\nsetting the default to an empty string.",
        "grammar": "lsp",
        "label": "string-ensure",
        "matches": {
          "yup string ensure": true
        },
        "opts": {}
      },
      {
        "content": "string.trim()",
        "doc": "string.trim(message?: string | function): Schema\n\nTransforms string values by removing leading and trailing whitespace. If\nstrict() is set it will only validate that the value is trimmed.",
        "grammar": "lsp",
        "label": "string-trim",
        "matches": {
          "yup string trim": true
        },
        "opts": {}
      },
      {
        "content": "string.lowercase()",
        "doc": "string.lowercase(message?: string | function): Schema\n\nTransforms the string value to lowercase. If strict() is set it\nwill only validate that the value is lowercase.",
        "grammar": "lsp",
        "label": "string-lowercase",
        "matches": {
          "yup string lowercase": true
        },
        "opts": {}
      },
      {
        "content": "string.uppercase()",
        "doc": "string.uppercase(message?: string | function): Schema\n\nTransforms the string value to uppercase. If strict() is set it\nwill only validate that the value is uppercase.numberDefine a number schema. Supports all the same methods as mixed.let schema = yup.number();\n\nawait schema.isValid(10); // => true\nThe default cast logic of number is: parseFloat.Failed casts return NaN.",
        "grammar": "lsp",
        "label": "string-uppercase",
        "matches": {
          "yup string uppercase": true
        },
        "opts": {}
      },
      {
        "content": "number.min()",
        "doc": "number.min(limit: number | Ref, message?: string | function): Schema\n\nSet the minimum value allowed. The ${min} interpolation can be used in the\nmessage argument.",
        "grammar": "lsp",
        "label": "number-min",
        "matches": {
          "yup number min": true
        },
        "opts": {}
      },
      {
        "content": "number.max()",
        "doc": "number.max(limit: number | Ref, message?: string | function): Schema\n\nSet the maximum value allowed. The ${max} interpolation can be used in the\nmessage argument.",
        "grammar": "lsp",
        "label": "number-max",
        "matches": {
          "yup number max": true
        },
        "opts": {}
      },
      {
        "content": "number.lessThan()",
        "doc": "number.lessThan(max: number | Ref, message?: string | function): Schema\n\nValue must be less than max. The ${less} interpolation can be used in the\nmessage argument.",
        "grammar": "lsp",
        "label": "number-less-than",
        "matches": {
          "yup number lessthan": true
        },
        "opts": {}
      },
      {
        "content": "number.moreThan()",
        "doc": "number.moreThan(min: number | Ref, message?: string | function): Schema\n\nValue must be strictly greater than min. The ${more} interpolation can be used in the\nmessage argument.",
        "grammar": "lsp",
        "label": "number-more-than",
        "matches": {
          "yup number morethan": true
        },
        "opts": {}
      },
      {
        "content": "number.positive()",
        "doc": "number.positive(message?: string | function): Schema\n\nValue must be a positive number.",
        "grammar": "lsp",
        "label": "number-positive",
        "matches": {
          "yup number positive": true
        },
        "opts": {}
      },
      {
        "content": "number.negative()",
        "doc": "number.negative(message?: string | function): Schema\n\nValue must be a negative number.",
        "grammar": "lsp",
        "label": "number-negative",
        "matches": {
          "yup number negative": true
        },
        "opts": {}
      },
      {
        "content": "number.integer()",
        "doc": "number.integer(message?: string | function): Schema\n\nValidates that a number is an integer.",
        "grammar": "lsp",
        "label": "number-integer",
        "matches": {
          "yup number integer": true
        },
        "opts": {}
      },
      {
        "content": "number.truncate()",
        "doc": "number.truncate(): Schema\n\nTransformation that coerces the value to an integer by stripping off the digits\nto the right of the decimal point.",
        "grammar": "lsp",
        "label": "number-truncate",
        "matches": {
          "yup number truncate": true
        },
        "opts": {}
      },
      {
        "content": "number.round()",
        "doc": "number.round(type: 'floor' | 'ceil' | 'trunc' | 'round' = 'round'): Schema\n\nAdjusts the value via the specified method of Math (defaults to 'round').booleanDefine a boolean schema. Supports all the same methods as mixed.let schema = yup.boolean();\n\nawait schema.isValid(true); // => true\ndateDefine a Date schema. By default ISO date strings will parse correctly,\nfor more robust parsing options see the extending schema types at the end of the readme.\nSupports all the same methods as mixed.let schema = yup.date();\n\nawait schema.isValid(new Date()); // => true\nThe default cast logic of date is pass the value to the Date constructor, failing that, it will attempt\nto parse the date as an ISO date string.Failed casts return an invalid Date.",
        "grammar": "lsp",
        "label": "number-round",
        "matches": {
          "yup number round": true
        },
        "opts": {}
      },
      {
        "content": "date.min()",
        "doc": "date.min(limit: Date | string | Ref, message?: string | function): Schema\n\nSet the minimum date allowed. When a string is provided it will attempt to cast to a date first\nand use the result as the limit.",
        "grammar": "lsp",
        "label": "date-min",
        "matches": {
          "yup date min": true
        },
        "opts": {}
      },
      {
        "content": "date.max()",
        "doc": "date.max(limit: Date | string | Ref, message?: string | function): Schema\n\nSet the maximum date allowed, When a string is provided it will attempt to cast to a date first\nand use the result as the limit.arrayDefine an array schema. Arrays can be typed or not, When specifying the element type, cast and isValid\nwill apply to the elements as well. Options passed into isValid are passed also passed to child schemas.\nSupports all the same methods as mixed.let schema = yup.array().of(yup.number().min(2));\n\nawait schema.isValid([2, 3]); // => true\nawait schema.isValid([1, -24]); // => false\n\nschema.cast([\"2\", \"3\"]); // => [2, 3]\nYou can also pass a subtype schema to the array constructor as a convenience.array().of(yup.number());\n// or\narray(yup.number());\nThe default cast behavior for array is: JSON.parseFailed casts return: null;",
        "grammar": "lsp",
        "label": "date-max",
        "matches": {
          "yup date max": true
        },
        "opts": {}
      },
      {
        "content": "array.of()",
        "doc": "array.of(type: Schema): Schema\n\nSpecify the schema of array elements. of() is optional and when omitted the array schema will\nnot validate its contents.",
        "grammar": "lsp",
        "label": "array-of",
        "matches": {
          "yup array of": true
        },
        "opts": {}
      },
      {
        "content": "array.required()",
        "doc": "array.required(message?: string | function): Schema\n\nThe same as the mixed() schema required, except that empty arrays are also considered 'missing' values.",
        "grammar": "lsp",
        "label": "array-required",
        "matches": {
          "yup array required": true
        },
        "opts": {}
      },
      {
        "content": "array.min()",
        "doc": "array.min(limit: number | Ref, message?: string | function): Schema\n\nSet a minimum length limit for the array. The ${min} interpolation can be used in the message argument.",
        "grammar": "lsp",
        "label": "array-min",
        "matches": {
          "yup array min": true
        },
        "opts": {}
      },
      {
        "content": "array.max()",
        "doc": "array.max(limit: number | Ref, message?: string | function): Schema\n\nSet a maximum length limit for the array. The ${max} interpolation can be used in the message argument.",
        "grammar": "lsp",
        "label": "array-max",
        "matches": {
          "yup array max": true
        },
        "opts": {}
      },
      {
        "content": "array.ensure()",
        "doc": "array.ensure(): Schema\n\nEnsures that the value is an array, by setting the default to [] and transforming null and undefined\nvalues to an empty array as well. Any non-empty, non-array value will be wrapped in an array.array()\n  .ensure()\n  .cast(null); // => []\narray()\n  .ensure()\n  .cast(1); // => [1]\narray()\n  .ensure()\n  .cast([1]); // => [1]\n",
        "grammar": "lsp",
        "label": "array-ensure",
        "matches": {
          "yup array ensure": true
        },
        "opts": {}
      },
      {
        "content": "array.compact()",
        "doc": "array.compact(rejector: (value) => boolean): Schema\n\nRemoves falsey values from the array. Providing a rejecter function lets you specify the rejection criteria yourself.array()\n  .compact()\n  .cast([\"\", 1, 0, 4, false, null]); // => [1, 4]\n\narray()\n  .compact(function(v) {\n    return v == null;\n  })\n  .cast([\"\", 1, 0, 4, false, null]); // => ['', 1, 0, 4, false]\nobjectDefine an object schema. Options passed into isValid are also passed to child schemas.\nSupports all the same methods as mixed.yup.object().shape({\n  name: string().required(),\n  age: number()\n    .required()\n    .positive()\n    .integer(),\n  email: string().email(),\n  website: string().url()\n});\nYou can also pass a shape to the object constructor as a convenience.object().shape({\n  num: number()\n});\n// or\nobject({\n  num: number()\n});\nThe default cast behavior for object is: JSON.parseFailed casts return: null;",
        "grammar": "lsp",
        "label": "array-compact",
        "matches": {
          "yup array compact": true
        },
        "opts": {}
      },
      {
        "content": "object.shape()",
        "doc": "object.shape(fields: object, noSortEdges?: Array<[string, string]>): Schema\n\nDefine the keys of the object and the schemas for said keys.Note that you can chain shape method, which acts like object extends, for example:object({\n  a: string(),\n  b: number()\n}).shape({\n  b: string(),\n  c: number()\n});\nwould be exactly the same as:object({\n  a: string(),\n  b: string(),\n  c: number()\n});\n",
        "grammar": "lsp",
        "label": "object-shape",
        "matches": {
          "yup object shape": true
        },
        "opts": {}
      },
      {
        "content": "object.from()",
        "doc": "object.from(fromKey: string, toKey: string, alias: boolean = false): Schema\n\nTransforms the specified key to a new key. If alias is true then the old key will be left.let schema = object({\n  myProp: mixed(),\n  Other: mixed()\n})\n  .from(\"prop\", \"myProp\")\n  .from(\"other\", \"Other\", true);\n\nschema.cast({ prop: 5, other: 6 }); // => { myProp: 5, other: 6, Other: 6 }\n",
        "grammar": "lsp",
        "label": "object-from",
        "matches": {
          "yup object from": true
        },
        "opts": {}
      },
      {
        "content": "object.noUnknown()",
        "doc": "object.noUnknown(onlyKnownKeys: boolean = true, message?: string | function): Schema\n\nValidate that the object value only contains keys specified in shape, pass false as the first\nargument to disable the check. Restricting keys to known, also enables stripUnknown option, when not in strict mode.",
        "grammar": "lsp",
        "label": "object-no-unknown",
        "matches": {
          "yup object nounknown": true
        },
        "opts": {}
      },
      {
        "content": "object.camelCase()",
        "doc": "object.camelCase(): Schema\n\nTransforms all object keys to camelCase",
        "grammar": "lsp",
        "label": "object-camel-case",
        "matches": {
          "yup object camelcase": true
        },
        "opts": {}
      },
      {
        "content": "object.constantCase()",
        "doc": "object.constantCase(): Schema\n\nTransforms all object keys to CONSTANT_CASE.Extending Schema TypesThe simplest way to extend an existing type is just to cache a configured schema and use that through your application.let yup = require(\"yup\");\nlet parseFormats = [\"MMM dd, yyy\"];\nlet invalidDate = new Date(\"\");\n\nmodule.exports = yup.date().transform(function(value, originalValue) {\n  if (this.isType(value)) return value;\n  // the default coercion transform failed so lets try it with Moment instead\n  value = Moment(originalValue, parseFormats);\n  return value.isValid() ? value.toDate() : invalidDate;\n});\nAlternatively, each schema is a normal JavaScript constructor function that you can mutate or delegate to\nusing the normal patterns. Generally you should not inherit from mixed unless you know what you are doing,\nbetter to think of it as an abstract class. The other types are fair game though.You should keep in mind some basic guidelines when extending schemas\nnever mutate an existing schema, always clone() and then mutate the new one before returning it.\nBuilt-in methods like test and transform take care of this for you, so you can safely use them (see below) without worrying\ntransforms should never mutate the value passed in, and should return an invalid object when one exists\n(NaN, InvalidDate, etc) instead of null for bad values.\nby the time validations run the value is guaranteed to be the correct type, however if nullable is\nset then null is a valid value for that type, so don't assume that a property or method exists on the value.\nAdjust core Typeslet invalidDate = new Date(\"\");\n\nfunction parseDateFromFormats(formats, parseStrict) {\n  return this.transform(function(value, originalValue) {\n    if (this.isType(value)) return value;\n\n    value = Moment(originalValue, formats, parseStrict);\n\n    return value.isValid() ? value.toDate() : invalidDate;\n  });\n}\n\n// `addMethod` doesn't do anything special it's\n// equivalent to: yup.date.prototype.format = parseDateFromFormats\nyup.addMethod(yup.date, \"format\", parseDateFromFormats);\nCreating new TypesYup schema use the common constructor pattern for modeling inheritance. You can use any\nutility or pattern that works with that pattern. The below demonstrates using the es6 class\nsyntax since its less verbose, but you absolutely aren't required to use it.let DateSchema = yup.date;\nlet invalidDate = new Date(\"\"); // our failed to coerce value\n\nclass MomentDateSchemaType extends DateSchema {\n  constructor() {\n    super();\n    this._validFormats = [];\n\n    this.withMutation(() => {\n      this.transform(function(value, originalvalue) {\n        if (this.isType(value))\n          // we have a valid value\n          return value;\n        return Moment(originalValue, this._validFormats, true);\n      });\n    });\n  }\n\n  _typeCheck(value) {\n    return (\n      super._typeCheck(value) || (moment.isMoment(value) && value.isValid())\n    );\n  }\n\n  format(formats) {\n    if (!formats) throw new Error(\"must enter a valid format\");\n    let next = this.clone();\n    next._validFormats = {}.concat(formats);\n  }\n}\n\nlet schema = new MomentDateSchemaType();\n\nschema.format(\"YYYY-MM-DD\").cast(\"It is 2012-05-25\"); // => Fri May 25 2012 00:00:00 GMT-0400 (Eastern Daylight Time)\nTypeScript SupportIf you are using TypeScript installing the Yup typings is recommendednpm install -D @types/yup\nYou can now infer a TypeScript type alias using the exported InferType. Given the following Yup schema:import * as yup from 'yup';\n\nconst personSchema = yup.object({\n  firstName: yup\n    .string(),\n  nickName: yup\n    .string()\n    .nullable(),\n  gender: yup\n    .mixed<'male' | 'female' | 'other'>()\n    .oneOf(['male', 'female', 'other']),\n  email: yup\n    .string()\n    .nullable()\n    .notRequired()\n    .email(),\n  birthDate: yup\n    .date()\n    .nullable()\n    .notRequired()\n    .min(new Date(1900, 0, 1)),\n});\nYou can derive the TypeScript type as follows:type Person = yup.InferType<typeof personSchema>;\nWhich is equivalent to the following TypeScript type alias:type Person = {\n  firstName: string;\n  nickName: string | null;\n  gender: \"male\" | \"female\" | \"other\";\n  email?: string | null | undefined;\n  birthDate?: Date | null | undefined;\n}\nMaking the following objects valid both for TypeScript and Yup validation:const minimalPerson: Person = {\n    firstName: \"Matt\",\n    nickName: null,\n    gender: \"male\"\n};\n\nconst fullPerson: Person = {\n    firstName: \"Matt\",\n    nickName: \"The Hammer\",\n    gender: \"male\",\n    email: \"matt@the-hammer.com\",\n    birthDate: new Date(1976, 9, 5)\n};\n",
        "grammar": "lsp",
        "label": "object-constant-case",
        "matches": {
          "yup object constantcase": true
        },
        "opts": {}
      }
    ],
    "zsh": [
      {
        "content": "#!/bin/zsh",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "#!": true
        },
        "opts": {}
      },
      {
        "content": "if ${1:condition}; then\n\t${0:${VISUAL}}\nfi",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "if": true
        },
        "opts": {}
      },
      {
        "content": "if ${1:condition}; then\n\t${2:${VISUAL}}\nelse\n\t${0:# statements}\nfi",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ife": true
        },
        "opts": {}
      },
      {
        "content": "elif ${1:condition}; then\n\t${0:${VISUAL}}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "eif": true
        },
        "opts": {}
      },
      {
        "content": "for (( ${2:i} = 0; $2 < ${1:count}; $2++ )); do\n\t${0:${VISUAL}}\ndone",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "for": true
        },
        "opts": {}
      },
      {
        "content": "for ${1:needle} in ${2:haystack}; do\n\t${0:${VISUAL}}\ndone",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "fori": true
        },
        "opts": {}
      },
      {
        "content": "for ${1:item} in ${2:list}; do\n\t${0:${VISUAL}}\ndone",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "fore": true
        },
        "opts": {}
      },
      {
        "content": "while ${1:condition}; do\n\t${0:${VISUAL}}\ndone",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "wh": true
        },
        "opts": {}
      },
      {
        "content": "until ${1:condition}; do\n\t${0:${VISUAL}}\ndone",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "until": true
        },
        "opts": {}
      },
      {
        "content": "repeat ${1:integer}; do\n\t${0:${VISUAL}}\ndone",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "repeat": true
        },
        "opts": {}
      },
      {
        "content": "case ${1:word} in\n\t${2:pattern})\n\t\t${0};;\nesac",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "case": true
        },
        "opts": {}
      },
      {
        "content": "select ${1:answer} in ${2:choices}; do\n\t${0:${VISUAL}}\ndone",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "select": true
        },
        "opts": {}
      },
      {
        "content": "( ${0:#statements} )",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "(": true
        },
        "opts": {}
      },
      {
        "content": "{ ${0:#statements} }",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "{": true
        },
        "opts": {}
      },
      {
        "content": "[[ ${0:test} ]]",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "[": true
        },
        "opts": {}
      },
      {
        "content": "{ ${1:try} } always { ${0:always} }",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "always": true
        },
        "opts": {}
      },
      {
        "content": "${1:function_name}() {\n\t${0:# function_body}\n}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "fun": true
        },
        "opts": {}
      },
      {
        "content": "function ${1:function_name}() {\n\t${0:# function_body}\n}",
        "doc": "",
        "grammar": "snu",
        "label": null,
        "matches": {
          "ffun": true
        },
        "opts": {}
      },
      {
        "content": "#!/usr/bin/env zsh\n$0",
        "doc": null,
        "grammar": "snu",
        "label": "#!/usr/bin/env zsh",
        "matches": {
          "#!": true
        },
        "opts": {
          "b": true
        }
      }
    ]
  }
}